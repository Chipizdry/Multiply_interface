
SMART_HOME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004228  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  080042e8  080042e8  000142e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004320  08004320  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004320  08004320  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004320  08004320  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004320  08004320  00014320  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004324  08004324  00014324  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004328  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000274  20000010  08004338  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000284  08004338  00020284  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ec39  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001f6f  00000000  00000000  0002ec71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000db0  00000000  00000000  00030be0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ce8  00000000  00000000  00031990  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00010f1e  00000000  00000000  00032678  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000100e1  00000000  00000000  00043596  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000679e5  00000000  00000000  00053677  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000bb05c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003140  00000000  00000000  000bb0ac  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080042d0 	.word	0x080042d0

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	080042d0 	.word	0x080042d0

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000224:	f000 ff56 	bl	80010d4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000228:	f000 f82c 	bl	8000284 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022c:	f000 fa1c 	bl	8000668 <MX_GPIO_Init>
  MX_DMA_Init();
 8000230:	f000 f9fc 	bl	800062c <MX_DMA_Init>
  MX_TIM1_Init();
 8000234:	f000 f8ca 	bl	80003cc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f9c8 	bl	80005cc <MX_USART1_UART_Init>
  MX_ADC_Init();
 800023c:	f000 f880 	bl	8000340 <MX_ADC_Init>
  MX_TIM3_Init();
 8000240:	f000 f96e 	bl	8000520 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
 //  LED1_ON;
 //  LED2_ON;
   REL1_ON;
 8000244:	4b0d      	ldr	r3, [pc, #52]	; (800027c <main+0x5c>)
 8000246:	2201      	movs	r2, #1
 8000248:	2110      	movs	r1, #16
 800024a:	0018      	movs	r0, r3
 800024c:	f001 fcc6 	bl	8001bdc <HAL_GPIO_WritePin>
   REL1_OFF;
 8000250:	4b0a      	ldr	r3, [pc, #40]	; (800027c <main+0x5c>)
 8000252:	2200      	movs	r2, #0
 8000254:	2110      	movs	r1, #16
 8000256:	0018      	movs	r0, r3
 8000258:	f001 fcc0 	bl	8001bdc <HAL_GPIO_WritePin>
   HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 800025c:	4b08      	ldr	r3, [pc, #32]	; (8000280 <main+0x60>)
 800025e:	2100      	movs	r1, #0
 8000260:	0018      	movs	r0, r3
 8000262:	f002 fac9 	bl	80027f8 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000266:	4b06      	ldr	r3, [pc, #24]	; (8000280 <main+0x60>)
 8000268:	2104      	movs	r1, #4
 800026a:	0018      	movs	r0, r3
 800026c:	f002 fac4 	bl	80027f8 <HAL_TIM_IC_Start_IT>
     HAL_SuspendTick();
 8000270:	f000 ff94 	bl	800119c <HAL_SuspendTick>
     HAL_PWR_EnableSleepOnExit ();
 8000274:	f001 fcd0 	bl	8001c18 <HAL_PWR_EnableSleepOnExit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000278:	e7fe      	b.n	8000278 <main+0x58>
 800027a:	46c0      	nop			; (mov r8, r8)
 800027c:	48000400 	.word	0x48000400
 8000280:	2000006c 	.word	0x2000006c

08000284 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000284:	b590      	push	{r4, r7, lr}
 8000286:	b095      	sub	sp, #84	; 0x54
 8000288:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800028a:	2420      	movs	r4, #32
 800028c:	193b      	adds	r3, r7, r4
 800028e:	0018      	movs	r0, r3
 8000290:	2330      	movs	r3, #48	; 0x30
 8000292:	001a      	movs	r2, r3
 8000294:	2100      	movs	r1, #0
 8000296:	f004 f813 	bl	80042c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800029a:	2310      	movs	r3, #16
 800029c:	18fb      	adds	r3, r7, r3
 800029e:	0018      	movs	r0, r3
 80002a0:	2310      	movs	r3, #16
 80002a2:	001a      	movs	r2, r3
 80002a4:	2100      	movs	r1, #0
 80002a6:	f004 f80b 	bl	80042c0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002aa:	003b      	movs	r3, r7
 80002ac:	0018      	movs	r0, r3
 80002ae:	2310      	movs	r3, #16
 80002b0:	001a      	movs	r2, r3
 80002b2:	2100      	movs	r1, #0
 80002b4:	f004 f804 	bl	80042c0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14;
 80002b8:	0021      	movs	r1, r4
 80002ba:	187b      	adds	r3, r7, r1
 80002bc:	2212      	movs	r2, #18
 80002be:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002c0:	187b      	adds	r3, r7, r1
 80002c2:	2201      	movs	r2, #1
 80002c4:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80002c6:	187b      	adds	r3, r7, r1
 80002c8:	2201      	movs	r2, #1
 80002ca:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002cc:	187b      	adds	r3, r7, r1
 80002ce:	2210      	movs	r2, #16
 80002d0:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80002d2:	187b      	adds	r3, r7, r1
 80002d4:	2210      	movs	r2, #16
 80002d6:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80002d8:	187b      	adds	r3, r7, r1
 80002da:	2200      	movs	r2, #0
 80002dc:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002de:	187b      	adds	r3, r7, r1
 80002e0:	0018      	movs	r0, r3
 80002e2:	f001 fca7 	bl	8001c34 <HAL_RCC_OscConfig>
 80002e6:	1e03      	subs	r3, r0, #0
 80002e8:	d001      	beq.n	80002ee <SystemClock_Config+0x6a>
  {
    Error_Handler();
 80002ea:	f000 fcdd 	bl	8000ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002ee:	2110      	movs	r1, #16
 80002f0:	187b      	adds	r3, r7, r1
 80002f2:	2207      	movs	r2, #7
 80002f4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80002f6:	187b      	adds	r3, r7, r1
 80002f8:	2200      	movs	r2, #0
 80002fa:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fc:	187b      	adds	r3, r7, r1
 80002fe:	2200      	movs	r2, #0
 8000300:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2200      	movs	r2, #0
 8000306:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000308:	187b      	adds	r3, r7, r1
 800030a:	2100      	movs	r1, #0
 800030c:	0018      	movs	r0, r3
 800030e:	f001 ffab 	bl	8002268 <HAL_RCC_ClockConfig>
 8000312:	1e03      	subs	r3, r0, #0
 8000314:	d001      	beq.n	800031a <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000316:	f000 fcc7 	bl	8000ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800031a:	003b      	movs	r3, r7
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000320:	003b      	movs	r3, r7
 8000322:	2203      	movs	r2, #3
 8000324:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000326:	003b      	movs	r3, r7
 8000328:	0018      	movs	r0, r3
 800032a:	f002 f8ef 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 800032e:	1e03      	subs	r3, r0, #0
 8000330:	d001      	beq.n	8000336 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000332:	f000 fcb9 	bl	8000ca8 <Error_Handler>
  }
}
 8000336:	46c0      	nop			; (mov r8, r8)
 8000338:	46bd      	mov	sp, r7
 800033a:	b015      	add	sp, #84	; 0x54
 800033c:	bd90      	pop	{r4, r7, pc}
	...

08000340 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b084      	sub	sp, #16
 8000344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000346:	1d3b      	adds	r3, r7, #4
 8000348:	0018      	movs	r0, r3
 800034a:	230c      	movs	r3, #12
 800034c:	001a      	movs	r2, r3
 800034e:	2100      	movs	r1, #0
 8000350:	f003 ffb6 	bl	80042c0 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000354:	4b1b      	ldr	r3, [pc, #108]	; (80003c4 <MX_ADC_Init+0x84>)
 8000356:	4a1c      	ldr	r2, [pc, #112]	; (80003c8 <MX_ADC_Init+0x88>)
 8000358:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800035a:	4b1a      	ldr	r3, [pc, #104]	; (80003c4 <MX_ADC_Init+0x84>)
 800035c:	2200      	movs	r2, #0
 800035e:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000360:	4b18      	ldr	r3, [pc, #96]	; (80003c4 <MX_ADC_Init+0x84>)
 8000362:	2200      	movs	r2, #0
 8000364:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000366:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <MX_ADC_Init+0x84>)
 8000368:	2200      	movs	r2, #0
 800036a:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 800036c:	4b15      	ldr	r3, [pc, #84]	; (80003c4 <MX_ADC_Init+0x84>)
 800036e:	2201      	movs	r2, #1
 8000370:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000372:	4b14      	ldr	r3, [pc, #80]	; (80003c4 <MX_ADC_Init+0x84>)
 8000374:	2204      	movs	r2, #4
 8000376:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000378:	4b12      	ldr	r3, [pc, #72]	; (80003c4 <MX_ADC_Init+0x84>)
 800037a:	2200      	movs	r2, #0
 800037c:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800037e:	4b11      	ldr	r3, [pc, #68]	; (80003c4 <MX_ADC_Init+0x84>)
 8000380:	2200      	movs	r2, #0
 8000382:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000384:	4b0f      	ldr	r3, [pc, #60]	; (80003c4 <MX_ADC_Init+0x84>)
 8000386:	2200      	movs	r2, #0
 8000388:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 800038a:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <MX_ADC_Init+0x84>)
 800038c:	2200      	movs	r2, #0
 800038e:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000390:	4b0c      	ldr	r3, [pc, #48]	; (80003c4 <MX_ADC_Init+0x84>)
 8000392:	22c2      	movs	r2, #194	; 0xc2
 8000394:	32ff      	adds	r2, #255	; 0xff
 8000396:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000398:	4b0a      	ldr	r3, [pc, #40]	; (80003c4 <MX_ADC_Init+0x84>)
 800039a:	2200      	movs	r2, #0
 800039c:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800039e:	4b09      	ldr	r3, [pc, #36]	; (80003c4 <MX_ADC_Init+0x84>)
 80003a0:	2224      	movs	r2, #36	; 0x24
 80003a2:	2100      	movs	r1, #0
 80003a4:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003a6:	4b07      	ldr	r3, [pc, #28]	; (80003c4 <MX_ADC_Init+0x84>)
 80003a8:	2201      	movs	r2, #1
 80003aa:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80003ac:	4b05      	ldr	r3, [pc, #20]	; (80003c4 <MX_ADC_Init+0x84>)
 80003ae:	0018      	movs	r0, r3
 80003b0:	f000 ff02 	bl	80011b8 <HAL_ADC_Init>
 80003b4:	1e03      	subs	r3, r0, #0
 80003b6:	d001      	beq.n	80003bc <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80003b8:	f000 fc76 	bl	8000ca8 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 80003bc:	46c0      	nop			; (mov r8, r8)
 80003be:	46bd      	mov	sp, r7
 80003c0:	b004      	add	sp, #16
 80003c2:	bd80      	pop	{r7, pc}
 80003c4:	2000002c 	.word	0x2000002c
 80003c8:	40012400 	.word	0x40012400

080003cc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80003cc:	b580      	push	{r7, lr}
 80003ce:	b08a      	sub	sp, #40	; 0x28
 80003d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80003d2:	2318      	movs	r3, #24
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	0018      	movs	r0, r3
 80003d8:	2310      	movs	r3, #16
 80003da:	001a      	movs	r2, r3
 80003dc:	2100      	movs	r1, #0
 80003de:	f003 ff6f 	bl	80042c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80003e2:	2310      	movs	r3, #16
 80003e4:	18fb      	adds	r3, r7, r3
 80003e6:	0018      	movs	r0, r3
 80003e8:	2308      	movs	r3, #8
 80003ea:	001a      	movs	r2, r3
 80003ec:	2100      	movs	r1, #0
 80003ee:	f003 ff67 	bl	80042c0 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80003f2:	003b      	movs	r3, r7
 80003f4:	0018      	movs	r0, r3
 80003f6:	2310      	movs	r3, #16
 80003f8:	001a      	movs	r2, r3
 80003fa:	2100      	movs	r1, #0
 80003fc:	f003 ff60 	bl	80042c0 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000400:	4b44      	ldr	r3, [pc, #272]	; (8000514 <MX_TIM1_Init+0x148>)
 8000402:	4a45      	ldr	r2, [pc, #276]	; (8000518 <MX_TIM1_Init+0x14c>)
 8000404:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 499;
 8000406:	4b43      	ldr	r3, [pc, #268]	; (8000514 <MX_TIM1_Init+0x148>)
 8000408:	22f4      	movs	r2, #244	; 0xf4
 800040a:	32ff      	adds	r2, #255	; 0xff
 800040c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800040e:	4b41      	ldr	r3, [pc, #260]	; (8000514 <MX_TIM1_Init+0x148>)
 8000410:	2200      	movs	r2, #0
 8000412:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8000414:	4b3f      	ldr	r3, [pc, #252]	; (8000514 <MX_TIM1_Init+0x148>)
 8000416:	4a41      	ldr	r2, [pc, #260]	; (800051c <MX_TIM1_Init+0x150>)
 8000418:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800041a:	4b3e      	ldr	r3, [pc, #248]	; (8000514 <MX_TIM1_Init+0x148>)
 800041c:	2200      	movs	r2, #0
 800041e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000420:	4b3c      	ldr	r3, [pc, #240]	; (8000514 <MX_TIM1_Init+0x148>)
 8000422:	2200      	movs	r2, #0
 8000424:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000426:	4b3b      	ldr	r3, [pc, #236]	; (8000514 <MX_TIM1_Init+0x148>)
 8000428:	2200      	movs	r2, #0
 800042a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800042c:	4b39      	ldr	r3, [pc, #228]	; (8000514 <MX_TIM1_Init+0x148>)
 800042e:	0018      	movs	r0, r3
 8000430:	f002 f93a 	bl	80026a8 <HAL_TIM_Base_Init>
 8000434:	1e03      	subs	r3, r0, #0
 8000436:	d001      	beq.n	800043c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000438:	f000 fc36 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800043c:	2118      	movs	r1, #24
 800043e:	187b      	adds	r3, r7, r1
 8000440:	2280      	movs	r2, #128	; 0x80
 8000442:	0152      	lsls	r2, r2, #5
 8000444:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000446:	187a      	adds	r2, r7, r1
 8000448:	4b32      	ldr	r3, [pc, #200]	; (8000514 <MX_TIM1_Init+0x148>)
 800044a:	0011      	movs	r1, r2
 800044c:	0018      	movs	r0, r3
 800044e:	f002 fc8f 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 8000452:	1e03      	subs	r3, r0, #0
 8000454:	d001      	beq.n	800045a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000456:	f000 fc27 	bl	8000ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800045a:	4b2e      	ldr	r3, [pc, #184]	; (8000514 <MX_TIM1_Init+0x148>)
 800045c:	0018      	movs	r0, r3
 800045e:	f002 f973 	bl	8002748 <HAL_TIM_IC_Init>
 8000462:	1e03      	subs	r3, r0, #0
 8000464:	d001      	beq.n	800046a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000466:	f000 fc1f 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800046a:	2110      	movs	r1, #16
 800046c:	187b      	adds	r3, r7, r1
 800046e:	2200      	movs	r2, #0
 8000470:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000472:	187b      	adds	r3, r7, r1
 8000474:	2200      	movs	r2, #0
 8000476:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000478:	187a      	adds	r2, r7, r1
 800047a:	4b26      	ldr	r3, [pc, #152]	; (8000514 <MX_TIM1_Init+0x148>)
 800047c:	0011      	movs	r1, r2
 800047e:	0018      	movs	r0, r3
 8000480:	f002 ffe2 	bl	8003448 <HAL_TIMEx_MasterConfigSynchronization>
 8000484:	1e03      	subs	r3, r0, #0
 8000486:	d001      	beq.n	800048c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000488:	f000 fc0e 	bl	8000ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800048c:	003b      	movs	r3, r7
 800048e:	2202      	movs	r2, #2
 8000490:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000492:	003b      	movs	r3, r7
 8000494:	2201      	movs	r2, #1
 8000496:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000498:	003b      	movs	r3, r7
 800049a:	2200      	movs	r2, #0
 800049c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800049e:	003b      	movs	r3, r7
 80004a0:	2200      	movs	r2, #0
 80004a2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80004a4:	0039      	movs	r1, r7
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_TIM1_Init+0x148>)
 80004a8:	2200      	movs	r2, #0
 80004aa:	0018      	movs	r0, r3
 80004ac:	f002 fbbc 	bl	8002c28 <HAL_TIM_IC_ConfigChannel>
 80004b0:	1e03      	subs	r3, r0, #0
 80004b2:	d001      	beq.n	80004b8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80004b4:	f000 fbf8 	bl	8000ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80004b8:	003b      	movs	r3, r7
 80004ba:	2200      	movs	r2, #0
 80004bc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80004be:	003b      	movs	r3, r7
 80004c0:	2202      	movs	r2, #2
 80004c2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80004c4:	0039      	movs	r1, r7
 80004c6:	4b13      	ldr	r3, [pc, #76]	; (8000514 <MX_TIM1_Init+0x148>)
 80004c8:	2204      	movs	r2, #4
 80004ca:	0018      	movs	r0, r3
 80004cc:	f002 fbac 	bl	8002c28 <HAL_TIM_IC_ConfigChannel>
 80004d0:	1e03      	subs	r3, r0, #0
 80004d2:	d001      	beq.n	80004d8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80004d4:	f000 fbe8 	bl	8000ca8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80004d8:	003b      	movs	r3, r7
 80004da:	2201      	movs	r2, #1
 80004dc:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80004de:	0039      	movs	r1, r7
 80004e0:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_TIM1_Init+0x148>)
 80004e2:	2208      	movs	r2, #8
 80004e4:	0018      	movs	r0, r3
 80004e6:	f002 fb9f 	bl	8002c28 <HAL_TIM_IC_ConfigChannel>
 80004ea:	1e03      	subs	r3, r0, #0
 80004ec:	d001      	beq.n	80004f2 <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 80004ee:	f000 fbdb 	bl	8000ca8 <Error_Handler>
  }
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80004f2:	003b      	movs	r3, r7
 80004f4:	2202      	movs	r2, #2
 80004f6:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 80004f8:	0039      	movs	r1, r7
 80004fa:	4b06      	ldr	r3, [pc, #24]	; (8000514 <MX_TIM1_Init+0x148>)
 80004fc:	220c      	movs	r2, #12
 80004fe:	0018      	movs	r0, r3
 8000500:	f002 fb92 	bl	8002c28 <HAL_TIM_IC_ConfigChannel>
 8000504:	1e03      	subs	r3, r0, #0
 8000506:	d001      	beq.n	800050c <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8000508:	f000 fbce 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800050c:	46c0      	nop			; (mov r8, r8)
 800050e:	46bd      	mov	sp, r7
 8000510:	b00a      	add	sp, #40	; 0x28
 8000512:	bd80      	pop	{r7, pc}
 8000514:	2000006c 	.word	0x2000006c
 8000518:	40012c00 	.word	0x40012c00
 800051c:	00009c40 	.word	0x00009c40

08000520 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000526:	2308      	movs	r3, #8
 8000528:	18fb      	adds	r3, r7, r3
 800052a:	0018      	movs	r0, r3
 800052c:	2310      	movs	r3, #16
 800052e:	001a      	movs	r2, r3
 8000530:	2100      	movs	r1, #0
 8000532:	f003 fec5 	bl	80042c0 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000536:	003b      	movs	r3, r7
 8000538:	0018      	movs	r0, r3
 800053a:	2308      	movs	r3, #8
 800053c:	001a      	movs	r2, r3
 800053e:	2100      	movs	r1, #0
 8000540:	f003 febe 	bl	80042c0 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000544:	4b1e      	ldr	r3, [pc, #120]	; (80005c0 <MX_TIM3_Init+0xa0>)
 8000546:	4a1f      	ldr	r2, [pc, #124]	; (80005c4 <MX_TIM3_Init+0xa4>)
 8000548:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800054a:	4b1d      	ldr	r3, [pc, #116]	; (80005c0 <MX_TIM3_Init+0xa0>)
 800054c:	2200      	movs	r2, #0
 800054e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000550:	4b1b      	ldr	r3, [pc, #108]	; (80005c0 <MX_TIM3_Init+0xa0>)
 8000552:	2200      	movs	r2, #0
 8000554:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000556:	4b1a      	ldr	r3, [pc, #104]	; (80005c0 <MX_TIM3_Init+0xa0>)
 8000558:	4a1b      	ldr	r2, [pc, #108]	; (80005c8 <MX_TIM3_Init+0xa8>)
 800055a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800055c:	4b18      	ldr	r3, [pc, #96]	; (80005c0 <MX_TIM3_Init+0xa0>)
 800055e:	2200      	movs	r2, #0
 8000560:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000562:	4b17      	ldr	r3, [pc, #92]	; (80005c0 <MX_TIM3_Init+0xa0>)
 8000564:	2200      	movs	r2, #0
 8000566:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000568:	4b15      	ldr	r3, [pc, #84]	; (80005c0 <MX_TIM3_Init+0xa0>)
 800056a:	0018      	movs	r0, r3
 800056c:	f002 f89c 	bl	80026a8 <HAL_TIM_Base_Init>
 8000570:	1e03      	subs	r3, r0, #0
 8000572:	d001      	beq.n	8000578 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000574:	f000 fb98 	bl	8000ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000578:	2108      	movs	r1, #8
 800057a:	187b      	adds	r3, r7, r1
 800057c:	2280      	movs	r2, #128	; 0x80
 800057e:	0152      	lsls	r2, r2, #5
 8000580:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000582:	187a      	adds	r2, r7, r1
 8000584:	4b0e      	ldr	r3, [pc, #56]	; (80005c0 <MX_TIM3_Init+0xa0>)
 8000586:	0011      	movs	r1, r2
 8000588:	0018      	movs	r0, r3
 800058a:	f002 fbf1 	bl	8002d70 <HAL_TIM_ConfigClockSource>
 800058e:	1e03      	subs	r3, r0, #0
 8000590:	d001      	beq.n	8000596 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000592:	f000 fb89 	bl	8000ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000596:	003b      	movs	r3, r7
 8000598:	2200      	movs	r2, #0
 800059a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800059c:	003b      	movs	r3, r7
 800059e:	2200      	movs	r2, #0
 80005a0:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80005a2:	003a      	movs	r2, r7
 80005a4:	4b06      	ldr	r3, [pc, #24]	; (80005c0 <MX_TIM3_Init+0xa0>)
 80005a6:	0011      	movs	r1, r2
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 ff4d 	bl	8003448 <HAL_TIMEx_MasterConfigSynchronization>
 80005ae:	1e03      	subs	r3, r0, #0
 80005b0:	d001      	beq.n	80005b6 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80005b2:	f000 fb79 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80005b6:	46c0      	nop			; (mov r8, r8)
 80005b8:	46bd      	mov	sp, r7
 80005ba:	b006      	add	sp, #24
 80005bc:	bd80      	pop	{r7, pc}
 80005be:	46c0      	nop			; (mov r8, r8)
 80005c0:	200000b4 	.word	0x200000b4
 80005c4:	40000400 	.word	0x40000400
 80005c8:	0000ffff 	.word	0x0000ffff

080005cc <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80005d0:	4b14      	ldr	r3, [pc, #80]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <MX_USART1_UART_Init+0x5c>)
 80005d4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 80005d6:	4b13      	ldr	r3, [pc, #76]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005d8:	22fa      	movs	r2, #250	; 0xfa
 80005da:	0292      	lsls	r2, r2, #10
 80005dc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80005de:	4b11      	ldr	r3, [pc, #68]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80005e4:	4b0f      	ldr	r3, [pc, #60]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80005ea:	4b0e      	ldr	r3, [pc, #56]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005ec:	2200      	movs	r2, #0
 80005ee:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80005f0:	4b0c      	ldr	r3, [pc, #48]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005f2:	220c      	movs	r2, #12
 80005f4:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005f6:	4b0b      	ldr	r3, [pc, #44]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005f8:	2200      	movs	r2, #0
 80005fa:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80005fc:	4b09      	ldr	r3, [pc, #36]	; (8000624 <MX_USART1_UART_Init+0x58>)
 80005fe:	2200      	movs	r2, #0
 8000600:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000602:	4b08      	ldr	r3, [pc, #32]	; (8000624 <MX_USART1_UART_Init+0x58>)
 8000604:	2200      	movs	r2, #0
 8000606:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000608:	4b06      	ldr	r3, [pc, #24]	; (8000624 <MX_USART1_UART_Init+0x58>)
 800060a:	2200      	movs	r2, #0
 800060c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800060e:	4b05      	ldr	r3, [pc, #20]	; (8000624 <MX_USART1_UART_Init+0x58>)
 8000610:	0018      	movs	r0, r3
 8000612:	f002 ff7b 	bl	800350c <HAL_UART_Init>
 8000616:	1e03      	subs	r3, r0, #0
 8000618:	d001      	beq.n	800061e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800061a:	f000 fb45 	bl	8000ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800061e:	46c0      	nop			; (mov r8, r8)
 8000620:	46bd      	mov	sp, r7
 8000622:	bd80      	pop	{r7, pc}
 8000624:	200000fc 	.word	0x200000fc
 8000628:	40013800 	.word	0x40013800

0800062c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <MX_DMA_Init+0x38>)
 8000634:	695a      	ldr	r2, [r3, #20]
 8000636:	4b0b      	ldr	r3, [pc, #44]	; (8000664 <MX_DMA_Init+0x38>)
 8000638:	2101      	movs	r1, #1
 800063a:	430a      	orrs	r2, r1
 800063c:	615a      	str	r2, [r3, #20]
 800063e:	4b09      	ldr	r3, [pc, #36]	; (8000664 <MX_DMA_Init+0x38>)
 8000640:	695b      	ldr	r3, [r3, #20]
 8000642:	2201      	movs	r2, #1
 8000644:	4013      	ands	r3, r2
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 800064a:	2200      	movs	r2, #0
 800064c:	2100      	movs	r1, #0
 800064e:	200a      	movs	r0, #10
 8000650:	f000 ff9e 	bl	8001590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000654:	200a      	movs	r0, #10
 8000656:	f000 ffb0 	bl	80015ba <HAL_NVIC_EnableIRQ>

}
 800065a:	46c0      	nop			; (mov r8, r8)
 800065c:	46bd      	mov	sp, r7
 800065e:	b002      	add	sp, #8
 8000660:	bd80      	pop	{r7, pc}
 8000662:	46c0      	nop			; (mov r8, r8)
 8000664:	40021000 	.word	0x40021000

08000668 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000668:	b590      	push	{r4, r7, lr}
 800066a:	b089      	sub	sp, #36	; 0x24
 800066c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800066e:	240c      	movs	r4, #12
 8000670:	193b      	adds	r3, r7, r4
 8000672:	0018      	movs	r0, r3
 8000674:	2314      	movs	r3, #20
 8000676:	001a      	movs	r2, r3
 8000678:	2100      	movs	r1, #0
 800067a:	f003 fe21 	bl	80042c0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067e:	4b4a      	ldr	r3, [pc, #296]	; (80007a8 <MX_GPIO_Init+0x140>)
 8000680:	695a      	ldr	r2, [r3, #20]
 8000682:	4b49      	ldr	r3, [pc, #292]	; (80007a8 <MX_GPIO_Init+0x140>)
 8000684:	2180      	movs	r1, #128	; 0x80
 8000686:	03c9      	lsls	r1, r1, #15
 8000688:	430a      	orrs	r2, r1
 800068a:	615a      	str	r2, [r3, #20]
 800068c:	4b46      	ldr	r3, [pc, #280]	; (80007a8 <MX_GPIO_Init+0x140>)
 800068e:	695a      	ldr	r2, [r3, #20]
 8000690:	2380      	movs	r3, #128	; 0x80
 8000692:	03db      	lsls	r3, r3, #15
 8000694:	4013      	ands	r3, r2
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800069a:	4b43      	ldr	r3, [pc, #268]	; (80007a8 <MX_GPIO_Init+0x140>)
 800069c:	695a      	ldr	r2, [r3, #20]
 800069e:	4b42      	ldr	r3, [pc, #264]	; (80007a8 <MX_GPIO_Init+0x140>)
 80006a0:	2180      	movs	r1, #128	; 0x80
 80006a2:	0289      	lsls	r1, r1, #10
 80006a4:	430a      	orrs	r2, r1
 80006a6:	615a      	str	r2, [r3, #20]
 80006a8:	4b3f      	ldr	r3, [pc, #252]	; (80007a8 <MX_GPIO_Init+0x140>)
 80006aa:	695a      	ldr	r2, [r3, #20]
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	029b      	lsls	r3, r3, #10
 80006b0:	4013      	ands	r3, r2
 80006b2:	607b      	str	r3, [r7, #4]
 80006b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b6:	4b3c      	ldr	r3, [pc, #240]	; (80007a8 <MX_GPIO_Init+0x140>)
 80006b8:	695a      	ldr	r2, [r3, #20]
 80006ba:	4b3b      	ldr	r3, [pc, #236]	; (80007a8 <MX_GPIO_Init+0x140>)
 80006bc:	2180      	movs	r1, #128	; 0x80
 80006be:	02c9      	lsls	r1, r1, #11
 80006c0:	430a      	orrs	r2, r1
 80006c2:	615a      	str	r2, [r3, #20]
 80006c4:	4b38      	ldr	r3, [pc, #224]	; (80007a8 <MX_GPIO_Init+0x140>)
 80006c6:	695a      	ldr	r2, [r3, #20]
 80006c8:	2380      	movs	r3, #128	; 0x80
 80006ca:	02db      	lsls	r3, r3, #11
 80006cc:	4013      	ands	r3, r2
 80006ce:	603b      	str	r3, [r7, #0]
 80006d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ISOL_Pin|GPIO_PIN_7|LED_1_Pin|LED_2_Pin
 80006d2:	4936      	ldr	r1, [pc, #216]	; (80007ac <MX_GPIO_Init+0x144>)
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2200      	movs	r2, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 fa7e 	bl	8001bdc <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3|REL_1_Pin|REL_2_Pin|REL_3_Pin
 80006e0:	4b33      	ldr	r3, [pc, #204]	; (80007b0 <MX_GPIO_Init+0x148>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	21f8      	movs	r1, #248	; 0xf8
 80006e6:	0018      	movs	r0, r3
 80006e8:	f001 fa78 	bl	8001bdc <HAL_GPIO_WritePin>
                          |REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ISOL_Pin LED_1_Pin LED_2_Pin PA15 */
  GPIO_InitStruct.Pin = ISOL_Pin|LED_1_Pin|LED_2_Pin|GPIO_PIN_15;
 80006ec:	193b      	adds	r3, r7, r4
 80006ee:	4a31      	ldr	r2, [pc, #196]	; (80007b4 <MX_GPIO_Init+0x14c>)
 80006f0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f2:	193b      	adds	r3, r7, r4
 80006f4:	2201      	movs	r2, #1
 80006f6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	193b      	adds	r3, r7, r4
 80006fa:	2200      	movs	r2, #0
 80006fc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	2200      	movs	r2, #0
 8000702:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000704:	193a      	adds	r2, r7, r4
 8000706:	2390      	movs	r3, #144	; 0x90
 8000708:	05db      	lsls	r3, r3, #23
 800070a:	0011      	movs	r1, r2
 800070c:	0018      	movs	r0, r3
 800070e:	f001 f8f5 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000718:	193b      	adds	r3, r7, r4
 800071a:	2201      	movs	r2, #1
 800071c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	193b      	adds	r3, r7, r4
 8000720:	2200      	movs	r2, #0
 8000722:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000724:	193b      	adds	r3, r7, r4
 8000726:	2203      	movs	r2, #3
 8000728:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	193a      	adds	r2, r7, r4
 800072c:	2390      	movs	r3, #144	; 0x90
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	0011      	movs	r1, r2
 8000732:	0018      	movs	r0, r3
 8000734:	f001 f8e2 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2202      	movs	r2, #2
 800073c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 800074a:	193b      	adds	r3, r7, r4
 800074c:	4a18      	ldr	r2, [pc, #96]	; (80007b0 <MX_GPIO_Init+0x148>)
 800074e:	0019      	movs	r1, r3
 8000750:	0010      	movs	r0, r2
 8000752:	f001 f8d3 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000756:	193b      	adds	r3, r7, r4
 8000758:	2280      	movs	r2, #128	; 0x80
 800075a:	0092      	lsls	r2, r2, #2
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800075e:	193b      	adds	r3, r7, r4
 8000760:	2200      	movs	r2, #0
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	193b      	adds	r3, r7, r4
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800076a:	193a      	adds	r2, r7, r4
 800076c:	2390      	movs	r3, #144	; 0x90
 800076e:	05db      	lsls	r3, r3, #23
 8000770:	0011      	movs	r1, r2
 8000772:	0018      	movs	r0, r3
 8000774:	f001 f8c2 	bl	80018fc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 REL_1_Pin REL_2_Pin REL_3_Pin
                           REL_4_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_3|REL_1_Pin|REL_2_Pin|REL_3_Pin
 8000778:	0021      	movs	r1, r4
 800077a:	187b      	adds	r3, r7, r1
 800077c:	22f8      	movs	r2, #248	; 0xf8
 800077e:	601a      	str	r2, [r3, #0]
                          |REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000780:	187b      	adds	r3, r7, r1
 8000782:	2201      	movs	r2, #1
 8000784:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000786:	187b      	adds	r3, r7, r1
 8000788:	2200      	movs	r2, #0
 800078a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800078c:	187b      	adds	r3, r7, r1
 800078e:	2200      	movs	r2, #0
 8000790:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000792:	187b      	adds	r3, r7, r1
 8000794:	4a06      	ldr	r2, [pc, #24]	; (80007b0 <MX_GPIO_Init+0x148>)
 8000796:	0019      	movs	r1, r3
 8000798:	0010      	movs	r0, r2
 800079a:	f001 f8af 	bl	80018fc <HAL_GPIO_Init>

}
 800079e:	46c0      	nop			; (mov r8, r8)
 80007a0:	46bd      	mov	sp, r7
 80007a2:	b009      	add	sp, #36	; 0x24
 80007a4:	bd90      	pop	{r4, r7, pc}
 80007a6:	46c0      	nop			; (mov r8, r8)
 80007a8:	40021000 	.word	0x40021000
 80007ac:	000098c0 	.word	0x000098c0
 80007b0:	48000400 	.word	0x48000400
 80007b4:	00009840 	.word	0x00009840

080007b8 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
     if (htim->Instance == TIM1)
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4ac4      	ldr	r2, [pc, #784]	; (8000ad8 <HAL_TIM_IC_CaptureCallback+0x320>)
 80007c6:	4293      	cmp	r3, r2
 80007c8:	d123      	bne.n	8000812 <HAL_TIM_IC_CaptureCallback+0x5a>
     {
         if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	7f1b      	ldrb	r3, [r3, #28]
 80007ce:	2b01      	cmp	r3, #1
 80007d0:	d11d      	bne.n	800080e <HAL_TIM_IC_CaptureCallback+0x56>
         {

        	 period = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80007d2:	4bc2      	ldr	r3, [pc, #776]	; (8000adc <HAL_TIM_IC_CaptureCallback+0x324>)
 80007d4:	2100      	movs	r1, #0
 80007d6:	0018      	movs	r0, r3
 80007d8:	f002 fb9e 	bl	8002f18 <HAL_TIM_ReadCapturedValue>
 80007dc:	0003      	movs	r3, r0
 80007de:	b29a      	uxth	r2, r3
 80007e0:	4bbf      	ldr	r3, [pc, #764]	; (8000ae0 <HAL_TIM_IC_CaptureCallback+0x328>)
 80007e2:	801a      	strh	r2, [r3, #0]

        	 TIM1->CNT=0;
 80007e4:	4bbc      	ldr	r3, [pc, #752]	; (8000ad8 <HAL_TIM_IC_CaptureCallback+0x320>)
 80007e6:	2200      	movs	r2, #0
 80007e8:	625a      	str	r2, [r3, #36]	; 0x24
        	 OWR_OFF;
 80007ea:	2390      	movs	r3, #144	; 0x90
 80007ec:	05db      	lsls	r3, r3, #23
 80007ee:	2200      	movs	r2, #0
 80007f0:	2180      	movs	r1, #128	; 0x80
 80007f2:	0018      	movs	r0, r3
 80007f4:	f001 f9f2 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if((count==176)||(period>=150)){
 80007f8:	4bba      	ldr	r3, [pc, #744]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80007fa:	781b      	ldrb	r3, [r3, #0]
 80007fc:	2bb0      	cmp	r3, #176	; 0xb0
 80007fe:	d003      	beq.n	8000808 <HAL_TIM_IC_CaptureCallback+0x50>
 8000800:	4bb7      	ldr	r3, [pc, #732]	; (8000ae0 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000802:	881b      	ldrh	r3, [r3, #0]
 8000804:	2b95      	cmp	r3, #149	; 0x95
 8000806:	d902      	bls.n	800080e <HAL_TIM_IC_CaptureCallback+0x56>
        		 count=0;}
 8000808:	4bb6      	ldr	r3, [pc, #728]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800080a:	2200      	movs	r2, #0
 800080c:	701a      	strb	r2, [r3, #0]

        	 }
         HAL_PWR_EnableSleepOnExit ();
 800080e:	f001 fa03 	bl	8001c18 <HAL_PWR_EnableSleepOnExit>
         }

          if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // FALLING с HIGH на LOW
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	7f1b      	ldrb	r3, [r3, #28]
 8000816:	2b02      	cmp	r3, #2
 8000818:	d000      	beq.n	800081c <HAL_TIM_IC_CaptureCallback+0x64>
 800081a:	e221      	b.n	8000c60 <HAL_TIM_IC_CaptureCallback+0x4a8>
                        { pulse = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 800081c:	4baf      	ldr	r3, [pc, #700]	; (8000adc <HAL_TIM_IC_CaptureCallback+0x324>)
 800081e:	2104      	movs	r1, #4
 8000820:	0018      	movs	r0, r3
 8000822:	f002 fb79 	bl	8002f18 <HAL_TIM_ReadCapturedValue>
 8000826:	0003      	movs	r3, r0
 8000828:	b29a      	uxth	r2, r3
 800082a:	4baf      	ldr	r3, [pc, #700]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 800082c:	801a      	strh	r2, [r3, #0]
                        OWR_OFF;
 800082e:	2390      	movs	r3, #144	; 0x90
 8000830:	05db      	lsls	r3, r3, #23
 8000832:	2200      	movs	r2, #0
 8000834:	2180      	movs	r1, #128	; 0x80
 8000836:	0018      	movs	r0, r3
 8000838:	f001 f9d0 	bl	8001bdc <HAL_GPIO_WritePin>
             if((pulse>55)&&(pulse<60))  {rcvd[count]=2;rcv_addres=0;}
 800083c:	4baa      	ldr	r3, [pc, #680]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 800083e:	881b      	ldrh	r3, [r3, #0]
 8000840:	2b37      	cmp	r3, #55	; 0x37
 8000842:	d90c      	bls.n	800085e <HAL_TIM_IC_CaptureCallback+0xa6>
 8000844:	4ba8      	ldr	r3, [pc, #672]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000846:	881b      	ldrh	r3, [r3, #0]
 8000848:	2b3b      	cmp	r3, #59	; 0x3b
 800084a:	d808      	bhi.n	800085e <HAL_TIM_IC_CaptureCallback+0xa6>
 800084c:	4ba5      	ldr	r3, [pc, #660]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800084e:	781b      	ldrb	r3, [r3, #0]
 8000850:	001a      	movs	r2, r3
 8000852:	4ba6      	ldr	r3, [pc, #664]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000854:	2102      	movs	r1, #2
 8000856:	5499      	strb	r1, [r3, r2]
 8000858:	4ba5      	ldr	r3, [pc, #660]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 800085a:	2200      	movs	r2, #0
 800085c:	701a      	strb	r2, [r3, #0]
        	 if((pulse>36)&&(pulse<40))  rcvd[count]=1;
 800085e:	4ba2      	ldr	r3, [pc, #648]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000860:	881b      	ldrh	r3, [r3, #0]
 8000862:	2b24      	cmp	r3, #36	; 0x24
 8000864:	d909      	bls.n	800087a <HAL_TIM_IC_CaptureCallback+0xc2>
 8000866:	4ba0      	ldr	r3, [pc, #640]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000868:	881b      	ldrh	r3, [r3, #0]
 800086a:	2b27      	cmp	r3, #39	; 0x27
 800086c:	d805      	bhi.n	800087a <HAL_TIM_IC_CaptureCallback+0xc2>
 800086e:	4b9d      	ldr	r3, [pc, #628]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000870:	781b      	ldrb	r3, [r3, #0]
 8000872:	001a      	movs	r2, r3
 8000874:	4b9d      	ldr	r3, [pc, #628]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000876:	2101      	movs	r1, #1
 8000878:	5499      	strb	r1, [r3, r2]
        	 if((pulse>16)&&(pulse<21))  rcvd[count]=0;
 800087a:	4b9b      	ldr	r3, [pc, #620]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 800087c:	881b      	ldrh	r3, [r3, #0]
 800087e:	2b10      	cmp	r3, #16
 8000880:	d909      	bls.n	8000896 <HAL_TIM_IC_CaptureCallback+0xde>
 8000882:	4b99      	ldr	r3, [pc, #612]	; (8000ae8 <HAL_TIM_IC_CaptureCallback+0x330>)
 8000884:	881b      	ldrh	r3, [r3, #0]
 8000886:	2b14      	cmp	r3, #20
 8000888:	d805      	bhi.n	8000896 <HAL_TIM_IC_CaptureCallback+0xde>
 800088a:	4b96      	ldr	r3, [pc, #600]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800088c:	781b      	ldrb	r3, [r3, #0]
 800088e:	001a      	movs	r2, r3
 8000890:	4b96      	ldr	r3, [pc, #600]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000892:	2100      	movs	r1, #0
 8000894:	5499      	strb	r1, [r3, r2]
        	 if ((count==13)&&(rcv_addres==addres)){OWR_ON;}//count==14-alarm
 8000896:	4b93      	ldr	r3, [pc, #588]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000898:	781b      	ldrb	r3, [r3, #0]
 800089a:	2b0d      	cmp	r3, #13
 800089c:	d10c      	bne.n	80008b8 <HAL_TIM_IC_CaptureCallback+0x100>
 800089e:	4b94      	ldr	r3, [pc, #592]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 80008a0:	781a      	ldrb	r2, [r3, #0]
 80008a2:	4b94      	ldr	r3, [pc, #592]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80008a4:	781b      	ldrb	r3, [r3, #0]
 80008a6:	429a      	cmp	r2, r3
 80008a8:	d106      	bne.n	80008b8 <HAL_TIM_IC_CaptureCallback+0x100>
 80008aa:	2390      	movs	r3, #144	; 0x90
 80008ac:	05db      	lsls	r3, r3, #23
 80008ae:	2201      	movs	r2, #1
 80008b0:	2180      	movs	r1, #128	; 0x80
 80008b2:	0018      	movs	r0, r3
 80008b4:	f001 f992 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==22)&&(rcv_addres==addres)){OWR_ON;}
 80008b8:	4b8a      	ldr	r3, [pc, #552]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80008ba:	781b      	ldrb	r3, [r3, #0]
 80008bc:	2b16      	cmp	r3, #22
 80008be:	d10c      	bne.n	80008da <HAL_TIM_IC_CaptureCallback+0x122>
 80008c0:	4b8b      	ldr	r3, [pc, #556]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 80008c2:	781a      	ldrb	r2, [r3, #0]
 80008c4:	4b8b      	ldr	r3, [pc, #556]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80008c6:	781b      	ldrb	r3, [r3, #0]
 80008c8:	429a      	cmp	r2, r3
 80008ca:	d106      	bne.n	80008da <HAL_TIM_IC_CaptureCallback+0x122>
 80008cc:	2390      	movs	r3, #144	; 0x90
 80008ce:	05db      	lsls	r3, r3, #23
 80008d0:	2201      	movs	r2, #1
 80008d2:	2180      	movs	r1, #128	; 0x80
 80008d4:	0018      	movs	r0, r3
 80008d6:	f001 f981 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==31)&&(rcv_addres==addres)){OWR_ON;}
 80008da:	4b82      	ldr	r3, [pc, #520]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b1f      	cmp	r3, #31
 80008e0:	d10c      	bne.n	80008fc <HAL_TIM_IC_CaptureCallback+0x144>
 80008e2:	4b83      	ldr	r3, [pc, #524]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 80008e4:	781a      	ldrb	r2, [r3, #0]
 80008e6:	4b83      	ldr	r3, [pc, #524]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80008e8:	781b      	ldrb	r3, [r3, #0]
 80008ea:	429a      	cmp	r2, r3
 80008ec:	d106      	bne.n	80008fc <HAL_TIM_IC_CaptureCallback+0x144>
 80008ee:	2390      	movs	r3, #144	; 0x90
 80008f0:	05db      	lsls	r3, r3, #23
 80008f2:	2201      	movs	r2, #1
 80008f4:	2180      	movs	r1, #128	; 0x80
 80008f6:	0018      	movs	r0, r3
 80008f8:	f001 f970 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==40)&&(rcv_addres==addres)){OWR_ON;}
 80008fc:	4b79      	ldr	r3, [pc, #484]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b28      	cmp	r3, #40	; 0x28
 8000902:	d10c      	bne.n	800091e <HAL_TIM_IC_CaptureCallback+0x166>
 8000904:	4b7a      	ldr	r3, [pc, #488]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000906:	781a      	ldrb	r2, [r3, #0]
 8000908:	4b7a      	ldr	r3, [pc, #488]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 800090a:	781b      	ldrb	r3, [r3, #0]
 800090c:	429a      	cmp	r2, r3
 800090e:	d106      	bne.n	800091e <HAL_TIM_IC_CaptureCallback+0x166>
 8000910:	2390      	movs	r3, #144	; 0x90
 8000912:	05db      	lsls	r3, r3, #23
 8000914:	2201      	movs	r2, #1
 8000916:	2180      	movs	r1, #128	; 0x80
 8000918:	0018      	movs	r0, r3
 800091a:	f001 f95f 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==49)&&(rcv_addres==addres)){OWR_ON;}
 800091e:	4b71      	ldr	r3, [pc, #452]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b31      	cmp	r3, #49	; 0x31
 8000924:	d10c      	bne.n	8000940 <HAL_TIM_IC_CaptureCallback+0x188>
 8000926:	4b72      	ldr	r3, [pc, #456]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000928:	781a      	ldrb	r2, [r3, #0]
 800092a:	4b72      	ldr	r3, [pc, #456]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	429a      	cmp	r2, r3
 8000930:	d106      	bne.n	8000940 <HAL_TIM_IC_CaptureCallback+0x188>
 8000932:	2390      	movs	r3, #144	; 0x90
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2201      	movs	r2, #1
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f001 f94e 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==58)&&(rcv_addres==addres)){OWR_ON;}
 8000940:	4b68      	ldr	r3, [pc, #416]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b3a      	cmp	r3, #58	; 0x3a
 8000946:	d10c      	bne.n	8000962 <HAL_TIM_IC_CaptureCallback+0x1aa>
 8000948:	4b69      	ldr	r3, [pc, #420]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 800094a:	781a      	ldrb	r2, [r3, #0]
 800094c:	4b69      	ldr	r3, [pc, #420]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	429a      	cmp	r2, r3
 8000952:	d106      	bne.n	8000962 <HAL_TIM_IC_CaptureCallback+0x1aa>
 8000954:	2390      	movs	r3, #144	; 0x90
 8000956:	05db      	lsls	r3, r3, #23
 8000958:	2201      	movs	r2, #1
 800095a:	2180      	movs	r1, #128	; 0x80
 800095c:	0018      	movs	r0, r3
 800095e:	f001 f93d 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==67)&&(rcv_addres==addres)){OWR_ON;}
 8000962:	4b60      	ldr	r3, [pc, #384]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	2b43      	cmp	r3, #67	; 0x43
 8000968:	d10c      	bne.n	8000984 <HAL_TIM_IC_CaptureCallback+0x1cc>
 800096a:	4b61      	ldr	r3, [pc, #388]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 800096c:	781a      	ldrb	r2, [r3, #0]
 800096e:	4b61      	ldr	r3, [pc, #388]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	429a      	cmp	r2, r3
 8000974:	d106      	bne.n	8000984 <HAL_TIM_IC_CaptureCallback+0x1cc>
 8000976:	2390      	movs	r3, #144	; 0x90
 8000978:	05db      	lsls	r3, r3, #23
 800097a:	2201      	movs	r2, #1
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0018      	movs	r0, r3
 8000980:	f001 f92c 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==76)&&(rcv_addres==addres)){OWR_ON;}
 8000984:	4b57      	ldr	r3, [pc, #348]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	2b4c      	cmp	r3, #76	; 0x4c
 800098a:	d10c      	bne.n	80009a6 <HAL_TIM_IC_CaptureCallback+0x1ee>
 800098c:	4b58      	ldr	r3, [pc, #352]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 800098e:	781a      	ldrb	r2, [r3, #0]
 8000990:	4b58      	ldr	r3, [pc, #352]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000992:	781b      	ldrb	r3, [r3, #0]
 8000994:	429a      	cmp	r2, r3
 8000996:	d106      	bne.n	80009a6 <HAL_TIM_IC_CaptureCallback+0x1ee>
 8000998:	2390      	movs	r3, #144	; 0x90
 800099a:	05db      	lsls	r3, r3, #23
 800099c:	2201      	movs	r2, #1
 800099e:	2180      	movs	r1, #128	; 0x80
 80009a0:	0018      	movs	r0, r3
 80009a2:	f001 f91b 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==85)&&(rcv_addres==addres)){OWR_ON;}
 80009a6:	4b4f      	ldr	r3, [pc, #316]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80009a8:	781b      	ldrb	r3, [r3, #0]
 80009aa:	2b55      	cmp	r3, #85	; 0x55
 80009ac:	d10c      	bne.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x210>
 80009ae:	4b50      	ldr	r3, [pc, #320]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 80009b0:	781a      	ldrb	r2, [r3, #0]
 80009b2:	4b50      	ldr	r3, [pc, #320]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	429a      	cmp	r2, r3
 80009b8:	d106      	bne.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x210>
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2201      	movs	r2, #1
 80009c0:	2180      	movs	r1, #128	; 0x80
 80009c2:	0018      	movs	r0, r3
 80009c4:	f001 f90a 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==94)&&(rcv_addres==addres)){OWR_ON;}
 80009c8:	4b46      	ldr	r3, [pc, #280]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80009ca:	781b      	ldrb	r3, [r3, #0]
 80009cc:	2b5e      	cmp	r3, #94	; 0x5e
 80009ce:	d10c      	bne.n	80009ea <HAL_TIM_IC_CaptureCallback+0x232>
 80009d0:	4b47      	ldr	r3, [pc, #284]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 80009d2:	781a      	ldrb	r2, [r3, #0]
 80009d4:	4b47      	ldr	r3, [pc, #284]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80009d6:	781b      	ldrb	r3, [r3, #0]
 80009d8:	429a      	cmp	r2, r3
 80009da:	d106      	bne.n	80009ea <HAL_TIM_IC_CaptureCallback+0x232>
 80009dc:	2390      	movs	r3, #144	; 0x90
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	2201      	movs	r2, #1
 80009e2:	2180      	movs	r1, #128	; 0x80
 80009e4:	0018      	movs	r0, r3
 80009e6:	f001 f8f9 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==103)&&(rcv_addres==addres)){OWR_ON;}
 80009ea:	4b3e      	ldr	r3, [pc, #248]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b67      	cmp	r3, #103	; 0x67
 80009f0:	d10c      	bne.n	8000a0c <HAL_TIM_IC_CaptureCallback+0x254>
 80009f2:	4b3f      	ldr	r3, [pc, #252]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 80009f4:	781a      	ldrb	r2, [r3, #0]
 80009f6:	4b3f      	ldr	r3, [pc, #252]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 80009f8:	781b      	ldrb	r3, [r3, #0]
 80009fa:	429a      	cmp	r2, r3
 80009fc:	d106      	bne.n	8000a0c <HAL_TIM_IC_CaptureCallback+0x254>
 80009fe:	2390      	movs	r3, #144	; 0x90
 8000a00:	05db      	lsls	r3, r3, #23
 8000a02:	2201      	movs	r2, #1
 8000a04:	2180      	movs	r1, #128	; 0x80
 8000a06:	0018      	movs	r0, r3
 8000a08:	f001 f8e8 	bl	8001bdc <HAL_GPIO_WritePin>
        	 if ((count==112)&&(rcv_addres==addres)){OWR_ON;}
 8000a0c:	4b35      	ldr	r3, [pc, #212]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	2b70      	cmp	r3, #112	; 0x70
 8000a12:	d10c      	bne.n	8000a2e <HAL_TIM_IC_CaptureCallback+0x276>
 8000a14:	4b36      	ldr	r3, [pc, #216]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000a16:	781a      	ldrb	r2, [r3, #0]
 8000a18:	4b36      	ldr	r3, [pc, #216]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	429a      	cmp	r2, r3
 8000a1e:	d106      	bne.n	8000a2e <HAL_TIM_IC_CaptureCallback+0x276>
 8000a20:	2390      	movs	r3, #144	; 0x90
 8000a22:	05db      	lsls	r3, r3, #23
 8000a24:	2201      	movs	r2, #1
 8000a26:	2180      	movs	r1, #128	; 0x80
 8000a28:	0018      	movs	r0, r3
 8000a2a:	f001 f8d7 	bl	8001bdc <HAL_GPIO_WritePin>


        	if (count==13)
 8000a2e:	4b2d      	ldr	r3, [pc, #180]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	2b0d      	cmp	r3, #13
 8000a34:	d125      	bne.n	8000a82 <HAL_TIM_IC_CaptureCallback+0x2ca>
        	   {  directive=0;
 8000a36:	4b30      	ldr	r3, [pc, #192]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	701a      	strb	r2, [r3, #0]

        	     directive|= (rcvd[9]<<4)|(rcvd[10]<<3)|(rcvd[11]<<2)|(rcvd[12]<<1)|(rcvd[13]) ;
 8000a3c:	4b2b      	ldr	r3, [pc, #172]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000a3e:	7a5b      	ldrb	r3, [r3, #9]
 8000a40:	011b      	lsls	r3, r3, #4
 8000a42:	b25a      	sxtb	r2, r3
 8000a44:	4b29      	ldr	r3, [pc, #164]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000a46:	7a9b      	ldrb	r3, [r3, #10]
 8000a48:	00db      	lsls	r3, r3, #3
 8000a4a:	b25b      	sxtb	r3, r3
 8000a4c:	4313      	orrs	r3, r2
 8000a4e:	b25a      	sxtb	r2, r3
 8000a50:	4b26      	ldr	r3, [pc, #152]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000a52:	7adb      	ldrb	r3, [r3, #11]
 8000a54:	009b      	lsls	r3, r3, #2
 8000a56:	b25b      	sxtb	r3, r3
 8000a58:	4313      	orrs	r3, r2
 8000a5a:	b25a      	sxtb	r2, r3
 8000a5c:	4b23      	ldr	r3, [pc, #140]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000a5e:	7b1b      	ldrb	r3, [r3, #12]
 8000a60:	005b      	lsls	r3, r3, #1
 8000a62:	b25b      	sxtb	r3, r3
 8000a64:	4313      	orrs	r3, r2
 8000a66:	b25a      	sxtb	r2, r3
 8000a68:	4b20      	ldr	r3, [pc, #128]	; (8000aec <HAL_TIM_IC_CaptureCallback+0x334>)
 8000a6a:	7b5b      	ldrb	r3, [r3, #13]
 8000a6c:	b25b      	sxtb	r3, r3
 8000a6e:	4313      	orrs	r3, r2
 8000a70:	b25a      	sxtb	r2, r3
 8000a72:	4b21      	ldr	r3, [pc, #132]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	b25b      	sxtb	r3, r3
 8000a78:	4313      	orrs	r3, r2
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4b1e      	ldr	r3, [pc, #120]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000a80:	701a      	strb	r2, [r3, #0]
        	    }
        	 switch(directive)
 8000a82:	4b1d      	ldr	r3, [pc, #116]	; (8000af8 <HAL_TIM_IC_CaptureCallback+0x340>)
 8000a84:	781b      	ldrb	r3, [r3, #0]
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <HAL_TIM_IC_CaptureCallback+0x2d8>
 8000a8a:	2b03      	cmp	r3, #3
 8000a8c:	d036      	beq.n	8000afc <HAL_TIM_IC_CaptureCallback+0x344>
 8000a8e:	e05b      	b.n	8000b48 <HAL_TIM_IC_CaptureCallback+0x390>
        			   {

        	 case 0 :
        		 if ((count==9)&&(rcv_addres==addres)){OWR_ON;}
 8000a90:	4b14      	ldr	r3, [pc, #80]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000a92:	781b      	ldrb	r3, [r3, #0]
 8000a94:	2b09      	cmp	r3, #9
 8000a96:	d10c      	bne.n	8000ab2 <HAL_TIM_IC_CaptureCallback+0x2fa>
 8000a98:	4b15      	ldr	r3, [pc, #84]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000a9a:	781a      	ldrb	r2, [r3, #0]
 8000a9c:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000a9e:	781b      	ldrb	r3, [r3, #0]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d106      	bne.n	8000ab2 <HAL_TIM_IC_CaptureCallback+0x2fa>
 8000aa4:	2390      	movs	r3, #144	; 0x90
 8000aa6:	05db      	lsls	r3, r3, #23
 8000aa8:	2201      	movs	r2, #1
 8000aaa:	2180      	movs	r1, #128	; 0x80
 8000aac:	0018      	movs	r0, r3
 8000aae:	f001 f895 	bl	8001bdc <HAL_GPIO_WritePin>
        		 if ((count==13)&&(rcv_addres==addres)){OWR_ON;}
 8000ab2:	4b0c      	ldr	r3, [pc, #48]	; (8000ae4 <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	2b0d      	cmp	r3, #13
 8000ab8:	d143      	bne.n	8000b42 <HAL_TIM_IC_CaptureCallback+0x38a>
 8000aba:	4b0d      	ldr	r3, [pc, #52]	; (8000af0 <HAL_TIM_IC_CaptureCallback+0x338>)
 8000abc:	781a      	ldrb	r2, [r3, #0]
 8000abe:	4b0d      	ldr	r3, [pc, #52]	; (8000af4 <HAL_TIM_IC_CaptureCallback+0x33c>)
 8000ac0:	781b      	ldrb	r3, [r3, #0]
 8000ac2:	429a      	cmp	r2, r3
 8000ac4:	d13d      	bne.n	8000b42 <HAL_TIM_IC_CaptureCallback+0x38a>
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	2201      	movs	r2, #1
 8000acc:	2180      	movs	r1, #128	; 0x80
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f001 f884 	bl	8001bdc <HAL_GPIO_WritePin>

        	 break;
 8000ad4:	e035      	b.n	8000b42 <HAL_TIM_IC_CaptureCallback+0x38a>
 8000ad6:	46c0      	nop			; (mov r8, r8)
 8000ad8:	40012c00 	.word	0x40012c00
 8000adc:	2000006c 	.word	0x2000006c
 8000ae0:	200001c4 	.word	0x200001c4
 8000ae4:	2000027a 	.word	0x2000027a
 8000ae8:	200001c6 	.word	0x200001c6
 8000aec:	200001c8 	.word	0x200001c8
 8000af0:	2000027b 	.word	0x2000027b
 8000af4:	20000000 	.word	0x20000000
 8000af8:	2000027d 	.word	0x2000027d

        	 case 3 :
        	      if ((count==9)&&(rcv_addres==addres)){OWR_ON;}
 8000afc:	4b5a      	ldr	r3, [pc, #360]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000afe:	781b      	ldrb	r3, [r3, #0]
 8000b00:	2b09      	cmp	r3, #9
 8000b02:	d10c      	bne.n	8000b1e <HAL_TIM_IC_CaptureCallback+0x366>
 8000b04:	4b59      	ldr	r3, [pc, #356]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000b06:	781a      	ldrb	r2, [r3, #0]
 8000b08:	4b59      	ldr	r3, [pc, #356]	; (8000c70 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 8000b0a:	781b      	ldrb	r3, [r3, #0]
 8000b0c:	429a      	cmp	r2, r3
 8000b0e:	d106      	bne.n	8000b1e <HAL_TIM_IC_CaptureCallback+0x366>
 8000b10:	2390      	movs	r3, #144	; 0x90
 8000b12:	05db      	lsls	r3, r3, #23
 8000b14:	2201      	movs	r2, #1
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	0018      	movs	r0, r3
 8000b1a:	f001 f85f 	bl	8001bdc <HAL_GPIO_WritePin>
        	      if ((count==13)&&(rcv_addres==addres)){OWR_ON;}
 8000b1e:	4b52      	ldr	r3, [pc, #328]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000b20:	781b      	ldrb	r3, [r3, #0]
 8000b22:	2b0d      	cmp	r3, #13
 8000b24:	d10f      	bne.n	8000b46 <HAL_TIM_IC_CaptureCallback+0x38e>
 8000b26:	4b51      	ldr	r3, [pc, #324]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000b28:	781a      	ldrb	r2, [r3, #0]
 8000b2a:	4b51      	ldr	r3, [pc, #324]	; (8000c70 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 8000b2c:	781b      	ldrb	r3, [r3, #0]
 8000b2e:	429a      	cmp	r2, r3
 8000b30:	d109      	bne.n	8000b46 <HAL_TIM_IC_CaptureCallback+0x38e>
 8000b32:	2390      	movs	r3, #144	; 0x90
 8000b34:	05db      	lsls	r3, r3, #23
 8000b36:	2201      	movs	r2, #1
 8000b38:	2180      	movs	r1, #128	; 0x80
 8000b3a:	0018      	movs	r0, r3
 8000b3c:	f001 f84e 	bl	8001bdc <HAL_GPIO_WritePin>

        	  break;
 8000b40:	e001      	b.n	8000b46 <HAL_TIM_IC_CaptureCallback+0x38e>
        	 break;
 8000b42:	46c0      	nop			; (mov r8, r8)
 8000b44:	e000      	b.n	8000b48 <HAL_TIM_IC_CaptureCallback+0x390>
        	  break;
 8000b46:	46c0      	nop			; (mov r8, r8)



        			   }

        	 if (count==8)
 8000b48:	4b47      	ldr	r3, [pc, #284]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000b4a:	781b      	ldrb	r3, [r3, #0]
 8000b4c:	2b08      	cmp	r3, #8
 8000b4e:	d13e      	bne.n	8000bce <HAL_TIM_IC_CaptureCallback+0x416>
        	    {
        	      rcv_addres=0;
 8000b50:	4b46      	ldr	r3, [pc, #280]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	701a      	strb	r2, [r3, #0]
        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]) ;
 8000b56:	4b47      	ldr	r3, [pc, #284]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b58:	785b      	ldrb	r3, [r3, #1]
 8000b5a:	01db      	lsls	r3, r3, #7
 8000b5c:	b25a      	sxtb	r2, r3
 8000b5e:	4b45      	ldr	r3, [pc, #276]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b60:	789b      	ldrb	r3, [r3, #2]
 8000b62:	019b      	lsls	r3, r3, #6
 8000b64:	b25b      	sxtb	r3, r3
 8000b66:	4313      	orrs	r3, r2
 8000b68:	b25a      	sxtb	r2, r3
 8000b6a:	4b42      	ldr	r3, [pc, #264]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b6c:	78db      	ldrb	r3, [r3, #3]
 8000b6e:	015b      	lsls	r3, r3, #5
 8000b70:	b25b      	sxtb	r3, r3
 8000b72:	4313      	orrs	r3, r2
 8000b74:	b25a      	sxtb	r2, r3
 8000b76:	4b3f      	ldr	r3, [pc, #252]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b78:	791b      	ldrb	r3, [r3, #4]
 8000b7a:	011b      	lsls	r3, r3, #4
 8000b7c:	b25b      	sxtb	r3, r3
 8000b7e:	4313      	orrs	r3, r2
 8000b80:	b25a      	sxtb	r2, r3
 8000b82:	4b3c      	ldr	r3, [pc, #240]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b84:	795b      	ldrb	r3, [r3, #5]
 8000b86:	00db      	lsls	r3, r3, #3
 8000b88:	b25b      	sxtb	r3, r3
 8000b8a:	4313      	orrs	r3, r2
 8000b8c:	b25a      	sxtb	r2, r3
 8000b8e:	4b39      	ldr	r3, [pc, #228]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b90:	799b      	ldrb	r3, [r3, #6]
 8000b92:	009b      	lsls	r3, r3, #2
 8000b94:	b25b      	sxtb	r3, r3
 8000b96:	4313      	orrs	r3, r2
 8000b98:	b25a      	sxtb	r2, r3
 8000b9a:	4b36      	ldr	r3, [pc, #216]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000b9c:	79db      	ldrb	r3, [r3, #7]
 8000b9e:	005b      	lsls	r3, r3, #1
 8000ba0:	b25b      	sxtb	r3, r3
 8000ba2:	4313      	orrs	r3, r2
 8000ba4:	b25a      	sxtb	r2, r3
 8000ba6:	4b33      	ldr	r3, [pc, #204]	; (8000c74 <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8000ba8:	7a1b      	ldrb	r3, [r3, #8]
 8000baa:	b25b      	sxtb	r3, r3
 8000bac:	4313      	orrs	r3, r2
 8000bae:	b25a      	sxtb	r2, r3
 8000bb0:	4b2e      	ldr	r3, [pc, #184]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	b25b      	sxtb	r3, r3
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	b2da      	uxtb	r2, r3
 8000bbc:	4b2b      	ldr	r3, [pc, #172]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000bbe:	701a      	strb	r2, [r3, #0]
        	      if(rcv_addres==0){addres_call=0;}
 8000bc0:	4b2a      	ldr	r3, [pc, #168]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d102      	bne.n	8000bce <HAL_TIM_IC_CaptureCallback+0x416>
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
        	    }

        	 if((rcv_addres==addres)&&(count>=14)&&(count<22)&&(directive==3))
 8000bce:	4b27      	ldr	r3, [pc, #156]	; (8000c6c <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000bd0:	781a      	ldrb	r2, [r3, #0]
 8000bd2:	4b27      	ldr	r3, [pc, #156]	; (8000c70 <HAL_TIM_IC_CaptureCallback+0x4b8>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	429a      	cmp	r2, r3
 8000bd8:	d13a      	bne.n	8000c50 <HAL_TIM_IC_CaptureCallback+0x498>
 8000bda:	4b23      	ldr	r3, [pc, #140]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b0d      	cmp	r3, #13
 8000be0:	d936      	bls.n	8000c50 <HAL_TIM_IC_CaptureCallback+0x498>
 8000be2:	4b21      	ldr	r3, [pc, #132]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b15      	cmp	r3, #21
 8000be8:	d832      	bhi.n	8000c50 <HAL_TIM_IC_CaptureCallback+0x498>
 8000bea:	4b24      	ldr	r3, [pc, #144]	; (8000c7c <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8000bec:	781b      	ldrb	r3, [r3, #0]
 8000bee:	2b03      	cmp	r3, #3
 8000bf0:	d12e      	bne.n	8000c50 <HAL_TIM_IC_CaptureCallback+0x498>
        	       {
        	            temp_ID|=((Device_ID>>(21-count))&(0b1));
 8000bf2:	4b23      	ldr	r3, [pc, #140]	; (8000c80 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	001a      	movs	r2, r3
 8000bf8:	4b1b      	ldr	r3, [pc, #108]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	0019      	movs	r1, r3
 8000bfe:	2315      	movs	r3, #21
 8000c00:	1a5b      	subs	r3, r3, r1
 8000c02:	411a      	asrs	r2, r3
 8000c04:	0013      	movs	r3, r2
 8000c06:	b25b      	sxtb	r3, r3
 8000c08:	2201      	movs	r2, #1
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	b25a      	sxtb	r2, r3
 8000c0e:	4b1d      	ldr	r3, [pc, #116]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000c10:	781b      	ldrb	r3, [r3, #0]
 8000c12:	b25b      	sxtb	r3, r3
 8000c14:	4313      	orrs	r3, r2
 8000c16:	b25b      	sxtb	r3, r3
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	4b1a      	ldr	r3, [pc, #104]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000c1c:	701a      	strb	r2, [r3, #0]
        	            if(temp_ID==1){OWR_ON;}
 8000c1e:	4b19      	ldr	r3, [pc, #100]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000c20:	781b      	ldrb	r3, [r3, #0]
 8000c22:	2b01      	cmp	r3, #1
 8000c24:	d106      	bne.n	8000c34 <HAL_TIM_IC_CaptureCallback+0x47c>
 8000c26:	2390      	movs	r3, #144	; 0x90
 8000c28:	05db      	lsls	r3, r3, #23
 8000c2a:	2201      	movs	r2, #1
 8000c2c:	2180      	movs	r1, #128	; 0x80
 8000c2e:	0018      	movs	r0, r3
 8000c30:	f000 ffd4 	bl	8001bdc <HAL_GPIO_WritePin>
        	            if(temp_ID==0){OWR_OFF;}
 8000c34:	4b13      	ldr	r3, [pc, #76]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d106      	bne.n	8000c4a <HAL_TIM_IC_CaptureCallback+0x492>
 8000c3c:	2390      	movs	r3, #144	; 0x90
 8000c3e:	05db      	lsls	r3, r3, #23
 8000c40:	2200      	movs	r2, #0
 8000c42:	2180      	movs	r1, #128	; 0x80
 8000c44:	0018      	movs	r0, r3
 8000c46:	f000 ffc9 	bl	8001bdc <HAL_GPIO_WritePin>
        	            temp_ID=0;
 8000c4a:	4b0e      	ldr	r3, [pc, #56]	; (8000c84 <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8000c4c:	2200      	movs	r2, #0
 8000c4e:	701a      	strb	r2, [r3, #0]
        	       };


        	  count++;
 8000c50:	4b05      	ldr	r3, [pc, #20]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	3301      	adds	r3, #1
 8000c56:	b2da      	uxtb	r2, r3
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000c5a:	701a      	strb	r2, [r3, #0]
        	  HAL_PWR_EnableSleepOnExit ();
 8000c5c:	f000 ffdc 	bl	8001c18 <HAL_PWR_EnableSleepOnExit>
        	//  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);

                        }
     }
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b002      	add	sp, #8
 8000c66:	bd80      	pop	{r7, pc}
 8000c68:	2000027a 	.word	0x2000027a
 8000c6c:	2000027b 	.word	0x2000027b
 8000c70:	20000000 	.word	0x20000000
 8000c74:	200001c8 	.word	0x200001c8
 8000c78:	2000027c 	.word	0x2000027c
 8000c7c:	2000027d 	.word	0x2000027d
 8000c80:	20000001 	.word	0x20000001
 8000c84:	2000027e 	.word	0x2000027e

08000c88 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  LED2_OFF;
 8000c90:	2380      	movs	r3, #128	; 0x80
 8000c92:	0159      	lsls	r1, r3, #5
 8000c94:	2390      	movs	r3, #144	; 0x90
 8000c96:	05db      	lsls	r3, r3, #23
 8000c98:	2200      	movs	r2, #0
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	f000 ff9e 	bl	8001bdc <HAL_GPIO_WritePin>

}
 8000ca0:	46c0      	nop			; (mov r8, r8)
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	b002      	add	sp, #8
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cac:	b672      	cpsid	i
}
 8000cae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cb0:	e7fe      	b.n	8000cb0 <Error_Handler+0x8>
	...

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <HAL_MspInit+0x54>)
 8000cbc:	699a      	ldr	r2, [r3, #24]
 8000cbe:	4b12      	ldr	r3, [pc, #72]	; (8000d08 <HAL_MspInit+0x54>)
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	430a      	orrs	r2, r1
 8000cc4:	619a      	str	r2, [r3, #24]
 8000cc6:	4b10      	ldr	r3, [pc, #64]	; (8000d08 <HAL_MspInit+0x54>)
 8000cc8:	699b      	ldr	r3, [r3, #24]
 8000cca:	2201      	movs	r2, #1
 8000ccc:	4013      	ands	r3, r2
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0d      	ldr	r3, [pc, #52]	; (8000d08 <HAL_MspInit+0x54>)
 8000cd4:	69da      	ldr	r2, [r3, #28]
 8000cd6:	4b0c      	ldr	r3, [pc, #48]	; (8000d08 <HAL_MspInit+0x54>)
 8000cd8:	2180      	movs	r1, #128	; 0x80
 8000cda:	0549      	lsls	r1, r1, #21
 8000cdc:	430a      	orrs	r2, r1
 8000cde:	61da      	str	r2, [r3, #28]
 8000ce0:	4b09      	ldr	r3, [pc, #36]	; (8000d08 <HAL_MspInit+0x54>)
 8000ce2:	69da      	ldr	r2, [r3, #28]
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	055b      	lsls	r3, r3, #21
 8000ce8:	4013      	ands	r3, r2
 8000cea:	603b      	str	r3, [r7, #0]
 8000cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	2004      	movs	r0, #4
 8000cf4:	f000 fc4c 	bl	8001590 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000cf8:	2004      	movs	r0, #4
 8000cfa:	f000 fc5e 	bl	80015ba <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cfe:	46c0      	nop			; (mov r8, r8)
 8000d00:	46bd      	mov	sp, r7
 8000d02:	b002      	add	sp, #8
 8000d04:	bd80      	pop	{r7, pc}
 8000d06:	46c0      	nop			; (mov r8, r8)
 8000d08:	40021000 	.word	0x40021000

08000d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b08b      	sub	sp, #44	; 0x2c
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d14:	2414      	movs	r4, #20
 8000d16:	193b      	adds	r3, r7, r4
 8000d18:	0018      	movs	r0, r3
 8000d1a:	2314      	movs	r3, #20
 8000d1c:	001a      	movs	r2, r3
 8000d1e:	2100      	movs	r1, #0
 8000d20:	f003 face 	bl	80042c0 <memset>
  if(hadc->Instance==ADC1)
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	4a27      	ldr	r2, [pc, #156]	; (8000dc8 <HAL_ADC_MspInit+0xbc>)
 8000d2a:	4293      	cmp	r3, r2
 8000d2c:	d148      	bne.n	8000dc0 <HAL_ADC_MspInit+0xb4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000d2e:	4b27      	ldr	r3, [pc, #156]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d30:	699a      	ldr	r2, [r3, #24]
 8000d32:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	0089      	lsls	r1, r1, #2
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	619a      	str	r2, [r3, #24]
 8000d3c:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d3e:	699a      	ldr	r2, [r3, #24]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	009b      	lsls	r3, r3, #2
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
 8000d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d4a:	4b20      	ldr	r3, [pc, #128]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d4c:	695a      	ldr	r2, [r3, #20]
 8000d4e:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d50:	2180      	movs	r1, #128	; 0x80
 8000d52:	0289      	lsls	r1, r1, #10
 8000d54:	430a      	orrs	r2, r1
 8000d56:	615a      	str	r2, [r3, #20]
 8000d58:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d5a:	695a      	ldr	r2, [r3, #20]
 8000d5c:	2380      	movs	r3, #128	; 0x80
 8000d5e:	029b      	lsls	r3, r3, #10
 8000d60:	4013      	ands	r3, r2
 8000d62:	60fb      	str	r3, [r7, #12]
 8000d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d66:	4b19      	ldr	r3, [pc, #100]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d68:	695a      	ldr	r2, [r3, #20]
 8000d6a:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d6c:	2180      	movs	r1, #128	; 0x80
 8000d6e:	02c9      	lsls	r1, r1, #11
 8000d70:	430a      	orrs	r2, r1
 8000d72:	615a      	str	r2, [r3, #20]
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <HAL_ADC_MspInit+0xc0>)
 8000d76:	695a      	ldr	r2, [r3, #20]
 8000d78:	2380      	movs	r3, #128	; 0x80
 8000d7a:	02db      	lsls	r3, r3, #11
 8000d7c:	4013      	ands	r3, r2
 8000d7e:	60bb      	str	r3, [r7, #8]
 8000d80:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000d82:	193b      	adds	r3, r7, r4
 8000d84:	2233      	movs	r2, #51	; 0x33
 8000d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d88:	193b      	adds	r3, r7, r4
 8000d8a:	2203      	movs	r2, #3
 8000d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d8e:	193b      	adds	r3, r7, r4
 8000d90:	2200      	movs	r2, #0
 8000d92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d94:	193a      	adds	r2, r7, r4
 8000d96:	2390      	movs	r3, #144	; 0x90
 8000d98:	05db      	lsls	r3, r3, #23
 8000d9a:	0011      	movs	r1, r2
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f000 fdad 	bl	80018fc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_M_Pin;
 8000da2:	193b      	adds	r3, r7, r4
 8000da4:	2201      	movs	r2, #1
 8000da6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000da8:	193b      	adds	r3, r7, r4
 8000daa:	2203      	movs	r2, #3
 8000dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dae:	193b      	adds	r3, r7, r4
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_M_GPIO_Port, &GPIO_InitStruct);
 8000db4:	193b      	adds	r3, r7, r4
 8000db6:	4a06      	ldr	r2, [pc, #24]	; (8000dd0 <HAL_ADC_MspInit+0xc4>)
 8000db8:	0019      	movs	r1, r3
 8000dba:	0010      	movs	r0, r2
 8000dbc:	f000 fd9e 	bl	80018fc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b00b      	add	sp, #44	; 0x2c
 8000dc6:	bd90      	pop	{r4, r7, pc}
 8000dc8:	40012400 	.word	0x40012400
 8000dcc:	40021000 	.word	0x40021000
 8000dd0:	48000400 	.word	0x48000400

08000dd4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd4:	b590      	push	{r4, r7, lr}
 8000dd6:	b08b      	sub	sp, #44	; 0x2c
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ddc:	2414      	movs	r4, #20
 8000dde:	193b      	adds	r3, r7, r4
 8000de0:	0018      	movs	r0, r3
 8000de2:	2314      	movs	r3, #20
 8000de4:	001a      	movs	r2, r3
 8000de6:	2100      	movs	r1, #0
 8000de8:	f003 fa6a 	bl	80042c0 <memset>
  if(htim_base->Instance==TIM1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a32      	ldr	r2, [pc, #200]	; (8000ebc <HAL_TIM_Base_MspInit+0xe8>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d144      	bne.n	8000e80 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000df6:	4b32      	ldr	r3, [pc, #200]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000df8:	699a      	ldr	r2, [r3, #24]
 8000dfa:	4b31      	ldr	r3, [pc, #196]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000dfc:	2180      	movs	r1, #128	; 0x80
 8000dfe:	0109      	lsls	r1, r1, #4
 8000e00:	430a      	orrs	r2, r1
 8000e02:	619a      	str	r2, [r3, #24]
 8000e04:	4b2e      	ldr	r3, [pc, #184]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e06:	699a      	ldr	r2, [r3, #24]
 8000e08:	2380      	movs	r3, #128	; 0x80
 8000e0a:	011b      	lsls	r3, r3, #4
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
 8000e10:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e12:	4b2b      	ldr	r3, [pc, #172]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e14:	695a      	ldr	r2, [r3, #20]
 8000e16:	4b2a      	ldr	r3, [pc, #168]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e18:	2180      	movs	r1, #128	; 0x80
 8000e1a:	0289      	lsls	r1, r1, #10
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	615a      	str	r2, [r3, #20]
 8000e20:	4b27      	ldr	r3, [pc, #156]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e22:	695a      	ldr	r2, [r3, #20]
 8000e24:	2380      	movs	r3, #128	; 0x80
 8000e26:	029b      	lsls	r3, r3, #10
 8000e28:	4013      	ands	r3, r2
 8000e2a:	60fb      	str	r3, [r7, #12]
 8000e2c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L__Pin|L___Pin;
 8000e2e:	193b      	adds	r3, r7, r4
 8000e30:	22a0      	movs	r2, #160	; 0xa0
 8000e32:	00d2      	lsls	r2, r2, #3
 8000e34:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	0021      	movs	r1, r4
 8000e38:	187b      	adds	r3, r7, r1
 8000e3a:	2202      	movs	r2, #2
 8000e3c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3e:	187b      	adds	r3, r7, r1
 8000e40:	2200      	movs	r2, #0
 8000e42:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e44:	187b      	adds	r3, r7, r1
 8000e46:	2200      	movs	r2, #0
 8000e48:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e4a:	187b      	adds	r3, r7, r1
 8000e4c:	2202      	movs	r2, #2
 8000e4e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e50:	187a      	adds	r2, r7, r1
 8000e52:	2390      	movs	r3, #144	; 0x90
 8000e54:	05db      	lsls	r3, r3, #23
 8000e56:	0011      	movs	r1, r2
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f000 fd4f 	bl	80018fc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	2100      	movs	r1, #0
 8000e62:	200d      	movs	r0, #13
 8000e64:	f000 fb94 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8000e68:	200d      	movs	r0, #13
 8000e6a:	f000 fba6 	bl	80015ba <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8000e6e:	2200      	movs	r2, #0
 8000e70:	2100      	movs	r1, #0
 8000e72:	200e      	movs	r0, #14
 8000e74:	f000 fb8c 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8000e78:	200e      	movs	r0, #14
 8000e7a:	f000 fb9e 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000e7e:	e018      	b.n	8000eb2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	4a0f      	ldr	r2, [pc, #60]	; (8000ec4 <HAL_TIM_Base_MspInit+0xf0>)
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d113      	bne.n	8000eb2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000e8a:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e8c:	69da      	ldr	r2, [r3, #28]
 8000e8e:	4b0c      	ldr	r3, [pc, #48]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e90:	2102      	movs	r1, #2
 8000e92:	430a      	orrs	r2, r1
 8000e94:	61da      	str	r2, [r3, #28]
 8000e96:	4b0a      	ldr	r3, [pc, #40]	; (8000ec0 <HAL_TIM_Base_MspInit+0xec>)
 8000e98:	69db      	ldr	r3, [r3, #28]
 8000e9a:	2202      	movs	r2, #2
 8000e9c:	4013      	ands	r3, r2
 8000e9e:	60bb      	str	r3, [r7, #8]
 8000ea0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	2100      	movs	r1, #0
 8000ea6:	2010      	movs	r0, #16
 8000ea8:	f000 fb72 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000eac:	2010      	movs	r0, #16
 8000eae:	f000 fb84 	bl	80015ba <HAL_NVIC_EnableIRQ>
}
 8000eb2:	46c0      	nop			; (mov r8, r8)
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	b00b      	add	sp, #44	; 0x2c
 8000eb8:	bd90      	pop	{r4, r7, pc}
 8000eba:	46c0      	nop			; (mov r8, r8)
 8000ebc:	40012c00 	.word	0x40012c00
 8000ec0:	40021000 	.word	0x40021000
 8000ec4:	40000400 	.word	0x40000400

08000ec8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec8:	b590      	push	{r4, r7, lr}
 8000eca:	b08b      	sub	sp, #44	; 0x2c
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ed0:	2414      	movs	r4, #20
 8000ed2:	193b      	adds	r3, r7, r4
 8000ed4:	0018      	movs	r0, r3
 8000ed6:	2314      	movs	r3, #20
 8000ed8:	001a      	movs	r2, r3
 8000eda:	2100      	movs	r1, #0
 8000edc:	f003 f9f0 	bl	80042c0 <memset>
  if(huart->Instance==USART1)
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	4a33      	ldr	r2, [pc, #204]	; (8000fb4 <HAL_UART_MspInit+0xec>)
 8000ee6:	4293      	cmp	r3, r2
 8000ee8:	d160      	bne.n	8000fac <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000eea:	4b33      	ldr	r3, [pc, #204]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000eec:	699a      	ldr	r2, [r3, #24]
 8000eee:	4b32      	ldr	r3, [pc, #200]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000ef0:	2180      	movs	r1, #128	; 0x80
 8000ef2:	01c9      	lsls	r1, r1, #7
 8000ef4:	430a      	orrs	r2, r1
 8000ef6:	619a      	str	r2, [r3, #24]
 8000ef8:	4b2f      	ldr	r3, [pc, #188]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000efa:	699a      	ldr	r2, [r3, #24]
 8000efc:	2380      	movs	r3, #128	; 0x80
 8000efe:	01db      	lsls	r3, r3, #7
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
 8000f04:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f06:	4b2c      	ldr	r3, [pc, #176]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000f08:	695a      	ldr	r2, [r3, #20]
 8000f0a:	4b2b      	ldr	r3, [pc, #172]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000f0c:	2180      	movs	r1, #128	; 0x80
 8000f0e:	0289      	lsls	r1, r1, #10
 8000f10:	430a      	orrs	r2, r1
 8000f12:	615a      	str	r2, [r3, #20]
 8000f14:	4b28      	ldr	r3, [pc, #160]	; (8000fb8 <HAL_UART_MspInit+0xf0>)
 8000f16:	695a      	ldr	r2, [r3, #20]
 8000f18:	2380      	movs	r3, #128	; 0x80
 8000f1a:	029b      	lsls	r3, r3, #10
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000f22:	0021      	movs	r1, r4
 8000f24:	187b      	adds	r3, r7, r1
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f2a:	187b      	adds	r3, r7, r1
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f30:	187b      	adds	r3, r7, r1
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000f36:	187b      	adds	r3, r7, r1
 8000f38:	2203      	movs	r2, #3
 8000f3a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8000f3c:	187b      	adds	r3, r7, r1
 8000f3e:	2201      	movs	r2, #1
 8000f40:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f42:	187a      	adds	r2, r7, r1
 8000f44:	2390      	movs	r3, #144	; 0x90
 8000f46:	05db      	lsls	r3, r3, #23
 8000f48:	0011      	movs	r1, r2
 8000f4a:	0018      	movs	r0, r3
 8000f4c:	f000 fcd6 	bl	80018fc <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8000f50:	4b1a      	ldr	r3, [pc, #104]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f52:	4a1b      	ldr	r2, [pc, #108]	; (8000fc0 <HAL_UART_MspInit+0xf8>)
 8000f54:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000f56:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f58:	2210      	movs	r2, #16
 8000f5a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f5c:	4b17      	ldr	r3, [pc, #92]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000f62:	4b16      	ldr	r3, [pc, #88]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f64:	2280      	movs	r2, #128	; 0x80
 8000f66:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f68:	4b14      	ldr	r3, [pc, #80]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f6e:	4b13      	ldr	r3, [pc, #76]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8000f74:	4b11      	ldr	r3, [pc, #68]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000f7a:	4b10      	ldr	r3, [pc, #64]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8000f80:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f82:	0018      	movs	r0, r3
 8000f84:	f000 fb36 	bl	80015f4 <HAL_DMA_Init>
 8000f88:	1e03      	subs	r3, r0, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8000f8c:	f7ff fe8c 	bl	8000ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	4a0a      	ldr	r2, [pc, #40]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f94:	66da      	str	r2, [r3, #108]	; 0x6c
 8000f96:	4b09      	ldr	r3, [pc, #36]	; (8000fbc <HAL_UART_MspInit+0xf4>)
 8000f98:	687a      	ldr	r2, [r7, #4]
 8000f9a:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	2100      	movs	r1, #0
 8000fa0:	201b      	movs	r0, #27
 8000fa2:	f000 faf5 	bl	8001590 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000fa6:	201b      	movs	r0, #27
 8000fa8:	f000 fb07 	bl	80015ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000fac:	46c0      	nop			; (mov r8, r8)
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	b00b      	add	sp, #44	; 0x2c
 8000fb2:	bd90      	pop	{r4, r7, pc}
 8000fb4:	40013800 	.word	0x40013800
 8000fb8:	40021000 	.word	0x40021000
 8000fbc:	20000180 	.word	0x20000180
 8000fc0:	4002001c 	.word	0x4002001c

08000fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000fc8:	e7fe      	b.n	8000fc8 <NMI_Handler+0x4>

08000fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fce:	e7fe      	b.n	8000fce <HardFault_Handler+0x4>

08000fd0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}

08000fda <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000fda:	b580      	push	{r7, lr}
 8000fdc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fde:	46c0      	nop			; (mov r8, r8)
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fe8:	f000 f8bc 	bl	8001164 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fec:	46c0      	nop			; (mov r8, r8)
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}

08000ff2 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000ff2:	b580      	push	{r7, lr}
 8000ff4:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000ff6:	46c0      	nop			; (mov r8, r8)
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}

08000ffc <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <DMA1_Channel2_3_IRQHandler+0x14>)
 8001002:	0018      	movs	r0, r3
 8001004:	f000 fbbb 	bl	800177e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8001008:	46c0      	nop			; (mov r8, r8)
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	20000180 	.word	0x20000180

08001014 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001018:	4b03      	ldr	r3, [pc, #12]	; (8001028 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 800101a:	0018      	movs	r0, r3
 800101c:	f001 fcee 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001020:	46c0      	nop			; (mov r8, r8)
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	46c0      	nop			; (mov r8, r8)
 8001028:	2000006c 	.word	0x2000006c

0800102c <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001030:	4b03      	ldr	r3, [pc, #12]	; (8001040 <TIM1_CC_IRQHandler+0x14>)
 8001032:	0018      	movs	r0, r3
 8001034:	f001 fce2 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001038:	46c0      	nop			; (mov r8, r8)
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	46c0      	nop			; (mov r8, r8)
 8001040:	2000006c 	.word	0x2000006c

08001044 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001048:	4b03      	ldr	r3, [pc, #12]	; (8001058 <TIM3_IRQHandler+0x14>)
 800104a:	0018      	movs	r0, r3
 800104c:	f001 fcd6 	bl	80029fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001050:	46c0      	nop			; (mov r8, r8)
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}
 8001056:	46c0      	nop			; (mov r8, r8)
 8001058:	200000b4 	.word	0x200000b4

0800105c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001060:	4b03      	ldr	r3, [pc, #12]	; (8001070 <USART1_IRQHandler+0x14>)
 8001062:	0018      	movs	r0, r3
 8001064:	f002 faa6 	bl	80035b4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001068:	46c0      	nop			; (mov r8, r8)
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}
 800106e:	46c0      	nop			; (mov r8, r8)
 8001070:	200000fc 	.word	0x200000fc

08001074 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001078:	46c0      	nop			; (mov r8, r8)
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001080:	480d      	ldr	r0, [pc, #52]	; (80010b8 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001082:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001084:	480d      	ldr	r0, [pc, #52]	; (80010bc <LoopForever+0x6>)
  ldr r1, =_edata
 8001086:	490e      	ldr	r1, [pc, #56]	; (80010c0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001088:	4a0e      	ldr	r2, [pc, #56]	; (80010c4 <LoopForever+0xe>)
  movs r3, #0
 800108a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800108c:	e002      	b.n	8001094 <LoopCopyDataInit>

0800108e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800108e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001090:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001092:	3304      	adds	r3, #4

08001094 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001094:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001096:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001098:	d3f9      	bcc.n	800108e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800109a:	4a0b      	ldr	r2, [pc, #44]	; (80010c8 <LoopForever+0x12>)
  ldr r4, =_ebss
 800109c:	4c0b      	ldr	r4, [pc, #44]	; (80010cc <LoopForever+0x16>)
  movs r3, #0
 800109e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010a0:	e001      	b.n	80010a6 <LoopFillZerobss>

080010a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010a4:	3204      	adds	r2, #4

080010a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010a8:	d3fb      	bcc.n	80010a2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 80010aa:	f7ff ffe3 	bl	8001074 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 80010ae:	f003 f8e3 	bl	8004278 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80010b2:	f7ff f8b5 	bl	8000220 <main>

080010b6 <LoopForever>:

LoopForever:
    b LoopForever
 80010b6:	e7fe      	b.n	80010b6 <LoopForever>
  ldr   r0, =_estack
 80010b8:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 80010bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80010c0:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80010c4:	08004328 	.word	0x08004328
  ldr r2, =_sbss
 80010c8:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80010cc:	20000284 	.word	0x20000284

080010d0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80010d0:	e7fe      	b.n	80010d0 <ADC1_IRQHandler>
	...

080010d4 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80010d8:	4b07      	ldr	r3, [pc, #28]	; (80010f8 <HAL_Init+0x24>)
 80010da:	681a      	ldr	r2, [r3, #0]
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <HAL_Init+0x24>)
 80010de:	2110      	movs	r1, #16
 80010e0:	430a      	orrs	r2, r1
 80010e2:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80010e4:	2003      	movs	r0, #3
 80010e6:	f000 f809 	bl	80010fc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80010ea:	f7ff fde3 	bl	8000cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80010ee:	2300      	movs	r3, #0
}
 80010f0:	0018      	movs	r0, r3
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	40022000 	.word	0x40022000

080010fc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010fc:	b590      	push	{r4, r7, lr}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001104:	4b14      	ldr	r3, [pc, #80]	; (8001158 <HAL_InitTick+0x5c>)
 8001106:	681c      	ldr	r4, [r3, #0]
 8001108:	4b14      	ldr	r3, [pc, #80]	; (800115c <HAL_InitTick+0x60>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	0019      	movs	r1, r3
 800110e:	23fa      	movs	r3, #250	; 0xfa
 8001110:	0098      	lsls	r0, r3, #2
 8001112:	f7fe fff9 	bl	8000108 <__udivsi3>
 8001116:	0003      	movs	r3, r0
 8001118:	0019      	movs	r1, r3
 800111a:	0020      	movs	r0, r4
 800111c:	f7fe fff4 	bl	8000108 <__udivsi3>
 8001120:	0003      	movs	r3, r0
 8001122:	0018      	movs	r0, r3
 8001124:	f000 fa59 	bl	80015da <HAL_SYSTICK_Config>
 8001128:	1e03      	subs	r3, r0, #0
 800112a:	d001      	beq.n	8001130 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e00f      	b.n	8001150 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2b03      	cmp	r3, #3
 8001134:	d80b      	bhi.n	800114e <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001136:	6879      	ldr	r1, [r7, #4]
 8001138:	2301      	movs	r3, #1
 800113a:	425b      	negs	r3, r3
 800113c:	2200      	movs	r2, #0
 800113e:	0018      	movs	r0, r3
 8001140:	f000 fa26 	bl	8001590 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001144:	4b06      	ldr	r3, [pc, #24]	; (8001160 <HAL_InitTick+0x64>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800114a:	2300      	movs	r3, #0
 800114c:	e000      	b.n	8001150 <HAL_InitTick+0x54>
    return HAL_ERROR;
 800114e:	2301      	movs	r3, #1
}
 8001150:	0018      	movs	r0, r3
 8001152:	46bd      	mov	sp, r7
 8001154:	b003      	add	sp, #12
 8001156:	bd90      	pop	{r4, r7, pc}
 8001158:	20000004 	.word	0x20000004
 800115c:	2000000c 	.word	0x2000000c
 8001160:	20000008 	.word	0x20000008

08001164 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001168:	4b05      	ldr	r3, [pc, #20]	; (8001180 <HAL_IncTick+0x1c>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	001a      	movs	r2, r3
 800116e:	4b05      	ldr	r3, [pc, #20]	; (8001184 <HAL_IncTick+0x20>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	18d2      	adds	r2, r2, r3
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_IncTick+0x20>)
 8001176:	601a      	str	r2, [r3, #0]
}
 8001178:	46c0      	nop			; (mov r8, r8)
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	46c0      	nop			; (mov r8, r8)
 8001180:	2000000c 	.word	0x2000000c
 8001184:	20000280 	.word	0x20000280

08001188 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	af00      	add	r7, sp, #0
  return uwTick;
 800118c:	4b02      	ldr	r3, [pc, #8]	; (8001198 <HAL_GetTick+0x10>)
 800118e:	681b      	ldr	r3, [r3, #0]
}
 8001190:	0018      	movs	r0, r3
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	46c0      	nop			; (mov r8, r8)
 8001198:	20000280 	.word	0x20000280

0800119c <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 80011a0:	4b04      	ldr	r3, [pc, #16]	; (80011b4 <HAL_SuspendTick+0x18>)
 80011a2:	681a      	ldr	r2, [r3, #0]
 80011a4:	4b03      	ldr	r3, [pc, #12]	; (80011b4 <HAL_SuspendTick+0x18>)
 80011a6:	2102      	movs	r1, #2
 80011a8:	438a      	bics	r2, r1
 80011aa:	601a      	str	r2, [r3, #0]
}
 80011ac:	46c0      	nop			; (mov r8, r8)
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	46c0      	nop			; (mov r8, r8)
 80011b4:	e000e010 	.word	0xe000e010

080011b8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b084      	sub	sp, #16
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011c0:	230f      	movs	r3, #15
 80011c2:	18fb      	adds	r3, r7, r3
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d101      	bne.n	80011d6 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 80011d2:	2301      	movs	r3, #1
 80011d4:	e125      	b.n	8001422 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d10a      	bne.n	80011f4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2200      	movs	r2, #0
 80011e2:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	2234      	movs	r2, #52	; 0x34
 80011e8:	2100      	movs	r1, #0
 80011ea:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	0018      	movs	r0, r3
 80011f0:	f7ff fd8c 	bl	8000d0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011f8:	2210      	movs	r2, #16
 80011fa:	4013      	ands	r3, r2
 80011fc:	d000      	beq.n	8001200 <HAL_ADC_Init+0x48>
 80011fe:	e103      	b.n	8001408 <HAL_ADC_Init+0x250>
 8001200:	230f      	movs	r3, #15
 8001202:	18fb      	adds	r3, r7, r3
 8001204:	781b      	ldrb	r3, [r3, #0]
 8001206:	2b00      	cmp	r3, #0
 8001208:	d000      	beq.n	800120c <HAL_ADC_Init+0x54>
 800120a:	e0fd      	b.n	8001408 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	689b      	ldr	r3, [r3, #8]
 8001212:	2204      	movs	r2, #4
 8001214:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001216:	d000      	beq.n	800121a <HAL_ADC_Init+0x62>
 8001218:	e0f6      	b.n	8001408 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121e:	4a83      	ldr	r2, [pc, #524]	; (800142c <HAL_ADC_Init+0x274>)
 8001220:	4013      	ands	r3, r2
 8001222:	2202      	movs	r2, #2
 8001224:	431a      	orrs	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	689b      	ldr	r3, [r3, #8]
 8001230:	2203      	movs	r2, #3
 8001232:	4013      	ands	r3, r2
 8001234:	2b01      	cmp	r3, #1
 8001236:	d112      	bne.n	800125e <HAL_ADC_Init+0xa6>
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	2201      	movs	r2, #1
 8001240:	4013      	ands	r3, r2
 8001242:	2b01      	cmp	r3, #1
 8001244:	d009      	beq.n	800125a <HAL_ADC_Init+0xa2>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	68da      	ldr	r2, [r3, #12]
 800124c:	2380      	movs	r3, #128	; 0x80
 800124e:	021b      	lsls	r3, r3, #8
 8001250:	401a      	ands	r2, r3
 8001252:	2380      	movs	r3, #128	; 0x80
 8001254:	021b      	lsls	r3, r3, #8
 8001256:	429a      	cmp	r2, r3
 8001258:	d101      	bne.n	800125e <HAL_ADC_Init+0xa6>
 800125a:	2301      	movs	r3, #1
 800125c:	e000      	b.n	8001260 <HAL_ADC_Init+0xa8>
 800125e:	2300      	movs	r3, #0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d116      	bne.n	8001292 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	2218      	movs	r2, #24
 800126c:	4393      	bics	r3, r2
 800126e:	0019      	movs	r1, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	430a      	orrs	r2, r1
 800127a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	691b      	ldr	r3, [r3, #16]
 8001282:	009b      	lsls	r3, r3, #2
 8001284:	0899      	lsrs	r1, r3, #2
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	430a      	orrs	r2, r1
 8001290:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	68da      	ldr	r2, [r3, #12]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	4964      	ldr	r1, [pc, #400]	; (8001430 <HAL_ADC_Init+0x278>)
 800129e:	400a      	ands	r2, r1
 80012a0:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	7e1b      	ldrb	r3, [r3, #24]
 80012a6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	7e5b      	ldrb	r3, [r3, #25]
 80012ac:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ae:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	7e9b      	ldrb	r3, [r3, #26]
 80012b4:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 80012b6:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d002      	beq.n	80012c6 <HAL_ADC_Init+0x10e>
 80012c0:	2380      	movs	r3, #128	; 0x80
 80012c2:	015b      	lsls	r3, r3, #5
 80012c4:	e000      	b.n	80012c8 <HAL_ADC_Init+0x110>
 80012c6:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 80012c8:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 80012ce:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	691b      	ldr	r3, [r3, #16]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d101      	bne.n	80012dc <HAL_ADC_Init+0x124>
 80012d8:	2304      	movs	r3, #4
 80012da:	e000      	b.n	80012de <HAL_ADC_Init+0x126>
 80012dc:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 80012de:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	2124      	movs	r1, #36	; 0x24
 80012e4:	5c5b      	ldrb	r3, [r3, r1]
 80012e6:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 80012e8:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80012ea:	68ba      	ldr	r2, [r7, #8]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	7edb      	ldrb	r3, [r3, #27]
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d115      	bne.n	8001324 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	7e9b      	ldrb	r3, [r3, #26]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d105      	bne.n	800130c <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001300:	68bb      	ldr	r3, [r7, #8]
 8001302:	2280      	movs	r2, #128	; 0x80
 8001304:	0252      	lsls	r2, r2, #9
 8001306:	4313      	orrs	r3, r2
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	e00b      	b.n	8001324 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001310:	2220      	movs	r2, #32
 8001312:	431a      	orrs	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800131c:	2201      	movs	r2, #1
 800131e:	431a      	orrs	r2, r3
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	69da      	ldr	r2, [r3, #28]
 8001328:	23c2      	movs	r3, #194	; 0xc2
 800132a:	33ff      	adds	r3, #255	; 0xff
 800132c:	429a      	cmp	r2, r3
 800132e:	d007      	beq.n	8001340 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001338:	4313      	orrs	r3, r2
 800133a:	68ba      	ldr	r2, [r7, #8]
 800133c:	4313      	orrs	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	68d9      	ldr	r1, [r3, #12]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	68ba      	ldr	r2, [r7, #8]
 800134c:	430a      	orrs	r2, r1
 800134e:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001354:	2380      	movs	r3, #128	; 0x80
 8001356:	055b      	lsls	r3, r3, #21
 8001358:	429a      	cmp	r2, r3
 800135a:	d01b      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001360:	2b01      	cmp	r3, #1
 8001362:	d017      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001368:	2b02      	cmp	r3, #2
 800136a:	d013      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001370:	2b03      	cmp	r3, #3
 8001372:	d00f      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001378:	2b04      	cmp	r3, #4
 800137a:	d00b      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001380:	2b05      	cmp	r3, #5
 8001382:	d007      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001388:	2b06      	cmp	r3, #6
 800138a:	d003      	beq.n	8001394 <HAL_ADC_Init+0x1dc>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001390:	2b07      	cmp	r3, #7
 8001392:	d112      	bne.n	80013ba <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	695a      	ldr	r2, [r3, #20]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	2107      	movs	r1, #7
 80013a0:	438a      	bics	r2, r1
 80013a2:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	6959      	ldr	r1, [r3, #20]
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80013ae:	2207      	movs	r2, #7
 80013b0:	401a      	ands	r2, r3
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	430a      	orrs	r2, r1
 80013b8:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	68db      	ldr	r3, [r3, #12]
 80013c0:	4a1c      	ldr	r2, [pc, #112]	; (8001434 <HAL_ADC_Init+0x27c>)
 80013c2:	4013      	ands	r3, r2
 80013c4:	68ba      	ldr	r2, [r7, #8]
 80013c6:	429a      	cmp	r2, r3
 80013c8:	d10b      	bne.n	80013e2 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	2200      	movs	r2, #0
 80013ce:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013d4:	2203      	movs	r2, #3
 80013d6:	4393      	bics	r3, r2
 80013d8:	2201      	movs	r2, #1
 80013da:	431a      	orrs	r2, r3
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80013e0:	e01c      	b.n	800141c <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80013e6:	2212      	movs	r2, #18
 80013e8:	4393      	bics	r3, r2
 80013ea:	2210      	movs	r2, #16
 80013ec:	431a      	orrs	r2, r3
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f6:	2201      	movs	r2, #1
 80013f8:	431a      	orrs	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80013fe:	230f      	movs	r3, #15
 8001400:	18fb      	adds	r3, r7, r3
 8001402:	2201      	movs	r2, #1
 8001404:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001406:	e009      	b.n	800141c <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800140c:	2210      	movs	r2, #16
 800140e:	431a      	orrs	r2, r3
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001414:	230f      	movs	r3, #15
 8001416:	18fb      	adds	r3, r7, r3
 8001418:	2201      	movs	r2, #1
 800141a:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800141c:	230f      	movs	r3, #15
 800141e:	18fb      	adds	r3, r7, r3
 8001420:	781b      	ldrb	r3, [r3, #0]
}
 8001422:	0018      	movs	r0, r3
 8001424:	46bd      	mov	sp, r7
 8001426:	b004      	add	sp, #16
 8001428:	bd80      	pop	{r7, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	fffffefd 	.word	0xfffffefd
 8001430:	fffe0219 	.word	0xfffe0219
 8001434:	833fffe7 	.word	0x833fffe7

08001438 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	0002      	movs	r2, r0
 8001440:	1dfb      	adds	r3, r7, #7
 8001442:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001444:	1dfb      	adds	r3, r7, #7
 8001446:	781b      	ldrb	r3, [r3, #0]
 8001448:	2b7f      	cmp	r3, #127	; 0x7f
 800144a:	d809      	bhi.n	8001460 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	781b      	ldrb	r3, [r3, #0]
 8001450:	001a      	movs	r2, r3
 8001452:	231f      	movs	r3, #31
 8001454:	401a      	ands	r2, r3
 8001456:	4b04      	ldr	r3, [pc, #16]	; (8001468 <__NVIC_EnableIRQ+0x30>)
 8001458:	2101      	movs	r1, #1
 800145a:	4091      	lsls	r1, r2
 800145c:	000a      	movs	r2, r1
 800145e:	601a      	str	r2, [r3, #0]
  }
}
 8001460:	46c0      	nop			; (mov r8, r8)
 8001462:	46bd      	mov	sp, r7
 8001464:	b002      	add	sp, #8
 8001466:	bd80      	pop	{r7, pc}
 8001468:	e000e100 	.word	0xe000e100

0800146c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800146c:	b590      	push	{r4, r7, lr}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	0002      	movs	r2, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	1dfb      	adds	r3, r7, #7
 8001478:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800147a:	1dfb      	adds	r3, r7, #7
 800147c:	781b      	ldrb	r3, [r3, #0]
 800147e:	2b7f      	cmp	r3, #127	; 0x7f
 8001480:	d828      	bhi.n	80014d4 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001482:	4a2f      	ldr	r2, [pc, #188]	; (8001540 <__NVIC_SetPriority+0xd4>)
 8001484:	1dfb      	adds	r3, r7, #7
 8001486:	781b      	ldrb	r3, [r3, #0]
 8001488:	b25b      	sxtb	r3, r3
 800148a:	089b      	lsrs	r3, r3, #2
 800148c:	33c0      	adds	r3, #192	; 0xc0
 800148e:	009b      	lsls	r3, r3, #2
 8001490:	589b      	ldr	r3, [r3, r2]
 8001492:	1dfa      	adds	r2, r7, #7
 8001494:	7812      	ldrb	r2, [r2, #0]
 8001496:	0011      	movs	r1, r2
 8001498:	2203      	movs	r2, #3
 800149a:	400a      	ands	r2, r1
 800149c:	00d2      	lsls	r2, r2, #3
 800149e:	21ff      	movs	r1, #255	; 0xff
 80014a0:	4091      	lsls	r1, r2
 80014a2:	000a      	movs	r2, r1
 80014a4:	43d2      	mvns	r2, r2
 80014a6:	401a      	ands	r2, r3
 80014a8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	019b      	lsls	r3, r3, #6
 80014ae:	22ff      	movs	r2, #255	; 0xff
 80014b0:	401a      	ands	r2, r3
 80014b2:	1dfb      	adds	r3, r7, #7
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	0018      	movs	r0, r3
 80014b8:	2303      	movs	r3, #3
 80014ba:	4003      	ands	r3, r0
 80014bc:	00db      	lsls	r3, r3, #3
 80014be:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014c0:	481f      	ldr	r0, [pc, #124]	; (8001540 <__NVIC_SetPriority+0xd4>)
 80014c2:	1dfb      	adds	r3, r7, #7
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	b25b      	sxtb	r3, r3
 80014c8:	089b      	lsrs	r3, r3, #2
 80014ca:	430a      	orrs	r2, r1
 80014cc:	33c0      	adds	r3, #192	; 0xc0
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 80014d2:	e031      	b.n	8001538 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d4:	4a1b      	ldr	r2, [pc, #108]	; (8001544 <__NVIC_SetPriority+0xd8>)
 80014d6:	1dfb      	adds	r3, r7, #7
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	0019      	movs	r1, r3
 80014dc:	230f      	movs	r3, #15
 80014de:	400b      	ands	r3, r1
 80014e0:	3b08      	subs	r3, #8
 80014e2:	089b      	lsrs	r3, r3, #2
 80014e4:	3306      	adds	r3, #6
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	18d3      	adds	r3, r2, r3
 80014ea:	3304      	adds	r3, #4
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	1dfa      	adds	r2, r7, #7
 80014f0:	7812      	ldrb	r2, [r2, #0]
 80014f2:	0011      	movs	r1, r2
 80014f4:	2203      	movs	r2, #3
 80014f6:	400a      	ands	r2, r1
 80014f8:	00d2      	lsls	r2, r2, #3
 80014fa:	21ff      	movs	r1, #255	; 0xff
 80014fc:	4091      	lsls	r1, r2
 80014fe:	000a      	movs	r2, r1
 8001500:	43d2      	mvns	r2, r2
 8001502:	401a      	ands	r2, r3
 8001504:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	019b      	lsls	r3, r3, #6
 800150a:	22ff      	movs	r2, #255	; 0xff
 800150c:	401a      	ands	r2, r3
 800150e:	1dfb      	adds	r3, r7, #7
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	0018      	movs	r0, r3
 8001514:	2303      	movs	r3, #3
 8001516:	4003      	ands	r3, r0
 8001518:	00db      	lsls	r3, r3, #3
 800151a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800151c:	4809      	ldr	r0, [pc, #36]	; (8001544 <__NVIC_SetPriority+0xd8>)
 800151e:	1dfb      	adds	r3, r7, #7
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	001c      	movs	r4, r3
 8001524:	230f      	movs	r3, #15
 8001526:	4023      	ands	r3, r4
 8001528:	3b08      	subs	r3, #8
 800152a:	089b      	lsrs	r3, r3, #2
 800152c:	430a      	orrs	r2, r1
 800152e:	3306      	adds	r3, #6
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	18c3      	adds	r3, r0, r3
 8001534:	3304      	adds	r3, #4
 8001536:	601a      	str	r2, [r3, #0]
}
 8001538:	46c0      	nop			; (mov r8, r8)
 800153a:	46bd      	mov	sp, r7
 800153c:	b003      	add	sp, #12
 800153e:	bd90      	pop	{r4, r7, pc}
 8001540:	e000e100 	.word	0xe000e100
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b082      	sub	sp, #8
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	1e5a      	subs	r2, r3, #1
 8001554:	2380      	movs	r3, #128	; 0x80
 8001556:	045b      	lsls	r3, r3, #17
 8001558:	429a      	cmp	r2, r3
 800155a:	d301      	bcc.n	8001560 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800155c:	2301      	movs	r3, #1
 800155e:	e010      	b.n	8001582 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001560:	4b0a      	ldr	r3, [pc, #40]	; (800158c <SysTick_Config+0x44>)
 8001562:	687a      	ldr	r2, [r7, #4]
 8001564:	3a01      	subs	r2, #1
 8001566:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001568:	2301      	movs	r3, #1
 800156a:	425b      	negs	r3, r3
 800156c:	2103      	movs	r1, #3
 800156e:	0018      	movs	r0, r3
 8001570:	f7ff ff7c 	bl	800146c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001574:	4b05      	ldr	r3, [pc, #20]	; (800158c <SysTick_Config+0x44>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800157a:	4b04      	ldr	r3, [pc, #16]	; (800158c <SysTick_Config+0x44>)
 800157c:	2207      	movs	r2, #7
 800157e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001580:	2300      	movs	r3, #0
}
 8001582:	0018      	movs	r0, r3
 8001584:	46bd      	mov	sp, r7
 8001586:	b002      	add	sp, #8
 8001588:	bd80      	pop	{r7, pc}
 800158a:	46c0      	nop			; (mov r8, r8)
 800158c:	e000e010 	.word	0xe000e010

08001590 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001590:	b580      	push	{r7, lr}
 8001592:	b084      	sub	sp, #16
 8001594:	af00      	add	r7, sp, #0
 8001596:	60b9      	str	r1, [r7, #8]
 8001598:	607a      	str	r2, [r7, #4]
 800159a:	210f      	movs	r1, #15
 800159c:	187b      	adds	r3, r7, r1
 800159e:	1c02      	adds	r2, r0, #0
 80015a0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 80015a2:	68ba      	ldr	r2, [r7, #8]
 80015a4:	187b      	adds	r3, r7, r1
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	b25b      	sxtb	r3, r3
 80015aa:	0011      	movs	r1, r2
 80015ac:	0018      	movs	r0, r3
 80015ae:	f7ff ff5d 	bl	800146c <__NVIC_SetPriority>
}
 80015b2:	46c0      	nop			; (mov r8, r8)
 80015b4:	46bd      	mov	sp, r7
 80015b6:	b004      	add	sp, #16
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b082      	sub	sp, #8
 80015be:	af00      	add	r7, sp, #0
 80015c0:	0002      	movs	r2, r0
 80015c2:	1dfb      	adds	r3, r7, #7
 80015c4:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015c6:	1dfb      	adds	r3, r7, #7
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	b25b      	sxtb	r3, r3
 80015cc:	0018      	movs	r0, r3
 80015ce:	f7ff ff33 	bl	8001438 <__NVIC_EnableIRQ>
}
 80015d2:	46c0      	nop			; (mov r8, r8)
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}

080015da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80015da:	b580      	push	{r7, lr}
 80015dc:	b082      	sub	sp, #8
 80015de:	af00      	add	r7, sp, #0
 80015e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	0018      	movs	r0, r3
 80015e6:	f7ff ffaf 	bl	8001548 <SysTick_Config>
 80015ea:	0003      	movs	r3, r0
}
 80015ec:	0018      	movs	r0, r3
 80015ee:	46bd      	mov	sp, r7
 80015f0:	b002      	add	sp, #8
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{ 
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b084      	sub	sp, #16
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80015fc:	2300      	movs	r3, #0
 80015fe:	60fb      	str	r3, [r7, #12]
  
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d101      	bne.n	800160a <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001606:	2301      	movs	r3, #1
 8001608:	e036      	b.n	8001678 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	2221      	movs	r2, #33	; 0x21
 800160e:	2102      	movs	r1, #2
 8001610:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	60fb      	str	r3, [r7, #12]
  
  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_DMA_Init+0x8c>)
 800161e:	4013      	ands	r3, r2
 8001620:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));
  
  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 800162a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	68db      	ldr	r3, [r3, #12]
 8001630:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001636:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	695b      	ldr	r3, [r3, #20]
 800163c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001642:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	69db      	ldr	r3, [r3, #28]
 8001648:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800164a:	68fa      	ldr	r2, [r7, #12]
 800164c:	4313      	orrs	r3, r2
 800164e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;  
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	68fa      	ldr	r2, [r7, #12]
 8001656:	601a      	str	r2, [r3, #0]
  
  /* Initialize DmaBaseAddress and ChannelIndex parameters used 
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	0018      	movs	r0, r3
 800165c:	f000 f932 	bl	80018c4 <DMA_CalcBaseAndBitshift>
  
  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2200      	movs	r2, #0
 8001664:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	2221      	movs	r2, #33	; 0x21
 800166a:	2101      	movs	r1, #1
 800166c:	5499      	strb	r1, [r3, r2]
  
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2220      	movs	r2, #32
 8001672:	2100      	movs	r1, #0
 8001674:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 8001676:	2300      	movs	r3, #0
}  
 8001678:	0018      	movs	r0, r3
 800167a:	46bd      	mov	sp, r7
 800167c:	b004      	add	sp, #16
 800167e:	bd80      	pop	{r7, pc}
 8001680:	ffffc00f 	.word	0xffffc00f

08001684 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2221      	movs	r2, #33	; 0x21
 8001690:	5c9b      	ldrb	r3, [r3, r2]
 8001692:	b2db      	uxtb	r3, r3
 8001694:	2b02      	cmp	r3, #2
 8001696:	d008      	beq.n	80016aa <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2204      	movs	r2, #4
 800169c:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	2220      	movs	r2, #32
 80016a2:	2100      	movs	r1, #0
 80016a4:	5499      	strb	r1, [r3, r2]
    
    return HAL_ERROR;
 80016a6:	2301      	movs	r3, #1
 80016a8:	e020      	b.n	80016ec <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	681a      	ldr	r2, [r3, #0]
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	210e      	movs	r1, #14
 80016b6:	438a      	bics	r2, r1
 80016b8:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	2101      	movs	r1, #1
 80016c6:	438a      	bics	r2, r1
 80016c8:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d2:	2101      	movs	r1, #1
 80016d4:	4091      	lsls	r1, r2
 80016d6:	000a      	movs	r2, r1
 80016d8:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2221      	movs	r2, #33	; 0x21
 80016de:	2101      	movs	r1, #1
 80016e0:	5499      	strb	r1, [r3, r2]
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	2220      	movs	r2, #32
 80016e6:	2100      	movs	r1, #0
 80016e8:	5499      	strb	r1, [r3, r2]
  
  return HAL_OK;
 80016ea:	2300      	movs	r3, #0
}
 80016ec:	0018      	movs	r0, r3
 80016ee:	46bd      	mov	sp, r7
 80016f0:	b002      	add	sp, #8
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fc:	210f      	movs	r1, #15
 80016fe:	187b      	adds	r3, r7, r1
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	2221      	movs	r2, #33	; 0x21
 8001708:	5c9b      	ldrb	r3, [r3, r2]
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d006      	beq.n	800171e <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	2204      	movs	r2, #4
 8001714:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001716:	187b      	adds	r3, r7, r1
 8001718:	2201      	movs	r2, #1
 800171a:	701a      	strb	r2, [r3, #0]
 800171c:	e028      	b.n	8001770 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	210e      	movs	r1, #14
 800172a:	438a      	bics	r2, r1
 800172c:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	681a      	ldr	r2, [r3, #0]
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2101      	movs	r1, #1
 800173a:	438a      	bics	r2, r1
 800173c:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001746:	2101      	movs	r1, #1
 8001748:	4091      	lsls	r1, r2
 800174a:	000a      	movs	r2, r1
 800174c:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2221      	movs	r2, #33	; 0x21
 8001752:	2101      	movs	r1, #1
 8001754:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	2220      	movs	r2, #32
 800175a:	2100      	movs	r1, #0
 800175c:	5499      	strb	r1, [r3, r2]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	2b00      	cmp	r3, #0
 8001764:	d004      	beq.n	8001770 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	0010      	movs	r0, r2
 800176e:	4798      	blx	r3
    } 
  }
  return status;
 8001770:	230f      	movs	r3, #15
 8001772:	18fb      	adds	r3, r7, r3
 8001774:	781b      	ldrb	r3, [r3, #0]
}
 8001776:	0018      	movs	r0, r3
 8001778:	46bd      	mov	sp, r7
 800177a:	b004      	add	sp, #16
 800177c:	bd80      	pop	{r7, pc}

0800177e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800177e:	b580      	push	{r7, lr}
 8001780:	b084      	sub	sp, #16
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	60bb      	str	r3, [r7, #8]
          
  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179a:	2204      	movs	r2, #4
 800179c:	409a      	lsls	r2, r3
 800179e:	0013      	movs	r3, r2
 80017a0:	68fa      	ldr	r2, [r7, #12]
 80017a2:	4013      	ands	r3, r2
 80017a4:	d024      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x72>
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	2204      	movs	r2, #4
 80017aa:	4013      	ands	r3, r2
 80017ac:	d020      	beq.n	80017f0 <HAL_DMA_IRQHandler+0x72>
  {
  	/* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	2220      	movs	r2, #32
 80017b6:	4013      	ands	r3, r2
 80017b8:	d107      	bne.n	80017ca <HAL_DMA_IRQHandler+0x4c>
  	{
  		/* Disable the half transfer interrupt */
  		hdma->Instance->CCR &= ~DMA_IT_HT;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	681a      	ldr	r2, [r3, #0]
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2104      	movs	r1, #4
 80017c6:	438a      	bics	r2, r1
 80017c8:	601a      	str	r2, [r3, #0]
  	}
  	
  	/* Clear the half transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017d2:	2104      	movs	r1, #4
 80017d4:	4091      	lsls	r1, r2
 80017d6:	000a      	movs	r2, r1
 80017d8:	605a      	str	r2, [r3, #4]
  	
  	/* DMA peripheral state is not updated in Half Transfer */
  	/* State is updated only in Transfer Complete case */
  	
  	if(hdma->XferHalfCpltCallback != NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d100      	bne.n	80017e4 <HAL_DMA_IRQHandler+0x66>
 80017e2:	e06a      	b.n	80018ba <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Half transfer callback */
  		hdma->XferHalfCpltCallback(hdma);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	0010      	movs	r0, r2
 80017ec:	4798      	blx	r3
  	if(hdma->XferHalfCpltCallback != NULL)
 80017ee:	e064      	b.n	80018ba <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f4:	2202      	movs	r2, #2
 80017f6:	409a      	lsls	r2, r3
 80017f8:	0013      	movs	r3, r2
 80017fa:	68fa      	ldr	r2, [r7, #12]
 80017fc:	4013      	ands	r3, r2
 80017fe:	d02b      	beq.n	8001858 <HAL_DMA_IRQHandler+0xda>
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	2202      	movs	r2, #2
 8001804:	4013      	ands	r3, r2
 8001806:	d027      	beq.n	8001858 <HAL_DMA_IRQHandler+0xda>
  {
  	if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	2220      	movs	r2, #32
 8001810:	4013      	ands	r3, r2
 8001812:	d10b      	bne.n	800182c <HAL_DMA_IRQHandler+0xae>
  	{
  		/* Disable the transfer complete  & transfer error interrupts */
  		/* if the DMA mode is not CIRCULAR */
  		hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	681a      	ldr	r2, [r3, #0]
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	210a      	movs	r1, #10
 8001820:	438a      	bics	r2, r1
 8001822:	601a      	str	r2, [r3, #0]
  		
  		/* Change the DMA state */
  		hdma->State = HAL_DMA_STATE_READY;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	2221      	movs	r2, #33	; 0x21
 8001828:	2101      	movs	r1, #1
 800182a:	5499      	strb	r1, [r3, r2]
  	}
  	
  	/* Clear the transfer complete flag */
  	hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001834:	2102      	movs	r1, #2
 8001836:	4091      	lsls	r1, r2
 8001838:	000a      	movs	r2, r1
 800183a:	605a      	str	r2, [r3, #4]
  	
  	/* Process Unlocked */
  	__HAL_UNLOCK(hdma);
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	2220      	movs	r2, #32
 8001840:	2100      	movs	r1, #0
 8001842:	5499      	strb	r1, [r3, r2]
  	
  	if(hdma->XferCpltCallback != NULL)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001848:	2b00      	cmp	r3, #0
 800184a:	d036      	beq.n	80018ba <HAL_DMA_IRQHandler+0x13c>
  	{
  		/* Transfer complete callback */
  		hdma->XferCpltCallback(hdma);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	0010      	movs	r0, r2
 8001854:	4798      	blx	r3
  	if(hdma->XferCpltCallback != NULL)
 8001856:	e030      	b.n	80018ba <HAL_DMA_IRQHandler+0x13c>
  	}
  }
  
  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800185c:	2208      	movs	r2, #8
 800185e:	409a      	lsls	r2, r3
 8001860:	0013      	movs	r3, r2
 8001862:	68fa      	ldr	r2, [r7, #12]
 8001864:	4013      	ands	r3, r2
 8001866:	d028      	beq.n	80018ba <HAL_DMA_IRQHandler+0x13c>
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	2208      	movs	r2, #8
 800186c:	4013      	ands	r3, r2
 800186e:	d024      	beq.n	80018ba <HAL_DMA_IRQHandler+0x13c>
  {
  	/* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	681a      	ldr	r2, [r3, #0]
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	210e      	movs	r1, #14
 800187c:	438a      	bics	r2, r1
 800187e:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001888:	2101      	movs	r1, #1
 800188a:	4091      	lsls	r1, r2
 800188c:	000a      	movs	r2, r1
 800188e:	605a      	str	r2, [r3, #4]
    
    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2201      	movs	r2, #1
 8001894:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;    
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	2221      	movs	r2, #33	; 0x21
 800189a:	2101      	movs	r1, #1
 800189c:	5499      	strb	r1, [r3, r2]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2220      	movs	r2, #32
 80018a2:	2100      	movs	r1, #0
 80018a4:	5499      	strb	r1, [r3, r2]
    
    if(hdma->XferErrorCallback != NULL)
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d005      	beq.n	80018ba <HAL_DMA_IRQHandler+0x13c>
    {
    	/* Transfer error callback */
    	hdma->XferErrorCallback(hdma);
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b2:	687a      	ldr	r2, [r7, #4]
 80018b4:	0010      	movs	r0, r2
 80018b6:	4798      	blx	r3
    }
   }
}  
 80018b8:	e7ff      	b.n	80018ba <HAL_DMA_IRQHandler+0x13c>
 80018ba:	46c0      	nop			; (mov r8, r8)
 80018bc:	46bd      	mov	sp, r7
 80018be:	b004      	add	sp, #16
 80018c0:	bd80      	pop	{r7, pc}
	...

080018c4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80018c4:	b580      	push	{r7, lr}
 80018c6:	b082      	sub	sp, #8
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	4a08      	ldr	r2, [pc, #32]	; (80018f4 <DMA_CalcBaseAndBitshift+0x30>)
 80018d2:	4694      	mov	ip, r2
 80018d4:	4463      	add	r3, ip
 80018d6:	2114      	movs	r1, #20
 80018d8:	0018      	movs	r0, r3
 80018da:	f7fe fc15 	bl	8000108 <__udivsi3>
 80018de:	0003      	movs	r3, r0
 80018e0:	009a      	lsls	r2, r3, #2
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	4a03      	ldr	r2, [pc, #12]	; (80018f8 <DMA_CalcBaseAndBitshift+0x34>)
 80018ea:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80018ec:	46c0      	nop			; (mov r8, r8)
 80018ee:	46bd      	mov	sp, r7
 80018f0:	b002      	add	sp, #8
 80018f2:	bd80      	pop	{r7, pc}
 80018f4:	bffdfff8 	.word	0xbffdfff8
 80018f8:	40020000 	.word	0x40020000

080018fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
 8001904:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001906:	2300      	movs	r3, #0
 8001908:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800190a:	e14f      	b.n	8001bac <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800190c:	683b      	ldr	r3, [r7, #0]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	2101      	movs	r1, #1
 8001912:	697a      	ldr	r2, [r7, #20]
 8001914:	4091      	lsls	r1, r2
 8001916:	000a      	movs	r2, r1
 8001918:	4013      	ands	r3, r2
 800191a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	2b00      	cmp	r3, #0
 8001920:	d100      	bne.n	8001924 <HAL_GPIO_Init+0x28>
 8001922:	e140      	b.n	8001ba6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001924:	683b      	ldr	r3, [r7, #0]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	2203      	movs	r2, #3
 800192a:	4013      	ands	r3, r2
 800192c:	2b01      	cmp	r3, #1
 800192e:	d005      	beq.n	800193c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	685b      	ldr	r3, [r3, #4]
 8001934:	2203      	movs	r2, #3
 8001936:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001938:	2b02      	cmp	r3, #2
 800193a:	d130      	bne.n	800199e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	005b      	lsls	r3, r3, #1
 8001946:	2203      	movs	r2, #3
 8001948:	409a      	lsls	r2, r3
 800194a:	0013      	movs	r3, r2
 800194c:	43da      	mvns	r2, r3
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	4013      	ands	r3, r2
 8001952:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001954:	683b      	ldr	r3, [r7, #0]
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	005b      	lsls	r3, r3, #1
 800195c:	409a      	lsls	r2, r3
 800195e:	0013      	movs	r3, r2
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001972:	2201      	movs	r2, #1
 8001974:	697b      	ldr	r3, [r7, #20]
 8001976:	409a      	lsls	r2, r3
 8001978:	0013      	movs	r3, r2
 800197a:	43da      	mvns	r2, r3
 800197c:	693b      	ldr	r3, [r7, #16]
 800197e:	4013      	ands	r3, r2
 8001980:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	685b      	ldr	r3, [r3, #4]
 8001986:	091b      	lsrs	r3, r3, #4
 8001988:	2201      	movs	r2, #1
 800198a:	401a      	ands	r2, r3
 800198c:	697b      	ldr	r3, [r7, #20]
 800198e:	409a      	lsls	r2, r3
 8001990:	0013      	movs	r3, r2
 8001992:	693a      	ldr	r2, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	685b      	ldr	r3, [r3, #4]
 80019a2:	2203      	movs	r2, #3
 80019a4:	4013      	ands	r3, r2
 80019a6:	2b03      	cmp	r3, #3
 80019a8:	d017      	beq.n	80019da <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	2203      	movs	r2, #3
 80019b6:	409a      	lsls	r2, r3
 80019b8:	0013      	movs	r3, r2
 80019ba:	43da      	mvns	r2, r3
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	4013      	ands	r3, r2
 80019c0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	689a      	ldr	r2, [r3, #8]
 80019c6:	697b      	ldr	r3, [r7, #20]
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	409a      	lsls	r2, r3
 80019cc:	0013      	movs	r3, r2
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019da:	683b      	ldr	r3, [r7, #0]
 80019dc:	685b      	ldr	r3, [r3, #4]
 80019de:	2203      	movs	r2, #3
 80019e0:	4013      	ands	r3, r2
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d123      	bne.n	8001a2e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	08da      	lsrs	r2, r3, #3
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	3208      	adds	r2, #8
 80019ee:	0092      	lsls	r2, r2, #2
 80019f0:	58d3      	ldr	r3, [r2, r3]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	2207      	movs	r2, #7
 80019f8:	4013      	ands	r3, r2
 80019fa:	009b      	lsls	r3, r3, #2
 80019fc:	220f      	movs	r2, #15
 80019fe:	409a      	lsls	r2, r3
 8001a00:	0013      	movs	r3, r2
 8001a02:	43da      	mvns	r2, r3
 8001a04:	693b      	ldr	r3, [r7, #16]
 8001a06:	4013      	ands	r3, r2
 8001a08:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	691a      	ldr	r2, [r3, #16]
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	2107      	movs	r1, #7
 8001a12:	400b      	ands	r3, r1
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	409a      	lsls	r2, r3
 8001a18:	0013      	movs	r3, r2
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	4313      	orrs	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	08da      	lsrs	r2, r3, #3
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	3208      	adds	r2, #8
 8001a28:	0092      	lsls	r2, r2, #2
 8001a2a:	6939      	ldr	r1, [r7, #16]
 8001a2c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001a34:	697b      	ldr	r3, [r7, #20]
 8001a36:	005b      	lsls	r3, r3, #1
 8001a38:	2203      	movs	r2, #3
 8001a3a:	409a      	lsls	r2, r3
 8001a3c:	0013      	movs	r3, r2
 8001a3e:	43da      	mvns	r2, r3
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	4013      	ands	r3, r2
 8001a44:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a46:	683b      	ldr	r3, [r7, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2203      	movs	r2, #3
 8001a4c:	401a      	ands	r2, r3
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	409a      	lsls	r2, r3
 8001a54:	0013      	movs	r3, r2
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685a      	ldr	r2, [r3, #4]
 8001a66:	23c0      	movs	r3, #192	; 0xc0
 8001a68:	029b      	lsls	r3, r3, #10
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d100      	bne.n	8001a70 <HAL_GPIO_Init+0x174>
 8001a6e:	e09a      	b.n	8001ba6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a70:	4b54      	ldr	r3, [pc, #336]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001a72:	699a      	ldr	r2, [r3, #24]
 8001a74:	4b53      	ldr	r3, [pc, #332]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001a76:	2101      	movs	r1, #1
 8001a78:	430a      	orrs	r2, r1
 8001a7a:	619a      	str	r2, [r3, #24]
 8001a7c:	4b51      	ldr	r3, [pc, #324]	; (8001bc4 <HAL_GPIO_Init+0x2c8>)
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	2201      	movs	r2, #1
 8001a82:	4013      	ands	r3, r2
 8001a84:	60bb      	str	r3, [r7, #8]
 8001a86:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a88:	4a4f      	ldr	r2, [pc, #316]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001a8a:	697b      	ldr	r3, [r7, #20]
 8001a8c:	089b      	lsrs	r3, r3, #2
 8001a8e:	3302      	adds	r3, #2
 8001a90:	009b      	lsls	r3, r3, #2
 8001a92:	589b      	ldr	r3, [r3, r2]
 8001a94:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a96:	697b      	ldr	r3, [r7, #20]
 8001a98:	2203      	movs	r2, #3
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	009b      	lsls	r3, r3, #2
 8001a9e:	220f      	movs	r2, #15
 8001aa0:	409a      	lsls	r2, r3
 8001aa2:	0013      	movs	r3, r2
 8001aa4:	43da      	mvns	r2, r3
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001aac:	687a      	ldr	r2, [r7, #4]
 8001aae:	2390      	movs	r3, #144	; 0x90
 8001ab0:	05db      	lsls	r3, r3, #23
 8001ab2:	429a      	cmp	r2, r3
 8001ab4:	d013      	beq.n	8001ade <HAL_GPIO_Init+0x1e2>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4a44      	ldr	r2, [pc, #272]	; (8001bcc <HAL_GPIO_Init+0x2d0>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d00d      	beq.n	8001ada <HAL_GPIO_Init+0x1de>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4a43      	ldr	r2, [pc, #268]	; (8001bd0 <HAL_GPIO_Init+0x2d4>)
 8001ac2:	4293      	cmp	r3, r2
 8001ac4:	d007      	beq.n	8001ad6 <HAL_GPIO_Init+0x1da>
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	4a42      	ldr	r2, [pc, #264]	; (8001bd4 <HAL_GPIO_Init+0x2d8>)
 8001aca:	4293      	cmp	r3, r2
 8001acc:	d101      	bne.n	8001ad2 <HAL_GPIO_Init+0x1d6>
 8001ace:	2303      	movs	r3, #3
 8001ad0:	e006      	b.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ad2:	2305      	movs	r3, #5
 8001ad4:	e004      	b.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	e002      	b.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ada:	2301      	movs	r3, #1
 8001adc:	e000      	b.n	8001ae0 <HAL_GPIO_Init+0x1e4>
 8001ade:	2300      	movs	r3, #0
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	2103      	movs	r1, #3
 8001ae4:	400a      	ands	r2, r1
 8001ae6:	0092      	lsls	r2, r2, #2
 8001ae8:	4093      	lsls	r3, r2
 8001aea:	693a      	ldr	r2, [r7, #16]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001af0:	4935      	ldr	r1, [pc, #212]	; (8001bc8 <HAL_GPIO_Init+0x2cc>)
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	089b      	lsrs	r3, r3, #2
 8001af6:	3302      	adds	r3, #2
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	693a      	ldr	r2, [r7, #16]
 8001afc:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001afe:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	43da      	mvns	r2, r3
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	4013      	ands	r3, r2
 8001b0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	685a      	ldr	r2, [r3, #4]
 8001b12:	2380      	movs	r3, #128	; 0x80
 8001b14:	025b      	lsls	r3, r3, #9
 8001b16:	4013      	ands	r3, r2
 8001b18:	d003      	beq.n	8001b22 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	4313      	orrs	r3, r2
 8001b20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001b22:	4b2d      	ldr	r3, [pc, #180]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b24:	693a      	ldr	r2, [r7, #16]
 8001b26:	601a      	str	r2, [r3, #0]

        temp = EXTI->EMR;
 8001b28:	4b2b      	ldr	r3, [pc, #172]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	43da      	mvns	r2, r3
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	4013      	ands	r3, r2
 8001b36:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	685a      	ldr	r2, [r3, #4]
 8001b3c:	2380      	movs	r3, #128	; 0x80
 8001b3e:	029b      	lsls	r3, r3, #10
 8001b40:	4013      	ands	r3, r2
 8001b42:	d003      	beq.n	8001b4c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b4e:	693a      	ldr	r2, [r7, #16]
 8001b50:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001b52:	4b21      	ldr	r3, [pc, #132]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	4013      	ands	r3, r2
 8001b60:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685a      	ldr	r2, [r3, #4]
 8001b66:	2380      	movs	r3, #128	; 0x80
 8001b68:	035b      	lsls	r3, r3, #13
 8001b6a:	4013      	ands	r3, r2
 8001b6c:	d003      	beq.n	8001b76 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8001b6e:	693a      	ldr	r2, [r7, #16]
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	4313      	orrs	r3, r2
 8001b74:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001b76:	4b18      	ldr	r3, [pc, #96]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b78:	693a      	ldr	r2, [r7, #16]
 8001b7a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8001b7c:	4b16      	ldr	r3, [pc, #88]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001b7e:	68db      	ldr	r3, [r3, #12]
 8001b80:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	039b      	lsls	r3, r3, #14
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8001b98:	693a      	ldr	r2, [r7, #16]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001ba0:	4b0d      	ldr	r3, [pc, #52]	; (8001bd8 <HAL_GPIO_Init+0x2dc>)
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	60da      	str	r2, [r3, #12]
      }
    }

    position++;
 8001ba6:	697b      	ldr	r3, [r7, #20]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	697b      	ldr	r3, [r7, #20]
 8001bb2:	40da      	lsrs	r2, r3
 8001bb4:	1e13      	subs	r3, r2, #0
 8001bb6:	d000      	beq.n	8001bba <HAL_GPIO_Init+0x2be>
 8001bb8:	e6a8      	b.n	800190c <HAL_GPIO_Init+0x10>
  } 
}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	46c0      	nop			; (mov r8, r8)
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	b006      	add	sp, #24
 8001bc2:	bd80      	pop	{r7, pc}
 8001bc4:	40021000 	.word	0x40021000
 8001bc8:	40010000 	.word	0x40010000
 8001bcc:	48000400 	.word	0x48000400
 8001bd0:	48000800 	.word	0x48000800
 8001bd4:	48000c00 	.word	0x48000c00
 8001bd8:	40010400 	.word	0x40010400

08001bdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b082      	sub	sp, #8
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	0008      	movs	r0, r1
 8001be6:	0011      	movs	r1, r2
 8001be8:	1cbb      	adds	r3, r7, #2
 8001bea:	1c02      	adds	r2, r0, #0
 8001bec:	801a      	strh	r2, [r3, #0]
 8001bee:	1c7b      	adds	r3, r7, #1
 8001bf0:	1c0a      	adds	r2, r1, #0
 8001bf2:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001bf4:	1c7b      	adds	r3, r7, #1
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d004      	beq.n	8001c06 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bfc:	1cbb      	adds	r3, r7, #2
 8001bfe:	881a      	ldrh	r2, [r3, #0]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c04:	e003      	b.n	8001c0e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c06:	1cbb      	adds	r3, r7, #2
 8001c08:	881a      	ldrh	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c0e:	46c0      	nop			; (mov r8, r8)
 8001c10:	46bd      	mov	sp, r7
 8001c12:	b002      	add	sp, #8
 8001c14:	bd80      	pop	{r7, pc}
	...

08001c18 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8001c1c:	4b04      	ldr	r3, [pc, #16]	; (8001c30 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001c1e:	691a      	ldr	r2, [r3, #16]
 8001c20:	4b03      	ldr	r3, [pc, #12]	; (8001c30 <HAL_PWR_EnableSleepOnExit+0x18>)
 8001c22:	2102      	movs	r1, #2
 8001c24:	430a      	orrs	r2, r1
 8001c26:	611a      	str	r2, [r3, #16]
}
 8001c28:	46c0      	nop			; (mov r8, r8)
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	46c0      	nop			; (mov r8, r8)
 8001c30:	e000ed00 	.word	0xe000ed00

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e301      	b.n	800224a <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1e>
 8001c50:	e08d      	b.n	8001d6e <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001c52:	4bc3      	ldr	r3, [pc, #780]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	220c      	movs	r2, #12
 8001c58:	4013      	ands	r3, r2
 8001c5a:	2b04      	cmp	r3, #4
 8001c5c:	d00e      	beq.n	8001c7c <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001c5e:	4bc0      	ldr	r3, [pc, #768]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	220c      	movs	r2, #12
 8001c64:	4013      	ands	r3, r2
 8001c66:	2b08      	cmp	r3, #8
 8001c68:	d116      	bne.n	8001c98 <HAL_RCC_OscConfig+0x64>
 8001c6a:	4bbd      	ldr	r3, [pc, #756]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c6c:	685a      	ldr	r2, [r3, #4]
 8001c6e:	2380      	movs	r3, #128	; 0x80
 8001c70:	025b      	lsls	r3, r3, #9
 8001c72:	401a      	ands	r2, r3
 8001c74:	2380      	movs	r3, #128	; 0x80
 8001c76:	025b      	lsls	r3, r3, #9
 8001c78:	429a      	cmp	r2, r3
 8001c7a:	d10d      	bne.n	8001c98 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c7c:	4bb8      	ldr	r3, [pc, #736]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	2380      	movs	r3, #128	; 0x80
 8001c82:	029b      	lsls	r3, r3, #10
 8001c84:	4013      	ands	r3, r2
 8001c86:	d100      	bne.n	8001c8a <HAL_RCC_OscConfig+0x56>
 8001c88:	e070      	b.n	8001d6c <HAL_RCC_OscConfig+0x138>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	685b      	ldr	r3, [r3, #4]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d000      	beq.n	8001c94 <HAL_RCC_OscConfig+0x60>
 8001c92:	e06b      	b.n	8001d6c <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e2d8      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	2b01      	cmp	r3, #1
 8001c9e:	d107      	bne.n	8001cb0 <HAL_RCC_OscConfig+0x7c>
 8001ca0:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	4bae      	ldr	r3, [pc, #696]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ca6:	2180      	movs	r1, #128	; 0x80
 8001ca8:	0249      	lsls	r1, r1, #9
 8001caa:	430a      	orrs	r2, r1
 8001cac:	601a      	str	r2, [r3, #0]
 8001cae:	e02f      	b.n	8001d10 <HAL_RCC_OscConfig+0xdc>
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10c      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x9e>
 8001cb8:	4ba9      	ldr	r3, [pc, #676]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	49a9      	ldr	r1, [pc, #676]	; (8001f64 <HAL_RCC_OscConfig+0x330>)
 8001cc0:	400a      	ands	r2, r1
 8001cc2:	601a      	str	r2, [r3, #0]
 8001cc4:	4ba6      	ldr	r3, [pc, #664]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cc6:	681a      	ldr	r2, [r3, #0]
 8001cc8:	4ba5      	ldr	r3, [pc, #660]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cca:	49a7      	ldr	r1, [pc, #668]	; (8001f68 <HAL_RCC_OscConfig+0x334>)
 8001ccc:	400a      	ands	r2, r1
 8001cce:	601a      	str	r2, [r3, #0]
 8001cd0:	e01e      	b.n	8001d10 <HAL_RCC_OscConfig+0xdc>
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	2b05      	cmp	r3, #5
 8001cd8:	d10e      	bne.n	8001cf8 <HAL_RCC_OscConfig+0xc4>
 8001cda:	4ba1      	ldr	r3, [pc, #644]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	681a      	ldr	r2, [r3, #0]
 8001cde:	4ba0      	ldr	r3, [pc, #640]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ce0:	2180      	movs	r1, #128	; 0x80
 8001ce2:	02c9      	lsls	r1, r1, #11
 8001ce4:	430a      	orrs	r2, r1
 8001ce6:	601a      	str	r2, [r3, #0]
 8001ce8:	4b9d      	ldr	r3, [pc, #628]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cea:	681a      	ldr	r2, [r3, #0]
 8001cec:	4b9c      	ldr	r3, [pc, #624]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cee:	2180      	movs	r1, #128	; 0x80
 8001cf0:	0249      	lsls	r1, r1, #9
 8001cf2:	430a      	orrs	r2, r1
 8001cf4:	601a      	str	r2, [r3, #0]
 8001cf6:	e00b      	b.n	8001d10 <HAL_RCC_OscConfig+0xdc>
 8001cf8:	4b99      	ldr	r3, [pc, #612]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cfa:	681a      	ldr	r2, [r3, #0]
 8001cfc:	4b98      	ldr	r3, [pc, #608]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cfe:	4999      	ldr	r1, [pc, #612]	; (8001f64 <HAL_RCC_OscConfig+0x330>)
 8001d00:	400a      	ands	r2, r1
 8001d02:	601a      	str	r2, [r3, #0]
 8001d04:	4b96      	ldr	r3, [pc, #600]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	4b95      	ldr	r3, [pc, #596]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d0a:	4997      	ldr	r1, [pc, #604]	; (8001f68 <HAL_RCC_OscConfig+0x334>)
 8001d0c:	400a      	ands	r2, r1
 8001d0e:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d014      	beq.n	8001d42 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d18:	f7ff fa36 	bl	8001188 <HAL_GetTick>
 8001d1c:	0003      	movs	r3, r0
 8001d1e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d20:	e008      	b.n	8001d34 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d22:	f7ff fa31 	bl	8001188 <HAL_GetTick>
 8001d26:	0002      	movs	r2, r0
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	1ad3      	subs	r3, r2, r3
 8001d2c:	2b64      	cmp	r3, #100	; 0x64
 8001d2e:	d901      	bls.n	8001d34 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8001d30:	2303      	movs	r3, #3
 8001d32:	e28a      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d34:	4b8a      	ldr	r3, [pc, #552]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	2380      	movs	r3, #128	; 0x80
 8001d3a:	029b      	lsls	r3, r3, #10
 8001d3c:	4013      	ands	r3, r2
 8001d3e:	d0f0      	beq.n	8001d22 <HAL_RCC_OscConfig+0xee>
 8001d40:	e015      	b.n	8001d6e <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d42:	f7ff fa21 	bl	8001188 <HAL_GetTick>
 8001d46:	0003      	movs	r3, r0
 8001d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d4a:	e008      	b.n	8001d5e <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d4c:	f7ff fa1c 	bl	8001188 <HAL_GetTick>
 8001d50:	0002      	movs	r2, r0
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	1ad3      	subs	r3, r2, r3
 8001d56:	2b64      	cmp	r3, #100	; 0x64
 8001d58:	d901      	bls.n	8001d5e <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8001d5a:	2303      	movs	r3, #3
 8001d5c:	e275      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d5e:	4b80      	ldr	r3, [pc, #512]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	2380      	movs	r3, #128	; 0x80
 8001d64:	029b      	lsls	r3, r3, #10
 8001d66:	4013      	ands	r3, r2
 8001d68:	d1f0      	bne.n	8001d4c <HAL_RCC_OscConfig+0x118>
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d6c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	2202      	movs	r2, #2
 8001d74:	4013      	ands	r3, r2
 8001d76:	d100      	bne.n	8001d7a <HAL_RCC_OscConfig+0x146>
 8001d78:	e069      	b.n	8001e4e <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001d7a:	4b79      	ldr	r3, [pc, #484]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	220c      	movs	r2, #12
 8001d80:	4013      	ands	r3, r2
 8001d82:	d00b      	beq.n	8001d9c <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001d84:	4b76      	ldr	r3, [pc, #472]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	220c      	movs	r2, #12
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	2b08      	cmp	r3, #8
 8001d8e:	d11c      	bne.n	8001dca <HAL_RCC_OscConfig+0x196>
 8001d90:	4b73      	ldr	r3, [pc, #460]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d92:	685a      	ldr	r2, [r3, #4]
 8001d94:	2380      	movs	r3, #128	; 0x80
 8001d96:	025b      	lsls	r3, r3, #9
 8001d98:	4013      	ands	r3, r2
 8001d9a:	d116      	bne.n	8001dca <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001d9c:	4b70      	ldr	r3, [pc, #448]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	2202      	movs	r2, #2
 8001da2:	4013      	ands	r3, r2
 8001da4:	d005      	beq.n	8001db2 <HAL_RCC_OscConfig+0x17e>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d001      	beq.n	8001db2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001dae:	2301      	movs	r3, #1
 8001db0:	e24b      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	22f8      	movs	r2, #248	; 0xf8
 8001db8:	4393      	bics	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691b      	ldr	r3, [r3, #16]
 8001dc0:	00da      	lsls	r2, r3, #3
 8001dc2:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001dc4:	430a      	orrs	r2, r1
 8001dc6:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001dc8:	e041      	b.n	8001e4e <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	68db      	ldr	r3, [r3, #12]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d024      	beq.n	8001e1c <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001dd2:	4b63      	ldr	r3, [pc, #396]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	4b62      	ldr	r3, [pc, #392]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001dd8:	2101      	movs	r1, #1
 8001dda:	430a      	orrs	r2, r1
 8001ddc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dde:	f7ff f9d3 	bl	8001188 <HAL_GetTick>
 8001de2:	0003      	movs	r3, r0
 8001de4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001de6:	e008      	b.n	8001dfa <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001de8:	f7ff f9ce 	bl	8001188 <HAL_GetTick>
 8001dec:	0002      	movs	r2, r0
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	1ad3      	subs	r3, r2, r3
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d901      	bls.n	8001dfa <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8001df6:	2303      	movs	r3, #3
 8001df8:	e227      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001dfa:	4b59      	ldr	r3, [pc, #356]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d0f1      	beq.n	8001de8 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e04:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	22f8      	movs	r2, #248	; 0xf8
 8001e0a:	4393      	bics	r3, r2
 8001e0c:	0019      	movs	r1, r3
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	691b      	ldr	r3, [r3, #16]
 8001e12:	00da      	lsls	r2, r3, #3
 8001e14:	4b52      	ldr	r3, [pc, #328]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e16:	430a      	orrs	r2, r1
 8001e18:	601a      	str	r2, [r3, #0]
 8001e1a:	e018      	b.n	8001e4e <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e1c:	4b50      	ldr	r3, [pc, #320]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	4b4f      	ldr	r3, [pc, #316]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e22:	2101      	movs	r1, #1
 8001e24:	438a      	bics	r2, r1
 8001e26:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7ff f9ae 	bl	8001188 <HAL_GetTick>
 8001e2c:	0003      	movs	r3, r0
 8001e2e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e30:	e008      	b.n	8001e44 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e32:	f7ff f9a9 	bl	8001188 <HAL_GetTick>
 8001e36:	0002      	movs	r2, r0
 8001e38:	69bb      	ldr	r3, [r7, #24]
 8001e3a:	1ad3      	subs	r3, r2, r3
 8001e3c:	2b02      	cmp	r3, #2
 8001e3e:	d901      	bls.n	8001e44 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8001e40:	2303      	movs	r3, #3
 8001e42:	e202      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001e44:	4b46      	ldr	r3, [pc, #280]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	2202      	movs	r2, #2
 8001e4a:	4013      	ands	r3, r2
 8001e4c:	d1f1      	bne.n	8001e32 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	2208      	movs	r2, #8
 8001e54:	4013      	ands	r3, r2
 8001e56:	d036      	beq.n	8001ec6 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	69db      	ldr	r3, [r3, #28]
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d019      	beq.n	8001e94 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e60:	4b3f      	ldr	r3, [pc, #252]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e64:	4b3e      	ldr	r3, [pc, #248]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e66:	2101      	movs	r1, #1
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001e6c:	f7ff f98c 	bl	8001188 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e74:	e008      	b.n	8001e88 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001e76:	f7ff f987 	bl	8001188 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	69bb      	ldr	r3, [r7, #24]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b02      	cmp	r3, #2
 8001e82:	d901      	bls.n	8001e88 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8001e84:	2303      	movs	r3, #3
 8001e86:	e1e0      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001e88:	4b35      	ldr	r3, [pc, #212]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e8c:	2202      	movs	r2, #2
 8001e8e:	4013      	ands	r3, r2
 8001e90:	d0f1      	beq.n	8001e76 <HAL_RCC_OscConfig+0x242>
 8001e92:	e018      	b.n	8001ec6 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001e94:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e9a:	2101      	movs	r1, #1
 8001e9c:	438a      	bics	r2, r1
 8001e9e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ea0:	f7ff f972 	bl	8001188 <HAL_GetTick>
 8001ea4:	0003      	movs	r3, r0
 8001ea6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ea8:	e008      	b.n	8001ebc <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001eaa:	f7ff f96d 	bl	8001188 <HAL_GetTick>
 8001eae:	0002      	movs	r2, r0
 8001eb0:	69bb      	ldr	r3, [r7, #24]
 8001eb2:	1ad3      	subs	r3, r2, r3
 8001eb4:	2b02      	cmp	r3, #2
 8001eb6:	d901      	bls.n	8001ebc <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8001eb8:	2303      	movs	r3, #3
 8001eba:	e1c6      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001ebc:	4b28      	ldr	r3, [pc, #160]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	d1f1      	bne.n	8001eaa <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	2204      	movs	r2, #4
 8001ecc:	4013      	ands	r3, r2
 8001ece:	d100      	bne.n	8001ed2 <HAL_RCC_OscConfig+0x29e>
 8001ed0:	e0b4      	b.n	800203c <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	201f      	movs	r0, #31
 8001ed4:	183b      	adds	r3, r7, r0
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001eda:	4b21      	ldr	r3, [pc, #132]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001edc:	69da      	ldr	r2, [r3, #28]
 8001ede:	2380      	movs	r3, #128	; 0x80
 8001ee0:	055b      	lsls	r3, r3, #21
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	d110      	bne.n	8001f08 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ee8:	69da      	ldr	r2, [r3, #28]
 8001eea:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001eec:	2180      	movs	r1, #128	; 0x80
 8001eee:	0549      	lsls	r1, r1, #21
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	61da      	str	r2, [r3, #28]
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	69da      	ldr	r2, [r3, #28]
 8001ef8:	2380      	movs	r3, #128	; 0x80
 8001efa:	055b      	lsls	r3, r3, #21
 8001efc:	4013      	ands	r3, r2
 8001efe:	60fb      	str	r3, [r7, #12]
 8001f00:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8001f02:	183b      	adds	r3, r7, r0
 8001f04:	2201      	movs	r2, #1
 8001f06:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f08:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_RCC_OscConfig+0x338>)
 8001f0a:	681a      	ldr	r2, [r3, #0]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	005b      	lsls	r3, r3, #1
 8001f10:	4013      	ands	r3, r2
 8001f12:	d11a      	bne.n	8001f4a <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001f14:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_RCC_OscConfig+0x338>)
 8001f16:	681a      	ldr	r2, [r3, #0]
 8001f18:	4b14      	ldr	r3, [pc, #80]	; (8001f6c <HAL_RCC_OscConfig+0x338>)
 8001f1a:	2180      	movs	r1, #128	; 0x80
 8001f1c:	0049      	lsls	r1, r1, #1
 8001f1e:	430a      	orrs	r2, r1
 8001f20:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f22:	f7ff f931 	bl	8001188 <HAL_GetTick>
 8001f26:	0003      	movs	r3, r0
 8001f28:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f2a:	e008      	b.n	8001f3e <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f2c:	f7ff f92c 	bl	8001188 <HAL_GetTick>
 8001f30:	0002      	movs	r2, r0
 8001f32:	69bb      	ldr	r3, [r7, #24]
 8001f34:	1ad3      	subs	r3, r2, r3
 8001f36:	2b64      	cmp	r3, #100	; 0x64
 8001f38:	d901      	bls.n	8001f3e <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8001f3a:	2303      	movs	r3, #3
 8001f3c:	e185      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001f3e:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <HAL_RCC_OscConfig+0x338>)
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	2380      	movs	r3, #128	; 0x80
 8001f44:	005b      	lsls	r3, r3, #1
 8001f46:	4013      	ands	r3, r2
 8001f48:	d0f0      	beq.n	8001f2c <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	689b      	ldr	r3, [r3, #8]
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d10e      	bne.n	8001f70 <HAL_RCC_OscConfig+0x33c>
 8001f52:	4b03      	ldr	r3, [pc, #12]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001f54:	6a1a      	ldr	r2, [r3, #32]
 8001f56:	4b02      	ldr	r3, [pc, #8]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001f58:	2101      	movs	r1, #1
 8001f5a:	430a      	orrs	r2, r1
 8001f5c:	621a      	str	r2, [r3, #32]
 8001f5e:	e035      	b.n	8001fcc <HAL_RCC_OscConfig+0x398>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	fffeffff 	.word	0xfffeffff
 8001f68:	fffbffff 	.word	0xfffbffff
 8001f6c:	40007000 	.word	0x40007000
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	689b      	ldr	r3, [r3, #8]
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10c      	bne.n	8001f92 <HAL_RCC_OscConfig+0x35e>
 8001f78:	4bb6      	ldr	r3, [pc, #728]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001f7a:	6a1a      	ldr	r2, [r3, #32]
 8001f7c:	4bb5      	ldr	r3, [pc, #724]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001f7e:	2101      	movs	r1, #1
 8001f80:	438a      	bics	r2, r1
 8001f82:	621a      	str	r2, [r3, #32]
 8001f84:	4bb3      	ldr	r3, [pc, #716]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001f86:	6a1a      	ldr	r2, [r3, #32]
 8001f88:	4bb2      	ldr	r3, [pc, #712]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001f8a:	2104      	movs	r1, #4
 8001f8c:	438a      	bics	r2, r1
 8001f8e:	621a      	str	r2, [r3, #32]
 8001f90:	e01c      	b.n	8001fcc <HAL_RCC_OscConfig+0x398>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	689b      	ldr	r3, [r3, #8]
 8001f96:	2b05      	cmp	r3, #5
 8001f98:	d10c      	bne.n	8001fb4 <HAL_RCC_OscConfig+0x380>
 8001f9a:	4bae      	ldr	r3, [pc, #696]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001f9c:	6a1a      	ldr	r2, [r3, #32]
 8001f9e:	4bad      	ldr	r3, [pc, #692]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fa0:	2104      	movs	r1, #4
 8001fa2:	430a      	orrs	r2, r1
 8001fa4:	621a      	str	r2, [r3, #32]
 8001fa6:	4bab      	ldr	r3, [pc, #684]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fa8:	6a1a      	ldr	r2, [r3, #32]
 8001faa:	4baa      	ldr	r3, [pc, #680]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fac:	2101      	movs	r1, #1
 8001fae:	430a      	orrs	r2, r1
 8001fb0:	621a      	str	r2, [r3, #32]
 8001fb2:	e00b      	b.n	8001fcc <HAL_RCC_OscConfig+0x398>
 8001fb4:	4ba7      	ldr	r3, [pc, #668]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	4ba6      	ldr	r3, [pc, #664]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fba:	2101      	movs	r1, #1
 8001fbc:	438a      	bics	r2, r1
 8001fbe:	621a      	str	r2, [r3, #32]
 8001fc0:	4ba4      	ldr	r3, [pc, #656]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fc2:	6a1a      	ldr	r2, [r3, #32]
 8001fc4:	4ba3      	ldr	r3, [pc, #652]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001fc6:	2104      	movs	r1, #4
 8001fc8:	438a      	bics	r2, r1
 8001fca:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d014      	beq.n	8001ffe <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd4:	f7ff f8d8 	bl	8001188 <HAL_GetTick>
 8001fd8:	0003      	movs	r3, r0
 8001fda:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001fdc:	e009      	b.n	8001ff2 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001fde:	f7ff f8d3 	bl	8001188 <HAL_GetTick>
 8001fe2:	0002      	movs	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	4a9b      	ldr	r2, [pc, #620]	; (8002258 <HAL_RCC_OscConfig+0x624>)
 8001fea:	4293      	cmp	r3, r2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e12b      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ff2:	4b98      	ldr	r3, [pc, #608]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8001ff4:	6a1b      	ldr	r3, [r3, #32]
 8001ff6:	2202      	movs	r2, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	d0f0      	beq.n	8001fde <HAL_RCC_OscConfig+0x3aa>
 8001ffc:	e013      	b.n	8002026 <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001ffe:	f7ff f8c3 	bl	8001188 <HAL_GetTick>
 8002002:	0003      	movs	r3, r0
 8002004:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002006:	e009      	b.n	800201c <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002008:	f7ff f8be 	bl	8001188 <HAL_GetTick>
 800200c:	0002      	movs	r2, r0
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	1ad3      	subs	r3, r2, r3
 8002012:	4a91      	ldr	r2, [pc, #580]	; (8002258 <HAL_RCC_OscConfig+0x624>)
 8002014:	4293      	cmp	r3, r2
 8002016:	d901      	bls.n	800201c <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002018:	2303      	movs	r3, #3
 800201a:	e116      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800201c:	4b8d      	ldr	r3, [pc, #564]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800201e:	6a1b      	ldr	r3, [r3, #32]
 8002020:	2202      	movs	r2, #2
 8002022:	4013      	ands	r3, r2
 8002024:	d1f0      	bne.n	8002008 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002026:	231f      	movs	r3, #31
 8002028:	18fb      	adds	r3, r7, r3
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d105      	bne.n	800203c <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002030:	4b88      	ldr	r3, [pc, #544]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002032:	69da      	ldr	r2, [r3, #28]
 8002034:	4b87      	ldr	r3, [pc, #540]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002036:	4989      	ldr	r1, [pc, #548]	; (800225c <HAL_RCC_OscConfig+0x628>)
 8002038:	400a      	ands	r2, r1
 800203a:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2210      	movs	r2, #16
 8002042:	4013      	ands	r3, r2
 8002044:	d063      	beq.n	800210e <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	695b      	ldr	r3, [r3, #20]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d12a      	bne.n	80020a4 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800204e:	4b81      	ldr	r3, [pc, #516]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002052:	4b80      	ldr	r3, [pc, #512]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002054:	2104      	movs	r1, #4
 8002056:	430a      	orrs	r2, r1
 8002058:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 800205a:	4b7e      	ldr	r3, [pc, #504]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800205c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800205e:	4b7d      	ldr	r3, [pc, #500]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002060:	2101      	movs	r1, #1
 8002062:	430a      	orrs	r2, r1
 8002064:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002066:	f7ff f88f 	bl	8001188 <HAL_GetTick>
 800206a:	0003      	movs	r3, r0
 800206c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 800206e:	e008      	b.n	8002082 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002070:	f7ff f88a 	bl	8001188 <HAL_GetTick>
 8002074:	0002      	movs	r2, r0
 8002076:	69bb      	ldr	r3, [r7, #24]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	2b02      	cmp	r3, #2
 800207c:	d901      	bls.n	8002082 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 800207e:	2303      	movs	r3, #3
 8002080:	e0e3      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002082:	4b74      	ldr	r3, [pc, #464]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002086:	2202      	movs	r2, #2
 8002088:	4013      	ands	r3, r2
 800208a:	d0f1      	beq.n	8002070 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800208c:	4b71      	ldr	r3, [pc, #452]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800208e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002090:	22f8      	movs	r2, #248	; 0xf8
 8002092:	4393      	bics	r3, r2
 8002094:	0019      	movs	r1, r3
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	00da      	lsls	r2, r3, #3
 800209c:	4b6d      	ldr	r3, [pc, #436]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800209e:	430a      	orrs	r2, r1
 80020a0:	635a      	str	r2, [r3, #52]	; 0x34
 80020a2:	e034      	b.n	800210e <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	695b      	ldr	r3, [r3, #20]
 80020a8:	3305      	adds	r3, #5
 80020aa:	d111      	bne.n	80020d0 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 80020ac:	4b69      	ldr	r3, [pc, #420]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020b0:	4b68      	ldr	r3, [pc, #416]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020b2:	2104      	movs	r1, #4
 80020b4:	438a      	bics	r2, r1
 80020b6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80020b8:	4b66      	ldr	r3, [pc, #408]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80020bc:	22f8      	movs	r2, #248	; 0xf8
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	699b      	ldr	r3, [r3, #24]
 80020c6:	00da      	lsls	r2, r3, #3
 80020c8:	4b62      	ldr	r3, [pc, #392]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020ca:	430a      	orrs	r2, r1
 80020cc:	635a      	str	r2, [r3, #52]	; 0x34
 80020ce:	e01e      	b.n	800210e <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80020d0:	4b60      	ldr	r3, [pc, #384]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020d4:	4b5f      	ldr	r3, [pc, #380]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020d6:	2104      	movs	r1, #4
 80020d8:	430a      	orrs	r2, r1
 80020da:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 80020dc:	4b5d      	ldr	r3, [pc, #372]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020de:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80020e0:	4b5c      	ldr	r3, [pc, #368]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020e8:	f7ff f84e 	bl	8001188 <HAL_GetTick>
 80020ec:	0003      	movs	r3, r0
 80020ee:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80020f0:	e008      	b.n	8002104 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80020f2:	f7ff f849 	bl	8001188 <HAL_GetTick>
 80020f6:	0002      	movs	r2, r0
 80020f8:	69bb      	ldr	r3, [r7, #24]
 80020fa:	1ad3      	subs	r3, r2, r3
 80020fc:	2b02      	cmp	r3, #2
 80020fe:	d901      	bls.n	8002104 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002100:	2303      	movs	r3, #3
 8002102:	e0a2      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002104:	4b53      	ldr	r3, [pc, #332]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002106:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002108:	2202      	movs	r2, #2
 800210a:	4013      	ands	r3, r2
 800210c:	d1f1      	bne.n	80020f2 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	6a1b      	ldr	r3, [r3, #32]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d100      	bne.n	8002118 <HAL_RCC_OscConfig+0x4e4>
 8002116:	e097      	b.n	8002248 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	4b4e      	ldr	r3, [pc, #312]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	220c      	movs	r2, #12
 800211e:	4013      	ands	r3, r2
 8002120:	2b08      	cmp	r3, #8
 8002122:	d100      	bne.n	8002126 <HAL_RCC_OscConfig+0x4f2>
 8002124:	e06b      	b.n	80021fe <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6a1b      	ldr	r3, [r3, #32]
 800212a:	2b02      	cmp	r3, #2
 800212c:	d14c      	bne.n	80021c8 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212e:	4b49      	ldr	r3, [pc, #292]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002130:	681a      	ldr	r2, [r3, #0]
 8002132:	4b48      	ldr	r3, [pc, #288]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002134:	494a      	ldr	r1, [pc, #296]	; (8002260 <HAL_RCC_OscConfig+0x62c>)
 8002136:	400a      	ands	r2, r1
 8002138:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800213a:	f7ff f825 	bl	8001188 <HAL_GetTick>
 800213e:	0003      	movs	r3, r0
 8002140:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002142:	e008      	b.n	8002156 <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002144:	f7ff f820 	bl	8001188 <HAL_GetTick>
 8002148:	0002      	movs	r2, r0
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	1ad3      	subs	r3, r2, r3
 800214e:	2b02      	cmp	r3, #2
 8002150:	d901      	bls.n	8002156 <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e079      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002156:	4b3f      	ldr	r3, [pc, #252]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002158:	681a      	ldr	r2, [r3, #0]
 800215a:	2380      	movs	r3, #128	; 0x80
 800215c:	049b      	lsls	r3, r3, #18
 800215e:	4013      	ands	r3, r2
 8002160:	d1f0      	bne.n	8002144 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002162:	4b3c      	ldr	r3, [pc, #240]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002166:	220f      	movs	r2, #15
 8002168:	4393      	bics	r3, r2
 800216a:	0019      	movs	r1, r3
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002170:	4b38      	ldr	r3, [pc, #224]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002172:	430a      	orrs	r2, r1
 8002174:	62da      	str	r2, [r3, #44]	; 0x2c
 8002176:	4b37      	ldr	r3, [pc, #220]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002178:	685b      	ldr	r3, [r3, #4]
 800217a:	4a3a      	ldr	r2, [pc, #232]	; (8002264 <HAL_RCC_OscConfig+0x630>)
 800217c:	4013      	ands	r3, r2
 800217e:	0019      	movs	r1, r3
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002188:	431a      	orrs	r2, r3
 800218a:	4b32      	ldr	r3, [pc, #200]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800218c:	430a      	orrs	r2, r1
 800218e:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002190:	4b30      	ldr	r3, [pc, #192]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002192:	681a      	ldr	r2, [r3, #0]
 8002194:	4b2f      	ldr	r3, [pc, #188]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002196:	2180      	movs	r1, #128	; 0x80
 8002198:	0449      	lsls	r1, r1, #17
 800219a:	430a      	orrs	r2, r1
 800219c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800219e:	f7fe fff3 	bl	8001188 <HAL_GetTick>
 80021a2:	0003      	movs	r3, r0
 80021a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021a6:	e008      	b.n	80021ba <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a8:	f7fe ffee 	bl	8001188 <HAL_GetTick>
 80021ac:	0002      	movs	r2, r0
 80021ae:	69bb      	ldr	r3, [r7, #24]
 80021b0:	1ad3      	subs	r3, r2, r3
 80021b2:	2b02      	cmp	r3, #2
 80021b4:	d901      	bls.n	80021ba <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80021b6:	2303      	movs	r3, #3
 80021b8:	e047      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ba:	4b26      	ldr	r3, [pc, #152]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80021bc:	681a      	ldr	r2, [r3, #0]
 80021be:	2380      	movs	r3, #128	; 0x80
 80021c0:	049b      	lsls	r3, r3, #18
 80021c2:	4013      	ands	r3, r2
 80021c4:	d0f0      	beq.n	80021a8 <HAL_RCC_OscConfig+0x574>
 80021c6:	e03f      	b.n	8002248 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c8:	4b22      	ldr	r3, [pc, #136]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	4b21      	ldr	r3, [pc, #132]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80021ce:	4924      	ldr	r1, [pc, #144]	; (8002260 <HAL_RCC_OscConfig+0x62c>)
 80021d0:	400a      	ands	r2, r1
 80021d2:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021d4:	f7fe ffd8 	bl	8001188 <HAL_GetTick>
 80021d8:	0003      	movs	r3, r0
 80021da:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021dc:	e008      	b.n	80021f0 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021de:	f7fe ffd3 	bl	8001188 <HAL_GetTick>
 80021e2:	0002      	movs	r2, r0
 80021e4:	69bb      	ldr	r3, [r7, #24]
 80021e6:	1ad3      	subs	r3, r2, r3
 80021e8:	2b02      	cmp	r3, #2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e02c      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021f0:	4b18      	ldr	r3, [pc, #96]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	2380      	movs	r3, #128	; 0x80
 80021f6:	049b      	lsls	r3, r3, #18
 80021f8:	4013      	ands	r3, r2
 80021fa:	d1f0      	bne.n	80021de <HAL_RCC_OscConfig+0x5aa>
 80021fc:	e024      	b.n	8002248 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6a1b      	ldr	r3, [r3, #32]
 8002202:	2b01      	cmp	r3, #1
 8002204:	d101      	bne.n	800220a <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002206:	2301      	movs	r3, #1
 8002208:	e01f      	b.n	800224a <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800220a:	4b12      	ldr	r3, [pc, #72]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002210:	4b10      	ldr	r3, [pc, #64]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002212:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002214:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002216:	697a      	ldr	r2, [r7, #20]
 8002218:	2380      	movs	r3, #128	; 0x80
 800221a:	025b      	lsls	r3, r3, #9
 800221c:	401a      	ands	r2, r3
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	429a      	cmp	r2, r3
 8002224:	d10e      	bne.n	8002244 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002226:	693b      	ldr	r3, [r7, #16]
 8002228:	220f      	movs	r2, #15
 800222a:	401a      	ands	r2, r3
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002230:	429a      	cmp	r2, r3
 8002232:	d107      	bne.n	8002244 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	23f0      	movs	r3, #240	; 0xf0
 8002238:	039b      	lsls	r3, r3, #14
 800223a:	401a      	ands	r2, r3
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002240:	429a      	cmp	r2, r3
 8002242:	d001      	beq.n	8002248 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002244:	2301      	movs	r3, #1
 8002246:	e000      	b.n	800224a <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002248:	2300      	movs	r3, #0
}
 800224a:	0018      	movs	r0, r3
 800224c:	46bd      	mov	sp, r7
 800224e:	b008      	add	sp, #32
 8002250:	bd80      	pop	{r7, pc}
 8002252:	46c0      	nop			; (mov r8, r8)
 8002254:	40021000 	.word	0x40021000
 8002258:	00001388 	.word	0x00001388
 800225c:	efffffff 	.word	0xefffffff
 8002260:	feffffff 	.word	0xfeffffff
 8002264:	ffc2ffff 	.word	0xffc2ffff

08002268 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0b3      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b5b      	ldr	r3, [pc, #364]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2201      	movs	r2, #1
 8002282:	4013      	ands	r3, r2
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d911      	bls.n	80022ae <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b58      	ldr	r3, [pc, #352]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2201      	movs	r2, #1
 8002290:	4393      	bics	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	4b55      	ldr	r3, [pc, #340]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800229c:	4b53      	ldr	r3, [pc, #332]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	2201      	movs	r2, #1
 80022a2:	4013      	ands	r3, r2
 80022a4:	683a      	ldr	r2, [r7, #0]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d001      	beq.n	80022ae <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e09a      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	2202      	movs	r2, #2
 80022b4:	4013      	ands	r3, r2
 80022b6:	d015      	beq.n	80022e4 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	2204      	movs	r2, #4
 80022be:	4013      	ands	r3, r2
 80022c0:	d006      	beq.n	80022d0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022c2:	4b4b      	ldr	r3, [pc, #300]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80022c4:	685a      	ldr	r2, [r3, #4]
 80022c6:	4b4a      	ldr	r3, [pc, #296]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80022c8:	21e0      	movs	r1, #224	; 0xe0
 80022ca:	00c9      	lsls	r1, r1, #3
 80022cc:	430a      	orrs	r2, r1
 80022ce:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d0:	4b47      	ldr	r3, [pc, #284]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80022d2:	685b      	ldr	r3, [r3, #4]
 80022d4:	22f0      	movs	r2, #240	; 0xf0
 80022d6:	4393      	bics	r3, r2
 80022d8:	0019      	movs	r1, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	689a      	ldr	r2, [r3, #8]
 80022de:	4b44      	ldr	r3, [pc, #272]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80022e0:	430a      	orrs	r2, r1
 80022e2:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	2201      	movs	r2, #1
 80022ea:	4013      	ands	r3, r2
 80022ec:	d040      	beq.n	8002370 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	685b      	ldr	r3, [r3, #4]
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d107      	bne.n	8002306 <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022f6:	4b3e      	ldr	r3, [pc, #248]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	2380      	movs	r3, #128	; 0x80
 80022fc:	029b      	lsls	r3, r3, #10
 80022fe:	4013      	ands	r3, r2
 8002300:	d114      	bne.n	800232c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	e06e      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	2b02      	cmp	r3, #2
 800230c:	d107      	bne.n	800231e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	2380      	movs	r3, #128	; 0x80
 8002314:	049b      	lsls	r3, r3, #18
 8002316:	4013      	ands	r3, r2
 8002318:	d108      	bne.n	800232c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800231a:	2301      	movs	r3, #1
 800231c:	e062      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800231e:	4b34      	ldr	r3, [pc, #208]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	2202      	movs	r2, #2
 8002324:	4013      	ands	r3, r2
 8002326:	d101      	bne.n	800232c <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002328:	2301      	movs	r3, #1
 800232a:	e05b      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800232c:	4b30      	ldr	r3, [pc, #192]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	2203      	movs	r2, #3
 8002332:	4393      	bics	r3, r2
 8002334:	0019      	movs	r1, r3
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 800233c:	430a      	orrs	r2, r1
 800233e:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002340:	f7fe ff22 	bl	8001188 <HAL_GetTick>
 8002344:	0003      	movs	r3, r0
 8002346:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002348:	e009      	b.n	800235e <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800234a:	f7fe ff1d 	bl	8001188 <HAL_GetTick>
 800234e:	0002      	movs	r2, r0
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	4a27      	ldr	r2, [pc, #156]	; (80023f4 <HAL_RCC_ClockConfig+0x18c>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d901      	bls.n	800235e <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 800235a:	2303      	movs	r3, #3
 800235c:	e042      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	220c      	movs	r2, #12
 8002364:	401a      	ands	r2, r3
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	685b      	ldr	r3, [r3, #4]
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	429a      	cmp	r2, r3
 800236e:	d1ec      	bne.n	800234a <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002370:	4b1e      	ldr	r3, [pc, #120]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	2201      	movs	r2, #1
 8002376:	4013      	ands	r3, r2
 8002378:	683a      	ldr	r2, [r7, #0]
 800237a:	429a      	cmp	r2, r3
 800237c:	d211      	bcs.n	80023a2 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800237e:	4b1b      	ldr	r3, [pc, #108]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	2201      	movs	r2, #1
 8002384:	4393      	bics	r3, r2
 8002386:	0019      	movs	r1, r3
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 800238a:	683a      	ldr	r2, [r7, #0]
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002390:	4b16      	ldr	r3, [pc, #88]	; (80023ec <HAL_RCC_ClockConfig+0x184>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2201      	movs	r2, #1
 8002396:	4013      	ands	r3, r2
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e020      	b.n	80023e4 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	2204      	movs	r2, #4
 80023a8:	4013      	ands	r3, r2
 80023aa:	d009      	beq.n	80023c0 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023ac:	4b10      	ldr	r3, [pc, #64]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	4a11      	ldr	r2, [pc, #68]	; (80023f8 <HAL_RCC_ClockConfig+0x190>)
 80023b2:	4013      	ands	r3, r2
 80023b4:	0019      	movs	r1, r3
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68da      	ldr	r2, [r3, #12]
 80023ba:	4b0d      	ldr	r3, [pc, #52]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80023bc:	430a      	orrs	r2, r1
 80023be:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023c0:	f000 f820 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023c4:	0001      	movs	r1, r0
 80023c6:	4b0a      	ldr	r3, [pc, #40]	; (80023f0 <HAL_RCC_ClockConfig+0x188>)
 80023c8:	685b      	ldr	r3, [r3, #4]
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	220f      	movs	r2, #15
 80023ce:	4013      	ands	r3, r2
 80023d0:	4a0a      	ldr	r2, [pc, #40]	; (80023fc <HAL_RCC_ClockConfig+0x194>)
 80023d2:	5cd3      	ldrb	r3, [r2, r3]
 80023d4:	000a      	movs	r2, r1
 80023d6:	40da      	lsrs	r2, r3
 80023d8:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x198>)
 80023da:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023dc:	2003      	movs	r0, #3
 80023de:	f7fe fe8d 	bl	80010fc <HAL_InitTick>
  
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40022000 	.word	0x40022000
 80023f0:	40021000 	.word	0x40021000
 80023f4:	00001388 	.word	0x00001388
 80023f8:	fffff8ff 	.word	0xfffff8ff
 80023fc:	08004308 	.word	0x08004308
 8002400:	20000004 	.word	0x20000004

08002404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	b590      	push	{r4, r7, lr}
 8002406:	b08f      	sub	sp, #60	; 0x3c
 8002408:	af00      	add	r7, sp, #0
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 800240a:	2314      	movs	r3, #20
 800240c:	18fb      	adds	r3, r7, r3
 800240e:	4a2b      	ldr	r2, [pc, #172]	; (80024bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002410:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002412:	c313      	stmia	r3!, {r0, r1, r4}
 8002414:	6812      	ldr	r2, [r2, #0]
 8002416:	601a      	str	r2, [r3, #0]
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8002418:	1d3b      	adds	r3, r7, #4
 800241a:	4a29      	ldr	r2, [pc, #164]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 800241c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800241e:	c313      	stmia	r3!, {r0, r1, r4}
 8002420:	6812      	ldr	r2, [r2, #0]
 8002422:	601a      	str	r2, [r3, #0]
                                           9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002424:	2300      	movs	r3, #0
 8002426:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002428:	2300      	movs	r3, #0
 800242a:	62bb      	str	r3, [r7, #40]	; 0x28
 800242c:	2300      	movs	r3, #0
 800242e:	637b      	str	r3, [r7, #52]	; 0x34
 8002430:	2300      	movs	r3, #0
 8002432:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t sysclockfreq = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	633b      	str	r3, [r7, #48]	; 0x30
  
  tmpreg = RCC->CFGR;
 8002438:	4b22      	ldr	r3, [pc, #136]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	220c      	movs	r2, #12
 8002442:	4013      	ands	r3, r2
 8002444:	2b04      	cmp	r3, #4
 8002446:	d002      	beq.n	800244e <HAL_RCC_GetSysClockFreq+0x4a>
 8002448:	2b08      	cmp	r3, #8
 800244a:	d003      	beq.n	8002454 <HAL_RCC_GetSysClockFreq+0x50>
 800244c:	e02d      	b.n	80024aa <HAL_RCC_GetSysClockFreq+0xa6>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800244e:	4b1e      	ldr	r3, [pc, #120]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002450:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 8002452:	e02d      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002454:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002456:	0c9b      	lsrs	r3, r3, #18
 8002458:	220f      	movs	r2, #15
 800245a:	4013      	ands	r3, r2
 800245c:	2214      	movs	r2, #20
 800245e:	18ba      	adds	r2, r7, r2
 8002460:	5cd3      	ldrb	r3, [r2, r3]
 8002462:	627b      	str	r3, [r7, #36]	; 0x24
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002464:	4b17      	ldr	r3, [pc, #92]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002468:	220f      	movs	r2, #15
 800246a:	4013      	ands	r3, r2
 800246c:	1d3a      	adds	r2, r7, #4
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002472:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002474:	2380      	movs	r3, #128	; 0x80
 8002476:	025b      	lsls	r3, r3, #9
 8002478:	4013      	ands	r3, r2
 800247a:	d009      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x8c>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800247c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800247e:	4812      	ldr	r0, [pc, #72]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002480:	f7fd fe42 	bl	8000108 <__udivsi3>
 8002484:	0003      	movs	r3, r0
 8002486:	001a      	movs	r2, r3
 8002488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800248a:	4353      	muls	r3, r2
 800248c:	637b      	str	r3, [r7, #52]	; 0x34
 800248e:	e009      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xa0>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002490:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002492:	000a      	movs	r2, r1
 8002494:	0152      	lsls	r2, r2, #5
 8002496:	1a52      	subs	r2, r2, r1
 8002498:	0193      	lsls	r3, r2, #6
 800249a:	1a9b      	subs	r3, r3, r2
 800249c:	00db      	lsls	r3, r3, #3
 800249e:	185b      	adds	r3, r3, r1
 80024a0:	021b      	lsls	r3, r3, #8
 80024a2:	637b      	str	r3, [r7, #52]	; 0x34
#endif
      }
      sysclockfreq = pllclk;
 80024a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024a6:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024a8:	e002      	b.n	80024b0 <HAL_RCC_GetSysClockFreq+0xac>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024aa:	4b07      	ldr	r3, [pc, #28]	; (80024c8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024ac:	633b      	str	r3, [r7, #48]	; 0x30
      break;
 80024ae:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80024b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
}
 80024b2:	0018      	movs	r0, r3
 80024b4:	46bd      	mov	sp, r7
 80024b6:	b00f      	add	sp, #60	; 0x3c
 80024b8:	bd90      	pop	{r4, r7, pc}
 80024ba:	46c0      	nop			; (mov r8, r8)
 80024bc:	080042e8 	.word	0x080042e8
 80024c0:	080042f8 	.word	0x080042f8
 80024c4:	40021000 	.word	0x40021000
 80024c8:	007a1200 	.word	0x007a1200

080024cc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024d0:	4b02      	ldr	r3, [pc, #8]	; (80024dc <HAL_RCC_GetHCLKFreq+0x10>)
 80024d2:	681b      	ldr	r3, [r3, #0]
}
 80024d4:	0018      	movs	r0, r3
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	20000004 	.word	0x20000004

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 80024e4:	f7ff fff2 	bl	80024cc <HAL_RCC_GetHCLKFreq>
 80024e8:	0001      	movs	r1, r0
 80024ea:	4b06      	ldr	r3, [pc, #24]	; (8002504 <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	0a1b      	lsrs	r3, r3, #8
 80024f0:	2207      	movs	r2, #7
 80024f2:	4013      	ands	r3, r2
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <HAL_RCC_GetPCLK1Freq+0x28>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	40d9      	lsrs	r1, r3
 80024fa:	000b      	movs	r3, r1
}    
 80024fc:	0018      	movs	r0, r3
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
 8002502:	46c0      	nop			; (mov r8, r8)
 8002504:	40021000 	.word	0x40021000
 8002508:	08004318 	.word	0x08004318

0800250c <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	2380      	movs	r3, #128	; 0x80
 8002522:	025b      	lsls	r3, r3, #9
 8002524:	4013      	ands	r3, r2
 8002526:	d100      	bne.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8002528:	e08e      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 800252a:	2017      	movs	r0, #23
 800252c:	183b      	adds	r3, r7, r0
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002532:	4b57      	ldr	r3, [pc, #348]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002534:	69da      	ldr	r2, [r3, #28]
 8002536:	2380      	movs	r3, #128	; 0x80
 8002538:	055b      	lsls	r3, r3, #21
 800253a:	4013      	ands	r3, r2
 800253c:	d110      	bne.n	8002560 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800253e:	4b54      	ldr	r3, [pc, #336]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002540:	69da      	ldr	r2, [r3, #28]
 8002542:	4b53      	ldr	r3, [pc, #332]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002544:	2180      	movs	r1, #128	; 0x80
 8002546:	0549      	lsls	r1, r1, #21
 8002548:	430a      	orrs	r2, r1
 800254a:	61da      	str	r2, [r3, #28]
 800254c:	4b50      	ldr	r3, [pc, #320]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800254e:	69da      	ldr	r2, [r3, #28]
 8002550:	2380      	movs	r3, #128	; 0x80
 8002552:	055b      	lsls	r3, r3, #21
 8002554:	4013      	ands	r3, r2
 8002556:	60bb      	str	r3, [r7, #8]
 8002558:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800255a:	183b      	adds	r3, r7, r0
 800255c:	2201      	movs	r2, #1
 800255e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002560:	4b4c      	ldr	r3, [pc, #304]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	2380      	movs	r3, #128	; 0x80
 8002566:	005b      	lsls	r3, r3, #1
 8002568:	4013      	ands	r3, r2
 800256a:	d11a      	bne.n	80025a2 <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800256c:	4b49      	ldr	r3, [pc, #292]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800256e:	681a      	ldr	r2, [r3, #0]
 8002570:	4b48      	ldr	r3, [pc, #288]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002572:	2180      	movs	r1, #128	; 0x80
 8002574:	0049      	lsls	r1, r1, #1
 8002576:	430a      	orrs	r2, r1
 8002578:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800257a:	f7fe fe05 	bl	8001188 <HAL_GetTick>
 800257e:	0003      	movs	r3, r0
 8002580:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	e008      	b.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002584:	f7fe fe00 	bl	8001188 <HAL_GetTick>
 8002588:	0002      	movs	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	2b64      	cmp	r3, #100	; 0x64
 8002590:	d901      	bls.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 8002592:	2303      	movs	r3, #3
 8002594:	e077      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002596:	4b3f      	ldr	r3, [pc, #252]	; (8002694 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8002598:	681a      	ldr	r2, [r3, #0]
 800259a:	2380      	movs	r3, #128	; 0x80
 800259c:	005b      	lsls	r3, r3, #1
 800259e:	4013      	ands	r3, r2
 80025a0:	d0f0      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80025a2:	4b3b      	ldr	r3, [pc, #236]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025a4:	6a1a      	ldr	r2, [r3, #32]
 80025a6:	23c0      	movs	r3, #192	; 0xc0
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4013      	ands	r3, r2
 80025ac:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d034      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x112>
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	685a      	ldr	r2, [r3, #4]
 80025b8:	23c0      	movs	r3, #192	; 0xc0
 80025ba:	009b      	lsls	r3, r3, #2
 80025bc:	4013      	ands	r3, r2
 80025be:	68fa      	ldr	r2, [r7, #12]
 80025c0:	429a      	cmp	r2, r3
 80025c2:	d02c      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80025c4:	4b32      	ldr	r3, [pc, #200]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025c6:	6a1b      	ldr	r3, [r3, #32]
 80025c8:	4a33      	ldr	r2, [pc, #204]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80025ca:	4013      	ands	r3, r2
 80025cc:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025ce:	4b30      	ldr	r3, [pc, #192]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025d0:	6a1a      	ldr	r2, [r3, #32]
 80025d2:	4b2f      	ldr	r3, [pc, #188]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025d4:	2180      	movs	r1, #128	; 0x80
 80025d6:	0249      	lsls	r1, r1, #9
 80025d8:	430a      	orrs	r2, r1
 80025da:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025dc:	4b2c      	ldr	r3, [pc, #176]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025de:	6a1a      	ldr	r2, [r3, #32]
 80025e0:	4b2b      	ldr	r3, [pc, #172]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025e2:	492e      	ldr	r1, [pc, #184]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80025e4:	400a      	ands	r2, r1
 80025e6:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80025e8:	4b29      	ldr	r3, [pc, #164]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80025ea:	68fa      	ldr	r2, [r7, #12]
 80025ec:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2201      	movs	r2, #1
 80025f2:	4013      	ands	r3, r2
 80025f4:	d013      	beq.n	800261e <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025f6:	f7fe fdc7 	bl	8001188 <HAL_GetTick>
 80025fa:	0003      	movs	r3, r0
 80025fc:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025fe:	e009      	b.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002600:	f7fe fdc2 	bl	8001188 <HAL_GetTick>
 8002604:	0002      	movs	r2, r0
 8002606:	693b      	ldr	r3, [r7, #16]
 8002608:	1ad3      	subs	r3, r2, r3
 800260a:	4a25      	ldr	r2, [pc, #148]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d901      	bls.n	8002614 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e038      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002614:	4b1e      	ldr	r3, [pc, #120]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002616:	6a1b      	ldr	r3, [r3, #32]
 8002618:	2202      	movs	r2, #2
 800261a:	4013      	ands	r3, r2
 800261c:	d0f0      	beq.n	8002600 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800261e:	4b1c      	ldr	r3, [pc, #112]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002620:	6a1b      	ldr	r3, [r3, #32]
 8002622:	4a1d      	ldr	r2, [pc, #116]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8002624:	4013      	ands	r3, r2
 8002626:	0019      	movs	r1, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	685a      	ldr	r2, [r3, #4]
 800262c:	4b18      	ldr	r3, [pc, #96]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800262e:	430a      	orrs	r2, r1
 8002630:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002632:	2317      	movs	r3, #23
 8002634:	18fb      	adds	r3, r7, r3
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b01      	cmp	r3, #1
 800263a:	d105      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263c:	4b14      	ldr	r3, [pc, #80]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800263e:	69da      	ldr	r2, [r3, #28]
 8002640:	4b13      	ldr	r3, [pc, #76]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002642:	4918      	ldr	r1, [pc, #96]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8002644:	400a      	ands	r2, r1
 8002646:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2201      	movs	r2, #1
 800264e:	4013      	ands	r3, r2
 8002650:	d009      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002652:	4b0f      	ldr	r3, [pc, #60]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002656:	2203      	movs	r2, #3
 8002658:	4393      	bics	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	689a      	ldr	r2, [r3, #8]
 8002660:	4b0b      	ldr	r3, [pc, #44]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002662:	430a      	orrs	r2, r1
 8002664:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	2220      	movs	r2, #32
 800266c:	4013      	ands	r3, r2
 800266e:	d009      	beq.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002670:	4b07      	ldr	r3, [pc, #28]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	2210      	movs	r2, #16
 8002676:	4393      	bics	r3, r2
 8002678:	0019      	movs	r1, r3
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	68da      	ldr	r2, [r3, #12]
 800267e:	4b04      	ldr	r3, [pc, #16]	; (8002690 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8002680:	430a      	orrs	r2, r1
 8002682:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	0018      	movs	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	b006      	add	sp, #24
 800268c:	bd80      	pop	{r7, pc}
 800268e:	46c0      	nop			; (mov r8, r8)
 8002690:	40021000 	.word	0x40021000
 8002694:	40007000 	.word	0x40007000
 8002698:	fffffcff 	.word	0xfffffcff
 800269c:	fffeffff 	.word	0xfffeffff
 80026a0:	00001388 	.word	0x00001388
 80026a4:	efffffff 	.word	0xefffffff

080026a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b082      	sub	sp, #8
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d101      	bne.n	80026ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	e042      	b.n	8002740 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	223d      	movs	r2, #61	; 0x3d
 80026be:	5c9b      	ldrb	r3, [r3, r2]
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d107      	bne.n	80026d6 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	223c      	movs	r2, #60	; 0x3c
 80026ca:	2100      	movs	r1, #0
 80026cc:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	0018      	movs	r0, r3
 80026d2:	f7fe fb7f 	bl	8000dd4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	223d      	movs	r2, #61	; 0x3d
 80026da:	2102      	movs	r1, #2
 80026dc:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681a      	ldr	r2, [r3, #0]
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	3304      	adds	r3, #4
 80026e6:	0019      	movs	r1, r3
 80026e8:	0010      	movs	r0, r2
 80026ea:	f000 fc69 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	2246      	movs	r2, #70	; 0x46
 80026f2:	2101      	movs	r1, #1
 80026f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	223e      	movs	r2, #62	; 0x3e
 80026fa:	2101      	movs	r1, #1
 80026fc:	5499      	strb	r1, [r3, r2]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	223f      	movs	r2, #63	; 0x3f
 8002702:	2101      	movs	r1, #1
 8002704:	5499      	strb	r1, [r3, r2]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	2240      	movs	r2, #64	; 0x40
 800270a:	2101      	movs	r1, #1
 800270c:	5499      	strb	r1, [r3, r2]
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2241      	movs	r2, #65	; 0x41
 8002712:	2101      	movs	r1, #1
 8002714:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	2242      	movs	r2, #66	; 0x42
 800271a:	2101      	movs	r1, #1
 800271c:	5499      	strb	r1, [r3, r2]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2243      	movs	r2, #67	; 0x43
 8002722:	2101      	movs	r1, #1
 8002724:	5499      	strb	r1, [r3, r2]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2244      	movs	r2, #68	; 0x44
 800272a:	2101      	movs	r1, #1
 800272c:	5499      	strb	r1, [r3, r2]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2245      	movs	r2, #69	; 0x45
 8002732:	2101      	movs	r1, #1
 8002734:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	223d      	movs	r2, #61	; 0x3d
 800273a:	2101      	movs	r1, #1
 800273c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800273e:	2300      	movs	r3, #0
}
 8002740:	0018      	movs	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	b002      	add	sp, #8
 8002746:	bd80      	pop	{r7, pc}

08002748 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e042      	b.n	80027e0 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	223d      	movs	r2, #61	; 0x3d
 800275e:	5c9b      	ldrb	r3, [r3, r2]
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d107      	bne.n	8002776 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	223c      	movs	r2, #60	; 0x3c
 800276a:	2100      	movs	r1, #0
 800276c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	0018      	movs	r0, r3
 8002772:	f000 f839 	bl	80027e8 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	223d      	movs	r2, #61	; 0x3d
 800277a:	2102      	movs	r1, #2
 800277c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681a      	ldr	r2, [r3, #0]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	3304      	adds	r3, #4
 8002786:	0019      	movs	r1, r3
 8002788:	0010      	movs	r0, r2
 800278a:	f000 fc19 	bl	8002fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	2246      	movs	r2, #70	; 0x46
 8002792:	2101      	movs	r1, #1
 8002794:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	223e      	movs	r2, #62	; 0x3e
 800279a:	2101      	movs	r1, #1
 800279c:	5499      	strb	r1, [r3, r2]
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	223f      	movs	r2, #63	; 0x3f
 80027a2:	2101      	movs	r1, #1
 80027a4:	5499      	strb	r1, [r3, r2]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2240      	movs	r2, #64	; 0x40
 80027aa:	2101      	movs	r1, #1
 80027ac:	5499      	strb	r1, [r3, r2]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2241      	movs	r2, #65	; 0x41
 80027b2:	2101      	movs	r1, #1
 80027b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2242      	movs	r2, #66	; 0x42
 80027ba:	2101      	movs	r1, #1
 80027bc:	5499      	strb	r1, [r3, r2]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2243      	movs	r2, #67	; 0x43
 80027c2:	2101      	movs	r1, #1
 80027c4:	5499      	strb	r1, [r3, r2]
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2244      	movs	r2, #68	; 0x44
 80027ca:	2101      	movs	r1, #1
 80027cc:	5499      	strb	r1, [r3, r2]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2245      	movs	r2, #69	; 0x45
 80027d2:	2101      	movs	r1, #1
 80027d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	223d      	movs	r2, #61	; 0x3d
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	0018      	movs	r0, r3
 80027e2:	46bd      	mov	sp, r7
 80027e4:	b002      	add	sp, #8
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80027f0:	46c0      	nop			; (mov r8, r8)
 80027f2:	46bd      	mov	sp, r7
 80027f4:	b002      	add	sp, #8
 80027f6:	bd80      	pop	{r7, pc}

080027f8 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027f8:	b580      	push	{r7, lr}
 80027fa:	b084      	sub	sp, #16
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
 8002800:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002802:	230f      	movs	r3, #15
 8002804:	18fb      	adds	r3, r7, r3
 8002806:	2200      	movs	r2, #0
 8002808:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 800280a:	683b      	ldr	r3, [r7, #0]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <HAL_TIM_IC_Start_IT+0x22>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	223e      	movs	r2, #62	; 0x3e
 8002814:	5c9b      	ldrb	r3, [r3, r2]
 8002816:	b2db      	uxtb	r3, r3
 8002818:	e013      	b.n	8002842 <HAL_TIM_IC_Start_IT+0x4a>
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	2b04      	cmp	r3, #4
 800281e:	d104      	bne.n	800282a <HAL_TIM_IC_Start_IT+0x32>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	223f      	movs	r2, #63	; 0x3f
 8002824:	5c9b      	ldrb	r3, [r3, r2]
 8002826:	b2db      	uxtb	r3, r3
 8002828:	e00b      	b.n	8002842 <HAL_TIM_IC_Start_IT+0x4a>
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b08      	cmp	r3, #8
 800282e:	d104      	bne.n	800283a <HAL_TIM_IC_Start_IT+0x42>
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2240      	movs	r2, #64	; 0x40
 8002834:	5c9b      	ldrb	r3, [r3, r2]
 8002836:	b2db      	uxtb	r3, r3
 8002838:	e003      	b.n	8002842 <HAL_TIM_IC_Start_IT+0x4a>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2241      	movs	r2, #65	; 0x41
 800283e:	5c9b      	ldrb	r3, [r3, r2]
 8002840:	b2db      	uxtb	r3, r3
 8002842:	220e      	movs	r2, #14
 8002844:	18ba      	adds	r2, r7, r2
 8002846:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	2b00      	cmp	r3, #0
 800284c:	d104      	bne.n	8002858 <HAL_TIM_IC_Start_IT+0x60>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2242      	movs	r2, #66	; 0x42
 8002852:	5c9b      	ldrb	r3, [r3, r2]
 8002854:	b2db      	uxtb	r3, r3
 8002856:	e013      	b.n	8002880 <HAL_TIM_IC_Start_IT+0x88>
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	2b04      	cmp	r3, #4
 800285c:	d104      	bne.n	8002868 <HAL_TIM_IC_Start_IT+0x70>
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	2243      	movs	r2, #67	; 0x43
 8002862:	5c9b      	ldrb	r3, [r3, r2]
 8002864:	b2db      	uxtb	r3, r3
 8002866:	e00b      	b.n	8002880 <HAL_TIM_IC_Start_IT+0x88>
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	2b08      	cmp	r3, #8
 800286c:	d104      	bne.n	8002878 <HAL_TIM_IC_Start_IT+0x80>
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	2244      	movs	r2, #68	; 0x44
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	b2db      	uxtb	r3, r3
 8002876:	e003      	b.n	8002880 <HAL_TIM_IC_Start_IT+0x88>
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	2245      	movs	r2, #69	; 0x45
 800287c:	5c9b      	ldrb	r3, [r3, r2]
 800287e:	b2db      	uxtb	r3, r3
 8002880:	210d      	movs	r1, #13
 8002882:	187a      	adds	r2, r7, r1
 8002884:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002886:	230e      	movs	r3, #14
 8002888:	18fb      	adds	r3, r7, r3
 800288a:	781b      	ldrb	r3, [r3, #0]
 800288c:	2b01      	cmp	r3, #1
 800288e:	d103      	bne.n	8002898 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002890:	187b      	adds	r3, r7, r1
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	2b01      	cmp	r3, #1
 8002896:	d001      	beq.n	800289c <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8002898:	2301      	movs	r3, #1
 800289a:	e0a6      	b.n	80029ea <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800289c:	683b      	ldr	r3, [r7, #0]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d104      	bne.n	80028ac <HAL_TIM_IC_Start_IT+0xb4>
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	223e      	movs	r2, #62	; 0x3e
 80028a6:	2102      	movs	r1, #2
 80028a8:	5499      	strb	r1, [r3, r2]
 80028aa:	e013      	b.n	80028d4 <HAL_TIM_IC_Start_IT+0xdc>
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	2b04      	cmp	r3, #4
 80028b0:	d104      	bne.n	80028bc <HAL_TIM_IC_Start_IT+0xc4>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	223f      	movs	r2, #63	; 0x3f
 80028b6:	2102      	movs	r1, #2
 80028b8:	5499      	strb	r1, [r3, r2]
 80028ba:	e00b      	b.n	80028d4 <HAL_TIM_IC_Start_IT+0xdc>
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	2b08      	cmp	r3, #8
 80028c0:	d104      	bne.n	80028cc <HAL_TIM_IC_Start_IT+0xd4>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	2102      	movs	r1, #2
 80028c8:	5499      	strb	r1, [r3, r2]
 80028ca:	e003      	b.n	80028d4 <HAL_TIM_IC_Start_IT+0xdc>
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2241      	movs	r2, #65	; 0x41
 80028d0:	2102      	movs	r1, #2
 80028d2:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80028d4:	683b      	ldr	r3, [r7, #0]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_TIM_IC_Start_IT+0xec>
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	2242      	movs	r2, #66	; 0x42
 80028de:	2102      	movs	r1, #2
 80028e0:	5499      	strb	r1, [r3, r2]
 80028e2:	e013      	b.n	800290c <HAL_TIM_IC_Start_IT+0x114>
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d104      	bne.n	80028f4 <HAL_TIM_IC_Start_IT+0xfc>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2243      	movs	r2, #67	; 0x43
 80028ee:	2102      	movs	r1, #2
 80028f0:	5499      	strb	r1, [r3, r2]
 80028f2:	e00b      	b.n	800290c <HAL_TIM_IC_Start_IT+0x114>
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	2b08      	cmp	r3, #8
 80028f8:	d104      	bne.n	8002904 <HAL_TIM_IC_Start_IT+0x10c>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	2244      	movs	r2, #68	; 0x44
 80028fe:	2102      	movs	r1, #2
 8002900:	5499      	strb	r1, [r3, r2]
 8002902:	e003      	b.n	800290c <HAL_TIM_IC_Start_IT+0x114>
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2245      	movs	r2, #69	; 0x45
 8002908:	2102      	movs	r1, #2
 800290a:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	2b0c      	cmp	r3, #12
 8002910:	d02a      	beq.n	8002968 <HAL_TIM_IC_Start_IT+0x170>
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	2b0c      	cmp	r3, #12
 8002916:	d830      	bhi.n	800297a <HAL_TIM_IC_Start_IT+0x182>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	2b08      	cmp	r3, #8
 800291c:	d01b      	beq.n	8002956 <HAL_TIM_IC_Start_IT+0x15e>
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	2b08      	cmp	r3, #8
 8002922:	d82a      	bhi.n	800297a <HAL_TIM_IC_Start_IT+0x182>
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d003      	beq.n	8002932 <HAL_TIM_IC_Start_IT+0x13a>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	2b04      	cmp	r3, #4
 800292e:	d009      	beq.n	8002944 <HAL_TIM_IC_Start_IT+0x14c>
 8002930:	e023      	b.n	800297a <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	68da      	ldr	r2, [r3, #12]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	2102      	movs	r1, #2
 800293e:	430a      	orrs	r2, r1
 8002940:	60da      	str	r2, [r3, #12]
      break;
 8002942:	e01f      	b.n	8002984 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	68da      	ldr	r2, [r3, #12]
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2104      	movs	r1, #4
 8002950:	430a      	orrs	r2, r1
 8002952:	60da      	str	r2, [r3, #12]
      break;
 8002954:	e016      	b.n	8002984 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	68da      	ldr	r2, [r3, #12]
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2108      	movs	r1, #8
 8002962:	430a      	orrs	r2, r1
 8002964:	60da      	str	r2, [r3, #12]
      break;
 8002966:	e00d      	b.n	8002984 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	68da      	ldr	r2, [r3, #12]
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	2110      	movs	r1, #16
 8002974:	430a      	orrs	r2, r1
 8002976:	60da      	str	r2, [r3, #12]
      break;
 8002978:	e004      	b.n	8002984 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 800297a:	230f      	movs	r3, #15
 800297c:	18fb      	adds	r3, r7, r3
 800297e:	2201      	movs	r2, #1
 8002980:	701a      	strb	r2, [r3, #0]
      break;
 8002982:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8002984:	230f      	movs	r3, #15
 8002986:	18fb      	adds	r3, r7, r3
 8002988:	781b      	ldrb	r3, [r3, #0]
 800298a:	2b00      	cmp	r3, #0
 800298c:	d12a      	bne.n	80029e4 <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	6839      	ldr	r1, [r7, #0]
 8002994:	2201      	movs	r2, #1
 8002996:	0018      	movs	r0, r3
 8002998:	f000 fd32 	bl	8003400 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a14      	ldr	r2, [pc, #80]	; (80029f4 <HAL_TIM_IC_Start_IT+0x1fc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d004      	beq.n	80029b0 <HAL_TIM_IC_Start_IT+0x1b8>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a13      	ldr	r2, [pc, #76]	; (80029f8 <HAL_TIM_IC_Start_IT+0x200>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d111      	bne.n	80029d4 <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	689b      	ldr	r3, [r3, #8]
 80029b6:	2207      	movs	r2, #7
 80029b8:	4013      	ands	r3, r2
 80029ba:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b06      	cmp	r3, #6
 80029c0:	d010      	beq.n	80029e4 <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681a      	ldr	r2, [r3, #0]
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2101      	movs	r1, #1
 80029ce:	430a      	orrs	r2, r1
 80029d0:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d2:	e007      	b.n	80029e4 <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	681a      	ldr	r2, [r3, #0]
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	2101      	movs	r1, #1
 80029e0:	430a      	orrs	r2, r1
 80029e2:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80029e4:	230f      	movs	r3, #15
 80029e6:	18fb      	adds	r3, r7, r3
 80029e8:	781b      	ldrb	r3, [r3, #0]
}
 80029ea:	0018      	movs	r0, r3
 80029ec:	46bd      	mov	sp, r7
 80029ee:	b004      	add	sp, #16
 80029f0:	bd80      	pop	{r7, pc}
 80029f2:	46c0      	nop			; (mov r8, r8)
 80029f4:	40012c00 	.word	0x40012c00
 80029f8:	40000400 	.word	0x40000400

080029fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	b082      	sub	sp, #8
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	4013      	ands	r3, r2
 8002a0e:	2b02      	cmp	r3, #2
 8002a10:	d124      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68db      	ldr	r3, [r3, #12]
 8002a18:	2202      	movs	r2, #2
 8002a1a:	4013      	ands	r3, r2
 8002a1c:	2b02      	cmp	r3, #2
 8002a1e:	d11d      	bne.n	8002a5c <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	2203      	movs	r2, #3
 8002a26:	4252      	negs	r2, r2
 8002a28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	699b      	ldr	r3, [r3, #24]
 8002a36:	2203      	movs	r2, #3
 8002a38:	4013      	ands	r3, r2
 8002a3a:	d004      	beq.n	8002a46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	0018      	movs	r0, r3
 8002a40:	f7fd feba 	bl	80007b8 <HAL_TIM_IC_CaptureCallback>
 8002a44:	e007      	b.n	8002a56 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	0018      	movs	r0, r3
 8002a4a:	f000 faa1 	bl	8002f90 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 faa5 	bl	8002fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	691b      	ldr	r3, [r3, #16]
 8002a62:	2204      	movs	r2, #4
 8002a64:	4013      	ands	r3, r2
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	d125      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68db      	ldr	r3, [r3, #12]
 8002a70:	2204      	movs	r2, #4
 8002a72:	4013      	ands	r3, r2
 8002a74:	2b04      	cmp	r3, #4
 8002a76:	d11e      	bne.n	8002ab6 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	2205      	movs	r2, #5
 8002a7e:	4252      	negs	r2, r2
 8002a80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	2202      	movs	r2, #2
 8002a86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	23c0      	movs	r3, #192	; 0xc0
 8002a90:	009b      	lsls	r3, r3, #2
 8002a92:	4013      	ands	r3, r2
 8002a94:	d004      	beq.n	8002aa0 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	0018      	movs	r0, r3
 8002a9a:	f7fd fe8d 	bl	80007b8 <HAL_TIM_IC_CaptureCallback>
 8002a9e:	e007      	b.n	8002ab0 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	0018      	movs	r0, r3
 8002aa4:	f000 fa74 	bl	8002f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	0018      	movs	r0, r3
 8002aac:	f000 fa78 	bl	8002fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	691b      	ldr	r3, [r3, #16]
 8002abc:	2208      	movs	r2, #8
 8002abe:	4013      	ands	r3, r2
 8002ac0:	2b08      	cmp	r3, #8
 8002ac2:	d124      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	68db      	ldr	r3, [r3, #12]
 8002aca:	2208      	movs	r2, #8
 8002acc:	4013      	ands	r3, r2
 8002ace:	2b08      	cmp	r3, #8
 8002ad0:	d11d      	bne.n	8002b0e <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	2209      	movs	r2, #9
 8002ad8:	4252      	negs	r2, r2
 8002ada:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2204      	movs	r2, #4
 8002ae0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	2203      	movs	r2, #3
 8002aea:	4013      	ands	r3, r2
 8002aec:	d004      	beq.n	8002af8 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	0018      	movs	r0, r3
 8002af2:	f7fd fe61 	bl	80007b8 <HAL_TIM_IC_CaptureCallback>
 8002af6:	e007      	b.n	8002b08 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	0018      	movs	r0, r3
 8002afc:	f000 fa48 	bl	8002f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	0018      	movs	r0, r3
 8002b04:	f000 fa4c 	bl	8002fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	691b      	ldr	r3, [r3, #16]
 8002b14:	2210      	movs	r2, #16
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b10      	cmp	r3, #16
 8002b1a:	d125      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	68db      	ldr	r3, [r3, #12]
 8002b22:	2210      	movs	r2, #16
 8002b24:	4013      	ands	r3, r2
 8002b26:	2b10      	cmp	r3, #16
 8002b28:	d11e      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	2211      	movs	r2, #17
 8002b30:	4252      	negs	r2, r2
 8002b32:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2208      	movs	r2, #8
 8002b38:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	23c0      	movs	r3, #192	; 0xc0
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4013      	ands	r3, r2
 8002b46:	d004      	beq.n	8002b52 <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	0018      	movs	r0, r3
 8002b4c:	f7fd fe34 	bl	80007b8 <HAL_TIM_IC_CaptureCallback>
 8002b50:	e007      	b.n	8002b62 <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	0018      	movs	r0, r3
 8002b56:	f000 fa1b 	bl	8002f90 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	0018      	movs	r0, r3
 8002b5e:	f000 fa1f 	bl	8002fa0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2201      	movs	r2, #1
 8002b70:	4013      	ands	r3, r2
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10f      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	2201      	movs	r2, #1
 8002b7e:	4013      	ands	r3, r2
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d108      	bne.n	8002b96 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	2202      	movs	r2, #2
 8002b8a:	4252      	negs	r2, r2
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	0018      	movs	r0, r3
 8002b92:	f000 f9f5 	bl	8002f80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
 8002b9c:	2280      	movs	r2, #128	; 0x80
 8002b9e:	4013      	ands	r3, r2
 8002ba0:	2b80      	cmp	r3, #128	; 0x80
 8002ba2:	d10f      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	68db      	ldr	r3, [r3, #12]
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	4013      	ands	r3, r2
 8002bae:	2b80      	cmp	r3, #128	; 0x80
 8002bb0:	d108      	bne.n	8002bc4 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2281      	movs	r2, #129	; 0x81
 8002bb8:	4252      	negs	r2, r2
 8002bba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	0018      	movs	r0, r3
 8002bc0:	f000 fc9c 	bl	80034fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	691b      	ldr	r3, [r3, #16]
 8002bca:	2240      	movs	r2, #64	; 0x40
 8002bcc:	4013      	ands	r3, r2
 8002bce:	2b40      	cmp	r3, #64	; 0x40
 8002bd0:	d10f      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	2240      	movs	r2, #64	; 0x40
 8002bda:	4013      	ands	r3, r2
 8002bdc:	2b40      	cmp	r3, #64	; 0x40
 8002bde:	d108      	bne.n	8002bf2 <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2241      	movs	r2, #65	; 0x41
 8002be6:	4252      	negs	r2, r2
 8002be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	0018      	movs	r0, r3
 8002bee:	f000 f9df 	bl	8002fb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	691b      	ldr	r3, [r3, #16]
 8002bf8:	2220      	movs	r2, #32
 8002bfa:	4013      	ands	r3, r2
 8002bfc:	2b20      	cmp	r3, #32
 8002bfe:	d10f      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	2220      	movs	r2, #32
 8002c08:	4013      	ands	r3, r2
 8002c0a:	2b20      	cmp	r3, #32
 8002c0c:	d108      	bne.n	8002c20 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	2221      	movs	r2, #33	; 0x21
 8002c14:	4252      	negs	r2, r2
 8002c16:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	0018      	movs	r0, r3
 8002c1c:	f000 fc66 	bl	80034ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c20:	46c0      	nop			; (mov r8, r8)
 8002c22:	46bd      	mov	sp, r7
 8002c24:	b002      	add	sp, #8
 8002c26:	bd80      	pop	{r7, pc}

08002c28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	b086      	sub	sp, #24
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	60f8      	str	r0, [r7, #12]
 8002c30:	60b9      	str	r1, [r7, #8]
 8002c32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002c34:	2317      	movs	r3, #23
 8002c36:	18fb      	adds	r3, r7, r3
 8002c38:	2200      	movs	r2, #0
 8002c3a:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	223c      	movs	r2, #60	; 0x3c
 8002c40:	5c9b      	ldrb	r3, [r3, r2]
 8002c42:	2b01      	cmp	r3, #1
 8002c44:	d101      	bne.n	8002c4a <HAL_TIM_IC_ConfigChannel+0x22>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e08c      	b.n	8002d64 <HAL_TIM_IC_ConfigChannel+0x13c>
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	223c      	movs	r2, #60	; 0x3c
 8002c4e:	2101      	movs	r1, #1
 8002c50:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d11b      	bne.n	8002c90 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	6818      	ldr	r0, [r3, #0]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	6819      	ldr	r1, [r3, #0]
 8002c60:	68bb      	ldr	r3, [r7, #8]
 8002c62:	685a      	ldr	r2, [r3, #4]
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	f000 fa16 	bl	8003098 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	699a      	ldr	r2, [r3, #24]
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	210c      	movs	r1, #12
 8002c78:	438a      	bics	r2, r1
 8002c7a:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6999      	ldr	r1, [r3, #24]
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	689a      	ldr	r2, [r3, #8]
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	430a      	orrs	r2, r1
 8002c8c:	619a      	str	r2, [r3, #24]
 8002c8e:	e062      	b.n	8002d56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b04      	cmp	r3, #4
 8002c94:	d11c      	bne.n	8002cd0 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	6818      	ldr	r0, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	6819      	ldr	r1, [r3, #0]
 8002c9e:	68bb      	ldr	r3, [r7, #8]
 8002ca0:	685a      	ldr	r2, [r3, #4]
 8002ca2:	68bb      	ldr	r3, [r7, #8]
 8002ca4:	68db      	ldr	r3, [r3, #12]
 8002ca6:	f000 fa77 	bl	8003198 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	699a      	ldr	r2, [r3, #24]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	492d      	ldr	r1, [pc, #180]	; (8002d6c <HAL_TIM_IC_ConfigChannel+0x144>)
 8002cb6:	400a      	ands	r2, r1
 8002cb8:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	6999      	ldr	r1, [r3, #24]
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	021a      	lsls	r2, r3, #8
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	430a      	orrs	r2, r1
 8002ccc:	619a      	str	r2, [r3, #24]
 8002cce:	e042      	b.n	8002d56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d11b      	bne.n	8002d0e <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	6818      	ldr	r0, [r3, #0]
 8002cda:	68bb      	ldr	r3, [r7, #8]
 8002cdc:	6819      	ldr	r1, [r3, #0]
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	685a      	ldr	r2, [r3, #4]
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	68db      	ldr	r3, [r3, #12]
 8002ce6:	f000 facb 	bl	8003280 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	69da      	ldr	r2, [r3, #28]
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	210c      	movs	r1, #12
 8002cf6:	438a      	bics	r2, r1
 8002cf8:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	69d9      	ldr	r1, [r3, #28]
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	689a      	ldr	r2, [r3, #8]
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	430a      	orrs	r2, r1
 8002d0a:	61da      	str	r2, [r3, #28]
 8002d0c:	e023      	b.n	8002d56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d11c      	bne.n	8002d4e <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	6818      	ldr	r0, [r3, #0]
 8002d18:	68bb      	ldr	r3, [r7, #8]
 8002d1a:	6819      	ldr	r1, [r3, #0]
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	685a      	ldr	r2, [r3, #4]
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	68db      	ldr	r3, [r3, #12]
 8002d24:	f000 faec 	bl	8003300 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	69da      	ldr	r2, [r3, #28]
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	490e      	ldr	r1, [pc, #56]	; (8002d6c <HAL_TIM_IC_ConfigChannel+0x144>)
 8002d34:	400a      	ands	r2, r1
 8002d36:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	69d9      	ldr	r1, [r3, #28]
 8002d3e:	68bb      	ldr	r3, [r7, #8]
 8002d40:	689b      	ldr	r3, [r3, #8]
 8002d42:	021a      	lsls	r2, r3, #8
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	430a      	orrs	r2, r1
 8002d4a:	61da      	str	r2, [r3, #28]
 8002d4c:	e003      	b.n	8002d56 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8002d4e:	2317      	movs	r3, #23
 8002d50:	18fb      	adds	r3, r7, r3
 8002d52:	2201      	movs	r2, #1
 8002d54:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	223c      	movs	r2, #60	; 0x3c
 8002d5a:	2100      	movs	r1, #0
 8002d5c:	5499      	strb	r1, [r3, r2]

  return status;
 8002d5e:	2317      	movs	r3, #23
 8002d60:	18fb      	adds	r3, r7, r3
 8002d62:	781b      	ldrb	r3, [r3, #0]
}
 8002d64:	0018      	movs	r0, r3
 8002d66:	46bd      	mov	sp, r7
 8002d68:	b006      	add	sp, #24
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	fffff3ff 	.word	0xfffff3ff

08002d70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d7a:	230f      	movs	r3, #15
 8002d7c:	18fb      	adds	r3, r7, r3
 8002d7e:	2200      	movs	r2, #0
 8002d80:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	223c      	movs	r2, #60	; 0x3c
 8002d86:	5c9b      	ldrb	r3, [r3, r2]
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d101      	bne.n	8002d90 <HAL_TIM_ConfigClockSource+0x20>
 8002d8c:	2302      	movs	r3, #2
 8002d8e:	e0bc      	b.n	8002f0a <HAL_TIM_ConfigClockSource+0x19a>
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	223c      	movs	r2, #60	; 0x3c
 8002d94:	2101      	movs	r1, #1
 8002d96:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	223d      	movs	r2, #61	; 0x3d
 8002d9c:	2102      	movs	r1, #2
 8002d9e:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002da8:	68bb      	ldr	r3, [r7, #8]
 8002daa:	2277      	movs	r2, #119	; 0x77
 8002dac:	4393      	bics	r3, r2
 8002dae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	4a58      	ldr	r2, [pc, #352]	; (8002f14 <HAL_TIM_ConfigClockSource+0x1a4>)
 8002db4:	4013      	ands	r3, r2
 8002db6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68ba      	ldr	r2, [r7, #8]
 8002dbe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2280      	movs	r2, #128	; 0x80
 8002dc6:	0192      	lsls	r2, r2, #6
 8002dc8:	4293      	cmp	r3, r2
 8002dca:	d040      	beq.n	8002e4e <HAL_TIM_ConfigClockSource+0xde>
 8002dcc:	2280      	movs	r2, #128	; 0x80
 8002dce:	0192      	lsls	r2, r2, #6
 8002dd0:	4293      	cmp	r3, r2
 8002dd2:	d900      	bls.n	8002dd6 <HAL_TIM_ConfigClockSource+0x66>
 8002dd4:	e088      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002dd6:	2280      	movs	r2, #128	; 0x80
 8002dd8:	0152      	lsls	r2, r2, #5
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d100      	bne.n	8002de0 <HAL_TIM_ConfigClockSource+0x70>
 8002dde:	e088      	b.n	8002ef2 <HAL_TIM_ConfigClockSource+0x182>
 8002de0:	2280      	movs	r2, #128	; 0x80
 8002de2:	0152      	lsls	r2, r2, #5
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d900      	bls.n	8002dea <HAL_TIM_ConfigClockSource+0x7a>
 8002de8:	e07e      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002dea:	2b70      	cmp	r3, #112	; 0x70
 8002dec:	d018      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xb0>
 8002dee:	d900      	bls.n	8002df2 <HAL_TIM_ConfigClockSource+0x82>
 8002df0:	e07a      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002df2:	2b60      	cmp	r3, #96	; 0x60
 8002df4:	d04f      	beq.n	8002e96 <HAL_TIM_ConfigClockSource+0x126>
 8002df6:	d900      	bls.n	8002dfa <HAL_TIM_ConfigClockSource+0x8a>
 8002df8:	e076      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002dfa:	2b50      	cmp	r3, #80	; 0x50
 8002dfc:	d03b      	beq.n	8002e76 <HAL_TIM_ConfigClockSource+0x106>
 8002dfe:	d900      	bls.n	8002e02 <HAL_TIM_ConfigClockSource+0x92>
 8002e00:	e072      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e02:	2b40      	cmp	r3, #64	; 0x40
 8002e04:	d057      	beq.n	8002eb6 <HAL_TIM_ConfigClockSource+0x146>
 8002e06:	d900      	bls.n	8002e0a <HAL_TIM_ConfigClockSource+0x9a>
 8002e08:	e06e      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d063      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e0e:	d86b      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e10:	2b20      	cmp	r3, #32
 8002e12:	d060      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e14:	d868      	bhi.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d05d      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e1a:	2b10      	cmp	r3, #16
 8002e1c:	d05b      	beq.n	8002ed6 <HAL_TIM_ConfigClockSource+0x166>
 8002e1e:	e063      	b.n	8002ee8 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f000 fac6 	bl	80033c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689b      	ldr	r3, [r3, #8]
 8002e3a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	2277      	movs	r2, #119	; 0x77
 8002e40:	4313      	orrs	r3, r2
 8002e42:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68ba      	ldr	r2, [r7, #8]
 8002e4a:	609a      	str	r2, [r3, #8]
      break;
 8002e4c:	e052      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	6818      	ldr	r0, [r3, #0]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	6899      	ldr	r1, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f000 faaf 	bl	80033c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	689a      	ldr	r2, [r3, #8]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	2180      	movs	r1, #128	; 0x80
 8002e6e:	01c9      	lsls	r1, r1, #7
 8002e70:	430a      	orrs	r2, r1
 8002e72:	609a      	str	r2, [r3, #8]
      break;
 8002e74:	e03e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6818      	ldr	r0, [r3, #0]
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	6859      	ldr	r1, [r3, #4]
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	68db      	ldr	r3, [r3, #12]
 8002e82:	001a      	movs	r2, r3
 8002e84:	f000 f95a 	bl	800313c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	2150      	movs	r1, #80	; 0x50
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f000 fa7c 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002e94:	e02e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	6818      	ldr	r0, [r3, #0]
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	6859      	ldr	r1, [r3, #4]
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	001a      	movs	r2, r3
 8002ea4:	f000 f9ba 	bl	800321c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	2160      	movs	r1, #96	; 0x60
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f000 fa6c 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002eb4:	e01e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	6818      	ldr	r0, [r3, #0]
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	6859      	ldr	r1, [r3, #4]
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	68db      	ldr	r3, [r3, #12]
 8002ec2:	001a      	movs	r2, r3
 8002ec4:	f000 f93a 	bl	800313c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2140      	movs	r1, #64	; 0x40
 8002ece:	0018      	movs	r0, r3
 8002ed0:	f000 fa5c 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002ed4:	e00e      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681a      	ldr	r2, [r3, #0]
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	0019      	movs	r1, r3
 8002ee0:	0010      	movs	r0, r2
 8002ee2:	f000 fa53 	bl	800338c <TIM_ITRx_SetConfig>
      break;
 8002ee6:	e005      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8002ee8:	230f      	movs	r3, #15
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
      break;
 8002ef0:	e000      	b.n	8002ef4 <HAL_TIM_ConfigClockSource+0x184>
      break;
 8002ef2:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	223d      	movs	r2, #61	; 0x3d
 8002ef8:	2101      	movs	r1, #1
 8002efa:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	223c      	movs	r2, #60	; 0x3c
 8002f00:	2100      	movs	r1, #0
 8002f02:	5499      	strb	r1, [r3, r2]

  return status;
 8002f04:	230f      	movs	r3, #15
 8002f06:	18fb      	adds	r3, r7, r3
 8002f08:	781b      	ldrb	r3, [r3, #0]
}
 8002f0a:	0018      	movs	r0, r3
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	b004      	add	sp, #16
 8002f10:	bd80      	pop	{r7, pc}
 8002f12:	46c0      	nop			; (mov r8, r8)
 8002f14:	ffff00ff 	.word	0xffff00ff

08002f18 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
 8002f20:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	2b0c      	cmp	r3, #12
 8002f2a:	d01e      	beq.n	8002f6a <HAL_TIM_ReadCapturedValue+0x52>
 8002f2c:	683b      	ldr	r3, [r7, #0]
 8002f2e:	2b0c      	cmp	r3, #12
 8002f30:	d820      	bhi.n	8002f74 <HAL_TIM_ReadCapturedValue+0x5c>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	d013      	beq.n	8002f60 <HAL_TIM_ReadCapturedValue+0x48>
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	2b08      	cmp	r3, #8
 8002f3c:	d81a      	bhi.n	8002f74 <HAL_TIM_ReadCapturedValue+0x5c>
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <HAL_TIM_ReadCapturedValue+0x34>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	2b04      	cmp	r3, #4
 8002f48:	d005      	beq.n	8002f56 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8002f4a:	e013      	b.n	8002f74 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f52:	60fb      	str	r3, [r7, #12]
      break;
 8002f54:	e00f      	b.n	8002f76 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	60fb      	str	r3, [r7, #12]
      break;
 8002f5e:	e00a      	b.n	8002f76 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002f66:	60fb      	str	r3, [r7, #12]
      break;
 8002f68:	e005      	b.n	8002f76 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f70:	60fb      	str	r3, [r7, #12]
      break;
 8002f72:	e000      	b.n	8002f76 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8002f74:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8002f76:	68fb      	ldr	r3, [r7, #12]
}
 8002f78:	0018      	movs	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	b004      	add	sp, #16
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b082      	sub	sp, #8
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002f88:	46c0      	nop			; (mov r8, r8)
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	b002      	add	sp, #8
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b082      	sub	sp, #8
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002f98:	46c0      	nop			; (mov r8, r8)
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	b002      	add	sp, #8
 8002f9e:	bd80      	pop	{r7, pc}

08002fa0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002fa0:	b580      	push	{r7, lr}
 8002fa2:	b082      	sub	sp, #8
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002fa8:	46c0      	nop			; (mov r8, r8)
 8002faa:	46bd      	mov	sp, r7
 8002fac:	b002      	add	sp, #8
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	b082      	sub	sp, #8
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002fb8:	46c0      	nop			; (mov r8, r8)
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	b002      	add	sp, #8
 8002fbe:	bd80      	pop	{r7, pc}

08002fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002fc0:	b580      	push	{r7, lr}
 8002fc2:	b084      	sub	sp, #16
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	4a2b      	ldr	r2, [pc, #172]	; (8003080 <TIM_Base_SetConfig+0xc0>)
 8002fd4:	4293      	cmp	r3, r2
 8002fd6:	d003      	beq.n	8002fe0 <TIM_Base_SetConfig+0x20>
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	4a2a      	ldr	r2, [pc, #168]	; (8003084 <TIM_Base_SetConfig+0xc4>)
 8002fdc:	4293      	cmp	r3, r2
 8002fde:	d108      	bne.n	8002ff2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2270      	movs	r2, #112	; 0x70
 8002fe4:	4393      	bics	r3, r2
 8002fe6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002fe8:	683b      	ldr	r3, [r7, #0]
 8002fea:	685b      	ldr	r3, [r3, #4]
 8002fec:	68fa      	ldr	r2, [r7, #12]
 8002fee:	4313      	orrs	r3, r2
 8002ff0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a22      	ldr	r2, [pc, #136]	; (8003080 <TIM_Base_SetConfig+0xc0>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00f      	beq.n	800301a <TIM_Base_SetConfig+0x5a>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a21      	ldr	r2, [pc, #132]	; (8003084 <TIM_Base_SetConfig+0xc4>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d00b      	beq.n	800301a <TIM_Base_SetConfig+0x5a>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a20      	ldr	r2, [pc, #128]	; (8003088 <TIM_Base_SetConfig+0xc8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d007      	beq.n	800301a <TIM_Base_SetConfig+0x5a>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a1f      	ldr	r2, [pc, #124]	; (800308c <TIM_Base_SetConfig+0xcc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d003      	beq.n	800301a <TIM_Base_SetConfig+0x5a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1e      	ldr	r2, [pc, #120]	; (8003090 <TIM_Base_SetConfig+0xd0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d108      	bne.n	800302c <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	4a1d      	ldr	r2, [pc, #116]	; (8003094 <TIM_Base_SetConfig+0xd4>)
 800301e:	4013      	ands	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	68fa      	ldr	r2, [r7, #12]
 8003028:	4313      	orrs	r3, r2
 800302a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	2280      	movs	r2, #128	; 0x80
 8003030:	4393      	bics	r3, r2
 8003032:	001a      	movs	r2, r3
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	695b      	ldr	r3, [r3, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	68fa      	ldr	r2, [r7, #12]
 8003040:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	689a      	ldr	r2, [r3, #8]
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	681a      	ldr	r2, [r3, #0]
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	4a0a      	ldr	r2, [pc, #40]	; (8003080 <TIM_Base_SetConfig+0xc0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d007      	beq.n	800306a <TIM_Base_SetConfig+0xaa>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	4a0b      	ldr	r2, [pc, #44]	; (800308c <TIM_Base_SetConfig+0xcc>)
 800305e:	4293      	cmp	r3, r2
 8003060:	d003      	beq.n	800306a <TIM_Base_SetConfig+0xaa>
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4a0a      	ldr	r2, [pc, #40]	; (8003090 <TIM_Base_SetConfig+0xd0>)
 8003066:	4293      	cmp	r3, r2
 8003068:	d103      	bne.n	8003072 <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	691a      	ldr	r2, [r3, #16]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2201      	movs	r2, #1
 8003076:	615a      	str	r2, [r3, #20]
}
 8003078:	46c0      	nop			; (mov r8, r8)
 800307a:	46bd      	mov	sp, r7
 800307c:	b004      	add	sp, #16
 800307e:	bd80      	pop	{r7, pc}
 8003080:	40012c00 	.word	0x40012c00
 8003084:	40000400 	.word	0x40000400
 8003088:	40002000 	.word	0x40002000
 800308c:	40014400 	.word	0x40014400
 8003090:	40014800 	.word	0x40014800
 8003094:	fffffcff 	.word	0xfffffcff

08003098 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	607a      	str	r2, [r7, #4]
 80030a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	2201      	movs	r2, #1
 80030ac:	4393      	bics	r3, r2
 80030ae:	001a      	movs	r2, r3
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	699b      	ldr	r3, [r3, #24]
 80030b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	6a1b      	ldr	r3, [r3, #32]
 80030be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	4a1c      	ldr	r2, [pc, #112]	; (8003134 <TIM_TI1_SetConfig+0x9c>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d003      	beq.n	80030d0 <TIM_TI1_SetConfig+0x38>
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	4a1b      	ldr	r2, [pc, #108]	; (8003138 <TIM_TI1_SetConfig+0xa0>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d101      	bne.n	80030d4 <TIM_TI1_SetConfig+0x3c>
 80030d0:	2301      	movs	r3, #1
 80030d2:	e000      	b.n	80030d6 <TIM_TI1_SetConfig+0x3e>
 80030d4:	2300      	movs	r3, #0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d008      	beq.n	80030ec <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80030da:	697b      	ldr	r3, [r7, #20]
 80030dc:	2203      	movs	r2, #3
 80030de:	4393      	bics	r3, r2
 80030e0:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80030e2:	697a      	ldr	r2, [r7, #20]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	617b      	str	r3, [r7, #20]
 80030ea:	e003      	b.n	80030f4 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80030ec:	697b      	ldr	r3, [r7, #20]
 80030ee:	2201      	movs	r2, #1
 80030f0:	4313      	orrs	r3, r2
 80030f2:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	22f0      	movs	r2, #240	; 0xf0
 80030f8:	4393      	bics	r3, r2
 80030fa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	011b      	lsls	r3, r3, #4
 8003100:	22ff      	movs	r2, #255	; 0xff
 8003102:	4013      	ands	r3, r2
 8003104:	697a      	ldr	r2, [r7, #20]
 8003106:	4313      	orrs	r3, r2
 8003108:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	220a      	movs	r2, #10
 800310e:	4393      	bics	r3, r2
 8003110:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	220a      	movs	r2, #10
 8003116:	4013      	ands	r3, r2
 8003118:	693a      	ldr	r2, [r7, #16]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	697a      	ldr	r2, [r7, #20]
 8003122:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	621a      	str	r2, [r3, #32]
}
 800312a:	46c0      	nop			; (mov r8, r8)
 800312c:	46bd      	mov	sp, r7
 800312e:	b006      	add	sp, #24
 8003130:	bd80      	pop	{r7, pc}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	40012c00 	.word	0x40012c00
 8003138:	40000400 	.word	0x40000400

0800313c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b086      	sub	sp, #24
 8003140:	af00      	add	r7, sp, #0
 8003142:	60f8      	str	r0, [r7, #12]
 8003144:	60b9      	str	r1, [r7, #8]
 8003146:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	6a1b      	ldr	r3, [r3, #32]
 800314c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	6a1b      	ldr	r3, [r3, #32]
 8003152:	2201      	movs	r2, #1
 8003154:	4393      	bics	r3, r2
 8003156:	001a      	movs	r2, r3
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	699b      	ldr	r3, [r3, #24]
 8003160:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	22f0      	movs	r2, #240	; 0xf0
 8003166:	4393      	bics	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	011b      	lsls	r3, r3, #4
 800316e:	693a      	ldr	r2, [r7, #16]
 8003170:	4313      	orrs	r3, r2
 8003172:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	220a      	movs	r2, #10
 8003178:	4393      	bics	r3, r2
 800317a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800317c:	697a      	ldr	r2, [r7, #20]
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	4313      	orrs	r3, r2
 8003182:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	693a      	ldr	r2, [r7, #16]
 8003188:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	697a      	ldr	r2, [r7, #20]
 800318e:	621a      	str	r2, [r3, #32]
}
 8003190:	46c0      	nop			; (mov r8, r8)
 8003192:	46bd      	mov	sp, r7
 8003194:	b006      	add	sp, #24
 8003196:	bd80      	pop	{r7, pc}

08003198 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	6a1b      	ldr	r3, [r3, #32]
 80031aa:	2210      	movs	r2, #16
 80031ac:	4393      	bics	r3, r2
 80031ae:	001a      	movs	r2, r3
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80031c0:	697b      	ldr	r3, [r7, #20]
 80031c2:	4a14      	ldr	r2, [pc, #80]	; (8003214 <TIM_TI2_SetConfig+0x7c>)
 80031c4:	4013      	ands	r3, r2
 80031c6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	021b      	lsls	r3, r3, #8
 80031cc:	697a      	ldr	r2, [r7, #20]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	4a10      	ldr	r2, [pc, #64]	; (8003218 <TIM_TI2_SetConfig+0x80>)
 80031d6:	4013      	ands	r3, r2
 80031d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80031da:	683b      	ldr	r3, [r7, #0]
 80031dc:	031b      	lsls	r3, r3, #12
 80031de:	041b      	lsls	r3, r3, #16
 80031e0:	0c1b      	lsrs	r3, r3, #16
 80031e2:	697a      	ldr	r2, [r7, #20]
 80031e4:	4313      	orrs	r3, r2
 80031e6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	22a0      	movs	r2, #160	; 0xa0
 80031ec:	4393      	bics	r3, r2
 80031ee:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	011b      	lsls	r3, r3, #4
 80031f4:	22a0      	movs	r2, #160	; 0xa0
 80031f6:	4013      	ands	r3, r2
 80031f8:	693a      	ldr	r2, [r7, #16]
 80031fa:	4313      	orrs	r3, r2
 80031fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	697a      	ldr	r2, [r7, #20]
 8003202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	693a      	ldr	r2, [r7, #16]
 8003208:	621a      	str	r2, [r3, #32]
}
 800320a:	46c0      	nop			; (mov r8, r8)
 800320c:	46bd      	mov	sp, r7
 800320e:	b006      	add	sp, #24
 8003210:	bd80      	pop	{r7, pc}
 8003212:	46c0      	nop			; (mov r8, r8)
 8003214:	fffffcff 	.word	0xfffffcff
 8003218:	ffff0fff 	.word	0xffff0fff

0800321c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	2210      	movs	r2, #16
 800322e:	4393      	bics	r3, r2
 8003230:	001a      	movs	r2, r3
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	699b      	ldr	r3, [r3, #24]
 800323a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	6a1b      	ldr	r3, [r3, #32]
 8003240:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003242:	697b      	ldr	r3, [r7, #20]
 8003244:	4a0d      	ldr	r2, [pc, #52]	; (800327c <TIM_TI2_ConfigInputStage+0x60>)
 8003246:	4013      	ands	r3, r2
 8003248:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	031b      	lsls	r3, r3, #12
 800324e:	697a      	ldr	r2, [r7, #20]
 8003250:	4313      	orrs	r3, r2
 8003252:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	22a0      	movs	r2, #160	; 0xa0
 8003258:	4393      	bics	r3, r2
 800325a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800325c:	68bb      	ldr	r3, [r7, #8]
 800325e:	011b      	lsls	r3, r3, #4
 8003260:	693a      	ldr	r2, [r7, #16]
 8003262:	4313      	orrs	r3, r2
 8003264:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	697a      	ldr	r2, [r7, #20]
 800326a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	693a      	ldr	r2, [r7, #16]
 8003270:	621a      	str	r2, [r3, #32]
}
 8003272:	46c0      	nop			; (mov r8, r8)
 8003274:	46bd      	mov	sp, r7
 8003276:	b006      	add	sp, #24
 8003278:	bd80      	pop	{r7, pc}
 800327a:	46c0      	nop			; (mov r8, r8)
 800327c:	ffff0fff 	.word	0xffff0fff

08003280 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af00      	add	r7, sp, #0
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
 800328c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	6a1b      	ldr	r3, [r3, #32]
 8003292:	4a19      	ldr	r2, [pc, #100]	; (80032f8 <TIM_TI3_SetConfig+0x78>)
 8003294:	401a      	ands	r2, r3
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	69db      	ldr	r3, [r3, #28]
 800329e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80032a6:	697b      	ldr	r3, [r7, #20]
 80032a8:	2203      	movs	r2, #3
 80032aa:	4393      	bics	r3, r2
 80032ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80032b6:	697b      	ldr	r3, [r7, #20]
 80032b8:	22f0      	movs	r2, #240	; 0xf0
 80032ba:	4393      	bics	r3, r2
 80032bc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	011b      	lsls	r3, r3, #4
 80032c2:	22ff      	movs	r2, #255	; 0xff
 80032c4:	4013      	ands	r3, r2
 80032c6:	697a      	ldr	r2, [r7, #20]
 80032c8:	4313      	orrs	r3, r2
 80032ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80032cc:	693b      	ldr	r3, [r7, #16]
 80032ce:	4a0b      	ldr	r2, [pc, #44]	; (80032fc <TIM_TI3_SetConfig+0x7c>)
 80032d0:	4013      	ands	r3, r2
 80032d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80032d4:	68bb      	ldr	r3, [r7, #8]
 80032d6:	021a      	lsls	r2, r3, #8
 80032d8:	23a0      	movs	r3, #160	; 0xa0
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	4013      	ands	r3, r2
 80032de:	693a      	ldr	r2, [r7, #16]
 80032e0:	4313      	orrs	r3, r2
 80032e2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	693a      	ldr	r2, [r7, #16]
 80032ee:	621a      	str	r2, [r3, #32]
}
 80032f0:	46c0      	nop			; (mov r8, r8)
 80032f2:	46bd      	mov	sp, r7
 80032f4:	b006      	add	sp, #24
 80032f6:	bd80      	pop	{r7, pc}
 80032f8:	fffffeff 	.word	0xfffffeff
 80032fc:	fffff5ff 	.word	0xfffff5ff

08003300 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b086      	sub	sp, #24
 8003304:	af00      	add	r7, sp, #0
 8003306:	60f8      	str	r0, [r7, #12]
 8003308:	60b9      	str	r1, [r7, #8]
 800330a:	607a      	str	r2, [r7, #4]
 800330c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a1b      	ldr	r3, [r3, #32]
 8003312:	4a1a      	ldr	r2, [pc, #104]	; (800337c <TIM_TI4_SetConfig+0x7c>)
 8003314:	401a      	ands	r2, r3
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	69db      	ldr	r3, [r3, #28]
 800331e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	6a1b      	ldr	r3, [r3, #32]
 8003324:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	4a15      	ldr	r2, [pc, #84]	; (8003380 <TIM_TI4_SetConfig+0x80>)
 800332a:	4013      	ands	r3, r2
 800332c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	021b      	lsls	r3, r3, #8
 8003332:	697a      	ldr	r2, [r7, #20]
 8003334:	4313      	orrs	r3, r2
 8003336:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003338:	697b      	ldr	r3, [r7, #20]
 800333a:	4a12      	ldr	r2, [pc, #72]	; (8003384 <TIM_TI4_SetConfig+0x84>)
 800333c:	4013      	ands	r3, r2
 800333e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	031b      	lsls	r3, r3, #12
 8003344:	041b      	lsls	r3, r3, #16
 8003346:	0c1b      	lsrs	r3, r3, #16
 8003348:	697a      	ldr	r2, [r7, #20]
 800334a:	4313      	orrs	r3, r2
 800334c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800334e:	693b      	ldr	r3, [r7, #16]
 8003350:	4a0d      	ldr	r2, [pc, #52]	; (8003388 <TIM_TI4_SetConfig+0x88>)
 8003352:	4013      	ands	r3, r2
 8003354:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	031a      	lsls	r2, r3, #12
 800335a:	23a0      	movs	r3, #160	; 0xa0
 800335c:	021b      	lsls	r3, r3, #8
 800335e:	4013      	ands	r3, r2
 8003360:	693a      	ldr	r2, [r7, #16]
 8003362:	4313      	orrs	r3, r2
 8003364:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	697a      	ldr	r2, [r7, #20]
 800336a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	693a      	ldr	r2, [r7, #16]
 8003370:	621a      	str	r2, [r3, #32]
}
 8003372:	46c0      	nop			; (mov r8, r8)
 8003374:	46bd      	mov	sp, r7
 8003376:	b006      	add	sp, #24
 8003378:	bd80      	pop	{r7, pc}
 800337a:	46c0      	nop			; (mov r8, r8)
 800337c:	ffffefff 	.word	0xffffefff
 8003380:	fffffcff 	.word	0xfffffcff
 8003384:	ffff0fff 	.word	0xffff0fff
 8003388:	ffff5fff 	.word	0xffff5fff

0800338c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b084      	sub	sp, #16
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	689b      	ldr	r3, [r3, #8]
 800339a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2270      	movs	r2, #112	; 0x70
 80033a0:	4393      	bics	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80033a4:	683a      	ldr	r2, [r7, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	4313      	orrs	r3, r2
 80033aa:	2207      	movs	r2, #7
 80033ac:	4313      	orrs	r3, r2
 80033ae:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	68fa      	ldr	r2, [r7, #12]
 80033b4:	609a      	str	r2, [r3, #8]
}
 80033b6:	46c0      	nop			; (mov r8, r8)
 80033b8:	46bd      	mov	sp, r7
 80033ba:	b004      	add	sp, #16
 80033bc:	bd80      	pop	{r7, pc}
	...

080033c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b086      	sub	sp, #24
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	60f8      	str	r0, [r7, #12]
 80033c8:	60b9      	str	r1, [r7, #8]
 80033ca:	607a      	str	r2, [r7, #4]
 80033cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	4a09      	ldr	r2, [pc, #36]	; (80033fc <TIM_ETR_SetConfig+0x3c>)
 80033d8:	4013      	ands	r3, r2
 80033da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	021a      	lsls	r2, r3, #8
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	431a      	orrs	r2, r3
 80033e4:	68bb      	ldr	r3, [r7, #8]
 80033e6:	4313      	orrs	r3, r2
 80033e8:	697a      	ldr	r2, [r7, #20]
 80033ea:	4313      	orrs	r3, r2
 80033ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	697a      	ldr	r2, [r7, #20]
 80033f2:	609a      	str	r2, [r3, #8]
}
 80033f4:	46c0      	nop			; (mov r8, r8)
 80033f6:	46bd      	mov	sp, r7
 80033f8:	b006      	add	sp, #24
 80033fa:	bd80      	pop	{r7, pc}
 80033fc:	ffff00ff 	.word	0xffff00ff

08003400 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	60f8      	str	r0, [r7, #12]
 8003408:	60b9      	str	r1, [r7, #8]
 800340a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	221f      	movs	r2, #31
 8003410:	4013      	ands	r3, r2
 8003412:	2201      	movs	r2, #1
 8003414:	409a      	lsls	r2, r3
 8003416:	0013      	movs	r3, r2
 8003418:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	6a1b      	ldr	r3, [r3, #32]
 800341e:	697a      	ldr	r2, [r7, #20]
 8003420:	43d2      	mvns	r2, r2
 8003422:	401a      	ands	r2, r3
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	6a1a      	ldr	r2, [r3, #32]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	211f      	movs	r1, #31
 8003430:	400b      	ands	r3, r1
 8003432:	6879      	ldr	r1, [r7, #4]
 8003434:	4099      	lsls	r1, r3
 8003436:	000b      	movs	r3, r1
 8003438:	431a      	orrs	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	621a      	str	r2, [r3, #32]
}
 800343e:	46c0      	nop			; (mov r8, r8)
 8003440:	46bd      	mov	sp, r7
 8003442:	b006      	add	sp, #24
 8003444:	bd80      	pop	{r7, pc}
	...

08003448 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003448:	b580      	push	{r7, lr}
 800344a:	b084      	sub	sp, #16
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]
 8003450:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	223c      	movs	r2, #60	; 0x3c
 8003456:	5c9b      	ldrb	r3, [r3, r2]
 8003458:	2b01      	cmp	r3, #1
 800345a:	d101      	bne.n	8003460 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800345c:	2302      	movs	r3, #2
 800345e:	e03c      	b.n	80034da <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	223c      	movs	r2, #60	; 0x3c
 8003464:	2101      	movs	r1, #1
 8003466:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	223d      	movs	r2, #61	; 0x3d
 800346c:	2102      	movs	r1, #2
 800346e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	689b      	ldr	r3, [r3, #8]
 800347e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2270      	movs	r2, #112	; 0x70
 8003484:	4393      	bics	r3, r2
 8003486:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	68fa      	ldr	r2, [r7, #12]
 800348e:	4313      	orrs	r3, r2
 8003490:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	68fa      	ldr	r2, [r7, #12]
 8003498:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a11      	ldr	r2, [pc, #68]	; (80034e4 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a0f      	ldr	r2, [pc, #60]	; (80034e8 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d10c      	bne.n	80034c8 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80034ae:	68bb      	ldr	r3, [r7, #8]
 80034b0:	2280      	movs	r2, #128	; 0x80
 80034b2:	4393      	bics	r3, r2
 80034b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80034b6:	683b      	ldr	r3, [r7, #0]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	68ba      	ldr	r2, [r7, #8]
 80034bc:	4313      	orrs	r3, r2
 80034be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	223d      	movs	r2, #61	; 0x3d
 80034cc:	2101      	movs	r1, #1
 80034ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223c      	movs	r2, #60	; 0x3c
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	0018      	movs	r0, r3
 80034dc:	46bd      	mov	sp, r7
 80034de:	b004      	add	sp, #16
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	46c0      	nop			; (mov r8, r8)
 80034e4:	40012c00 	.word	0x40012c00
 80034e8:	40000400 	.word	0x40000400

080034ec <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80034f4:	46c0      	nop			; (mov r8, r8)
 80034f6:	46bd      	mov	sp, r7
 80034f8:	b002      	add	sp, #8
 80034fa:	bd80      	pop	{r7, pc}

080034fc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b082      	sub	sp, #8
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003504:	46c0      	nop			; (mov r8, r8)
 8003506:	46bd      	mov	sp, r7
 8003508:	b002      	add	sp, #8
 800350a:	bd80      	pop	{r7, pc}

0800350c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b082      	sub	sp, #8
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d101      	bne.n	800351e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e044      	b.n	80035a8 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003522:	2b00      	cmp	r3, #0
 8003524:	d107      	bne.n	8003536 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2274      	movs	r2, #116	; 0x74
 800352a:	2100      	movs	r1, #0
 800352c:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	0018      	movs	r0, r3
 8003532:	f7fd fcc9 	bl	8000ec8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2224      	movs	r2, #36	; 0x24
 800353a:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	681a      	ldr	r2, [r3, #0]
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	2101      	movs	r1, #1
 8003548:	438a      	bics	r2, r1
 800354a:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	0018      	movs	r0, r3
 8003550:	f000 fb04 	bl	8003b5c <UART_SetConfig>
 8003554:	0003      	movs	r3, r0
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e024      	b.n	80035a8 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003562:	2b00      	cmp	r3, #0
 8003564:	d003      	beq.n	800356e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	0018      	movs	r0, r3
 800356a:	f000 fc21 	bl	8003db0 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	685a      	ldr	r2, [r3, #4]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	490d      	ldr	r1, [pc, #52]	; (80035b0 <HAL_UART_Init+0xa4>)
 800357a:	400a      	ands	r2, r1
 800357c:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689a      	ldr	r2, [r3, #8]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	2108      	movs	r1, #8
 800358a:	438a      	bics	r2, r1
 800358c:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681a      	ldr	r2, [r3, #0]
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2101      	movs	r1, #1
 800359a:	430a      	orrs	r2, r1
 800359c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	0018      	movs	r0, r3
 80035a2:	f000 fcb9 	bl	8003f18 <UART_CheckIdleState>
 80035a6:	0003      	movs	r3, r0
}
 80035a8:	0018      	movs	r0, r3
 80035aa:	46bd      	mov	sp, r7
 80035ac:	b002      	add	sp, #8
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	fffff7ff 	.word	0xfffff7ff

080035b4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80035b4:	b590      	push	{r4, r7, lr}
 80035b6:	b0ab      	sub	sp, #172	; 0xac
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	69db      	ldr	r3, [r3, #28]
 80035c2:	22a4      	movs	r2, #164	; 0xa4
 80035c4:	18b9      	adds	r1, r7, r2
 80035c6:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	20a0      	movs	r0, #160	; 0xa0
 80035d0:	1839      	adds	r1, r7, r0
 80035d2:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	689b      	ldr	r3, [r3, #8]
 80035da:	219c      	movs	r1, #156	; 0x9c
 80035dc:	1879      	adds	r1, r7, r1
 80035de:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80035e0:	0011      	movs	r1, r2
 80035e2:	18bb      	adds	r3, r7, r2
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a99      	ldr	r2, [pc, #612]	; (800384c <HAL_UART_IRQHandler+0x298>)
 80035e8:	4013      	ands	r3, r2
 80035ea:	2298      	movs	r2, #152	; 0x98
 80035ec:	18bc      	adds	r4, r7, r2
 80035ee:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80035f0:	18bb      	adds	r3, r7, r2
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d114      	bne.n	8003622 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80035f8:	187b      	adds	r3, r7, r1
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	2220      	movs	r2, #32
 80035fe:	4013      	ands	r3, r2
 8003600:	d00f      	beq.n	8003622 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003602:	183b      	adds	r3, r7, r0
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	2220      	movs	r2, #32
 8003608:	4013      	ands	r3, r2
 800360a:	d00a      	beq.n	8003622 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003610:	2b00      	cmp	r3, #0
 8003612:	d100      	bne.n	8003616 <HAL_UART_IRQHandler+0x62>
 8003614:	e27e      	b.n	8003b14 <HAL_UART_IRQHandler+0x560>
      {
        huart->RxISR(huart);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800361a:	687a      	ldr	r2, [r7, #4]
 800361c:	0010      	movs	r0, r2
 800361e:	4798      	blx	r3
      }
      return;
 8003620:	e278      	b.n	8003b14 <HAL_UART_IRQHandler+0x560>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003622:	2398      	movs	r3, #152	; 0x98
 8003624:	18fb      	adds	r3, r7, r3
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d100      	bne.n	800362e <HAL_UART_IRQHandler+0x7a>
 800362c:	e114      	b.n	8003858 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800362e:	239c      	movs	r3, #156	; 0x9c
 8003630:	18fb      	adds	r3, r7, r3
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2201      	movs	r2, #1
 8003636:	4013      	ands	r3, r2
 8003638:	d106      	bne.n	8003648 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800363a:	23a0      	movs	r3, #160	; 0xa0
 800363c:	18fb      	adds	r3, r7, r3
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	4a83      	ldr	r2, [pc, #524]	; (8003850 <HAL_UART_IRQHandler+0x29c>)
 8003642:	4013      	ands	r3, r2
 8003644:	d100      	bne.n	8003648 <HAL_UART_IRQHandler+0x94>
 8003646:	e107      	b.n	8003858 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003648:	23a4      	movs	r3, #164	; 0xa4
 800364a:	18fb      	adds	r3, r7, r3
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2201      	movs	r2, #1
 8003650:	4013      	ands	r3, r2
 8003652:	d012      	beq.n	800367a <HAL_UART_IRQHandler+0xc6>
 8003654:	23a0      	movs	r3, #160	; 0xa0
 8003656:	18fb      	adds	r3, r7, r3
 8003658:	681a      	ldr	r2, [r3, #0]
 800365a:	2380      	movs	r3, #128	; 0x80
 800365c:	005b      	lsls	r3, r3, #1
 800365e:	4013      	ands	r3, r2
 8003660:	d00b      	beq.n	800367a <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2201      	movs	r2, #1
 8003668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2280      	movs	r2, #128	; 0x80
 800366e:	589b      	ldr	r3, [r3, r2]
 8003670:	2201      	movs	r2, #1
 8003672:	431a      	orrs	r2, r3
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2180      	movs	r1, #128	; 0x80
 8003678:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800367a:	23a4      	movs	r3, #164	; 0xa4
 800367c:	18fb      	adds	r3, r7, r3
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2202      	movs	r2, #2
 8003682:	4013      	ands	r3, r2
 8003684:	d011      	beq.n	80036aa <HAL_UART_IRQHandler+0xf6>
 8003686:	239c      	movs	r3, #156	; 0x9c
 8003688:	18fb      	adds	r3, r7, r3
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2201      	movs	r2, #1
 800368e:	4013      	ands	r3, r2
 8003690:	d00b      	beq.n	80036aa <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	2202      	movs	r2, #2
 8003698:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2280      	movs	r2, #128	; 0x80
 800369e:	589b      	ldr	r3, [r3, r2]
 80036a0:	2204      	movs	r2, #4
 80036a2:	431a      	orrs	r2, r3
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2180      	movs	r1, #128	; 0x80
 80036a8:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80036aa:	23a4      	movs	r3, #164	; 0xa4
 80036ac:	18fb      	adds	r3, r7, r3
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2204      	movs	r2, #4
 80036b2:	4013      	ands	r3, r2
 80036b4:	d011      	beq.n	80036da <HAL_UART_IRQHandler+0x126>
 80036b6:	239c      	movs	r3, #156	; 0x9c
 80036b8:	18fb      	adds	r3, r7, r3
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2201      	movs	r2, #1
 80036be:	4013      	ands	r3, r2
 80036c0:	d00b      	beq.n	80036da <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	2204      	movs	r2, #4
 80036c8:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2280      	movs	r2, #128	; 0x80
 80036ce:	589b      	ldr	r3, [r3, r2]
 80036d0:	2202      	movs	r2, #2
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2180      	movs	r1, #128	; 0x80
 80036d8:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80036da:	23a4      	movs	r3, #164	; 0xa4
 80036dc:	18fb      	adds	r3, r7, r3
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	2208      	movs	r2, #8
 80036e2:	4013      	ands	r3, r2
 80036e4:	d017      	beq.n	8003716 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036e6:	23a0      	movs	r3, #160	; 0xa0
 80036e8:	18fb      	adds	r3, r7, r3
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	2220      	movs	r2, #32
 80036ee:	4013      	ands	r3, r2
 80036f0:	d105      	bne.n	80036fe <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80036f2:	239c      	movs	r3, #156	; 0x9c
 80036f4:	18fb      	adds	r3, r7, r3
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2201      	movs	r2, #1
 80036fa:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80036fc:	d00b      	beq.n	8003716 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	2208      	movs	r2, #8
 8003704:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2280      	movs	r2, #128	; 0x80
 800370a:	589b      	ldr	r3, [r3, r2]
 800370c:	2208      	movs	r2, #8
 800370e:	431a      	orrs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2180      	movs	r1, #128	; 0x80
 8003714:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003716:	23a4      	movs	r3, #164	; 0xa4
 8003718:	18fb      	adds	r3, r7, r3
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	2380      	movs	r3, #128	; 0x80
 800371e:	011b      	lsls	r3, r3, #4
 8003720:	4013      	ands	r3, r2
 8003722:	d013      	beq.n	800374c <HAL_UART_IRQHandler+0x198>
 8003724:	23a0      	movs	r3, #160	; 0xa0
 8003726:	18fb      	adds	r3, r7, r3
 8003728:	681a      	ldr	r2, [r3, #0]
 800372a:	2380      	movs	r3, #128	; 0x80
 800372c:	04db      	lsls	r3, r3, #19
 800372e:	4013      	ands	r3, r2
 8003730:	d00c      	beq.n	800374c <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2280      	movs	r2, #128	; 0x80
 8003738:	0112      	lsls	r2, r2, #4
 800373a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	2280      	movs	r2, #128	; 0x80
 8003740:	589b      	ldr	r3, [r3, r2]
 8003742:	2220      	movs	r2, #32
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	2180      	movs	r1, #128	; 0x80
 800374a:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2280      	movs	r2, #128	; 0x80
 8003750:	589b      	ldr	r3, [r3, r2]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d100      	bne.n	8003758 <HAL_UART_IRQHandler+0x1a4>
 8003756:	e1df      	b.n	8003b18 <HAL_UART_IRQHandler+0x564>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003758:	23a4      	movs	r3, #164	; 0xa4
 800375a:	18fb      	adds	r3, r7, r3
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	2220      	movs	r2, #32
 8003760:	4013      	ands	r3, r2
 8003762:	d00e      	beq.n	8003782 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003764:	23a0      	movs	r3, #160	; 0xa0
 8003766:	18fb      	adds	r3, r7, r3
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2220      	movs	r2, #32
 800376c:	4013      	ands	r3, r2
 800376e:	d008      	beq.n	8003782 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003774:	2b00      	cmp	r3, #0
 8003776:	d004      	beq.n	8003782 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	0010      	movs	r0, r2
 8003780:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	2280      	movs	r2, #128	; 0x80
 8003786:	589b      	ldr	r3, [r3, r2]
 8003788:	2194      	movs	r1, #148	; 0x94
 800378a:	187a      	adds	r2, r7, r1
 800378c:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	689b      	ldr	r3, [r3, #8]
 8003794:	2240      	movs	r2, #64	; 0x40
 8003796:	4013      	ands	r3, r2
 8003798:	2b40      	cmp	r3, #64	; 0x40
 800379a:	d004      	beq.n	80037a6 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800379c:	187b      	adds	r3, r7, r1
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	2228      	movs	r2, #40	; 0x28
 80037a2:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80037a4:	d047      	beq.n	8003836 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	0018      	movs	r0, r3
 80037aa:	f000 fcc1 	bl	8004130 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	689b      	ldr	r3, [r3, #8]
 80037b4:	2240      	movs	r2, #64	; 0x40
 80037b6:	4013      	ands	r3, r2
 80037b8:	2b40      	cmp	r3, #64	; 0x40
 80037ba:	d137      	bne.n	800382c <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80037bc:	f3ef 8310 	mrs	r3, PRIMASK
 80037c0:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80037c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037c4:	2090      	movs	r0, #144	; 0x90
 80037c6:	183a      	adds	r2, r7, r0
 80037c8:	6013      	str	r3, [r2, #0]
 80037ca:	2301      	movs	r3, #1
 80037cc:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80037d0:	f383 8810 	msr	PRIMASK, r3
}
 80037d4:	46c0      	nop			; (mov r8, r8)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	689a      	ldr	r2, [r3, #8]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	2140      	movs	r1, #64	; 0x40
 80037e2:	438a      	bics	r2, r1
 80037e4:	609a      	str	r2, [r3, #8]
 80037e6:	183b      	adds	r3, r7, r0
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80037ec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80037ee:	f383 8810 	msr	PRIMASK, r3
}
 80037f2:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d012      	beq.n	8003822 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a14      	ldr	r2, [pc, #80]	; (8003854 <HAL_UART_IRQHandler+0x2a0>)
 8003802:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003808:	0018      	movs	r0, r3
 800380a:	f7fd ff73 	bl	80016f4 <HAL_DMA_Abort_IT>
 800380e:	1e03      	subs	r3, r0, #0
 8003810:	d01a      	beq.n	8003848 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003816:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800381c:	0018      	movs	r0, r3
 800381e:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003820:	e012      	b.n	8003848 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	0018      	movs	r0, r3
 8003826:	f000 f985 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800382a:	e00d      	b.n	8003848 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	0018      	movs	r0, r3
 8003830:	f000 f980 	bl	8003b34 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003834:	e008      	b.n	8003848 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	0018      	movs	r0, r3
 800383a:	f000 f97b 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2280      	movs	r2, #128	; 0x80
 8003842:	2100      	movs	r1, #0
 8003844:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8003846:	e167      	b.n	8003b18 <HAL_UART_IRQHandler+0x564>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003848:	46c0      	nop			; (mov r8, r8)
    return;
 800384a:	e165      	b.n	8003b18 <HAL_UART_IRQHandler+0x564>
 800384c:	0000080f 	.word	0x0000080f
 8003850:	04000120 	.word	0x04000120
 8003854:	080041f5 	.word	0x080041f5

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800385c:	2b01      	cmp	r3, #1
 800385e:	d000      	beq.n	8003862 <HAL_UART_IRQHandler+0x2ae>
 8003860:	e131      	b.n	8003ac6 <HAL_UART_IRQHandler+0x512>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003862:	23a4      	movs	r3, #164	; 0xa4
 8003864:	18fb      	adds	r3, r7, r3
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	2210      	movs	r2, #16
 800386a:	4013      	ands	r3, r2
 800386c:	d100      	bne.n	8003870 <HAL_UART_IRQHandler+0x2bc>
 800386e:	e12a      	b.n	8003ac6 <HAL_UART_IRQHandler+0x512>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003870:	23a0      	movs	r3, #160	; 0xa0
 8003872:	18fb      	adds	r3, r7, r3
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	2210      	movs	r2, #16
 8003878:	4013      	ands	r3, r2
 800387a:	d100      	bne.n	800387e <HAL_UART_IRQHandler+0x2ca>
 800387c:	e123      	b.n	8003ac6 <HAL_UART_IRQHandler+0x512>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	2210      	movs	r2, #16
 8003884:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	2240      	movs	r2, #64	; 0x40
 800388e:	4013      	ands	r3, r2
 8003890:	2b40      	cmp	r3, #64	; 0x40
 8003892:	d000      	beq.n	8003896 <HAL_UART_IRQHandler+0x2e2>
 8003894:	e09b      	b.n	80039ce <HAL_UART_IRQHandler+0x41a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	685a      	ldr	r2, [r3, #4]
 800389e:	217e      	movs	r1, #126	; 0x7e
 80038a0:	187b      	adds	r3, r7, r1
 80038a2:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 80038a4:	187b      	adds	r3, r7, r1
 80038a6:	881b      	ldrh	r3, [r3, #0]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d100      	bne.n	80038ae <HAL_UART_IRQHandler+0x2fa>
 80038ac:	e136      	b.n	8003b1c <HAL_UART_IRQHandler+0x568>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2258      	movs	r2, #88	; 0x58
 80038b2:	5a9b      	ldrh	r3, [r3, r2]
 80038b4:	187a      	adds	r2, r7, r1
 80038b6:	8812      	ldrh	r2, [r2, #0]
 80038b8:	429a      	cmp	r2, r3
 80038ba:	d300      	bcc.n	80038be <HAL_UART_IRQHandler+0x30a>
 80038bc:	e12e      	b.n	8003b1c <HAL_UART_IRQHandler+0x568>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	187a      	adds	r2, r7, r1
 80038c2:	215a      	movs	r1, #90	; 0x5a
 80038c4:	8812      	ldrh	r2, [r2, #0]
 80038c6:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038cc:	699b      	ldr	r3, [r3, #24]
 80038ce:	2b20      	cmp	r3, #32
 80038d0:	d06e      	beq.n	80039b0 <HAL_UART_IRQHandler+0x3fc>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80038d2:	f3ef 8310 	mrs	r3, PRIMASK
 80038d6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80038d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038da:	67bb      	str	r3, [r7, #120]	; 0x78
 80038dc:	2301      	movs	r3, #1
 80038de:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038e2:	f383 8810 	msr	PRIMASK, r3
}
 80038e6:	46c0      	nop			; (mov r8, r8)
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	498e      	ldr	r1, [pc, #568]	; (8003b2c <HAL_UART_IRQHandler+0x578>)
 80038f4:	400a      	ands	r2, r1
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80038fa:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80038fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038fe:	f383 8810 	msr	PRIMASK, r3
}
 8003902:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003904:	f3ef 8310 	mrs	r3, PRIMASK
 8003908:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800390a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800390c:	677b      	str	r3, [r7, #116]	; 0x74
 800390e:	2301      	movs	r3, #1
 8003910:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003912:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003914:	f383 8810 	msr	PRIMASK, r3
}
 8003918:	46c0      	nop			; (mov r8, r8)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	689a      	ldr	r2, [r3, #8]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	2101      	movs	r1, #1
 8003926:	438a      	bics	r2, r1
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800392e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003930:	f383 8810 	msr	PRIMASK, r3
}
 8003934:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003936:	f3ef 8310 	mrs	r3, PRIMASK
 800393a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800393c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800393e:	673b      	str	r3, [r7, #112]	; 0x70
 8003940:	2301      	movs	r3, #1
 8003942:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	f383 8810 	msr	PRIMASK, r3
}
 800394a:	46c0      	nop			; (mov r8, r8)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	689a      	ldr	r2, [r3, #8]
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	2140      	movs	r1, #64	; 0x40
 8003958:	438a      	bics	r2, r1
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800395e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003960:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003962:	f383 8810 	msr	PRIMASK, r3
}
 8003966:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2220      	movs	r2, #32
 800396c:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003974:	f3ef 8310 	mrs	r3, PRIMASK
 8003978:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 800397a:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800397c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800397e:	2301      	movs	r3, #1
 8003980:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003982:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003984:	f383 8810 	msr	PRIMASK, r3
}
 8003988:	46c0      	nop			; (mov r8, r8)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	681a      	ldr	r2, [r3, #0]
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	2110      	movs	r1, #16
 8003996:	438a      	bics	r2, r1
 8003998:	601a      	str	r2, [r3, #0]
 800399a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800399c:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800399e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039a0:	f383 8810 	msr	PRIMASK, r3
}
 80039a4:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80039aa:	0018      	movs	r0, r3
 80039ac:	f7fd fe6a 	bl	8001684 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	2258      	movs	r2, #88	; 0x58
 80039b4:	5a9a      	ldrh	r2, [r3, r2]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	215a      	movs	r1, #90	; 0x5a
 80039ba:	5a5b      	ldrh	r3, [r3, r1]
 80039bc:	b29b      	uxth	r3, r3
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	0011      	movs	r1, r2
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 f8bc 	bl	8003b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039cc:	e0a6      	b.n	8003b1c <HAL_UART_IRQHandler+0x568>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2258      	movs	r2, #88	; 0x58
 80039d2:	5a99      	ldrh	r1, [r3, r2]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	225a      	movs	r2, #90	; 0x5a
 80039d8:	5a9b      	ldrh	r3, [r3, r2]
 80039da:	b29a      	uxth	r2, r3
 80039dc:	208e      	movs	r0, #142	; 0x8e
 80039de:	183b      	adds	r3, r7, r0
 80039e0:	1a8a      	subs	r2, r1, r2
 80039e2:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	225a      	movs	r2, #90	; 0x5a
 80039e8:	5a9b      	ldrh	r3, [r3, r2]
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d100      	bne.n	80039f2 <HAL_UART_IRQHandler+0x43e>
 80039f0:	e096      	b.n	8003b20 <HAL_UART_IRQHandler+0x56c>
          && (nb_rx_data > 0U))
 80039f2:	183b      	adds	r3, r7, r0
 80039f4:	881b      	ldrh	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d100      	bne.n	80039fc <HAL_UART_IRQHandler+0x448>
 80039fa:	e091      	b.n	8003b20 <HAL_UART_IRQHandler+0x56c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039fc:	f3ef 8310 	mrs	r3, PRIMASK
 8003a00:	60fb      	str	r3, [r7, #12]
  return(result);
 8003a02:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003a04:	2488      	movs	r4, #136	; 0x88
 8003a06:	193a      	adds	r2, r7, r4
 8003a08:	6013      	str	r3, [r2, #0]
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a0e:	693b      	ldr	r3, [r7, #16]
 8003a10:	f383 8810 	msr	PRIMASK, r3
}
 8003a14:	46c0      	nop			; (mov r8, r8)
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	681a      	ldr	r2, [r3, #0]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	4943      	ldr	r1, [pc, #268]	; (8003b30 <HAL_UART_IRQHandler+0x57c>)
 8003a22:	400a      	ands	r2, r1
 8003a24:	601a      	str	r2, [r3, #0]
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	f383 8810 	msr	PRIMASK, r3
}
 8003a32:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a34:	f3ef 8310 	mrs	r3, PRIMASK
 8003a38:	61bb      	str	r3, [r7, #24]
  return(result);
 8003a3a:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003a3c:	2484      	movs	r4, #132	; 0x84
 8003a3e:	193a      	adds	r2, r7, r4
 8003a40:	6013      	str	r3, [r2, #0]
 8003a42:	2301      	movs	r3, #1
 8003a44:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a46:	69fb      	ldr	r3, [r7, #28]
 8003a48:	f383 8810 	msr	PRIMASK, r3
}
 8003a4c:	46c0      	nop			; (mov r8, r8)
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	689a      	ldr	r2, [r3, #8]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	2101      	movs	r1, #1
 8003a5a:	438a      	bics	r2, r1
 8003a5c:	609a      	str	r2, [r3, #8]
 8003a5e:	193b      	adds	r3, r7, r4
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	f383 8810 	msr	PRIMASK, r3
}
 8003a6a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2220      	movs	r2, #32
 8003a70:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2200      	movs	r2, #0
 8003a76:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	665a      	str	r2, [r3, #100]	; 0x64
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003a7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003a82:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a86:	2480      	movs	r4, #128	; 0x80
 8003a88:	193a      	adds	r2, r7, r4
 8003a8a:	6013      	str	r3, [r2, #0]
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a92:	f383 8810 	msr	PRIMASK, r3
}
 8003a96:	46c0      	nop			; (mov r8, r8)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	681a      	ldr	r2, [r3, #0]
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	2110      	movs	r1, #16
 8003aa4:	438a      	bics	r2, r1
 8003aa6:	601a      	str	r2, [r3, #0]
 8003aa8:	193b      	adds	r3, r7, r4
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ab0:	f383 8810 	msr	PRIMASK, r3
}
 8003ab4:	46c0      	nop			; (mov r8, r8)
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003ab6:	183b      	adds	r3, r7, r0
 8003ab8:	881a      	ldrh	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	0011      	movs	r1, r2
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f000 f840 	bl	8003b44 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ac4:	e02c      	b.n	8003b20 <HAL_UART_IRQHandler+0x56c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003ac6:	23a4      	movs	r3, #164	; 0xa4
 8003ac8:	18fb      	adds	r3, r7, r3
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2280      	movs	r2, #128	; 0x80
 8003ace:	4013      	ands	r3, r2
 8003ad0:	d00f      	beq.n	8003af2 <HAL_UART_IRQHandler+0x53e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003ad2:	23a0      	movs	r3, #160	; 0xa0
 8003ad4:	18fb      	adds	r3, r7, r3
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2280      	movs	r2, #128	; 0x80
 8003ada:	4013      	ands	r3, r2
 8003adc:	d009      	beq.n	8003af2 <HAL_UART_IRQHandler+0x53e>
  {
    if (huart->TxISR != NULL)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d01e      	beq.n	8003b24 <HAL_UART_IRQHandler+0x570>
    {
      huart->TxISR(huart);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003aea:	687a      	ldr	r2, [r7, #4]
 8003aec:	0010      	movs	r0, r2
 8003aee:	4798      	blx	r3
    }
    return;
 8003af0:	e018      	b.n	8003b24 <HAL_UART_IRQHandler+0x570>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003af2:	23a4      	movs	r3, #164	; 0xa4
 8003af4:	18fb      	adds	r3, r7, r3
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	2240      	movs	r2, #64	; 0x40
 8003afa:	4013      	ands	r3, r2
 8003afc:	d013      	beq.n	8003b26 <HAL_UART_IRQHandler+0x572>
 8003afe:	23a0      	movs	r3, #160	; 0xa0
 8003b00:	18fb      	adds	r3, r7, r3
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	2240      	movs	r2, #64	; 0x40
 8003b06:	4013      	ands	r3, r2
 8003b08:	d00d      	beq.n	8003b26 <HAL_UART_IRQHandler+0x572>
  {
    UART_EndTransmit_IT(huart);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	0018      	movs	r0, r3
 8003b0e:	f000 fb88 	bl	8004222 <UART_EndTransmit_IT>
    return;
 8003b12:	e008      	b.n	8003b26 <HAL_UART_IRQHandler+0x572>
      return;
 8003b14:	46c0      	nop			; (mov r8, r8)
 8003b16:	e006      	b.n	8003b26 <HAL_UART_IRQHandler+0x572>
    return;
 8003b18:	46c0      	nop			; (mov r8, r8)
 8003b1a:	e004      	b.n	8003b26 <HAL_UART_IRQHandler+0x572>
      return;
 8003b1c:	46c0      	nop			; (mov r8, r8)
 8003b1e:	e002      	b.n	8003b26 <HAL_UART_IRQHandler+0x572>
      return;
 8003b20:	46c0      	nop			; (mov r8, r8)
 8003b22:	e000      	b.n	8003b26 <HAL_UART_IRQHandler+0x572>
    return;
 8003b24:	46c0      	nop			; (mov r8, r8)
  }

}
 8003b26:	46bd      	mov	sp, r7
 8003b28:	b02b      	add	sp, #172	; 0xac
 8003b2a:	bd90      	pop	{r4, r7, pc}
 8003b2c:	fffffeff 	.word	0xfffffeff
 8003b30:	fffffedf 	.word	0xfffffedf

08003b34 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b082      	sub	sp, #8
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003b3c:	46c0      	nop			; (mov r8, r8)
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	b002      	add	sp, #8
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	000a      	movs	r2, r1
 8003b4e:	1cbb      	adds	r3, r7, #2
 8003b50:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003b52:	46c0      	nop			; (mov r8, r8)
 8003b54:	46bd      	mov	sp, r7
 8003b56:	b002      	add	sp, #8
 8003b58:	bd80      	pop	{r7, pc}
	...

08003b5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b088      	sub	sp, #32
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003b64:	231e      	movs	r3, #30
 8003b66:	18fb      	adds	r3, r7, r3
 8003b68:	2200      	movs	r2, #0
 8003b6a:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	691b      	ldr	r3, [r3, #16]
 8003b74:	431a      	orrs	r2, r3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	695b      	ldr	r3, [r3, #20]
 8003b7a:	431a      	orrs	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	69db      	ldr	r3, [r3, #28]
 8003b80:	4313      	orrs	r3, r2
 8003b82:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a84      	ldr	r2, [pc, #528]	; (8003d9c <UART_SetConfig+0x240>)
 8003b8c:	4013      	ands	r3, r2
 8003b8e:	0019      	movs	r1, r3
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	697a      	ldr	r2, [r7, #20]
 8003b96:	430a      	orrs	r2, r1
 8003b98:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	685b      	ldr	r3, [r3, #4]
 8003ba0:	4a7f      	ldr	r2, [pc, #508]	; (8003da0 <UART_SetConfig+0x244>)
 8003ba2:	4013      	ands	r3, r2
 8003ba4:	0019      	movs	r1, r3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	68da      	ldr	r2, [r3, #12]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	430a      	orrs	r2, r1
 8003bb0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	699b      	ldr	r3, [r3, #24]
 8003bb6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	6a1b      	ldr	r3, [r3, #32]
 8003bbc:	697a      	ldr	r2, [r7, #20]
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	4a76      	ldr	r2, [pc, #472]	; (8003da4 <UART_SetConfig+0x248>)
 8003bca:	4013      	ands	r3, r2
 8003bcc:	0019      	movs	r1, r3
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	430a      	orrs	r2, r1
 8003bd6:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003bd8:	4b73      	ldr	r3, [pc, #460]	; (8003da8 <UART_SetConfig+0x24c>)
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	2203      	movs	r2, #3
 8003bde:	4013      	ands	r3, r2
 8003be0:	2b03      	cmp	r3, #3
 8003be2:	d00d      	beq.n	8003c00 <UART_SetConfig+0xa4>
 8003be4:	d81b      	bhi.n	8003c1e <UART_SetConfig+0xc2>
 8003be6:	2b02      	cmp	r3, #2
 8003be8:	d014      	beq.n	8003c14 <UART_SetConfig+0xb8>
 8003bea:	d818      	bhi.n	8003c1e <UART_SetConfig+0xc2>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d002      	beq.n	8003bf6 <UART_SetConfig+0x9a>
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d00a      	beq.n	8003c0a <UART_SetConfig+0xae>
 8003bf4:	e013      	b.n	8003c1e <UART_SetConfig+0xc2>
 8003bf6:	231f      	movs	r3, #31
 8003bf8:	18fb      	adds	r3, r7, r3
 8003bfa:	2200      	movs	r2, #0
 8003bfc:	701a      	strb	r2, [r3, #0]
 8003bfe:	e012      	b.n	8003c26 <UART_SetConfig+0xca>
 8003c00:	231f      	movs	r3, #31
 8003c02:	18fb      	adds	r3, r7, r3
 8003c04:	2202      	movs	r2, #2
 8003c06:	701a      	strb	r2, [r3, #0]
 8003c08:	e00d      	b.n	8003c26 <UART_SetConfig+0xca>
 8003c0a:	231f      	movs	r3, #31
 8003c0c:	18fb      	adds	r3, r7, r3
 8003c0e:	2204      	movs	r2, #4
 8003c10:	701a      	strb	r2, [r3, #0]
 8003c12:	e008      	b.n	8003c26 <UART_SetConfig+0xca>
 8003c14:	231f      	movs	r3, #31
 8003c16:	18fb      	adds	r3, r7, r3
 8003c18:	2208      	movs	r2, #8
 8003c1a:	701a      	strb	r2, [r3, #0]
 8003c1c:	e003      	b.n	8003c26 <UART_SetConfig+0xca>
 8003c1e:	231f      	movs	r3, #31
 8003c20:	18fb      	adds	r3, r7, r3
 8003c22:	2210      	movs	r2, #16
 8003c24:	701a      	strb	r2, [r3, #0]
 8003c26:	46c0      	nop			; (mov r8, r8)

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	69da      	ldr	r2, [r3, #28]
 8003c2c:	2380      	movs	r3, #128	; 0x80
 8003c2e:	021b      	lsls	r3, r3, #8
 8003c30:	429a      	cmp	r2, r3
 8003c32:	d15d      	bne.n	8003cf0 <UART_SetConfig+0x194>
  {
    switch (clocksource)
 8003c34:	231f      	movs	r3, #31
 8003c36:	18fb      	adds	r3, r7, r3
 8003c38:	781b      	ldrb	r3, [r3, #0]
 8003c3a:	2b08      	cmp	r3, #8
 8003c3c:	d015      	beq.n	8003c6a <UART_SetConfig+0x10e>
 8003c3e:	dc18      	bgt.n	8003c72 <UART_SetConfig+0x116>
 8003c40:	2b04      	cmp	r3, #4
 8003c42:	d00d      	beq.n	8003c60 <UART_SetConfig+0x104>
 8003c44:	dc15      	bgt.n	8003c72 <UART_SetConfig+0x116>
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d002      	beq.n	8003c50 <UART_SetConfig+0xf4>
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d005      	beq.n	8003c5a <UART_SetConfig+0xfe>
 8003c4e:	e010      	b.n	8003c72 <UART_SetConfig+0x116>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c50:	f7fe fc46 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003c54:	0003      	movs	r3, r0
 8003c56:	61bb      	str	r3, [r7, #24]
        break;
 8003c58:	e012      	b.n	8003c80 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c5a:	4b54      	ldr	r3, [pc, #336]	; (8003dac <UART_SetConfig+0x250>)
 8003c5c:	61bb      	str	r3, [r7, #24]
        break;
 8003c5e:	e00f      	b.n	8003c80 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c60:	f7fe fbd0 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8003c64:	0003      	movs	r3, r0
 8003c66:	61bb      	str	r3, [r7, #24]
        break;
 8003c68:	e00a      	b.n	8003c80 <UART_SetConfig+0x124>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c6a:	2380      	movs	r3, #128	; 0x80
 8003c6c:	021b      	lsls	r3, r3, #8
 8003c6e:	61bb      	str	r3, [r7, #24]
        break;
 8003c70:	e006      	b.n	8003c80 <UART_SetConfig+0x124>
      default:
        pclk = 0U;
 8003c72:	2300      	movs	r3, #0
 8003c74:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c76:	231e      	movs	r3, #30
 8003c78:	18fb      	adds	r3, r7, r3
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
        break;
 8003c7e:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003c80:	69bb      	ldr	r3, [r7, #24]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d100      	bne.n	8003c88 <UART_SetConfig+0x12c>
 8003c86:	e07b      	b.n	8003d80 <UART_SetConfig+0x224>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	005a      	lsls	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	085b      	lsrs	r3, r3, #1
 8003c92:	18d2      	adds	r2, r2, r3
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	0019      	movs	r1, r3
 8003c9a:	0010      	movs	r0, r2
 8003c9c:	f7fc fa34 	bl	8000108 <__udivsi3>
 8003ca0:	0003      	movs	r3, r0
 8003ca2:	b29b      	uxth	r3, r3
 8003ca4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ca6:	693b      	ldr	r3, [r7, #16]
 8003ca8:	2b0f      	cmp	r3, #15
 8003caa:	d91c      	bls.n	8003ce6 <UART_SetConfig+0x18a>
 8003cac:	693a      	ldr	r2, [r7, #16]
 8003cae:	2380      	movs	r3, #128	; 0x80
 8003cb0:	025b      	lsls	r3, r3, #9
 8003cb2:	429a      	cmp	r2, r3
 8003cb4:	d217      	bcs.n	8003ce6 <UART_SetConfig+0x18a>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	b29a      	uxth	r2, r3
 8003cba:	200e      	movs	r0, #14
 8003cbc:	183b      	adds	r3, r7, r0
 8003cbe:	210f      	movs	r1, #15
 8003cc0:	438a      	bics	r2, r1
 8003cc2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003cc4:	693b      	ldr	r3, [r7, #16]
 8003cc6:	085b      	lsrs	r3, r3, #1
 8003cc8:	b29b      	uxth	r3, r3
 8003cca:	2207      	movs	r2, #7
 8003ccc:	4013      	ands	r3, r2
 8003cce:	b299      	uxth	r1, r3
 8003cd0:	183b      	adds	r3, r7, r0
 8003cd2:	183a      	adds	r2, r7, r0
 8003cd4:	8812      	ldrh	r2, [r2, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	183a      	adds	r2, r7, r0
 8003ce0:	8812      	ldrh	r2, [r2, #0]
 8003ce2:	60da      	str	r2, [r3, #12]
 8003ce4:	e04c      	b.n	8003d80 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003ce6:	231e      	movs	r3, #30
 8003ce8:	18fb      	adds	r3, r7, r3
 8003cea:	2201      	movs	r2, #1
 8003cec:	701a      	strb	r2, [r3, #0]
 8003cee:	e047      	b.n	8003d80 <UART_SetConfig+0x224>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003cf0:	231f      	movs	r3, #31
 8003cf2:	18fb      	adds	r3, r7, r3
 8003cf4:	781b      	ldrb	r3, [r3, #0]
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d015      	beq.n	8003d26 <UART_SetConfig+0x1ca>
 8003cfa:	dc18      	bgt.n	8003d2e <UART_SetConfig+0x1d2>
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d00d      	beq.n	8003d1c <UART_SetConfig+0x1c0>
 8003d00:	dc15      	bgt.n	8003d2e <UART_SetConfig+0x1d2>
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d002      	beq.n	8003d0c <UART_SetConfig+0x1b0>
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d005      	beq.n	8003d16 <UART_SetConfig+0x1ba>
 8003d0a:	e010      	b.n	8003d2e <UART_SetConfig+0x1d2>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d0c:	f7fe fbe8 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8003d10:	0003      	movs	r3, r0
 8003d12:	61bb      	str	r3, [r7, #24]
        break;
 8003d14:	e012      	b.n	8003d3c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d16:	4b25      	ldr	r3, [pc, #148]	; (8003dac <UART_SetConfig+0x250>)
 8003d18:	61bb      	str	r3, [r7, #24]
        break;
 8003d1a:	e00f      	b.n	8003d3c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d1c:	f7fe fb72 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 8003d20:	0003      	movs	r3, r0
 8003d22:	61bb      	str	r3, [r7, #24]
        break;
 8003d24:	e00a      	b.n	8003d3c <UART_SetConfig+0x1e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d26:	2380      	movs	r3, #128	; 0x80
 8003d28:	021b      	lsls	r3, r3, #8
 8003d2a:	61bb      	str	r3, [r7, #24]
        break;
 8003d2c:	e006      	b.n	8003d3c <UART_SetConfig+0x1e0>
      default:
        pclk = 0U;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003d32:	231e      	movs	r3, #30
 8003d34:	18fb      	adds	r3, r7, r3
 8003d36:	2201      	movs	r2, #1
 8003d38:	701a      	strb	r2, [r3, #0]
        break;
 8003d3a:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d01e      	beq.n	8003d80 <UART_SetConfig+0x224>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	685b      	ldr	r3, [r3, #4]
 8003d46:	085a      	lsrs	r2, r3, #1
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	18d2      	adds	r2, r2, r3
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	0019      	movs	r1, r3
 8003d52:	0010      	movs	r0, r2
 8003d54:	f7fc f9d8 	bl	8000108 <__udivsi3>
 8003d58:	0003      	movs	r3, r0
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d5e:	693b      	ldr	r3, [r7, #16]
 8003d60:	2b0f      	cmp	r3, #15
 8003d62:	d909      	bls.n	8003d78 <UART_SetConfig+0x21c>
 8003d64:	693a      	ldr	r2, [r7, #16]
 8003d66:	2380      	movs	r3, #128	; 0x80
 8003d68:	025b      	lsls	r3, r3, #9
 8003d6a:	429a      	cmp	r2, r3
 8003d6c:	d204      	bcs.n	8003d78 <UART_SetConfig+0x21c>
      {
        huart->Instance->BRR = usartdiv;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	693a      	ldr	r2, [r7, #16]
 8003d74:	60da      	str	r2, [r3, #12]
 8003d76:	e003      	b.n	8003d80 <UART_SetConfig+0x224>
      }
      else
      {
        ret = HAL_ERROR;
 8003d78:	231e      	movs	r3, #30
 8003d7a:	18fb      	adds	r3, r7, r3
 8003d7c:	2201      	movs	r2, #1
 8003d7e:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003d8c:	231e      	movs	r3, #30
 8003d8e:	18fb      	adds	r3, r7, r3
 8003d90:	781b      	ldrb	r3, [r3, #0]
}
 8003d92:	0018      	movs	r0, r3
 8003d94:	46bd      	mov	sp, r7
 8003d96:	b008      	add	sp, #32
 8003d98:	bd80      	pop	{r7, pc}
 8003d9a:	46c0      	nop			; (mov r8, r8)
 8003d9c:	ffff69f3 	.word	0xffff69f3
 8003da0:	ffffcfff 	.word	0xffffcfff
 8003da4:	fffff4ff 	.word	0xfffff4ff
 8003da8:	40021000 	.word	0x40021000
 8003dac:	007a1200 	.word	0x007a1200

08003db0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dbc:	2201      	movs	r2, #1
 8003dbe:	4013      	ands	r3, r2
 8003dc0:	d00b      	beq.n	8003dda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	685b      	ldr	r3, [r3, #4]
 8003dc8:	4a4a      	ldr	r2, [pc, #296]	; (8003ef4 <UART_AdvFeatureConfig+0x144>)
 8003dca:	4013      	ands	r3, r2
 8003dcc:	0019      	movs	r1, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	430a      	orrs	r2, r1
 8003dd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dde:	2202      	movs	r2, #2
 8003de0:	4013      	ands	r3, r2
 8003de2:	d00b      	beq.n	8003dfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	685b      	ldr	r3, [r3, #4]
 8003dea:	4a43      	ldr	r2, [pc, #268]	; (8003ef8 <UART_AdvFeatureConfig+0x148>)
 8003dec:	4013      	ands	r3, r2
 8003dee:	0019      	movs	r1, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	430a      	orrs	r2, r1
 8003dfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e00:	2204      	movs	r2, #4
 8003e02:	4013      	ands	r3, r2
 8003e04:	d00b      	beq.n	8003e1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	685b      	ldr	r3, [r3, #4]
 8003e0c:	4a3b      	ldr	r2, [pc, #236]	; (8003efc <UART_AdvFeatureConfig+0x14c>)
 8003e0e:	4013      	ands	r3, r2
 8003e10:	0019      	movs	r1, r3
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	430a      	orrs	r2, r1
 8003e1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e22:	2208      	movs	r2, #8
 8003e24:	4013      	ands	r3, r2
 8003e26:	d00b      	beq.n	8003e40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	685b      	ldr	r3, [r3, #4]
 8003e2e:	4a34      	ldr	r2, [pc, #208]	; (8003f00 <UART_AdvFeatureConfig+0x150>)
 8003e30:	4013      	ands	r3, r2
 8003e32:	0019      	movs	r1, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e44:	2210      	movs	r2, #16
 8003e46:	4013      	ands	r3, r2
 8003e48:	d00b      	beq.n	8003e62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689b      	ldr	r3, [r3, #8]
 8003e50:	4a2c      	ldr	r2, [pc, #176]	; (8003f04 <UART_AdvFeatureConfig+0x154>)
 8003e52:	4013      	ands	r3, r2
 8003e54:	0019      	movs	r1, r3
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	430a      	orrs	r2, r1
 8003e60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e66:	2220      	movs	r2, #32
 8003e68:	4013      	ands	r3, r2
 8003e6a:	d00b      	beq.n	8003e84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	4a25      	ldr	r2, [pc, #148]	; (8003f08 <UART_AdvFeatureConfig+0x158>)
 8003e74:	4013      	ands	r3, r2
 8003e76:	0019      	movs	r1, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	430a      	orrs	r2, r1
 8003e82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	2240      	movs	r2, #64	; 0x40
 8003e8a:	4013      	ands	r3, r2
 8003e8c:	d01d      	beq.n	8003eca <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	4a1d      	ldr	r2, [pc, #116]	; (8003f0c <UART_AdvFeatureConfig+0x15c>)
 8003e96:	4013      	ands	r3, r2
 8003e98:	0019      	movs	r1, r3
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	430a      	orrs	r2, r1
 8003ea4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eaa:	2380      	movs	r3, #128	; 0x80
 8003eac:	035b      	lsls	r3, r3, #13
 8003eae:	429a      	cmp	r2, r3
 8003eb0:	d10b      	bne.n	8003eca <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	4a15      	ldr	r2, [pc, #84]	; (8003f10 <UART_AdvFeatureConfig+0x160>)
 8003eba:	4013      	ands	r3, r2
 8003ebc:	0019      	movs	r1, r3
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ece:	2280      	movs	r2, #128	; 0x80
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	d00b      	beq.n	8003eec <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	685b      	ldr	r3, [r3, #4]
 8003eda:	4a0e      	ldr	r2, [pc, #56]	; (8003f14 <UART_AdvFeatureConfig+0x164>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	0019      	movs	r1, r3
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	430a      	orrs	r2, r1
 8003eea:	605a      	str	r2, [r3, #4]
  }
}
 8003eec:	46c0      	nop			; (mov r8, r8)
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	b002      	add	sp, #8
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	fffdffff 	.word	0xfffdffff
 8003ef8:	fffeffff 	.word	0xfffeffff
 8003efc:	fffbffff 	.word	0xfffbffff
 8003f00:	ffff7fff 	.word	0xffff7fff
 8003f04:	ffffefff 	.word	0xffffefff
 8003f08:	ffffdfff 	.word	0xffffdfff
 8003f0c:	ffefffff 	.word	0xffefffff
 8003f10:	ff9fffff 	.word	0xff9fffff
 8003f14:	fff7ffff 	.word	0xfff7ffff

08003f18 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b086      	sub	sp, #24
 8003f1c:	af02      	add	r7, sp, #8
 8003f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2280      	movs	r2, #128	; 0x80
 8003f24:	2100      	movs	r1, #0
 8003f26:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f28:	f7fd f92e 	bl	8001188 <HAL_GetTick>
 8003f2c:	0003      	movs	r3, r0
 8003f2e:	60fb      	str	r3, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	2208      	movs	r2, #8
 8003f38:	4013      	ands	r3, r2
 8003f3a:	2b08      	cmp	r3, #8
 8003f3c:	d10c      	bne.n	8003f58 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	2280      	movs	r2, #128	; 0x80
 8003f42:	0391      	lsls	r1, r2, #14
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	4a17      	ldr	r2, [pc, #92]	; (8003fa4 <UART_CheckIdleState+0x8c>)
 8003f48:	9200      	str	r2, [sp, #0]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f000 f82c 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003f50:	1e03      	subs	r3, r0, #0
 8003f52:	d001      	beq.n	8003f58 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e021      	b.n	8003f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2204      	movs	r2, #4
 8003f60:	4013      	ands	r3, r2
 8003f62:	2b04      	cmp	r3, #4
 8003f64:	d10c      	bne.n	8003f80 <UART_CheckIdleState+0x68>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	2280      	movs	r2, #128	; 0x80
 8003f6a:	03d1      	lsls	r1, r2, #15
 8003f6c:	6878      	ldr	r0, [r7, #4]
 8003f6e:	4a0d      	ldr	r2, [pc, #52]	; (8003fa4 <UART_CheckIdleState+0x8c>)
 8003f70:	9200      	str	r2, [sp, #0]
 8003f72:	2200      	movs	r2, #0
 8003f74:	f000 f818 	bl	8003fa8 <UART_WaitOnFlagUntilTimeout>
 8003f78:	1e03      	subs	r3, r0, #0
 8003f7a:	d001      	beq.n	8003f80 <UART_CheckIdleState+0x68>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e00d      	b.n	8003f9c <UART_CheckIdleState+0x84>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	2220      	movs	r2, #32
 8003f8a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2274      	movs	r2, #116	; 0x74
 8003f96:	2100      	movs	r1, #0
 8003f98:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f9a:	2300      	movs	r3, #0
}
 8003f9c:	0018      	movs	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	b004      	add	sp, #16
 8003fa2:	bd80      	pop	{r7, pc}
 8003fa4:	01ffffff 	.word	0x01ffffff

08003fa8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fa8:	b580      	push	{r7, lr}
 8003faa:	b094      	sub	sp, #80	; 0x50
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	60f8      	str	r0, [r7, #12]
 8003fb0:	60b9      	str	r1, [r7, #8]
 8003fb2:	603b      	str	r3, [r7, #0]
 8003fb4:	1dfb      	adds	r3, r7, #7
 8003fb6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fb8:	e0a3      	b.n	8004102 <UART_WaitOnFlagUntilTimeout+0x15a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	d100      	bne.n	8003fc2 <UART_WaitOnFlagUntilTimeout+0x1a>
 8003fc0:	e09f      	b.n	8004102 <UART_WaitOnFlagUntilTimeout+0x15a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fc2:	f7fd f8e1 	bl	8001188 <HAL_GetTick>
 8003fc6:	0002      	movs	r2, r0
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	1ad3      	subs	r3, r2, r3
 8003fcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d302      	bcc.n	8003fd8 <UART_WaitOnFlagUntilTimeout+0x30>
 8003fd2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d13d      	bne.n	8004054 <UART_WaitOnFlagUntilTimeout+0xac>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8003fdc:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003fde:	6abb      	ldr	r3, [r7, #40]	; 0x28
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003fe0:	647b      	str	r3, [r7, #68]	; 0x44
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fe6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fe8:	f383 8810 	msr	PRIMASK, r3
}
 8003fec:	46c0      	nop			; (mov r8, r8)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681a      	ldr	r2, [r3, #0]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	494c      	ldr	r1, [pc, #304]	; (800412c <UART_WaitOnFlagUntilTimeout+0x184>)
 8003ffa:	400a      	ands	r2, r1
 8003ffc:	601a      	str	r2, [r3, #0]
 8003ffe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004000:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004004:	f383 8810 	msr	PRIMASK, r3
}
 8004008:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400a:	f3ef 8310 	mrs	r3, PRIMASK
 800400e:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8004010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004012:	643b      	str	r3, [r7, #64]	; 0x40
 8004014:	2301      	movs	r3, #1
 8004016:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800401a:	f383 8810 	msr	PRIMASK, r3
}
 800401e:	46c0      	nop			; (mov r8, r8)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	689a      	ldr	r2, [r3, #8]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	2101      	movs	r1, #1
 800402c:	438a      	bics	r2, r1
 800402e:	609a      	str	r2, [r3, #8]
 8004030:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004032:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004036:	f383 8810 	msr	PRIMASK, r3
}
 800403a:	46c0      	nop			; (mov r8, r8)

        huart->gState = HAL_UART_STATE_READY;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	2220      	movs	r2, #32
 8004040:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2220      	movs	r2, #32
 8004046:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	2274      	movs	r2, #116	; 0x74
 800404c:	2100      	movs	r1, #0
 800404e:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e067      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0x17c>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	2204      	movs	r2, #4
 800405c:	4013      	ands	r3, r2
 800405e:	d050      	beq.n	8004102 <UART_WaitOnFlagUntilTimeout+0x15a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69da      	ldr	r2, [r3, #28]
 8004066:	2380      	movs	r3, #128	; 0x80
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	401a      	ands	r2, r3
 800406c:	2380      	movs	r3, #128	; 0x80
 800406e:	011b      	lsls	r3, r3, #4
 8004070:	429a      	cmp	r2, r3
 8004072:	d146      	bne.n	8004102 <UART_WaitOnFlagUntilTimeout+0x15a>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	2280      	movs	r2, #128	; 0x80
 800407a:	0112      	lsls	r2, r2, #4
 800407c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800407e:	f3ef 8310 	mrs	r3, PRIMASK
 8004082:	613b      	str	r3, [r7, #16]
  return(result);
 8004084:	693b      	ldr	r3, [r7, #16]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004086:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004088:	2301      	movs	r3, #1
 800408a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800408c:	697b      	ldr	r3, [r7, #20]
 800408e:	f383 8810 	msr	PRIMASK, r3
}
 8004092:	46c0      	nop			; (mov r8, r8)
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	681a      	ldr	r2, [r3, #0]
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4923      	ldr	r1, [pc, #140]	; (800412c <UART_WaitOnFlagUntilTimeout+0x184>)
 80040a0:	400a      	ands	r2, r1
 80040a2:	601a      	str	r2, [r3, #0]
 80040a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80040a6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040a8:	69bb      	ldr	r3, [r7, #24]
 80040aa:	f383 8810 	msr	PRIMASK, r3
}
 80040ae:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80040b0:	f3ef 8310 	mrs	r3, PRIMASK
 80040b4:	61fb      	str	r3, [r7, #28]
  return(result);
 80040b6:	69fb      	ldr	r3, [r7, #28]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80040ba:	2301      	movs	r3, #1
 80040bc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040be:	6a3b      	ldr	r3, [r7, #32]
 80040c0:	f383 8810 	msr	PRIMASK, r3
}
 80040c4:	46c0      	nop			; (mov r8, r8)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	689a      	ldr	r2, [r3, #8]
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	2101      	movs	r1, #1
 80040d2:	438a      	bics	r2, r1
 80040d4:	609a      	str	r2, [r3, #8]
 80040d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d8:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	f383 8810 	msr	PRIMASK, r3
}
 80040e0:	46c0      	nop			; (mov r8, r8)

          huart->gState = HAL_UART_STATE_READY;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2220      	movs	r2, #32
 80040e6:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	2220      	movs	r2, #32
 80040ec:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2280      	movs	r2, #128	; 0x80
 80040f2:	2120      	movs	r1, #32
 80040f4:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	2274      	movs	r2, #116	; 0x74
 80040fa:	2100      	movs	r1, #0
 80040fc:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80040fe:	2303      	movs	r3, #3
 8004100:	e010      	b.n	8004124 <UART_WaitOnFlagUntilTimeout+0x17c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	69db      	ldr	r3, [r3, #28]
 8004108:	68ba      	ldr	r2, [r7, #8]
 800410a:	4013      	ands	r3, r2
 800410c:	68ba      	ldr	r2, [r7, #8]
 800410e:	1ad3      	subs	r3, r2, r3
 8004110:	425a      	negs	r2, r3
 8004112:	4153      	adcs	r3, r2
 8004114:	b2db      	uxtb	r3, r3
 8004116:	001a      	movs	r2, r3
 8004118:	1dfb      	adds	r3, r7, #7
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	429a      	cmp	r2, r3
 800411e:	d100      	bne.n	8004122 <UART_WaitOnFlagUntilTimeout+0x17a>
 8004120:	e74b      	b.n	8003fba <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004122:	2300      	movs	r3, #0
}
 8004124:	0018      	movs	r0, r3
 8004126:	46bd      	mov	sp, r7
 8004128:	b014      	add	sp, #80	; 0x50
 800412a:	bd80      	pop	{r7, pc}
 800412c:	fffffe5f 	.word	0xfffffe5f

08004130 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b08e      	sub	sp, #56	; 0x38
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004138:	f3ef 8310 	mrs	r3, PRIMASK
 800413c:	617b      	str	r3, [r7, #20]
  return(result);
 800413e:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004140:	637b      	str	r3, [r7, #52]	; 0x34
 8004142:	2301      	movs	r3, #1
 8004144:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004146:	69bb      	ldr	r3, [r7, #24]
 8004148:	f383 8810 	msr	PRIMASK, r3
}
 800414c:	46c0      	nop			; (mov r8, r8)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	681a      	ldr	r2, [r3, #0]
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4925      	ldr	r1, [pc, #148]	; (80041f0 <UART_EndRxTransfer+0xc0>)
 800415a:	400a      	ands	r2, r1
 800415c:	601a      	str	r2, [r3, #0]
 800415e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004160:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004162:	69fb      	ldr	r3, [r7, #28]
 8004164:	f383 8810 	msr	PRIMASK, r3
}
 8004168:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800416a:	f3ef 8310 	mrs	r3, PRIMASK
 800416e:	623b      	str	r3, [r7, #32]
  return(result);
 8004170:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004172:	633b      	str	r3, [r7, #48]	; 0x30
 8004174:	2301      	movs	r3, #1
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417a:	f383 8810 	msr	PRIMASK, r3
}
 800417e:	46c0      	nop			; (mov r8, r8)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	689a      	ldr	r2, [r3, #8]
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	2101      	movs	r1, #1
 800418c:	438a      	bics	r2, r1
 800418e:	609a      	str	r2, [r3, #8]
 8004190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004192:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004196:	f383 8810 	msr	PRIMASK, r3
}
 800419a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d118      	bne.n	80041d6 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041a4:	f3ef 8310 	mrs	r3, PRIMASK
 80041a8:	60bb      	str	r3, [r7, #8]
  return(result);
 80041aa:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041ac:	62fb      	str	r3, [r7, #44]	; 0x2c
 80041ae:	2301      	movs	r3, #1
 80041b0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	f383 8810 	msr	PRIMASK, r3
}
 80041b8:	46c0      	nop			; (mov r8, r8)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	2110      	movs	r1, #16
 80041c6:	438a      	bics	r2, r1
 80041c8:	601a      	str	r2, [r3, #0]
 80041ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041cc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ce:	693b      	ldr	r3, [r7, #16]
 80041d0:	f383 8810 	msr	PRIMASK, r3
}
 80041d4:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2220      	movs	r2, #32
 80041da:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2200      	movs	r2, #0
 80041e0:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	2200      	movs	r2, #0
 80041e6:	665a      	str	r2, [r3, #100]	; 0x64
}
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	46bd      	mov	sp, r7
 80041ec:	b00e      	add	sp, #56	; 0x38
 80041ee:	bd80      	pop	{r7, pc}
 80041f0:	fffffedf 	.word	0xfffffedf

080041f4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b084      	sub	sp, #16
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004200:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	225a      	movs	r2, #90	; 0x5a
 8004206:	2100      	movs	r1, #0
 8004208:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2252      	movs	r2, #82	; 0x52
 800420e:	2100      	movs	r1, #0
 8004210:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	0018      	movs	r0, r3
 8004216:	f7ff fc8d 	bl	8003b34 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800421a:	46c0      	nop			; (mov r8, r8)
 800421c:	46bd      	mov	sp, r7
 800421e:	b004      	add	sp, #16
 8004220:	bd80      	pop	{r7, pc}

08004222 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004222:	b580      	push	{r7, lr}
 8004224:	b086      	sub	sp, #24
 8004226:	af00      	add	r7, sp, #0
 8004228:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800422a:	f3ef 8310 	mrs	r3, PRIMASK
 800422e:	60bb      	str	r3, [r7, #8]
  return(result);
 8004230:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004232:	617b      	str	r3, [r7, #20]
 8004234:	2301      	movs	r3, #1
 8004236:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f383 8810 	msr	PRIMASK, r3
}
 800423e:	46c0      	nop			; (mov r8, r8)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	681a      	ldr	r2, [r3, #0]
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2140      	movs	r1, #64	; 0x40
 800424c:	438a      	bics	r2, r1
 800424e:	601a      	str	r2, [r3, #0]
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	f383 8810 	msr	PRIMASK, r3
}
 800425a:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2220      	movs	r2, #32
 8004260:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	2200      	movs	r2, #0
 8004266:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	0018      	movs	r0, r3
 800426c:	f7fc fd0c 	bl	8000c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004270:	46c0      	nop			; (mov r8, r8)
 8004272:	46bd      	mov	sp, r7
 8004274:	b006      	add	sp, #24
 8004276:	bd80      	pop	{r7, pc}

08004278 <__libc_init_array>:
 8004278:	b570      	push	{r4, r5, r6, lr}
 800427a:	2600      	movs	r6, #0
 800427c:	4d0c      	ldr	r5, [pc, #48]	; (80042b0 <__libc_init_array+0x38>)
 800427e:	4c0d      	ldr	r4, [pc, #52]	; (80042b4 <__libc_init_array+0x3c>)
 8004280:	1b64      	subs	r4, r4, r5
 8004282:	10a4      	asrs	r4, r4, #2
 8004284:	42a6      	cmp	r6, r4
 8004286:	d109      	bne.n	800429c <__libc_init_array+0x24>
 8004288:	2600      	movs	r6, #0
 800428a:	f000 f821 	bl	80042d0 <_init>
 800428e:	4d0a      	ldr	r5, [pc, #40]	; (80042b8 <__libc_init_array+0x40>)
 8004290:	4c0a      	ldr	r4, [pc, #40]	; (80042bc <__libc_init_array+0x44>)
 8004292:	1b64      	subs	r4, r4, r5
 8004294:	10a4      	asrs	r4, r4, #2
 8004296:	42a6      	cmp	r6, r4
 8004298:	d105      	bne.n	80042a6 <__libc_init_array+0x2e>
 800429a:	bd70      	pop	{r4, r5, r6, pc}
 800429c:	00b3      	lsls	r3, r6, #2
 800429e:	58eb      	ldr	r3, [r5, r3]
 80042a0:	4798      	blx	r3
 80042a2:	3601      	adds	r6, #1
 80042a4:	e7ee      	b.n	8004284 <__libc_init_array+0xc>
 80042a6:	00b3      	lsls	r3, r6, #2
 80042a8:	58eb      	ldr	r3, [r5, r3]
 80042aa:	4798      	blx	r3
 80042ac:	3601      	adds	r6, #1
 80042ae:	e7f2      	b.n	8004296 <__libc_init_array+0x1e>
 80042b0:	08004320 	.word	0x08004320
 80042b4:	08004320 	.word	0x08004320
 80042b8:	08004320 	.word	0x08004320
 80042bc:	08004324 	.word	0x08004324

080042c0 <memset>:
 80042c0:	0003      	movs	r3, r0
 80042c2:	1882      	adds	r2, r0, r2
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d100      	bne.n	80042ca <memset+0xa>
 80042c8:	4770      	bx	lr
 80042ca:	7019      	strb	r1, [r3, #0]
 80042cc:	3301      	adds	r3, #1
 80042ce:	e7f9      	b.n	80042c4 <memset+0x4>

080042d0 <_init>:
 80042d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042d2:	46c0      	nop			; (mov r8, r8)
 80042d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042d6:	bc08      	pop	{r3}
 80042d8:	469e      	mov	lr, r3
 80042da:	4770      	bx	lr

080042dc <_fini>:
 80042dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042de:	46c0      	nop			; (mov r8, r8)
 80042e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e2:	bc08      	pop	{r3}
 80042e4:	469e      	mov	lr, r3
 80042e6:	4770      	bx	lr
