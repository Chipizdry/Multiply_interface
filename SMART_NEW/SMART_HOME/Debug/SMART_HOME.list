
SMART_HOME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054cc  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  0800558c  0800558c  0001558c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005600  08005600  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08005600  08005600  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005600  08005600  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005600  08005600  00015600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005604  08005604  00015604  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08005608  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000348  20000010  08005618  00020010  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08005618  00020358  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f778  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000263d  00000000  00000000  0002f7f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00031e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bf0  00000000  00000000  00032d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000114a7  00000000  00000000  00033958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012cba  00000000  00000000  00044dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00068401  00000000  00000000  00057ab9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003664  00000000  00000000  000bfebc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c3520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08005574 	.word	0x08005574

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08005574 	.word	0x08005574

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <FlashRead>:
static void MX_TIM3_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */


uint32_t FlashRead(uint32_t address) {
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
 8000226:	6078      	str	r0, [r7, #4]
 return (*(__IO uint32_t*)address);
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	681b      	ldr	r3, [r3, #0]
}
 800022c:	0018      	movs	r0, r3
 800022e:	46bd      	mov	sp, r7
 8000230:	b002      	add	sp, #8
 8000232:	bd80      	pop	{r7, pc}

08000234 <WriteConfig>:



void WriteConfig() {
 8000234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000236:	b089      	sub	sp, #36	; 0x24
 8000238:	af00      	add	r7, sp, #0
 HAL_FLASH_Unlock(); // Открыть доступ к FLASH (она закрыта от случайной записи)
 800023a:	f002 faab 	bl	8002794 <HAL_FLASH_Unlock>
 // В структуре settings хранятся настройки, преобразую ее в 16-битный массив для удобства доступа
 uint16_t* data = (uint16_t*) &settings;
 800023e:	4b1e      	ldr	r3, [pc, #120]	; (80002b8 <WriteConfig+0x84>)
 8000240:	61fb      	str	r3, [r7, #28]
 FLASH_EraseInitTypeDef ef; // Объявляю структуру, необходимую для функции стирания страницы
 HAL_StatusTypeDef stat;
 ef.TypeErase = FLASH_TYPEERASE_PAGES; // Стирать постранично
 8000242:	2108      	movs	r1, #8
 8000244:	187b      	adds	r3, r7, r1
 8000246:	2200      	movs	r2, #0
 8000248:	601a      	str	r2, [r3, #0]
 ef.PageAddress = SETTINGS_ADDRESS; // Адрес страницы для стирания
 800024a:	187b      	adds	r3, r7, r1
 800024c:	4a1b      	ldr	r2, [pc, #108]	; (80002bc <WriteConfig+0x88>)
 800024e:	605a      	str	r2, [r3, #4]
 ef.NbPages = 1; //Число страниц = 1
 8000250:	187b      	adds	r3, r7, r1
 8000252:	2201      	movs	r2, #1
 8000254:	609a      	str	r2, [r3, #8]
 uint32_t temp; // Временная переменная для результата стирания (не использую)
 HAL_FLASHEx_Erase(&ef, &temp); // Вызов функции стирания
 8000256:	1d3a      	adds	r2, r7, #4
 8000258:	187b      	adds	r3, r7, r1
 800025a:	0011      	movs	r1, r2
 800025c:	0018      	movs	r0, r3
 800025e:	f002 fb59 	bl	8002914 <HAL_FLASHEx_Erase>
 // Будьте уверены, что размер структуры настроек кратен 2 байтам
 for (int i = 0; i < sizeof(settings); i += 2) { // Запись всех настроек
 8000262:	2300      	movs	r3, #0
 8000264:	61bb      	str	r3, [r7, #24]
 8000266:	e01c      	b.n	80002a2 <WriteConfig+0x6e>
  stat = HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, SETTINGS_ADDRESS + i, *(data++));
 8000268:	69bb      	ldr	r3, [r7, #24]
 800026a:	4a14      	ldr	r2, [pc, #80]	; (80002bc <WriteConfig+0x88>)
 800026c:	4694      	mov	ip, r2
 800026e:	4463      	add	r3, ip
 8000270:	0019      	movs	r1, r3
 8000272:	69fb      	ldr	r3, [r7, #28]
 8000274:	1c9a      	adds	r2, r3, #2
 8000276:	61fa      	str	r2, [r7, #28]
 8000278:	881b      	ldrh	r3, [r3, #0]
 800027a:	001c      	movs	r4, r3
 800027c:	2300      	movs	r3, #0
 800027e:	001d      	movs	r5, r3
 8000280:	2317      	movs	r3, #23
 8000282:	18fe      	adds	r6, r7, r3
 8000284:	0022      	movs	r2, r4
 8000286:	002b      	movs	r3, r5
 8000288:	2001      	movs	r0, #1
 800028a:	f002 f9ed 	bl	8002668 <HAL_FLASH_Program>
 800028e:	0003      	movs	r3, r0
 8000290:	7033      	strb	r3, [r6, #0]
  if (stat != HAL_OK) break; // Если что-то пошло не так - выскочить из цикла
 8000292:	2317      	movs	r3, #23
 8000294:	18fb      	adds	r3, r7, r3
 8000296:	781b      	ldrb	r3, [r3, #0]
 8000298:	2b00      	cmp	r3, #0
 800029a:	d106      	bne.n	80002aa <WriteConfig+0x76>
 for (int i = 0; i < sizeof(settings); i += 2) { // Запись всех настроек
 800029c:	69bb      	ldr	r3, [r7, #24]
 800029e:	3302      	adds	r3, #2
 80002a0:	61bb      	str	r3, [r7, #24]
 80002a2:	69bb      	ldr	r3, [r7, #24]
 80002a4:	2b03      	cmp	r3, #3
 80002a6:	d9df      	bls.n	8000268 <WriteConfig+0x34>
 80002a8:	e000      	b.n	80002ac <WriteConfig+0x78>
  if (stat != HAL_OK) break; // Если что-то пошло не так - выскочить из цикла
 80002aa:	46c0      	nop			; (mov r8, r8)
 }
 HAL_FLASH_Lock(); // Закрыть флешку от случайной записи
 80002ac:	f002 fa98 	bl	80027e0 <HAL_FLASH_Lock>
}
 80002b0:	46c0      	nop			; (mov r8, r8)
 80002b2:	46bd      	mov	sp, r7
 80002b4:	b009      	add	sp, #36	; 0x24
 80002b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002b8:	20000328 	.word	0x20000328
 80002bc:	08007c00 	.word	0x08007c00

080002c0 <ReadConfig>:



// Пример чтения только 4 байт настроек. Для бОльшего объема данных используйте цикл
void ReadConfig() {
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b082      	sub	sp, #8
 80002c4:	af00      	add	r7, sp, #0
 // Структуру настроек превращаю в указатель на массив 8-ми битных значений
 uint8_t* setData = (uint8_t*)&settings;
 80002c6:	4b16      	ldr	r3, [pc, #88]	; (8000320 <ReadConfig+0x60>)
 80002c8:	607b      	str	r3, [r7, #4]
 LED1_ON;
 80002ca:	2380      	movs	r3, #128	; 0x80
 80002cc:	0119      	lsls	r1, r3, #4
 80002ce:	2390      	movs	r3, #144	; 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2201      	movs	r2, #1
 80002d4:	0018      	movs	r0, r3
 80002d6:	f002 fd56 	bl	8002d86 <HAL_GPIO_WritePin>

 uint32_t tempData = FlashRead(SETTINGS_ADDRESS); // Прочесть слово из флешки
 80002da:	4b12      	ldr	r3, [pc, #72]	; (8000324 <ReadConfig+0x64>)
 80002dc:	0018      	movs	r0, r3
 80002de:	f7ff ff9f 	bl	8000220 <FlashRead>
 80002e2:	0003      	movs	r3, r0
 80002e4:	603b      	str	r3, [r7, #0]
// uint32_t tempData  = *(__IO uint32_t *)SETTINGS_ADDRESS;
 if (tempData != 0xffffffff) { // Если флешка не пустая
 80002e6:	683b      	ldr	r3, [r7, #0]
 80002e8:	3301      	adds	r3, #1
 80002ea:	d015      	beq.n	8000318 <ReadConfig+0x58>
 setData[0] = (uint8_t)((tempData & 0xff000000) >> 24); // �?звлечь первый байт из слова
 80002ec:	683b      	ldr	r3, [r7, #0]
 80002ee:	0e1b      	lsrs	r3, r3, #24
 80002f0:	b2da      	uxtb	r2, r3
 80002f2:	687b      	ldr	r3, [r7, #4]
 80002f4:	701a      	strb	r2, [r3, #0]
 setData[1] = (uint8_t)((tempData & 0x00ff0000) >> 16); // �?звлечь второй байт из слова
 80002f6:	683b      	ldr	r3, [r7, #0]
 80002f8:	0c1a      	lsrs	r2, r3, #16
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	3301      	adds	r3, #1
 80002fe:	b2d2      	uxtb	r2, r2
 8000300:	701a      	strb	r2, [r3, #0]
 setData[2] = (uint8_t)((tempData & 0x0000ff00) >> 8); // �?злечь третий байт из слова
 8000302:	683b      	ldr	r3, [r7, #0]
 8000304:	0a1a      	lsrs	r2, r3, #8
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	3302      	adds	r3, #2
 800030a:	b2d2      	uxtb	r2, r2
 800030c:	701a      	strb	r2, [r3, #0]
 setData[3] = tempData & 0xff; // �?звлечь четвертый байт из слова
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3303      	adds	r3, #3
 8000312:	683a      	ldr	r2, [r7, #0]
 8000314:	b2d2      	uxtb	r2, r2
 8000316:	701a      	strb	r2, [r3, #0]
 }
}
 8000318:	46c0      	nop			; (mov r8, r8)
 800031a:	46bd      	mov	sp, r7
 800031c:	b002      	add	sp, #8
 800031e:	bd80      	pop	{r7, pc}
 8000320:	20000328 	.word	0x20000328
 8000324:	08007c00 	.word	0x08007c00

08000328 <TCT>:
	// LED2_ON;
	 HAL_UART_Transmit_DMA(&huart1, str, sizeof(str));

}

void TCT(void){
 8000328:	b580      	push	{r7, lr}
 800032a:	af00      	add	r7, sp, #0

	                 if (count==13){OWR_ON;}
 800032c:	4b66      	ldr	r3, [pc, #408]	; (80004c8 <TCT+0x1a0>)
 800032e:	781b      	ldrb	r3, [r3, #0]
 8000330:	2b0d      	cmp	r3, #13
 8000332:	d106      	bne.n	8000342 <TCT+0x1a>
 8000334:	2390      	movs	r3, #144	; 0x90
 8000336:	05db      	lsls	r3, r3, #23
 8000338:	2201      	movs	r2, #1
 800033a:	2180      	movs	r1, #128	; 0x80
 800033c:	0018      	movs	r0, r3
 800033e:	f002 fd22 	bl	8002d86 <HAL_GPIO_WritePin>
	                 if ((count==14)&&(alarm==1)){OWR_ON;}
 8000342:	4b61      	ldr	r3, [pc, #388]	; (80004c8 <TCT+0x1a0>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	2b0e      	cmp	r3, #14
 8000348:	d10a      	bne.n	8000360 <TCT+0x38>
 800034a:	4b60      	ldr	r3, [pc, #384]	; (80004cc <TCT+0x1a4>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b01      	cmp	r3, #1
 8000350:	d106      	bne.n	8000360 <TCT+0x38>
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	2201      	movs	r2, #1
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	0018      	movs	r0, r3
 800035c:	f002 fd13 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==22){OWR_ON;}
 8000360:	4b59      	ldr	r3, [pc, #356]	; (80004c8 <TCT+0x1a0>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b16      	cmp	r3, #22
 8000366:	d106      	bne.n	8000376 <TCT+0x4e>
 8000368:	2390      	movs	r3, #144	; 0x90
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	2201      	movs	r2, #1
 800036e:	2180      	movs	r1, #128	; 0x80
 8000370:	0018      	movs	r0, r3
 8000372:	f002 fd08 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==31){OWR_ON;}
 8000376:	4b54      	ldr	r3, [pc, #336]	; (80004c8 <TCT+0x1a0>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b1f      	cmp	r3, #31
 800037c:	d106      	bne.n	800038c <TCT+0x64>
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2201      	movs	r2, #1
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	0018      	movs	r0, r3
 8000388:	f002 fcfd 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==40){OWR_ON;}
 800038c:	4b4e      	ldr	r3, [pc, #312]	; (80004c8 <TCT+0x1a0>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b28      	cmp	r3, #40	; 0x28
 8000392:	d106      	bne.n	80003a2 <TCT+0x7a>
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2201      	movs	r2, #1
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	0018      	movs	r0, r3
 800039e:	f002 fcf2 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==49){OWR_ON;}
 80003a2:	4b49      	ldr	r3, [pc, #292]	; (80004c8 <TCT+0x1a0>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b31      	cmp	r3, #49	; 0x31
 80003a8:	d106      	bne.n	80003b8 <TCT+0x90>
 80003aa:	2390      	movs	r3, #144	; 0x90
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2201      	movs	r2, #1
 80003b0:	2180      	movs	r1, #128	; 0x80
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 fce7 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==58){OWR_ON;}
 80003b8:	4b43      	ldr	r3, [pc, #268]	; (80004c8 <TCT+0x1a0>)
 80003ba:	781b      	ldrb	r3, [r3, #0]
 80003bc:	2b3a      	cmp	r3, #58	; 0x3a
 80003be:	d106      	bne.n	80003ce <TCT+0xa6>
 80003c0:	2390      	movs	r3, #144	; 0x90
 80003c2:	05db      	lsls	r3, r3, #23
 80003c4:	2201      	movs	r2, #1
 80003c6:	2180      	movs	r1, #128	; 0x80
 80003c8:	0018      	movs	r0, r3
 80003ca:	f002 fcdc 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==67){OWR_ON;}
 80003ce:	4b3e      	ldr	r3, [pc, #248]	; (80004c8 <TCT+0x1a0>)
 80003d0:	781b      	ldrb	r3, [r3, #0]
 80003d2:	2b43      	cmp	r3, #67	; 0x43
 80003d4:	d106      	bne.n	80003e4 <TCT+0xbc>
 80003d6:	2390      	movs	r3, #144	; 0x90
 80003d8:	05db      	lsls	r3, r3, #23
 80003da:	2201      	movs	r2, #1
 80003dc:	2180      	movs	r1, #128	; 0x80
 80003de:	0018      	movs	r0, r3
 80003e0:	f002 fcd1 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==76){OWR_ON;}
 80003e4:	4b38      	ldr	r3, [pc, #224]	; (80004c8 <TCT+0x1a0>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b4c      	cmp	r3, #76	; 0x4c
 80003ea:	d106      	bne.n	80003fa <TCT+0xd2>
 80003ec:	2390      	movs	r3, #144	; 0x90
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	2201      	movs	r2, #1
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	0018      	movs	r0, r3
 80003f6:	f002 fcc6 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==85){OWR_ON;}
 80003fa:	4b33      	ldr	r3, [pc, #204]	; (80004c8 <TCT+0x1a0>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b55      	cmp	r3, #85	; 0x55
 8000400:	d106      	bne.n	8000410 <TCT+0xe8>
 8000402:	2390      	movs	r3, #144	; 0x90
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	2201      	movs	r2, #1
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0018      	movs	r0, r3
 800040c:	f002 fcbb 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==94){OWR_ON;}
 8000410:	4b2d      	ldr	r3, [pc, #180]	; (80004c8 <TCT+0x1a0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b5e      	cmp	r3, #94	; 0x5e
 8000416:	d106      	bne.n	8000426 <TCT+0xfe>
 8000418:	2390      	movs	r3, #144	; 0x90
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2201      	movs	r2, #1
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	0018      	movs	r0, r3
 8000422:	f002 fcb0 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==103){OWR_ON;}
 8000426:	4b28      	ldr	r3, [pc, #160]	; (80004c8 <TCT+0x1a0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b67      	cmp	r3, #103	; 0x67
 800042c:	d106      	bne.n	800043c <TCT+0x114>
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2201      	movs	r2, #1
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0018      	movs	r0, r3
 8000438:	f002 fca5 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==112){OWR_ON;}
 800043c:	4b22      	ldr	r3, [pc, #136]	; (80004c8 <TCT+0x1a0>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b70      	cmp	r3, #112	; 0x70
 8000442:	d106      	bne.n	8000452 <TCT+0x12a>
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	2201      	movs	r2, #1
 800044a:	2180      	movs	r1, #128	; 0x80
 800044c:	0018      	movs	r0, r3
 800044e:	f002 fc9a 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==121){OWR_ON;}
 8000452:	4b1d      	ldr	r3, [pc, #116]	; (80004c8 <TCT+0x1a0>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b79      	cmp	r3, #121	; 0x79
 8000458:	d106      	bne.n	8000468 <TCT+0x140>
 800045a:	2390      	movs	r3, #144	; 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2201      	movs	r2, #1
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	0018      	movs	r0, r3
 8000464:	f002 fc8f 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==130){OWR_ON;}
 8000468:	4b17      	ldr	r3, [pc, #92]	; (80004c8 <TCT+0x1a0>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b82      	cmp	r3, #130	; 0x82
 800046e:	d106      	bne.n	800047e <TCT+0x156>
 8000470:	2390      	movs	r3, #144	; 0x90
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2201      	movs	r2, #1
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	0018      	movs	r0, r3
 800047a:	f002 fc84 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==139){OWR_ON;}
 800047e:	4b12      	ldr	r3, [pc, #72]	; (80004c8 <TCT+0x1a0>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b8b      	cmp	r3, #139	; 0x8b
 8000484:	d106      	bne.n	8000494 <TCT+0x16c>
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2201      	movs	r2, #1
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0018      	movs	r0, r3
 8000490:	f002 fc79 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==148){OWR_ON;}
 8000494:	4b0c      	ldr	r3, [pc, #48]	; (80004c8 <TCT+0x1a0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b94      	cmp	r3, #148	; 0x94
 800049a:	d106      	bne.n	80004aa <TCT+0x182>
 800049c:	2390      	movs	r3, #144	; 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2201      	movs	r2, #1
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	0018      	movs	r0, r3
 80004a6:	f002 fc6e 	bl	8002d86 <HAL_GPIO_WritePin>
		        	 if (count==157){OWR_ON;}
 80004aa:	4b07      	ldr	r3, [pc, #28]	; (80004c8 <TCT+0x1a0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b9d      	cmp	r3, #157	; 0x9d
 80004b0:	d106      	bne.n	80004c0 <TCT+0x198>
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2201      	movs	r2, #1
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0018      	movs	r0, r3
 80004bc:	f002 fc63 	bl	8002d86 <HAL_GPIO_WritePin>

}
 80004c0:	46c0      	nop			; (mov r8, r8)
 80004c2:	46bd      	mov	sp, r7
 80004c4:	bd80      	pop	{r7, pc}
 80004c6:	46c0      	nop			; (mov r8, r8)
 80004c8:	20000320 	.word	0x20000320
 80004cc:	20000224 	.word	0x20000224

080004d0 <Protocol>:




void Protocol(void){
 80004d0:	b580      	push	{r7, lr}
 80004d2:	af00      	add	r7, sp, #0
	           //  if ((count==9)&&(alarm=1)){OWR_ON;}

              TCT();
 80004d4:	f7ff ff28 	bl	8000328 <TCT>

	        	 if (count==13)
 80004d8:	4b81      	ldr	r3, [pc, #516]	; (80006e0 <Protocol+0x210>)
 80004da:	781b      	ldrb	r3, [r3, #0]
 80004dc:	2b0d      	cmp	r3, #13
 80004de:	d12c      	bne.n	800053a <Protocol+0x6a>
	        	         	   {  directive=0;
 80004e0:	4b80      	ldr	r3, [pc, #512]	; (80006e4 <Protocol+0x214>)
 80004e2:	2200      	movs	r2, #0
 80004e4:	701a      	strb	r2, [r3, #0]

	        	         	     directive|= (rcvd[9]<<4)|(rcvd[10]<<3)|(rcvd[11]<<2)|(rcvd[12]<<1)|(rcvd[13]) ;
 80004e6:	4b80      	ldr	r3, [pc, #512]	; (80006e8 <Protocol+0x218>)
 80004e8:	7a5b      	ldrb	r3, [r3, #9]
 80004ea:	011b      	lsls	r3, r3, #4
 80004ec:	b25a      	sxtb	r2, r3
 80004ee:	4b7e      	ldr	r3, [pc, #504]	; (80006e8 <Protocol+0x218>)
 80004f0:	7a9b      	ldrb	r3, [r3, #10]
 80004f2:	00db      	lsls	r3, r3, #3
 80004f4:	b25b      	sxtb	r3, r3
 80004f6:	4313      	orrs	r3, r2
 80004f8:	b25a      	sxtb	r2, r3
 80004fa:	4b7b      	ldr	r3, [pc, #492]	; (80006e8 <Protocol+0x218>)
 80004fc:	7adb      	ldrb	r3, [r3, #11]
 80004fe:	009b      	lsls	r3, r3, #2
 8000500:	b25b      	sxtb	r3, r3
 8000502:	4313      	orrs	r3, r2
 8000504:	b25a      	sxtb	r2, r3
 8000506:	4b78      	ldr	r3, [pc, #480]	; (80006e8 <Protocol+0x218>)
 8000508:	7b1b      	ldrb	r3, [r3, #12]
 800050a:	005b      	lsls	r3, r3, #1
 800050c:	b25b      	sxtb	r3, r3
 800050e:	4313      	orrs	r3, r2
 8000510:	b25a      	sxtb	r2, r3
 8000512:	4b75      	ldr	r3, [pc, #468]	; (80006e8 <Protocol+0x218>)
 8000514:	7b5b      	ldrb	r3, [r3, #13]
 8000516:	b25b      	sxtb	r3, r3
 8000518:	4313      	orrs	r3, r2
 800051a:	b25a      	sxtb	r2, r3
 800051c:	4b71      	ldr	r3, [pc, #452]	; (80006e4 <Protocol+0x214>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b25b      	sxtb	r3, r3
 8000522:	4313      	orrs	r3, r2
 8000524:	b25b      	sxtb	r3, r3
 8000526:	b2da      	uxtb	r2, r3
 8000528:	4b6e      	ldr	r3, [pc, #440]	; (80006e4 <Protocol+0x214>)
 800052a:	701a      	strb	r2, [r3, #0]

	        	         	   OWR_ON;
 800052c:	2390      	movs	r3, #144	; 0x90
 800052e:	05db      	lsls	r3, r3, #23
 8000530:	2201      	movs	r2, #1
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	0018      	movs	r0, r3
 8000536:	f002 fc26 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         	    }


	        	         	 switch(directive)
 800053a:	4b6a      	ldr	r3, [pc, #424]	; (80006e4 <Protocol+0x214>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b0e      	cmp	r3, #14
 8000540:	d900      	bls.n	8000544 <Protocol+0x74>
 8000542:	e269      	b.n	8000a18 <Protocol+0x548>
 8000544:	009a      	lsls	r2, r3, #2
 8000546:	4b69      	ldr	r3, [pc, #420]	; (80006ec <Protocol+0x21c>)
 8000548:	18d3      	adds	r3, r2, r3
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	469f      	mov	pc, r3
	        	         			   {

	        	         	case 0 :
                                  TCT();
 800054e:	f7ff feeb 	bl	8000328 <TCT>
                                //  if (count==14){OWR_ON;}

	        	            break;
 8000552:	e261      	b.n	8000a18 <Protocol+0x548>

	        	         	case 1 :
	        	         	      TCT();
 8000554:	f7ff fee8 	bl	8000328 <TCT>
	        	         	   //  if (count==14){OWR_ON;}
	        	            break;
 8000558:	e25e      	b.n	8000a18 <Protocol+0x548>

	        	         	 case 2 :
	        	         		        	         		 TCT();
 800055a:	f7ff fee5 	bl	8000328 <TCT>

	        	         		        	         	//	if(count==14){OWR_ON;}
	        	         		        	         		if(count==15){OWR_ON;}
 800055e:	4b60      	ldr	r3, [pc, #384]	; (80006e0 <Protocol+0x210>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b0f      	cmp	r3, #15
 8000564:	d000      	beq.n	8000568 <Protocol+0x98>
 8000566:	e24e      	b.n	8000a06 <Protocol+0x536>
 8000568:	2390      	movs	r3, #144	; 0x90
 800056a:	05db      	lsls	r3, r3, #23
 800056c:	2201      	movs	r2, #1
 800056e:	2180      	movs	r1, #128	; 0x80
 8000570:	0018      	movs	r0, r3
 8000572:	f002 fc08 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         //		 if(temp_ID==1){OWR_ON;}
	        	         		        	         //		 if(temp_ID==0){OWR_OFF;}
	        	         		        	         //		     temp_ID=0;
	        	         		        	         //		       }

	        	         		        	         	 break;
 8000576:	e246      	b.n	8000a06 <Protocol+0x536>

	        	          	 case 3 :

	        	         	                                   TCT();
 8000578:	f7ff fed6 	bl	8000328 <TCT>

	        	         		        	         		 if((count>=14)&&(count<22))
 800057c:	4b58      	ldr	r3, [pc, #352]	; (80006e0 <Protocol+0x210>)
 800057e:	781b      	ldrb	r3, [r3, #0]
 8000580:	2b0d      	cmp	r3, #13
 8000582:	d932      	bls.n	80005ea <Protocol+0x11a>
 8000584:	4b56      	ldr	r3, [pc, #344]	; (80006e0 <Protocol+0x210>)
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b15      	cmp	r3, #21
 800058a:	d82e      	bhi.n	80005ea <Protocol+0x11a>
	        	         		        	         		        	         	       {
	        	         		        	         		        	         	            temp_ID|=((Device_ID>>(21-count))&(0b1));
 800058c:	4b58      	ldr	r3, [pc, #352]	; (80006f0 <Protocol+0x220>)
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	001a      	movs	r2, r3
 8000592:	4b53      	ldr	r3, [pc, #332]	; (80006e0 <Protocol+0x210>)
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	0019      	movs	r1, r3
 8000598:	2315      	movs	r3, #21
 800059a:	1a5b      	subs	r3, r3, r1
 800059c:	411a      	asrs	r2, r3
 800059e:	0013      	movs	r3, r2
 80005a0:	b25b      	sxtb	r3, r3
 80005a2:	2201      	movs	r2, #1
 80005a4:	4013      	ands	r3, r2
 80005a6:	b25a      	sxtb	r2, r3
 80005a8:	4b52      	ldr	r3, [pc, #328]	; (80006f4 <Protocol+0x224>)
 80005aa:	781b      	ldrb	r3, [r3, #0]
 80005ac:	b25b      	sxtb	r3, r3
 80005ae:	4313      	orrs	r3, r2
 80005b0:	b25b      	sxtb	r3, r3
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b4f      	ldr	r3, [pc, #316]	; (80006f4 <Protocol+0x224>)
 80005b6:	701a      	strb	r2, [r3, #0]
	        	         		        	         		        	         	            if(temp_ID==1){OWR_ON;}
 80005b8:	4b4e      	ldr	r3, [pc, #312]	; (80006f4 <Protocol+0x224>)
 80005ba:	781b      	ldrb	r3, [r3, #0]
 80005bc:	2b01      	cmp	r3, #1
 80005be:	d106      	bne.n	80005ce <Protocol+0xfe>
 80005c0:	2390      	movs	r3, #144	; 0x90
 80005c2:	05db      	lsls	r3, r3, #23
 80005c4:	2201      	movs	r2, #1
 80005c6:	2180      	movs	r1, #128	; 0x80
 80005c8:	0018      	movs	r0, r3
 80005ca:	f002 fbdc 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         		        	         	            if(temp_ID==0){OWR_OFF;}
 80005ce:	4b49      	ldr	r3, [pc, #292]	; (80006f4 <Protocol+0x224>)
 80005d0:	781b      	ldrb	r3, [r3, #0]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d106      	bne.n	80005e4 <Protocol+0x114>
 80005d6:	2390      	movs	r3, #144	; 0x90
 80005d8:	05db      	lsls	r3, r3, #23
 80005da:	2200      	movs	r2, #0
 80005dc:	2180      	movs	r1, #128	; 0x80
 80005de:	0018      	movs	r0, r3
 80005e0:	f002 fbd1 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         		        	         	            temp_ID=0;
 80005e4:	4b43      	ldr	r3, [pc, #268]	; (80006f4 <Protocol+0x224>)
 80005e6:	2200      	movs	r2, #0
 80005e8:	701a      	strb	r2, [r3, #0]
	        	         		        	            //  if((count==38)||(count==39)){OWR_ON;}  //обрыв цепи управления




	        	         		        	         	   if((count>=41)&&(count<49)){OWR_ON;}
 80005ea:	4b3d      	ldr	r3, [pc, #244]	; (80006e0 <Protocol+0x210>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	2b28      	cmp	r3, #40	; 0x28
 80005f0:	d800      	bhi.n	80005f4 <Protocol+0x124>
 80005f2:	e20a      	b.n	8000a0a <Protocol+0x53a>
 80005f4:	4b3a      	ldr	r3, [pc, #232]	; (80006e0 <Protocol+0x210>)
 80005f6:	781b      	ldrb	r3, [r3, #0]
 80005f8:	2b30      	cmp	r3, #48	; 0x30
 80005fa:	d900      	bls.n	80005fe <Protocol+0x12e>
 80005fc:	e205      	b.n	8000a0a <Protocol+0x53a>
 80005fe:	2390      	movs	r3, #144	; 0x90
 8000600:	05db      	lsls	r3, r3, #23
 8000602:	2201      	movs	r2, #1
 8000604:	2180      	movs	r1, #128	; 0x80
 8000606:	0018      	movs	r0, r3
 8000608:	f002 fbbd 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	//      if(count==44){ OWR_ON;}




	        	         		        	         	  break;
 800060c:	e1fd      	b.n	8000a0a <Protocol+0x53a>


	        	         	case 4 :
	        	         		      TCT();
 800060e:	f7ff fe8b 	bl	8000328 <TCT>
	        	         		break;
 8000612:	e201      	b.n	8000a18 <Protocol+0x548>



	        	         	 case 6 :

	        	         		 if(count==30){OWR_ON;}
 8000614:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <Protocol+0x210>)
 8000616:	781b      	ldrb	r3, [r3, #0]
 8000618:	2b1e      	cmp	r3, #30
 800061a:	d106      	bne.n	800062a <Protocol+0x15a>
 800061c:	2390      	movs	r3, #144	; 0x90
 800061e:	05db      	lsls	r3, r3, #23
 8000620:	2201      	movs	r2, #1
 8000622:	2180      	movs	r1, #128	; 0x80
 8000624:	0018      	movs	r0, r3
 8000626:	f002 fbae 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         	  if(count==45){OWR_ON;}
 800062a:	4b2d      	ldr	r3, [pc, #180]	; (80006e0 <Protocol+0x210>)
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	2b2d      	cmp	r3, #45	; 0x2d
 8000630:	d106      	bne.n	8000640 <Protocol+0x170>
 8000632:	2390      	movs	r3, #144	; 0x90
 8000634:	05db      	lsls	r3, r3, #23
 8000636:	2201      	movs	r2, #1
 8000638:	2180      	movs	r1, #128	; 0x80
 800063a:	0018      	movs	r0, r3
 800063c:	f002 fba3 	bl	8002d86 <HAL_GPIO_WritePin>
	        	            if(count==46)
 8000640:	4b27      	ldr	r3, [pc, #156]	; (80006e0 <Protocol+0x210>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	2b2e      	cmp	r3, #46	; 0x2e
 8000646:	d000      	beq.n	800064a <Protocol+0x17a>
 8000648:	e1e1      	b.n	8000a0e <Protocol+0x53e>
	        	           {
	        	            	if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 800064a:	4b27      	ldr	r3, [pc, #156]	; (80006e8 <Protocol+0x218>)
 800064c:	2223      	movs	r2, #35	; 0x23
 800064e:	5c9b      	ldrb	r3, [r3, r2]
 8000650:	2b01      	cmp	r3, #1
 8000652:	d10c      	bne.n	800066e <Protocol+0x19e>
 8000654:	4b24      	ldr	r3, [pc, #144]	; (80006e8 <Protocol+0x218>)
 8000656:	222a      	movs	r2, #42	; 0x2a
 8000658:	5c9b      	ldrb	r3, [r3, r2]
 800065a:	2b01      	cmp	r3, #1
 800065c:	d107      	bne.n	800066e <Protocol+0x19e>
 800065e:	2380      	movs	r3, #128	; 0x80
 8000660:	0119      	lsls	r1, r3, #4
 8000662:	2390      	movs	r3, #144	; 0x90
 8000664:	05db      	lsls	r3, r3, #23
 8000666:	2201      	movs	r2, #1
 8000668:	0018      	movs	r0, r3
 800066a:	f002 fb8c 	bl	8002d86 <HAL_GPIO_WritePin>
	        	                if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <Protocol+0x218>)
 8000670:	2224      	movs	r2, #36	; 0x24
 8000672:	5c9b      	ldrb	r3, [r3, r2]
 8000674:	2b01      	cmp	r3, #1
 8000676:	d10c      	bne.n	8000692 <Protocol+0x1c2>
 8000678:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <Protocol+0x218>)
 800067a:	222b      	movs	r2, #43	; 0x2b
 800067c:	5c9b      	ldrb	r3, [r3, r2]
 800067e:	2b01      	cmp	r3, #1
 8000680:	d107      	bne.n	8000692 <Protocol+0x1c2>
 8000682:	2380      	movs	r3, #128	; 0x80
 8000684:	0119      	lsls	r1, r3, #4
 8000686:	2390      	movs	r3, #144	; 0x90
 8000688:	05db      	lsls	r3, r3, #23
 800068a:	2200      	movs	r2, #0
 800068c:	0018      	movs	r0, r3
 800068e:	f002 fb7a 	bl	8002d86 <HAL_GPIO_WritePin>
	        	                if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 8000692:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <Protocol+0x218>)
 8000694:	2225      	movs	r2, #37	; 0x25
 8000696:	5c9b      	ldrb	r3, [r3, r2]
 8000698:	2b01      	cmp	r3, #1
 800069a:	d10c      	bne.n	80006b6 <Protocol+0x1e6>
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <Protocol+0x218>)
 800069e:	222c      	movs	r2, #44	; 0x2c
 80006a0:	5c9b      	ldrb	r3, [r3, r2]
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d107      	bne.n	80006b6 <Protocol+0x1e6>
 80006a6:	2380      	movs	r3, #128	; 0x80
 80006a8:	0159      	lsls	r1, r3, #5
 80006aa:	2390      	movs	r3, #144	; 0x90
 80006ac:	05db      	lsls	r3, r3, #23
 80006ae:	2201      	movs	r2, #1
 80006b0:	0018      	movs	r0, r3
 80006b2:	f002 fb68 	bl	8002d86 <HAL_GPIO_WritePin>
	        	                if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 80006b6:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <Protocol+0x218>)
 80006b8:	2226      	movs	r2, #38	; 0x26
 80006ba:	5c9b      	ldrb	r3, [r3, r2]
 80006bc:	2b01      	cmp	r3, #1
 80006be:	d000      	beq.n	80006c2 <Protocol+0x1f2>
 80006c0:	e1a5      	b.n	8000a0e <Protocol+0x53e>
 80006c2:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <Protocol+0x218>)
 80006c4:	222d      	movs	r2, #45	; 0x2d
 80006c6:	5c9b      	ldrb	r3, [r3, r2]
 80006c8:	2b01      	cmp	r3, #1
 80006ca:	d000      	beq.n	80006ce <Protocol+0x1fe>
 80006cc:	e19f      	b.n	8000a0e <Protocol+0x53e>
 80006ce:	2380      	movs	r3, #128	; 0x80
 80006d0:	0159      	lsls	r1, r3, #5
 80006d2:	2390      	movs	r3, #144	; 0x90
 80006d4:	05db      	lsls	r3, r3, #23
 80006d6:	2200      	movs	r2, #0
 80006d8:	0018      	movs	r0, r3
 80006da:	f002 fb54 	bl	8002d86 <HAL_GPIO_WritePin>

	        	         			        	         			   }


	        	         	 break;
 80006de:	e196      	b.n	8000a0e <Protocol+0x53e>
 80006e0:	20000320 	.word	0x20000320
 80006e4:	20000323 	.word	0x20000323
 80006e8:	20000228 	.word	0x20000228
 80006ec:	0800558c 	.word	0x0800558c
 80006f0:	20000001 	.word	0x20000001
 80006f4:	20000325 	.word	0x20000325

	        	         	 case 13 :

	        	         		        	         		 if(count==30){OWR_ON;}
 80006f8:	4bc9      	ldr	r3, [pc, #804]	; (8000a20 <Protocol+0x550>)
 80006fa:	781b      	ldrb	r3, [r3, #0]
 80006fc:	2b1e      	cmp	r3, #30
 80006fe:	d106      	bne.n	800070e <Protocol+0x23e>
 8000700:	2390      	movs	r3, #144	; 0x90
 8000702:	05db      	lsls	r3, r3, #23
 8000704:	2201      	movs	r2, #1
 8000706:	2180      	movs	r1, #128	; 0x80
 8000708:	0018      	movs	r0, r3
 800070a:	f002 fb3c 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	  if(count==45){OWR_ON;}
 800070e:	4bc4      	ldr	r3, [pc, #784]	; (8000a20 <Protocol+0x550>)
 8000710:	781b      	ldrb	r3, [r3, #0]
 8000712:	2b2d      	cmp	r3, #45	; 0x2d
 8000714:	d106      	bne.n	8000724 <Protocol+0x254>
 8000716:	2390      	movs	r3, #144	; 0x90
 8000718:	05db      	lsls	r3, r3, #23
 800071a:	2201      	movs	r2, #1
 800071c:	2180      	movs	r1, #128	; 0x80
 800071e:	0018      	movs	r0, r3
 8000720:	f002 fb31 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==54){OWR_ON;}
 8000724:	4bbe      	ldr	r3, [pc, #760]	; (8000a20 <Protocol+0x550>)
 8000726:	781b      	ldrb	r3, [r3, #0]
 8000728:	2b36      	cmp	r3, #54	; 0x36
 800072a:	d106      	bne.n	800073a <Protocol+0x26a>
 800072c:	2390      	movs	r3, #144	; 0x90
 800072e:	05db      	lsls	r3, r3, #23
 8000730:	2201      	movs	r2, #1
 8000732:	2180      	movs	r1, #128	; 0x80
 8000734:	0018      	movs	r0, r3
 8000736:	f002 fb26 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==63){OWR_ON;}
 800073a:	4bb9      	ldr	r3, [pc, #740]	; (8000a20 <Protocol+0x550>)
 800073c:	781b      	ldrb	r3, [r3, #0]
 800073e:	2b3f      	cmp	r3, #63	; 0x3f
 8000740:	d106      	bne.n	8000750 <Protocol+0x280>
 8000742:	2390      	movs	r3, #144	; 0x90
 8000744:	05db      	lsls	r3, r3, #23
 8000746:	2201      	movs	r2, #1
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	0018      	movs	r0, r3
 800074c:	f002 fb1b 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==72){OWR_ON;}
 8000750:	4bb3      	ldr	r3, [pc, #716]	; (8000a20 <Protocol+0x550>)
 8000752:	781b      	ldrb	r3, [r3, #0]
 8000754:	2b48      	cmp	r3, #72	; 0x48
 8000756:	d106      	bne.n	8000766 <Protocol+0x296>
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2201      	movs	r2, #1
 800075e:	2180      	movs	r1, #128	; 0x80
 8000760:	0018      	movs	r0, r3
 8000762:	f002 fb10 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==81){OWR_ON;}
 8000766:	4bae      	ldr	r3, [pc, #696]	; (8000a20 <Protocol+0x550>)
 8000768:	781b      	ldrb	r3, [r3, #0]
 800076a:	2b51      	cmp	r3, #81	; 0x51
 800076c:	d106      	bne.n	800077c <Protocol+0x2ac>
 800076e:	2390      	movs	r3, #144	; 0x90
 8000770:	05db      	lsls	r3, r3, #23
 8000772:	2201      	movs	r2, #1
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	0018      	movs	r0, r3
 8000778:	f002 fb05 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==90){OWR_ON;}
 800077c:	4ba8      	ldr	r3, [pc, #672]	; (8000a20 <Protocol+0x550>)
 800077e:	781b      	ldrb	r3, [r3, #0]
 8000780:	2b5a      	cmp	r3, #90	; 0x5a
 8000782:	d106      	bne.n	8000792 <Protocol+0x2c2>
 8000784:	2390      	movs	r3, #144	; 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2201      	movs	r2, #1
 800078a:	2180      	movs	r1, #128	; 0x80
 800078c:	0018      	movs	r0, r3
 800078e:	f002 fafa 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==99){OWR_ON;}
 8000792:	4ba3      	ldr	r3, [pc, #652]	; (8000a20 <Protocol+0x550>)
 8000794:	781b      	ldrb	r3, [r3, #0]
 8000796:	2b63      	cmp	r3, #99	; 0x63
 8000798:	d106      	bne.n	80007a8 <Protocol+0x2d8>
 800079a:	2390      	movs	r3, #144	; 0x90
 800079c:	05db      	lsls	r3, r3, #23
 800079e:	2201      	movs	r2, #1
 80007a0:	2180      	movs	r1, #128	; 0x80
 80007a2:	0018      	movs	r0, r3
 80007a4:	f002 faef 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==108){OWR_ON;}
 80007a8:	4b9d      	ldr	r3, [pc, #628]	; (8000a20 <Protocol+0x550>)
 80007aa:	781b      	ldrb	r3, [r3, #0]
 80007ac:	2b6c      	cmp	r3, #108	; 0x6c
 80007ae:	d106      	bne.n	80007be <Protocol+0x2ee>
 80007b0:	2390      	movs	r3, #144	; 0x90
 80007b2:	05db      	lsls	r3, r3, #23
 80007b4:	2201      	movs	r2, #1
 80007b6:	2180      	movs	r1, #128	; 0x80
 80007b8:	0018      	movs	r0, r3
 80007ba:	f002 fae4 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==117){OWR_ON;}
 80007be:	4b98      	ldr	r3, [pc, #608]	; (8000a20 <Protocol+0x550>)
 80007c0:	781b      	ldrb	r3, [r3, #0]
 80007c2:	2b75      	cmp	r3, #117	; 0x75
 80007c4:	d106      	bne.n	80007d4 <Protocol+0x304>
 80007c6:	2390      	movs	r3, #144	; 0x90
 80007c8:	05db      	lsls	r3, r3, #23
 80007ca:	2201      	movs	r2, #1
 80007cc:	2180      	movs	r1, #128	; 0x80
 80007ce:	0018      	movs	r0, r3
 80007d0:	f002 fad9 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==126){OWR_ON;WriteConfig();}
 80007d4:	4b92      	ldr	r3, [pc, #584]	; (8000a20 <Protocol+0x550>)
 80007d6:	781b      	ldrb	r3, [r3, #0]
 80007d8:	2b7e      	cmp	r3, #126	; 0x7e
 80007da:	d108      	bne.n	80007ee <Protocol+0x31e>
 80007dc:	2390      	movs	r3, #144	; 0x90
 80007de:	05db      	lsls	r3, r3, #23
 80007e0:	2201      	movs	r2, #1
 80007e2:	2180      	movs	r1, #128	; 0x80
 80007e4:	0018      	movs	r0, r3
 80007e6:	f002 face 	bl	8002d86 <HAL_GPIO_WritePin>
 80007ea:	f7ff fd23 	bl	8000234 <WriteConfig>
	        	         		        	         	//if(count==127){OWR_ON;WriteConfig();}

	        	         		        	            if(count==46)
 80007ee:	4b8c      	ldr	r3, [pc, #560]	; (8000a20 <Protocol+0x550>)
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b2e      	cmp	r3, #46	; 0x2e
 80007f4:	d147      	bne.n	8000886 <Protocol+0x3b6>
	        	         		        	           {
	        	         		        	            	if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 80007f6:	4b8b      	ldr	r3, [pc, #556]	; (8000a24 <Protocol+0x554>)
 80007f8:	2223      	movs	r2, #35	; 0x23
 80007fa:	5c9b      	ldrb	r3, [r3, r2]
 80007fc:	2b01      	cmp	r3, #1
 80007fe:	d10c      	bne.n	800081a <Protocol+0x34a>
 8000800:	4b88      	ldr	r3, [pc, #544]	; (8000a24 <Protocol+0x554>)
 8000802:	222a      	movs	r2, #42	; 0x2a
 8000804:	5c9b      	ldrb	r3, [r3, r2]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d107      	bne.n	800081a <Protocol+0x34a>
 800080a:	2380      	movs	r3, #128	; 0x80
 800080c:	0119      	lsls	r1, r3, #4
 800080e:	2390      	movs	r3, #144	; 0x90
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	2201      	movs	r2, #1
 8000814:	0018      	movs	r0, r3
 8000816:	f002 fab6 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	                if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 800081a:	4b82      	ldr	r3, [pc, #520]	; (8000a24 <Protocol+0x554>)
 800081c:	2224      	movs	r2, #36	; 0x24
 800081e:	5c9b      	ldrb	r3, [r3, r2]
 8000820:	2b01      	cmp	r3, #1
 8000822:	d10c      	bne.n	800083e <Protocol+0x36e>
 8000824:	4b7f      	ldr	r3, [pc, #508]	; (8000a24 <Protocol+0x554>)
 8000826:	222b      	movs	r2, #43	; 0x2b
 8000828:	5c9b      	ldrb	r3, [r3, r2]
 800082a:	2b01      	cmp	r3, #1
 800082c:	d107      	bne.n	800083e <Protocol+0x36e>
 800082e:	2380      	movs	r3, #128	; 0x80
 8000830:	0119      	lsls	r1, r3, #4
 8000832:	2390      	movs	r3, #144	; 0x90
 8000834:	05db      	lsls	r3, r3, #23
 8000836:	2200      	movs	r2, #0
 8000838:	0018      	movs	r0, r3
 800083a:	f002 faa4 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	                if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 800083e:	4b79      	ldr	r3, [pc, #484]	; (8000a24 <Protocol+0x554>)
 8000840:	2225      	movs	r2, #37	; 0x25
 8000842:	5c9b      	ldrb	r3, [r3, r2]
 8000844:	2b01      	cmp	r3, #1
 8000846:	d10c      	bne.n	8000862 <Protocol+0x392>
 8000848:	4b76      	ldr	r3, [pc, #472]	; (8000a24 <Protocol+0x554>)
 800084a:	222c      	movs	r2, #44	; 0x2c
 800084c:	5c9b      	ldrb	r3, [r3, r2]
 800084e:	2b01      	cmp	r3, #1
 8000850:	d107      	bne.n	8000862 <Protocol+0x392>
 8000852:	2380      	movs	r3, #128	; 0x80
 8000854:	0159      	lsls	r1, r3, #5
 8000856:	2390      	movs	r3, #144	; 0x90
 8000858:	05db      	lsls	r3, r3, #23
 800085a:	2201      	movs	r2, #1
 800085c:	0018      	movs	r0, r3
 800085e:	f002 fa92 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         		        	                if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 8000862:	4b70      	ldr	r3, [pc, #448]	; (8000a24 <Protocol+0x554>)
 8000864:	2226      	movs	r2, #38	; 0x26
 8000866:	5c9b      	ldrb	r3, [r3, r2]
 8000868:	2b01      	cmp	r3, #1
 800086a:	d10c      	bne.n	8000886 <Protocol+0x3b6>
 800086c:	4b6d      	ldr	r3, [pc, #436]	; (8000a24 <Protocol+0x554>)
 800086e:	222d      	movs	r2, #45	; 0x2d
 8000870:	5c9b      	ldrb	r3, [r3, r2]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d107      	bne.n	8000886 <Protocol+0x3b6>
 8000876:	2380      	movs	r3, #128	; 0x80
 8000878:	0159      	lsls	r1, r3, #5
 800087a:	2390      	movs	r3, #144	; 0x90
 800087c:	05db      	lsls	r3, r3, #23
 800087e:	2200      	movs	r2, #0
 8000880:	0018      	movs	r0, r3
 8000882:	f002 fa80 	bl	8002d86 <HAL_GPIO_WritePin>

	        	         		        	         			        	         			   }

	        	         		        	           if (count==54)
 8000886:	4b66      	ldr	r3, [pc, #408]	; (8000a20 <Protocol+0x550>)
 8000888:	781b      	ldrb	r3, [r3, #0]
 800088a:	2b36      	cmp	r3, #54	; 0x36
 800088c:	d000      	beq.n	8000890 <Protocol+0x3c0>
 800088e:	e0c0      	b.n	8000a12 <Protocol+0x542>
	        	         		        	                           	        	    {
	        	         		        	                           	        	      new_addres=0;
 8000890:	4b65      	ldr	r3, [pc, #404]	; (8000a28 <Protocol+0x558>)
 8000892:	2200      	movs	r2, #0
 8000894:	701a      	strb	r2, [r3, #0]
	        	         		        	                           	        	      new_addres|= (rcvd[47]<<7)|(rcvd[48]<<6)|(rcvd[49]<<5)|(rcvd[50]<<4)|(rcvd[51]<<3)|(rcvd[52]<<2)|(rcvd[53]<<1)|(rcvd[54]);
 8000896:	4b63      	ldr	r3, [pc, #396]	; (8000a24 <Protocol+0x554>)
 8000898:	222f      	movs	r2, #47	; 0x2f
 800089a:	5c9b      	ldrb	r3, [r3, r2]
 800089c:	01db      	lsls	r3, r3, #7
 800089e:	b25a      	sxtb	r2, r3
 80008a0:	4b60      	ldr	r3, [pc, #384]	; (8000a24 <Protocol+0x554>)
 80008a2:	2130      	movs	r1, #48	; 0x30
 80008a4:	5c5b      	ldrb	r3, [r3, r1]
 80008a6:	019b      	lsls	r3, r3, #6
 80008a8:	b25b      	sxtb	r3, r3
 80008aa:	4313      	orrs	r3, r2
 80008ac:	b25a      	sxtb	r2, r3
 80008ae:	4b5d      	ldr	r3, [pc, #372]	; (8000a24 <Protocol+0x554>)
 80008b0:	2131      	movs	r1, #49	; 0x31
 80008b2:	5c5b      	ldrb	r3, [r3, r1]
 80008b4:	015b      	lsls	r3, r3, #5
 80008b6:	b25b      	sxtb	r3, r3
 80008b8:	4313      	orrs	r3, r2
 80008ba:	b25a      	sxtb	r2, r3
 80008bc:	4b59      	ldr	r3, [pc, #356]	; (8000a24 <Protocol+0x554>)
 80008be:	2132      	movs	r1, #50	; 0x32
 80008c0:	5c5b      	ldrb	r3, [r3, r1]
 80008c2:	011b      	lsls	r3, r3, #4
 80008c4:	b25b      	sxtb	r3, r3
 80008c6:	4313      	orrs	r3, r2
 80008c8:	b25a      	sxtb	r2, r3
 80008ca:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <Protocol+0x554>)
 80008cc:	2133      	movs	r1, #51	; 0x33
 80008ce:	5c5b      	ldrb	r3, [r3, r1]
 80008d0:	00db      	lsls	r3, r3, #3
 80008d2:	b25b      	sxtb	r3, r3
 80008d4:	4313      	orrs	r3, r2
 80008d6:	b25a      	sxtb	r2, r3
 80008d8:	4b52      	ldr	r3, [pc, #328]	; (8000a24 <Protocol+0x554>)
 80008da:	2134      	movs	r1, #52	; 0x34
 80008dc:	5c5b      	ldrb	r3, [r3, r1]
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	b25b      	sxtb	r3, r3
 80008e2:	4313      	orrs	r3, r2
 80008e4:	b25a      	sxtb	r2, r3
 80008e6:	4b4f      	ldr	r3, [pc, #316]	; (8000a24 <Protocol+0x554>)
 80008e8:	2135      	movs	r1, #53	; 0x35
 80008ea:	5c5b      	ldrb	r3, [r3, r1]
 80008ec:	005b      	lsls	r3, r3, #1
 80008ee:	b25b      	sxtb	r3, r3
 80008f0:	4313      	orrs	r3, r2
 80008f2:	b25a      	sxtb	r2, r3
 80008f4:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <Protocol+0x554>)
 80008f6:	2136      	movs	r1, #54	; 0x36
 80008f8:	5c5b      	ldrb	r3, [r3, r1]
 80008fa:	b25b      	sxtb	r3, r3
 80008fc:	4313      	orrs	r3, r2
 80008fe:	b25a      	sxtb	r2, r3
 8000900:	4b49      	ldr	r3, [pc, #292]	; (8000a28 <Protocol+0x558>)
 8000902:	781b      	ldrb	r3, [r3, #0]
 8000904:	b25b      	sxtb	r3, r3
 8000906:	4313      	orrs	r3, r2
 8000908:	b25b      	sxtb	r3, r3
 800090a:	b2da      	uxtb	r2, r3
 800090c:	4b46      	ldr	r3, [pc, #280]	; (8000a28 <Protocol+0x558>)
 800090e:	701a      	strb	r2, [r3, #0]
                                                                                          addres=new_addres;
 8000910:	4b45      	ldr	r3, [pc, #276]	; (8000a28 <Protocol+0x558>)
 8000912:	781a      	ldrb	r2, [r3, #0]
 8000914:	4b45      	ldr	r3, [pc, #276]	; (8000a2c <Protocol+0x55c>)
 8000916:	701a      	strb	r2, [r3, #0]
                                                                                          settings[0]=new_addres;
 8000918:	4b43      	ldr	r3, [pc, #268]	; (8000a28 <Protocol+0x558>)
 800091a:	781a      	ldrb	r2, [r3, #0]
 800091c:	4b44      	ldr	r3, [pc, #272]	; (8000a30 <Protocol+0x560>)
 800091e:	701a      	strb	r2, [r3, #0]
                                                                                          WriteConfig();
 8000920:	f7ff fc88 	bl	8000234 <WriteConfig>
                                                                                          HAL_ResumeTick();
 8000924:	f001 f93e 	bl	8001ba4 <HAL_ResumeTick>
	        	         		        	                           	        	    }




	        	         		        	         	 break;
 8000928:	e073      	b.n	8000a12 <Protocol+0x542>



	        	         	  case 14 :

	        	         			   if(count==30){OWR_ON;}
 800092a:	4b3d      	ldr	r3, [pc, #244]	; (8000a20 <Protocol+0x550>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	2b1e      	cmp	r3, #30
 8000930:	d106      	bne.n	8000940 <Protocol+0x470>
 8000932:	2390      	movs	r3, #144	; 0x90
 8000934:	05db      	lsls	r3, r3, #23
 8000936:	2201      	movs	r2, #1
 8000938:	2180      	movs	r1, #128	; 0x80
 800093a:	0018      	movs	r0, r3
 800093c:	f002 fa23 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         			   if(count==45){OWR_ON;}
 8000940:	4b37      	ldr	r3, [pc, #220]	; (8000a20 <Protocol+0x550>)
 8000942:	781b      	ldrb	r3, [r3, #0]
 8000944:	2b2d      	cmp	r3, #45	; 0x2d
 8000946:	d106      	bne.n	8000956 <Protocol+0x486>
 8000948:	2390      	movs	r3, #144	; 0x90
 800094a:	05db      	lsls	r3, r3, #23
 800094c:	2201      	movs	r2, #1
 800094e:	2180      	movs	r1, #128	; 0x80
 8000950:	0018      	movs	r0, r3
 8000952:	f002 fa18 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         			   if(count==54){OWR_ON;}
 8000956:	4b32      	ldr	r3, [pc, #200]	; (8000a20 <Protocol+0x550>)
 8000958:	781b      	ldrb	r3, [r3, #0]
 800095a:	2b36      	cmp	r3, #54	; 0x36
 800095c:	d106      	bne.n	800096c <Protocol+0x49c>
 800095e:	2390      	movs	r3, #144	; 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2201      	movs	r2, #1
 8000964:	2180      	movs	r1, #128	; 0x80
 8000966:	0018      	movs	r0, r3
 8000968:	f002 fa0d 	bl	8002d86 <HAL_GPIO_WritePin>

	        	         			   if(count==46)
 800096c:	4b2c      	ldr	r3, [pc, #176]	; (8000a20 <Protocol+0x550>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b2e      	cmp	r3, #46	; 0x2e
 8000972:	d150      	bne.n	8000a16 <Protocol+0x546>
	        	         			   {

	        	         				   if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 8000974:	4b2b      	ldr	r3, [pc, #172]	; (8000a24 <Protocol+0x554>)
 8000976:	2223      	movs	r2, #35	; 0x23
 8000978:	5c9b      	ldrb	r3, [r3, r2]
 800097a:	2b01      	cmp	r3, #1
 800097c:	d10c      	bne.n	8000998 <Protocol+0x4c8>
 800097e:	4b29      	ldr	r3, [pc, #164]	; (8000a24 <Protocol+0x554>)
 8000980:	222a      	movs	r2, #42	; 0x2a
 8000982:	5c9b      	ldrb	r3, [r3, r2]
 8000984:	2b01      	cmp	r3, #1
 8000986:	d107      	bne.n	8000998 <Protocol+0x4c8>
 8000988:	2380      	movs	r3, #128	; 0x80
 800098a:	0119      	lsls	r1, r3, #4
 800098c:	2390      	movs	r3, #144	; 0x90
 800098e:	05db      	lsls	r3, r3, #23
 8000990:	2201      	movs	r2, #1
 8000992:	0018      	movs	r0, r3
 8000994:	f002 f9f7 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <Protocol+0x554>)
 800099a:	2224      	movs	r2, #36	; 0x24
 800099c:	5c9b      	ldrb	r3, [r3, r2]
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d10c      	bne.n	80009bc <Protocol+0x4ec>
 80009a2:	4b20      	ldr	r3, [pc, #128]	; (8000a24 <Protocol+0x554>)
 80009a4:	222b      	movs	r2, #43	; 0x2b
 80009a6:	5c9b      	ldrb	r3, [r3, r2]
 80009a8:	2b01      	cmp	r3, #1
 80009aa:	d107      	bne.n	80009bc <Protocol+0x4ec>
 80009ac:	2380      	movs	r3, #128	; 0x80
 80009ae:	0119      	lsls	r1, r3, #4
 80009b0:	2390      	movs	r3, #144	; 0x90
 80009b2:	05db      	lsls	r3, r3, #23
 80009b4:	2200      	movs	r2, #0
 80009b6:	0018      	movs	r0, r3
 80009b8:	f002 f9e5 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 80009bc:	4b19      	ldr	r3, [pc, #100]	; (8000a24 <Protocol+0x554>)
 80009be:	2225      	movs	r2, #37	; 0x25
 80009c0:	5c9b      	ldrb	r3, [r3, r2]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	d10c      	bne.n	80009e0 <Protocol+0x510>
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <Protocol+0x554>)
 80009c8:	222c      	movs	r2, #44	; 0x2c
 80009ca:	5c9b      	ldrb	r3, [r3, r2]
 80009cc:	2b01      	cmp	r3, #1
 80009ce:	d107      	bne.n	80009e0 <Protocol+0x510>
 80009d0:	2380      	movs	r3, #128	; 0x80
 80009d2:	0159      	lsls	r1, r3, #5
 80009d4:	2390      	movs	r3, #144	; 0x90
 80009d6:	05db      	lsls	r3, r3, #23
 80009d8:	2201      	movs	r2, #1
 80009da:	0018      	movs	r0, r3
 80009dc:	f002 f9d3 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 80009e0:	4b10      	ldr	r3, [pc, #64]	; (8000a24 <Protocol+0x554>)
 80009e2:	2226      	movs	r2, #38	; 0x26
 80009e4:	5c9b      	ldrb	r3, [r3, r2]
 80009e6:	2b01      	cmp	r3, #1
 80009e8:	d115      	bne.n	8000a16 <Protocol+0x546>
 80009ea:	4b0e      	ldr	r3, [pc, #56]	; (8000a24 <Protocol+0x554>)
 80009ec:	222d      	movs	r2, #45	; 0x2d
 80009ee:	5c9b      	ldrb	r3, [r3, r2]
 80009f0:	2b01      	cmp	r3, #1
 80009f2:	d110      	bne.n	8000a16 <Protocol+0x546>
 80009f4:	2380      	movs	r3, #128	; 0x80
 80009f6:	0159      	lsls	r1, r3, #5
 80009f8:	2390      	movs	r3, #144	; 0x90
 80009fa:	05db      	lsls	r3, r3, #23
 80009fc:	2200      	movs	r2, #0
 80009fe:	0018      	movs	r0, r3
 8000a00:	f002 f9c1 	bl	8002d86 <HAL_GPIO_WritePin>
	        	         			   }
	        	         			   break;
 8000a04:	e007      	b.n	8000a16 <Protocol+0x546>
	        	         		        	         	 break;
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	e006      	b.n	8000a18 <Protocol+0x548>
	        	         		        	         	  break;
 8000a0a:	46c0      	nop			; (mov r8, r8)
 8000a0c:	e004      	b.n	8000a18 <Protocol+0x548>
	        	         	 break;
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	e002      	b.n	8000a18 <Protocol+0x548>
	        	         		        	         	 break;
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	e000      	b.n	8000a18 <Protocol+0x548>
	        	         			   break;
 8000a16:	46c0      	nop			; (mov r8, r8)



	        	         			   }
                                  }
 8000a18:	46c0      	nop			; (mov r8, r8)
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
 8000a1e:	46c0      	nop			; (mov r8, r8)
 8000a20:	20000320 	.word	0x20000320
 8000a24:	20000228 	.word	0x20000228
 8000a28:	20000324 	.word	0x20000324
 8000a2c:	20000000 	.word	0x20000000
 8000a30:	20000328 	.word	0x20000328

08000a34 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a34:	b580      	push	{r7, lr}
 8000a36:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a38:	f001 f842 	bl	8001ac0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3c:	f000 f85a 	bl	8000af4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a40:	f000 fae2 	bl	8001008 <MX_GPIO_Init>
  MX_DMA_Init();
 8000a44:	f000 faba 	bl	8000fbc <MX_DMA_Init>
  MX_TIM1_Init();
 8000a48:	f000 f97c 	bl	8000d44 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000a4c:	f000 fa86 	bl	8000f5c <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000a50:	f000 f8b0 	bl	8000bb4 <MX_ADC_Init>
  MX_TIM3_Init();
 8000a54:	f000 fa2c 	bl	8000eb0 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000a58:	f000 f954 	bl	8000d04 <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  ReadConfig();
 8000a5c:	f7ff fc30 	bl	80002c0 <ReadConfig>

      ISOL_ON;
 8000a60:	2390      	movs	r3, #144	; 0x90
 8000a62:	05db      	lsls	r3, r3, #23
 8000a64:	2201      	movs	r2, #1
 8000a66:	2140      	movs	r1, #64	; 0x40
 8000a68:	0018      	movs	r0, r3
 8000a6a:	f002 f98c 	bl	8002d86 <HAL_GPIO_WritePin>
      alarm=0;
 8000a6e:	4b1d      	ldr	r3, [pc, #116]	; (8000ae4 <main+0xb0>)
 8000a70:	2200      	movs	r2, #0
 8000a72:	701a      	strb	r2, [r3, #0]

     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000a74:	4b1c      	ldr	r3, [pc, #112]	; (8000ae8 <main+0xb4>)
 8000a76:	2100      	movs	r1, #0
 8000a78:	0018      	movs	r0, r3
 8000a7a:	f003 f801 	bl	8003a80 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 8000a7e:	4b1a      	ldr	r3, [pc, #104]	; (8000ae8 <main+0xb4>)
 8000a80:	2104      	movs	r1, #4
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 fffc 	bl	8003a80 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8000a88:	4b17      	ldr	r3, [pc, #92]	; (8000ae8 <main+0xb4>)
 8000a8a:	2108      	movs	r1, #8
 8000a8c:	0018      	movs	r0, r3
 8000a8e:	f002 fff7 	bl	8003a80 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 8000a92:	4b15      	ldr	r3, [pc, #84]	; (8000ae8 <main+0xb4>)
 8000a94:	210c      	movs	r1, #12
 8000a96:	0018      	movs	r0, r3
 8000a98:	f002 fff2 	bl	8003a80 <HAL_TIM_IC_Start_IT>


     addres=settings[0];
 8000a9c:	4b13      	ldr	r3, [pc, #76]	; (8000aec <main+0xb8>)
 8000a9e:	781a      	ldrb	r2, [r3, #0]
 8000aa0:	4b13      	ldr	r3, [pc, #76]	; (8000af0 <main+0xbc>)
 8000aa2:	701a      	strb	r2, [r3, #0]
     if(settings[0]==0xFF){addres=0;}
 8000aa4:	4b11      	ldr	r3, [pc, #68]	; (8000aec <main+0xb8>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	2bff      	cmp	r3, #255	; 0xff
 8000aaa:	d102      	bne.n	8000ab2 <main+0x7e>
 8000aac:	4b10      	ldr	r3, [pc, #64]	; (8000af0 <main+0xbc>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	701a      	strb	r2, [r3, #0]
     LED1_OFF;
 8000ab2:	2380      	movs	r3, #128	; 0x80
 8000ab4:	0119      	lsls	r1, r3, #4
 8000ab6:	2390      	movs	r3, #144	; 0x90
 8000ab8:	05db      	lsls	r3, r3, #23
 8000aba:	2200      	movs	r2, #0
 8000abc:	0018      	movs	r0, r3
 8000abe:	f002 f962 	bl	8002d86 <HAL_GPIO_WritePin>
     LED2_OFF;
 8000ac2:	2380      	movs	r3, #128	; 0x80
 8000ac4:	0159      	lsls	r1, r3, #5
 8000ac6:	2390      	movs	r3, #144	; 0x90
 8000ac8:	05db      	lsls	r3, r3, #23
 8000aca:	2200      	movs	r2, #0
 8000acc:	0018      	movs	r0, r3
 8000ace:	f002 f95a 	bl	8002d86 <HAL_GPIO_WritePin>
     HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 8000ad2:	2101      	movs	r1, #1
 8000ad4:	2000      	movs	r0, #0
 8000ad6:	f002 f9d5 	bl	8002e84 <HAL_PWR_EnterSLEEPMode>
    HAL_SuspendTick();
 8000ada:	f001 f855 	bl	8001b88 <HAL_SuspendTick>
   HAL_PWR_EnableSleepOnExit ();
 8000ade:	f002 f9ed 	bl	8002ebc <HAL_PWR_EnableSleepOnExit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ae2:	e7fe      	b.n	8000ae2 <main+0xae>
 8000ae4:	20000224 	.word	0x20000224
 8000ae8:	200000c0 	.word	0x200000c0
 8000aec:	20000328 	.word	0x20000328
 8000af0:	20000000 	.word	0x20000000

08000af4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000af4:	b590      	push	{r4, r7, lr}
 8000af6:	b095      	sub	sp, #84	; 0x54
 8000af8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000afa:	2420      	movs	r4, #32
 8000afc:	193b      	adds	r3, r7, r4
 8000afe:	0018      	movs	r0, r3
 8000b00:	2330      	movs	r3, #48	; 0x30
 8000b02:	001a      	movs	r2, r3
 8000b04:	2100      	movs	r1, #0
 8000b06:	f004 fd09 	bl	800551c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b0a:	2310      	movs	r3, #16
 8000b0c:	18fb      	adds	r3, r7, r3
 8000b0e:	0018      	movs	r0, r3
 8000b10:	2310      	movs	r3, #16
 8000b12:	001a      	movs	r2, r3
 8000b14:	2100      	movs	r1, #0
 8000b16:	f004 fd01 	bl	800551c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1a:	003b      	movs	r3, r7
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	2310      	movs	r3, #16
 8000b20:	001a      	movs	r2, r3
 8000b22:	2100      	movs	r1, #0
 8000b24:	f004 fcfa 	bl	800551c <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000b28:	0021      	movs	r1, r4
 8000b2a:	187b      	adds	r3, r7, r1
 8000b2c:	221a      	movs	r2, #26
 8000b2e:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b30:	187b      	adds	r3, r7, r1
 8000b32:	2201      	movs	r2, #1
 8000b34:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b36:	187b      	adds	r3, r7, r1
 8000b38:	2201      	movs	r2, #1
 8000b3a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b3c:	187b      	adds	r3, r7, r1
 8000b3e:	2210      	movs	r2, #16
 8000b40:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 8000b42:	187b      	adds	r3, r7, r1
 8000b44:	2210      	movs	r2, #16
 8000b46:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000b48:	187b      	adds	r3, r7, r1
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000b4e:	187b      	adds	r3, r7, r1
 8000b50:	2200      	movs	r2, #0
 8000b52:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b54:	187b      	adds	r3, r7, r1
 8000b56:	0018      	movs	r0, r3
 8000b58:	f002 f9be 	bl	8002ed8 <HAL_RCC_OscConfig>
 8000b5c:	1e03      	subs	r3, r0, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000b60:	f000 fd4c 	bl	80015fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	2110      	movs	r1, #16
 8000b66:	187b      	adds	r3, r7, r1
 8000b68:	2207      	movs	r2, #7
 8000b6a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000b6c:	187b      	adds	r3, r7, r1
 8000b6e:	2200      	movs	r2, #0
 8000b70:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b72:	187b      	adds	r3, r7, r1
 8000b74:	2200      	movs	r2, #0
 8000b76:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b78:	187b      	adds	r3, r7, r1
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b7e:	187b      	adds	r3, r7, r1
 8000b80:	2100      	movs	r1, #0
 8000b82:	0018      	movs	r0, r3
 8000b84:	f002 fcc2 	bl	800350c <HAL_RCC_ClockConfig>
 8000b88:	1e03      	subs	r3, r0, #0
 8000b8a:	d001      	beq.n	8000b90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000b8c:	f000 fd36 	bl	80015fc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000b90:	003b      	movs	r3, r7
 8000b92:	2201      	movs	r2, #1
 8000b94:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 8000b96:	003b      	movs	r3, r7
 8000b98:	2203      	movs	r2, #3
 8000b9a:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b9c:	003b      	movs	r3, r7
 8000b9e:	0018      	movs	r0, r3
 8000ba0:	f002 fdf8 	bl	8003794 <HAL_RCCEx_PeriphCLKConfig>
 8000ba4:	1e03      	subs	r3, r0, #0
 8000ba6:	d001      	beq.n	8000bac <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000ba8:	f000 fd28 	bl	80015fc <Error_Handler>
  }
}
 8000bac:	46c0      	nop			; (mov r8, r8)
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	b015      	add	sp, #84	; 0x54
 8000bb2:	bd90      	pop	{r4, r7, pc}

08000bb4 <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bba:	1d3b      	adds	r3, r7, #4
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	230c      	movs	r3, #12
 8000bc0:	001a      	movs	r2, r3
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	f004 fcaa 	bl	800551c <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000bc8:	4b4c      	ldr	r3, [pc, #304]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bca:	4a4d      	ldr	r2, [pc, #308]	; (8000d00 <MX_ADC_Init+0x14c>)
 8000bcc:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000bce:	4b4b      	ldr	r3, [pc, #300]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000bd4:	4b49      	ldr	r3, [pc, #292]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bda:	4b48      	ldr	r3, [pc, #288]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000be0:	4b46      	ldr	r3, [pc, #280]	; (8000cfc <MX_ADC_Init+0x148>)
 8000be2:	2201      	movs	r2, #1
 8000be4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000be6:	4b45      	ldr	r3, [pc, #276]	; (8000cfc <MX_ADC_Init+0x148>)
 8000be8:	2204      	movs	r2, #4
 8000bea:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000bec:	4b43      	ldr	r3, [pc, #268]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 8000bf2:	4b42      	ldr	r3, [pc, #264]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000bf8:	4b40      	ldr	r3, [pc, #256]	; (8000cfc <MX_ADC_Init+0x148>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000bfe:	4b3f      	ldr	r3, [pc, #252]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b3d      	ldr	r3, [pc, #244]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c06:	22c2      	movs	r2, #194	; 0xc2
 8000c08:	32ff      	adds	r2, #255	; 0xff
 8000c0a:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c0c:	4b3b      	ldr	r3, [pc, #236]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000c12:	4b3a      	ldr	r3, [pc, #232]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c14:	2224      	movs	r2, #36	; 0x24
 8000c16:	2100      	movs	r1, #0
 8000c18:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c1a:	4b38      	ldr	r3, [pc, #224]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c1c:	2201      	movs	r2, #1
 8000c1e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000c20:	4b36      	ldr	r3, [pc, #216]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c22:	0018      	movs	r0, r3
 8000c24:	f000 ffcc 	bl	8001bc0 <HAL_ADC_Init>
 8000c28:	1e03      	subs	r3, r0, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000c2c:	f000 fce6 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c30:	1d3b      	adds	r3, r7, #4
 8000c32:	2200      	movs	r2, #0
 8000c34:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000c36:	1d3b      	adds	r3, r7, #4
 8000c38:	2280      	movs	r2, #128	; 0x80
 8000c3a:	0152      	lsls	r2, r2, #5
 8000c3c:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000c3e:	1d3b      	adds	r3, r7, #4
 8000c40:	2201      	movs	r2, #1
 8000c42:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c44:	1d3a      	adds	r2, r7, #4
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c48:	0011      	movs	r1, r2
 8000c4a:	0018      	movs	r0, r3
 8000c4c:	f001 f9b4 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c50:	1e03      	subs	r3, r0, #0
 8000c52:	d001      	beq.n	8000c58 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 8000c54:	f000 fcd2 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c58:	1d3b      	adds	r3, r7, #4
 8000c5a:	2201      	movs	r2, #1
 8000c5c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c5e:	1d3a      	adds	r2, r7, #4
 8000c60:	4b26      	ldr	r3, [pc, #152]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c62:	0011      	movs	r1, r2
 8000c64:	0018      	movs	r0, r3
 8000c66:	f001 f9a7 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c6a:	1e03      	subs	r3, r0, #0
 8000c6c:	d001      	beq.n	8000c72 <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000c6e:	f000 fcc5 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c72:	1d3b      	adds	r3, r7, #4
 8000c74:	2204      	movs	r2, #4
 8000c76:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c78:	1d3a      	adds	r2, r7, #4
 8000c7a:	4b20      	ldr	r3, [pc, #128]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c7c:	0011      	movs	r1, r2
 8000c7e:	0018      	movs	r0, r3
 8000c80:	f001 f99a 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c84:	1e03      	subs	r3, r0, #0
 8000c86:	d001      	beq.n	8000c8c <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000c88:	f000 fcb8 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2205      	movs	r2, #5
 8000c90:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000c92:	1d3a      	adds	r2, r7, #4
 8000c94:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <MX_ADC_Init+0x148>)
 8000c96:	0011      	movs	r1, r2
 8000c98:	0018      	movs	r0, r3
 8000c9a:	f001 f98d 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000c9e:	1e03      	subs	r3, r0, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 8000ca2:	f000 fcab 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8000ca6:	1d3b      	adds	r3, r7, #4
 8000ca8:	2208      	movs	r2, #8
 8000caa:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cac:	1d3a      	adds	r2, r7, #4
 8000cae:	4b13      	ldr	r3, [pc, #76]	; (8000cfc <MX_ADC_Init+0x148>)
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 f980 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000cb8:	1e03      	subs	r3, r0, #0
 8000cba:	d001      	beq.n	8000cc0 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000cbc:	f000 fc9e 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000cc0:	1d3b      	adds	r3, r7, #4
 8000cc2:	2210      	movs	r2, #16
 8000cc4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000cc6:	1d3a      	adds	r2, r7, #4
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <MX_ADC_Init+0x148>)
 8000cca:	0011      	movs	r1, r2
 8000ccc:	0018      	movs	r0, r3
 8000cce:	f001 f973 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000cd2:	1e03      	subs	r3, r0, #0
 8000cd4:	d001      	beq.n	8000cda <MX_ADC_Init+0x126>
  {
    Error_Handler();
 8000cd6:	f000 fc91 	bl	80015fc <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000cda:	1d3b      	adds	r3, r7, #4
 8000cdc:	2211      	movs	r2, #17
 8000cde:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ce0:	1d3a      	adds	r2, r7, #4
 8000ce2:	4b06      	ldr	r3, [pc, #24]	; (8000cfc <MX_ADC_Init+0x148>)
 8000ce4:	0011      	movs	r1, r2
 8000ce6:	0018      	movs	r0, r3
 8000ce8:	f001 f966 	bl	8001fb8 <HAL_ADC_ConfigChannel>
 8000cec:	1e03      	subs	r3, r0, #0
 8000cee:	d001      	beq.n	8000cf4 <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8000cf0:	f000 fc84 	bl	80015fc <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 8000cf4:	46c0      	nop			; (mov r8, r8)
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	b004      	add	sp, #16
 8000cfa:	bd80      	pop	{r7, pc}
 8000cfc:	2000002c 	.word	0x2000002c
 8000d00:	40012400 	.word	0x40012400

08000d04 <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8000d08:	4b0b      	ldr	r3, [pc, #44]	; (8000d38 <MX_IWDG_Init+0x34>)
 8000d0a:	4a0c      	ldr	r2, [pc, #48]	; (8000d3c <MX_IWDG_Init+0x38>)
 8000d0c:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <MX_IWDG_Init+0x34>)
 8000d10:	2204      	movs	r2, #4
 8000d12:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 8000d14:	4b08      	ldr	r3, [pc, #32]	; (8000d38 <MX_IWDG_Init+0x34>)
 8000d16:	4a0a      	ldr	r2, [pc, #40]	; (8000d40 <MX_IWDG_Init+0x3c>)
 8000d18:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8000d1a:	4b07      	ldr	r3, [pc, #28]	; (8000d38 <MX_IWDG_Init+0x34>)
 8000d1c:	4a08      	ldr	r2, [pc, #32]	; (8000d40 <MX_IWDG_Init+0x3c>)
 8000d1e:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8000d20:	4b05      	ldr	r3, [pc, #20]	; (8000d38 <MX_IWDG_Init+0x34>)
 8000d22:	0018      	movs	r0, r3
 8000d24:	f002 f84c 	bl	8002dc0 <HAL_IWDG_Init>
 8000d28:	1e03      	subs	r3, r0, #0
 8000d2a:	d001      	beq.n	8000d30 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000d2c:	f000 fc66 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000d30:	46c0      	nop			; (mov r8, r8)
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	200000b0 	.word	0x200000b0
 8000d3c:	40003000 	.word	0x40003000
 8000d40:	00000fff 	.word	0x00000fff

08000d44 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b08a      	sub	sp, #40	; 0x28
 8000d48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d4a:	2318      	movs	r3, #24
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	0018      	movs	r0, r3
 8000d50:	2310      	movs	r3, #16
 8000d52:	001a      	movs	r2, r3
 8000d54:	2100      	movs	r1, #0
 8000d56:	f004 fbe1 	bl	800551c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d5a:	2310      	movs	r3, #16
 8000d5c:	18fb      	adds	r3, r7, r3
 8000d5e:	0018      	movs	r0, r3
 8000d60:	2308      	movs	r3, #8
 8000d62:	001a      	movs	r2, r3
 8000d64:	2100      	movs	r1, #0
 8000d66:	f004 fbd9 	bl	800551c <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d6a:	003b      	movs	r3, r7
 8000d6c:	0018      	movs	r0, r3
 8000d6e:	2310      	movs	r3, #16
 8000d70:	001a      	movs	r2, r3
 8000d72:	2100      	movs	r1, #0
 8000d74:	f004 fbd2 	bl	800551c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d78:	4b4a      	ldr	r3, [pc, #296]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000d7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <MX_TIM1_Init+0x164>)
 8000d7c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 499;
 8000d7e:	4b49      	ldr	r3, [pc, #292]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000d80:	22f4      	movs	r2, #244	; 0xf4
 8000d82:	32ff      	adds	r2, #255	; 0xff
 8000d84:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d86:	4b47      	ldr	r3, [pc, #284]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8000d8c:	4b45      	ldr	r3, [pc, #276]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000d8e:	4a47      	ldr	r2, [pc, #284]	; (8000eac <MX_TIM1_Init+0x168>)
 8000d90:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d92:	4b44      	ldr	r3, [pc, #272]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d98:	4b42      	ldr	r3, [pc, #264]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d9e:	4b41      	ldr	r3, [pc, #260]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000da4:	4b3f      	ldr	r3, [pc, #252]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000da6:	0018      	movs	r0, r3
 8000da8:	f002 fdc2 	bl	8003930 <HAL_TIM_Base_Init>
 8000dac:	1e03      	subs	r3, r0, #0
 8000dae:	d001      	beq.n	8000db4 <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000db0:	f000 fc24 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000db4:	2118      	movs	r1, #24
 8000db6:	187b      	adds	r3, r7, r1
 8000db8:	2280      	movs	r2, #128	; 0x80
 8000dba:	0152      	lsls	r2, r2, #5
 8000dbc:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000dbe:	187a      	adds	r2, r7, r1
 8000dc0:	4b38      	ldr	r3, [pc, #224]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000dc2:	0011      	movs	r1, r2
 8000dc4:	0018      	movs	r0, r3
 8000dc6:	f003 f917 	bl	8003ff8 <HAL_TIM_ConfigClockSource>
 8000dca:	1e03      	subs	r3, r0, #0
 8000dcc:	d001      	beq.n	8000dd2 <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000dce:	f000 fc15 	bl	80015fc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000dd2:	4b34      	ldr	r3, [pc, #208]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000dd4:	0018      	movs	r0, r3
 8000dd6:	f002 fdfb 	bl	80039d0 <HAL_TIM_IC_Init>
 8000dda:	1e03      	subs	r3, r0, #0
 8000ddc:	d001      	beq.n	8000de2 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000dde:	f000 fc0d 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000de2:	2110      	movs	r1, #16
 8000de4:	187b      	adds	r3, r7, r1
 8000de6:	2200      	movs	r2, #0
 8000de8:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000dea:	187b      	adds	r3, r7, r1
 8000dec:	2200      	movs	r2, #0
 8000dee:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000df0:	187a      	adds	r2, r7, r1
 8000df2:	4b2c      	ldr	r3, [pc, #176]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000df4:	0011      	movs	r1, r2
 8000df6:	0018      	movs	r0, r3
 8000df8:	f003 fc6a 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000dfc:	1e03      	subs	r3, r0, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000e00:	f000 fbfc 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e04:	003b      	movs	r3, r7
 8000e06:	2202      	movs	r2, #2
 8000e08:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e0a:	003b      	movs	r3, r7
 8000e0c:	2201      	movs	r2, #1
 8000e0e:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e10:	003b      	movs	r3, r7
 8000e12:	2200      	movs	r2, #0
 8000e14:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000e16:	003b      	movs	r3, r7
 8000e18:	2200      	movs	r2, #0
 8000e1a:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e1c:	0039      	movs	r1, r7
 8000e1e:	4b21      	ldr	r3, [pc, #132]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	0018      	movs	r0, r3
 8000e24:	f003 f844 	bl	8003eb0 <HAL_TIM_IC_ConfigChannel>
 8000e28:	1e03      	subs	r3, r0, #0
 8000e2a:	d001      	beq.n	8000e30 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000e2c:	f000 fbe6 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e30:	003b      	movs	r3, r7
 8000e32:	2200      	movs	r2, #0
 8000e34:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e36:	003b      	movs	r3, r7
 8000e38:	2202      	movs	r2, #2
 8000e3a:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000e3c:	0039      	movs	r1, r7
 8000e3e:	4b19      	ldr	r3, [pc, #100]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000e40:	2204      	movs	r2, #4
 8000e42:	0018      	movs	r0, r3
 8000e44:	f003 f834 	bl	8003eb0 <HAL_TIM_IC_ConfigChannel>
 8000e48:	1e03      	subs	r3, r0, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000e4c:	f000 fbd6 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000e50:	003b      	movs	r3, r7
 8000e52:	2202      	movs	r2, #2
 8000e54:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e56:	003b      	movs	r3, r7
 8000e58:	2201      	movs	r2, #1
 8000e5a:	605a      	str	r2, [r3, #4]
  sConfigIC.ICFilter = 10;
 8000e5c:	003b      	movs	r3, r7
 8000e5e:	220a      	movs	r2, #10
 8000e60:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000e62:	0039      	movs	r1, r7
 8000e64:	4b0f      	ldr	r3, [pc, #60]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000e66:	2208      	movs	r2, #8
 8000e68:	0018      	movs	r0, r3
 8000e6a:	f003 f821 	bl	8003eb0 <HAL_TIM_IC_ConfigChannel>
 8000e6e:	1e03      	subs	r3, r0, #0
 8000e70:	d001      	beq.n	8000e76 <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000e72:	f000 fbc3 	bl	80015fc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000e76:	003b      	movs	r3, r7
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000e7c:	003b      	movs	r3, r7
 8000e7e:	2202      	movs	r2, #2
 8000e80:	605a      	str	r2, [r3, #4]
  sConfigIC.ICFilter = 0;
 8000e82:	003b      	movs	r3, r7
 8000e84:	2200      	movs	r2, #0
 8000e86:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000e88:	0039      	movs	r1, r7
 8000e8a:	4b06      	ldr	r3, [pc, #24]	; (8000ea4 <MX_TIM1_Init+0x160>)
 8000e8c:	220c      	movs	r2, #12
 8000e8e:	0018      	movs	r0, r3
 8000e90:	f003 f80e 	bl	8003eb0 <HAL_TIM_IC_ConfigChannel>
 8000e94:	1e03      	subs	r3, r0, #0
 8000e96:	d001      	beq.n	8000e9c <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000e98:	f000 fbb0 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e9c:	46c0      	nop			; (mov r8, r8)
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	b00a      	add	sp, #40	; 0x28
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	200000c0 	.word	0x200000c0
 8000ea8:	40012c00 	.word	0x40012c00
 8000eac:	00009c40 	.word	0x00009c40

08000eb0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb0:	b580      	push	{r7, lr}
 8000eb2:	b086      	sub	sp, #24
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eb6:	2308      	movs	r3, #8
 8000eb8:	18fb      	adds	r3, r7, r3
 8000eba:	0018      	movs	r0, r3
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	001a      	movs	r2, r3
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	f004 fb2b 	bl	800551c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec6:	003b      	movs	r3, r7
 8000ec8:	0018      	movs	r0, r3
 8000eca:	2308      	movs	r3, #8
 8000ecc:	001a      	movs	r2, r3
 8000ece:	2100      	movs	r1, #0
 8000ed0:	f004 fb24 	bl	800551c <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ed4:	4b1e      	ldr	r3, [pc, #120]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000ed6:	4a1f      	ldr	r2, [pc, #124]	; (8000f54 <MX_TIM3_Init+0xa4>)
 8000ed8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000eda:	4b1d      	ldr	r3, [pc, #116]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ee0:	4b1b      	ldr	r3, [pc, #108]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000ee2:	2200      	movs	r2, #0
 8000ee4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000ee6:	4b1a      	ldr	r3, [pc, #104]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000ee8:	4a1b      	ldr	r2, [pc, #108]	; (8000f58 <MX_TIM3_Init+0xa8>)
 8000eea:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eec:	4b18      	ldr	r3, [pc, #96]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ef2:	4b17      	ldr	r3, [pc, #92]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000ef8:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000efa:	0018      	movs	r0, r3
 8000efc:	f002 fd18 	bl	8003930 <HAL_TIM_Base_Init>
 8000f00:	1e03      	subs	r3, r0, #0
 8000f02:	d001      	beq.n	8000f08 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000f04:	f000 fb7a 	bl	80015fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f08:	2108      	movs	r1, #8
 8000f0a:	187b      	adds	r3, r7, r1
 8000f0c:	2280      	movs	r2, #128	; 0x80
 8000f0e:	0152      	lsls	r2, r2, #5
 8000f10:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f12:	187a      	adds	r2, r7, r1
 8000f14:	4b0e      	ldr	r3, [pc, #56]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000f16:	0011      	movs	r1, r2
 8000f18:	0018      	movs	r0, r3
 8000f1a:	f003 f86d 	bl	8003ff8 <HAL_TIM_ConfigClockSource>
 8000f1e:	1e03      	subs	r3, r0, #0
 8000f20:	d001      	beq.n	8000f26 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000f22:	f000 fb6b 	bl	80015fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f26:	003b      	movs	r3, r7
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f2c:	003b      	movs	r3, r7
 8000f2e:	2200      	movs	r2, #0
 8000f30:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f32:	003a      	movs	r2, r7
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <MX_TIM3_Init+0xa0>)
 8000f36:	0011      	movs	r1, r2
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f003 fbc9 	bl	80046d0 <HAL_TIMEx_MasterConfigSynchronization>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d001      	beq.n	8000f46 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000f42:	f000 fb5b 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000f46:	46c0      	nop			; (mov r8, r8)
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	b006      	add	sp, #24
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	20000108 	.word	0x20000108
 8000f54:	40000400 	.word	0x40000400
 8000f58:	0000ffff 	.word	0x0000ffff

08000f5c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000f60:	4b14      	ldr	r3, [pc, #80]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f62:	4a15      	ldr	r2, [pc, #84]	; (8000fb8 <MX_USART1_UART_Init+0x5c>)
 8000f64:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8000f66:	4b13      	ldr	r3, [pc, #76]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f68:	22fa      	movs	r2, #250	; 0xfa
 8000f6a:	0292      	lsls	r2, r2, #10
 8000f6c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f6e:	4b11      	ldr	r3, [pc, #68]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f74:	4b0f      	ldr	r3, [pc, #60]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f76:	2200      	movs	r2, #0
 8000f78:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f7a:	4b0e      	ldr	r3, [pc, #56]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f82:	220c      	movs	r2, #12
 8000f84:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f86:	4b0b      	ldr	r3, [pc, #44]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f8c:	4b09      	ldr	r3, [pc, #36]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f92:	4b08      	ldr	r3, [pc, #32]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f9e:	4b05      	ldr	r3, [pc, #20]	; (8000fb4 <MX_USART1_UART_Init+0x58>)
 8000fa0:	0018      	movs	r0, r3
 8000fa2:	f003 fbf7 	bl	8004794 <HAL_UART_Init>
 8000fa6:	1e03      	subs	r3, r0, #0
 8000fa8:	d001      	beq.n	8000fae <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000faa:	f000 fb27 	bl	80015fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000fae:	46c0      	nop			; (mov r8, r8)
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}
 8000fb4:	20000150 	.word	0x20000150
 8000fb8:	40013800 	.word	0x40013800

08000fbc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <MX_DMA_Init+0x48>)
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	4b0f      	ldr	r3, [pc, #60]	; (8001004 <MX_DMA_Init+0x48>)
 8000fc8:	2101      	movs	r1, #1
 8000fca:	430a      	orrs	r2, r1
 8000fcc:	615a      	str	r2, [r3, #20]
 8000fce:	4b0d      	ldr	r3, [pc, #52]	; (8001004 <MX_DMA_Init+0x48>)
 8000fd0:	695b      	ldr	r3, [r3, #20]
 8000fd2:	2201      	movs	r2, #1
 8000fd4:	4013      	ands	r3, r2
 8000fd6:	607b      	str	r3, [r7, #4]
 8000fd8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2100      	movs	r1, #0
 8000fde:	2009      	movs	r0, #9
 8000fe0:	f001 f98c 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fe4:	2009      	movs	r0, #9
 8000fe6:	f001 f99e 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000fea:	2200      	movs	r2, #0
 8000fec:	2100      	movs	r1, #0
 8000fee:	200a      	movs	r0, #10
 8000ff0:	f001 f984 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ff4:	200a      	movs	r0, #10
 8000ff6:	f001 f996 	bl	8002326 <HAL_NVIC_EnableIRQ>

}
 8000ffa:	46c0      	nop			; (mov r8, r8)
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	b002      	add	sp, #8
 8001000:	bd80      	pop	{r7, pc}
 8001002:	46c0      	nop			; (mov r8, r8)
 8001004:	40021000 	.word	0x40021000

08001008 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001008:	b590      	push	{r4, r7, lr}
 800100a:	b089      	sub	sp, #36	; 0x24
 800100c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800100e:	240c      	movs	r4, #12
 8001010:	193b      	adds	r3, r7, r4
 8001012:	0018      	movs	r0, r3
 8001014:	2314      	movs	r3, #20
 8001016:	001a      	movs	r2, r3
 8001018:	2100      	movs	r1, #0
 800101a:	f004 fa7f 	bl	800551c <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	4b4a      	ldr	r3, [pc, #296]	; (8001148 <MX_GPIO_Init+0x140>)
 8001020:	695a      	ldr	r2, [r3, #20]
 8001022:	4b49      	ldr	r3, [pc, #292]	; (8001148 <MX_GPIO_Init+0x140>)
 8001024:	2180      	movs	r1, #128	; 0x80
 8001026:	03c9      	lsls	r1, r1, #15
 8001028:	430a      	orrs	r2, r1
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	4b46      	ldr	r3, [pc, #280]	; (8001148 <MX_GPIO_Init+0x140>)
 800102e:	695a      	ldr	r2, [r3, #20]
 8001030:	2380      	movs	r3, #128	; 0x80
 8001032:	03db      	lsls	r3, r3, #15
 8001034:	4013      	ands	r3, r2
 8001036:	60bb      	str	r3, [r7, #8]
 8001038:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103a:	4b43      	ldr	r3, [pc, #268]	; (8001148 <MX_GPIO_Init+0x140>)
 800103c:	695a      	ldr	r2, [r3, #20]
 800103e:	4b42      	ldr	r3, [pc, #264]	; (8001148 <MX_GPIO_Init+0x140>)
 8001040:	2180      	movs	r1, #128	; 0x80
 8001042:	0289      	lsls	r1, r1, #10
 8001044:	430a      	orrs	r2, r1
 8001046:	615a      	str	r2, [r3, #20]
 8001048:	4b3f      	ldr	r3, [pc, #252]	; (8001148 <MX_GPIO_Init+0x140>)
 800104a:	695a      	ldr	r2, [r3, #20]
 800104c:	2380      	movs	r3, #128	; 0x80
 800104e:	029b      	lsls	r3, r3, #10
 8001050:	4013      	ands	r3, r2
 8001052:	607b      	str	r3, [r7, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001056:	4b3c      	ldr	r3, [pc, #240]	; (8001148 <MX_GPIO_Init+0x140>)
 8001058:	695a      	ldr	r2, [r3, #20]
 800105a:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <MX_GPIO_Init+0x140>)
 800105c:	2180      	movs	r1, #128	; 0x80
 800105e:	02c9      	lsls	r1, r1, #11
 8001060:	430a      	orrs	r2, r1
 8001062:	615a      	str	r2, [r3, #20]
 8001064:	4b38      	ldr	r3, [pc, #224]	; (8001148 <MX_GPIO_Init+0x140>)
 8001066:	695a      	ldr	r2, [r3, #20]
 8001068:	2380      	movs	r3, #128	; 0x80
 800106a:	02db      	lsls	r3, r3, #11
 800106c:	4013      	ands	r3, r2
 800106e:	603b      	str	r3, [r7, #0]
 8001070:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ISOL_Pin|OWR_Pin|LED_1_Pin|LED_2_Pin
 8001072:	4936      	ldr	r1, [pc, #216]	; (800114c <MX_GPIO_Init+0x144>)
 8001074:	2390      	movs	r3, #144	; 0x90
 8001076:	05db      	lsls	r3, r3, #23
 8001078:	2200      	movs	r2, #0
 800107a:	0018      	movs	r0, r3
 800107c:	f001 fe83 	bl	8002d86 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_1_Pin|OUT_1_2_Pin|REL_2_Pin|REL_3_Pin
 8001080:	4b33      	ldr	r3, [pc, #204]	; (8001150 <MX_GPIO_Init+0x148>)
 8001082:	2200      	movs	r2, #0
 8001084:	21f8      	movs	r1, #248	; 0xf8
 8001086:	0018      	movs	r0, r3
 8001088:	f001 fe7d 	bl	8002d86 <HAL_GPIO_WritePin>
                          |REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ISOL_Pin LED_1_Pin LED_2_Pin PA15 */
  GPIO_InitStruct.Pin = ISOL_Pin|LED_1_Pin|LED_2_Pin|GPIO_PIN_15;
 800108c:	193b      	adds	r3, r7, r4
 800108e:	4a31      	ldr	r2, [pc, #196]	; (8001154 <MX_GPIO_Init+0x14c>)
 8001090:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001092:	193b      	adds	r3, r7, r4
 8001094:	2201      	movs	r2, #1
 8001096:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001098:	193b      	adds	r3, r7, r4
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800109e:	193b      	adds	r3, r7, r4
 80010a0:	2200      	movs	r2, #0
 80010a2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010a4:	193a      	adds	r2, r7, r4
 80010a6:	2390      	movs	r3, #144	; 0x90
 80010a8:	05db      	lsls	r3, r3, #23
 80010aa:	0011      	movs	r1, r2
 80010ac:	0018      	movs	r0, r3
 80010ae:	f001 fcdd 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : OWR_Pin */
  GPIO_InitStruct.Pin = OWR_Pin;
 80010b2:	193b      	adds	r3, r7, r4
 80010b4:	2280      	movs	r2, #128	; 0x80
 80010b6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010b8:	193b      	adds	r3, r7, r4
 80010ba:	2201      	movs	r2, #1
 80010bc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010be:	193b      	adds	r3, r7, r4
 80010c0:	2200      	movs	r2, #0
 80010c2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010c4:	193b      	adds	r3, r7, r4
 80010c6:	2203      	movs	r2, #3
 80010c8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OWR_GPIO_Port, &GPIO_InitStruct);
 80010ca:	193a      	adds	r2, r7, r4
 80010cc:	2390      	movs	r3, #144	; 0x90
 80010ce:	05db      	lsls	r3, r3, #23
 80010d0:	0011      	movs	r1, r2
 80010d2:	0018      	movs	r0, r3
 80010d4:	f001 fcca 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 80010d8:	193b      	adds	r3, r7, r4
 80010da:	2202      	movs	r2, #2
 80010dc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010de:	193b      	adds	r3, r7, r4
 80010e0:	2200      	movs	r2, #0
 80010e2:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	193b      	adds	r3, r7, r4
 80010e6:	2200      	movs	r2, #0
 80010e8:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	4a18      	ldr	r2, [pc, #96]	; (8001150 <MX_GPIO_Init+0x148>)
 80010ee:	0019      	movs	r1, r3
 80010f0:	0010      	movs	r0, r2
 80010f2:	f001 fcbb 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 80010f6:	193b      	adds	r3, r7, r4
 80010f8:	2280      	movs	r2, #128	; 0x80
 80010fa:	0092      	lsls	r2, r2, #2
 80010fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80010fe:	193b      	adds	r3, r7, r4
 8001100:	2200      	movs	r2, #0
 8001102:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001104:	193b      	adds	r3, r7, r4
 8001106:	2200      	movs	r2, #0
 8001108:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	193a      	adds	r2, r7, r4
 800110c:	2390      	movs	r3, #144	; 0x90
 800110e:	05db      	lsls	r3, r3, #23
 8001110:	0011      	movs	r1, r2
 8001112:	0018      	movs	r0, r3
 8001114:	f001 fcaa 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_1_Pin OUT_1_2_Pin REL_2_Pin REL_3_Pin
                           REL_4_Pin */
  GPIO_InitStruct.Pin = OUT_1_1_Pin|OUT_1_2_Pin|REL_2_Pin|REL_3_Pin
 8001118:	0021      	movs	r1, r4
 800111a:	187b      	adds	r3, r7, r1
 800111c:	22f8      	movs	r2, #248	; 0xf8
 800111e:	601a      	str	r2, [r3, #0]
                          |REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001120:	187b      	adds	r3, r7, r1
 8001122:	2201      	movs	r2, #1
 8001124:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	187b      	adds	r3, r7, r1
 8001128:	2200      	movs	r2, #0
 800112a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112c:	187b      	adds	r3, r7, r1
 800112e:	2200      	movs	r2, #0
 8001130:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001132:	187b      	adds	r3, r7, r1
 8001134:	4a06      	ldr	r2, [pc, #24]	; (8001150 <MX_GPIO_Init+0x148>)
 8001136:	0019      	movs	r1, r3
 8001138:	0010      	movs	r0, r2
 800113a:	f001 fc97 	bl	8002a6c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800113e:	46c0      	nop			; (mov r8, r8)
 8001140:	46bd      	mov	sp, r7
 8001142:	b009      	add	sp, #36	; 0x24
 8001144:	bd90      	pop	{r4, r7, pc}
 8001146:	46c0      	nop			; (mov r8, r8)
 8001148:	40021000 	.word	0x40021000
 800114c:	000098c0 	.word	0x000098c0
 8001150:	48000400 	.word	0x48000400
 8001154:	00009840 	.word	0x00009840

08001158 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
     if (htim->Instance == TIM1)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4ad2      	ldr	r2, [pc, #840]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001166:	4293      	cmp	r3, r2
 8001168:	d000      	beq.n	800116c <HAL_TIM_IC_CaptureCallback+0x14>
 800116a:	e06e      	b.n	800124a <HAL_TIM_IC_CaptureCallback+0xf2>
     {


         if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)&&(line_status==0))
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	7f1b      	ldrb	r3, [r3, #28]
 8001170:	2b01      	cmp	r3, #1
 8001172:	d12e      	bne.n	80011d2 <HAL_TIM_IC_CaptureCallback+0x7a>
 8001174:	4bcf      	ldr	r3, [pc, #828]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	2b00      	cmp	r3, #0
 800117a:	d12a      	bne.n	80011d2 <HAL_TIM_IC_CaptureCallback+0x7a>
         {

        	 period = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 800117c:	4bce      	ldr	r3, [pc, #824]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0x360>)
 800117e:	2100      	movs	r1, #0
 8001180:	0018      	movs	r0, r3
 8001182:	f003 f80d 	bl	80041a0 <HAL_TIM_ReadCapturedValue>
 8001186:	0003      	movs	r3, r0
 8001188:	b29a      	uxth	r2, r3
 800118a:	4bcc      	ldr	r3, [pc, #816]	; (80014bc <HAL_TIM_IC_CaptureCallback+0x364>)
 800118c:	801a      	strh	r2, [r3, #0]


        	 TIM1->CNT=0;
 800118e:	4bc8      	ldr	r3, [pc, #800]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x358>)
 8001190:	2200      	movs	r2, #0
 8001192:	625a      	str	r2, [r3, #36]	; 0x24
         if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)   {alarm=1;}
 8001194:	4bca      	ldr	r3, [pc, #808]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0x368>)
 8001196:	2102      	movs	r1, #2
 8001198:	0018      	movs	r0, r3
 800119a:	f001 fdd7 	bl	8002d4c <HAL_GPIO_ReadPin>
 800119e:	1e03      	subs	r3, r0, #0
 80011a0:	d102      	bne.n	80011a8 <HAL_TIM_IC_CaptureCallback+0x50>
 80011a2:	4bc8      	ldr	r3, [pc, #800]	; (80014c4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 80011a4:	2201      	movs	r2, #1
 80011a6:	701a      	strb	r2, [r3, #0]
        	 OWR_OFF;
 80011a8:	2390      	movs	r3, #144	; 0x90
 80011aa:	05db      	lsls	r3, r3, #23
 80011ac:	2200      	movs	r2, #0
 80011ae:	2180      	movs	r1, #128	; 0x80
 80011b0:	0018      	movs	r0, r3
 80011b2:	f001 fde8 	bl	8002d86 <HAL_GPIO_WritePin>
        	 if((count==192)||(period>=100)){
 80011b6:	4bc4      	ldr	r3, [pc, #784]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80011b8:	781b      	ldrb	r3, [r3, #0]
 80011ba:	2bc0      	cmp	r3, #192	; 0xc0
 80011bc:	d003      	beq.n	80011c6 <HAL_TIM_IC_CaptureCallback+0x6e>
 80011be:	4bbf      	ldr	r3, [pc, #764]	; (80014bc <HAL_TIM_IC_CaptureCallback+0x364>)
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	2b63      	cmp	r3, #99	; 0x63
 80011c4:	d902      	bls.n	80011cc <HAL_TIM_IC_CaptureCallback+0x74>

        		 count=0;}
 80011c6:	4bc0      	ldr	r3, [pc, #768]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	701a      	strb	r2, [r3, #0]

        	 line_status=1;
 80011cc:	4bb9      	ldr	r3, [pc, #740]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80011ce:	2201      	movs	r2, #1
 80011d0:	701a      	strb	r2, [r3, #0]
        	 }


         if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)&&(line_status==0))
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	7f1b      	ldrb	r3, [r3, #28]
 80011d6:	2b04      	cmp	r3, #4
 80011d8:	d135      	bne.n	8001246 <HAL_TIM_IC_CaptureCallback+0xee>
 80011da:	4bb6      	ldr	r3, [pc, #728]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80011dc:	781b      	ldrb	r3, [r3, #0]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d131      	bne.n	8001246 <HAL_TIM_IC_CaptureCallback+0xee>
                  {
                 	 period_x = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 80011e2:	4bb5      	ldr	r3, [pc, #724]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0x360>)
 80011e4:	2108      	movs	r1, #8
 80011e6:	0018      	movs	r0, r3
 80011e8:	f002 ffda 	bl	80041a0 <HAL_TIM_ReadCapturedValue>
 80011ec:	0003      	movs	r3, r0
 80011ee:	b29a      	uxth	r2, r3
 80011f0:	4bb6      	ldr	r3, [pc, #728]	; (80014cc <HAL_TIM_IC_CaptureCallback+0x374>)
 80011f2:	801a      	strh	r2, [r3, #0]

                 	 TIM1->CNT=0;
 80011f4:	4bae      	ldr	r3, [pc, #696]	; (80014b0 <HAL_TIM_IC_CaptureCallback+0x358>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	625a      	str	r2, [r3, #36]	; 0x24
                  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)   {alarm=1;}
 80011fa:	4bb1      	ldr	r3, [pc, #708]	; (80014c0 <HAL_TIM_IC_CaptureCallback+0x368>)
 80011fc:	2102      	movs	r1, #2
 80011fe:	0018      	movs	r0, r3
 8001200:	f001 fda4 	bl	8002d4c <HAL_GPIO_ReadPin>
 8001204:	1e03      	subs	r3, r0, #0
 8001206:	d102      	bne.n	800120e <HAL_TIM_IC_CaptureCallback+0xb6>
 8001208:	4bae      	ldr	r3, [pc, #696]	; (80014c4 <HAL_TIM_IC_CaptureCallback+0x36c>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
                 	 OWR_OFF;
 800120e:	2390      	movs	r3, #144	; 0x90
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	2200      	movs	r2, #0
 8001214:	2180      	movs	r1, #128	; 0x80
 8001216:	0018      	movs	r0, r3
 8001218:	f001 fdb5 	bl	8002d86 <HAL_GPIO_WritePin>
                 	 if((count==192)||(period_x>=100)){
 800121c:	4baa      	ldr	r3, [pc, #680]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2bc0      	cmp	r3, #192	; 0xc0
 8001222:	d003      	beq.n	800122c <HAL_TIM_IC_CaptureCallback+0xd4>
 8001224:	4ba9      	ldr	r3, [pc, #676]	; (80014cc <HAL_TIM_IC_CaptureCallback+0x374>)
 8001226:	881b      	ldrh	r3, [r3, #0]
 8001228:	2b63      	cmp	r3, #99	; 0x63
 800122a:	d902      	bls.n	8001232 <HAL_TIM_IC_CaptureCallback+0xda>

                 		 count=0;
 800122c:	4ba6      	ldr	r3, [pc, #664]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 800122e:	2200      	movs	r2, #0
 8001230:	701a      	strb	r2, [r3, #0]

                 	 }
                 	 ISOL_ON;
 8001232:	2390      	movs	r3, #144	; 0x90
 8001234:	05db      	lsls	r3, r3, #23
 8001236:	2201      	movs	r2, #1
 8001238:	2140      	movs	r1, #64	; 0x40
 800123a:	0018      	movs	r0, r3
 800123c:	f001 fda3 	bl	8002d86 <HAL_GPIO_WritePin>
                 	 line_status=2;
 8001240:	4b9c      	ldr	r3, [pc, #624]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001242:	2202      	movs	r2, #2
 8001244:	701a      	strb	r2, [r3, #0]
                 	 }


         HAL_PWR_EnableSleepOnExit ();
 8001246:	f001 fe39 	bl	8002ebc <HAL_PWR_EnableSleepOnExit>
         }



          if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // FALLING с HIGH на LOW
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	7f1b      	ldrb	r3, [r3, #28]
 800124e:	2b02      	cmp	r3, #2
 8001250:	d000      	beq.n	8001254 <HAL_TIM_IC_CaptureCallback+0xfc>
 8001252:	e0c8      	b.n	80013e6 <HAL_TIM_IC_CaptureCallback+0x28e>
                        { pulse = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8001254:	4b98      	ldr	r3, [pc, #608]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0x360>)
 8001256:	2104      	movs	r1, #4
 8001258:	0018      	movs	r0, r3
 800125a:	f002 ffa1 	bl	80041a0 <HAL_TIM_ReadCapturedValue>
 800125e:	0003      	movs	r3, r0
 8001260:	b29a      	uxth	r2, r3
 8001262:	4b9b      	ldr	r3, [pc, #620]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001264:	801a      	strh	r2, [r3, #0]
                          HAL_IWDG_Refresh(&hiwdg);
 8001266:	4b9b      	ldr	r3, [pc, #620]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001268:	0018      	movs	r0, r3
 800126a:	f001 fdfb 	bl	8002e64 <HAL_IWDG_Refresh>

                          if(line_status==1){ISOL_OFF};
 800126e:	4b91      	ldr	r3, [pc, #580]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001270:	781b      	ldrb	r3, [r3, #0]
 8001272:	2b01      	cmp	r3, #1
 8001274:	d106      	bne.n	8001284 <HAL_TIM_IC_CaptureCallback+0x12c>
 8001276:	2390      	movs	r3, #144	; 0x90
 8001278:	05db      	lsls	r3, r3, #23
 800127a:	2200      	movs	r2, #0
 800127c:	2140      	movs	r1, #64	; 0x40
 800127e:	0018      	movs	r0, r3
 8001280:	f001 fd81 	bl	8002d86 <HAL_GPIO_WritePin>
                          line_status=0;
 8001284:	4b8b      	ldr	r3, [pc, #556]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001286:	2200      	movs	r2, #0
 8001288:	701a      	strb	r2, [r3, #0]
                        OWR_OFF;
 800128a:	2390      	movs	r3, #144	; 0x90
 800128c:	05db      	lsls	r3, r3, #23
 800128e:	2200      	movs	r2, #0
 8001290:	2180      	movs	r1, #128	; 0x80
 8001292:	0018      	movs	r0, r3
 8001294:	f001 fd77 	bl	8002d86 <HAL_GPIO_WritePin>

             if((pulse>55)&&(pulse<60))  {count=0;rcvd[count]=2;rcv_addres=0;directive=0;}
 8001298:	4b8d      	ldr	r3, [pc, #564]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 800129a:	881b      	ldrh	r3, [r3, #0]
 800129c:	2b37      	cmp	r3, #55	; 0x37
 800129e:	d912      	bls.n	80012c6 <HAL_TIM_IC_CaptureCallback+0x16e>
 80012a0:	4b8b      	ldr	r3, [pc, #556]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80012a2:	881b      	ldrh	r3, [r3, #0]
 80012a4:	2b3b      	cmp	r3, #59	; 0x3b
 80012a6:	d80e      	bhi.n	80012c6 <HAL_TIM_IC_CaptureCallback+0x16e>
 80012a8:	4b87      	ldr	r3, [pc, #540]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	701a      	strb	r2, [r3, #0]
 80012ae:	4b86      	ldr	r3, [pc, #536]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80012b0:	781b      	ldrb	r3, [r3, #0]
 80012b2:	001a      	movs	r2, r3
 80012b4:	4b88      	ldr	r3, [pc, #544]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 80012b6:	2102      	movs	r1, #2
 80012b8:	5499      	strb	r1, [r3, r2]
 80012ba:	4b88      	ldr	r3, [pc, #544]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
 80012c0:	4b87      	ldr	r3, [pc, #540]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0x388>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	701a      	strb	r2, [r3, #0]
        	 if((pulse>36)&&(pulse<40))  rcvd[count]=1;
 80012c6:	4b82      	ldr	r3, [pc, #520]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80012c8:	881b      	ldrh	r3, [r3, #0]
 80012ca:	2b24      	cmp	r3, #36	; 0x24
 80012cc:	d909      	bls.n	80012e2 <HAL_TIM_IC_CaptureCallback+0x18a>
 80012ce:	4b80      	ldr	r3, [pc, #512]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80012d0:	881b      	ldrh	r3, [r3, #0]
 80012d2:	2b27      	cmp	r3, #39	; 0x27
 80012d4:	d805      	bhi.n	80012e2 <HAL_TIM_IC_CaptureCallback+0x18a>
 80012d6:	4b7c      	ldr	r3, [pc, #496]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	001a      	movs	r2, r3
 80012dc:	4b7e      	ldr	r3, [pc, #504]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 80012de:	2101      	movs	r1, #1
 80012e0:	5499      	strb	r1, [r3, r2]
        	 if((pulse>16)&&(pulse<21))  rcvd[count]=0;
 80012e2:	4b7b      	ldr	r3, [pc, #492]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80012e4:	881b      	ldrh	r3, [r3, #0]
 80012e6:	2b10      	cmp	r3, #16
 80012e8:	d909      	bls.n	80012fe <HAL_TIM_IC_CaptureCallback+0x1a6>
 80012ea:	4b79      	ldr	r3, [pc, #484]	; (80014d0 <HAL_TIM_IC_CaptureCallback+0x378>)
 80012ec:	881b      	ldrh	r3, [r3, #0]
 80012ee:	2b14      	cmp	r3, #20
 80012f0:	d805      	bhi.n	80012fe <HAL_TIM_IC_CaptureCallback+0x1a6>
 80012f2:	4b75      	ldr	r3, [pc, #468]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	001a      	movs	r2, r3
 80012f8:	4b77      	ldr	r3, [pc, #476]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 80012fa:	2100      	movs	r1, #0
 80012fc:	5499      	strb	r1, [r3, r2]
        	// Print_test();
        	 if((rcvd[1]==1)&&(rcvd[2]==0)&&(count==2))
 80012fe:	4b76      	ldr	r3, [pc, #472]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001300:	785b      	ldrb	r3, [r3, #1]
 8001302:	2b01      	cmp	r3, #1
 8001304:	d11a      	bne.n	800133c <HAL_TIM_IC_CaptureCallback+0x1e4>
 8001306:	4b74      	ldr	r3, [pc, #464]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001308:	789b      	ldrb	r3, [r3, #2]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d116      	bne.n	800133c <HAL_TIM_IC_CaptureCallback+0x1e4>
 800130e:	4b6e      	ldr	r3, [pc, #440]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d112      	bne.n	800133c <HAL_TIM_IC_CaptureCallback+0x1e4>
        	        	                        	  {
        	        	                        		 addres_call=addres_call+1;
 8001316:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	3301      	adds	r3, #1
 800131c:	b2da      	uxtb	r2, r3
 800131e:	4b71      	ldr	r3, [pc, #452]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001320:	701a      	strb	r2, [r3, #0]
        	        	                        		 if(addres_call==addres)
 8001322:	4b70      	ldr	r3, [pc, #448]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001324:	781a      	ldrb	r2, [r3, #0]
 8001326:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001328:	781b      	ldrb	r3, [r3, #0]
 800132a:	429a      	cmp	r2, r3
 800132c:	d106      	bne.n	800133c <HAL_TIM_IC_CaptureCallback+0x1e4>
        	        	                        		    {OWR_ON;}}
 800132e:	2390      	movs	r3, #144	; 0x90
 8001330:	05db      	lsls	r3, r3, #23
 8001332:	2201      	movs	r2, #1
 8001334:	2180      	movs	r1, #128	; 0x80
 8001336:	0018      	movs	r0, r3
 8001338:	f001 fd25 	bl	8002d86 <HAL_GPIO_WritePin>

        	 if (count==8)
 800133c:	4b62      	ldr	r3, [pc, #392]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b08      	cmp	r3, #8
 8001342:	d13e      	bne.n	80013c2 <HAL_TIM_IC_CaptureCallback+0x26a>
        	        	    {
        	        	      rcv_addres=0;
 8001344:	4b65      	ldr	r3, [pc, #404]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 8001346:	2200      	movs	r2, #0
 8001348:	701a      	strb	r2, [r3, #0]
        	        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]);
 800134a:	4b63      	ldr	r3, [pc, #396]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 800134c:	785b      	ldrb	r3, [r3, #1]
 800134e:	01db      	lsls	r3, r3, #7
 8001350:	b25a      	sxtb	r2, r3
 8001352:	4b61      	ldr	r3, [pc, #388]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001354:	789b      	ldrb	r3, [r3, #2]
 8001356:	019b      	lsls	r3, r3, #6
 8001358:	b25b      	sxtb	r3, r3
 800135a:	4313      	orrs	r3, r2
 800135c:	b25a      	sxtb	r2, r3
 800135e:	4b5e      	ldr	r3, [pc, #376]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001360:	78db      	ldrb	r3, [r3, #3]
 8001362:	015b      	lsls	r3, r3, #5
 8001364:	b25b      	sxtb	r3, r3
 8001366:	4313      	orrs	r3, r2
 8001368:	b25a      	sxtb	r2, r3
 800136a:	4b5b      	ldr	r3, [pc, #364]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 800136c:	791b      	ldrb	r3, [r3, #4]
 800136e:	011b      	lsls	r3, r3, #4
 8001370:	b25b      	sxtb	r3, r3
 8001372:	4313      	orrs	r3, r2
 8001374:	b25a      	sxtb	r2, r3
 8001376:	4b58      	ldr	r3, [pc, #352]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001378:	795b      	ldrb	r3, [r3, #5]
 800137a:	00db      	lsls	r3, r3, #3
 800137c:	b25b      	sxtb	r3, r3
 800137e:	4313      	orrs	r3, r2
 8001380:	b25a      	sxtb	r2, r3
 8001382:	4b55      	ldr	r3, [pc, #340]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001384:	799b      	ldrb	r3, [r3, #6]
 8001386:	009b      	lsls	r3, r3, #2
 8001388:	b25b      	sxtb	r3, r3
 800138a:	4313      	orrs	r3, r2
 800138c:	b25a      	sxtb	r2, r3
 800138e:	4b52      	ldr	r3, [pc, #328]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001390:	79db      	ldrb	r3, [r3, #7]
 8001392:	005b      	lsls	r3, r3, #1
 8001394:	b25b      	sxtb	r3, r3
 8001396:	4313      	orrs	r3, r2
 8001398:	b25a      	sxtb	r2, r3
 800139a:	4b4f      	ldr	r3, [pc, #316]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 800139c:	7a1b      	ldrb	r3, [r3, #8]
 800139e:	b25b      	sxtb	r3, r3
 80013a0:	4313      	orrs	r3, r2
 80013a2:	b25a      	sxtb	r2, r3
 80013a4:	4b4d      	ldr	r3, [pc, #308]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	b25b      	sxtb	r3, r3
 80013aa:	4313      	orrs	r3, r2
 80013ac:	b25b      	sxtb	r3, r3
 80013ae:	b2da      	uxtb	r2, r3
 80013b0:	4b4a      	ldr	r3, [pc, #296]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 80013b2:	701a      	strb	r2, [r3, #0]
        	        	      if(rcv_addres==0){addres_call=0;}
 80013b4:	4b49      	ldr	r3, [pc, #292]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 80013b6:	781b      	ldrb	r3, [r3, #0]
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d102      	bne.n	80013c2 <HAL_TIM_IC_CaptureCallback+0x26a>
 80013bc:	4b49      	ldr	r3, [pc, #292]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x38c>)
 80013be:	2200      	movs	r2, #0
 80013c0:	701a      	strb	r2, [r3, #0]

        	        	    }
        	 if((rcv_addres==addres)&&(count>8)){Protocol();}
 80013c2:	4b46      	ldr	r3, [pc, #280]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 80013c4:	781a      	ldrb	r2, [r3, #0]
 80013c6:	4b48      	ldr	r3, [pc, #288]	; (80014e8 <HAL_TIM_IC_CaptureCallback+0x390>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	429a      	cmp	r2, r3
 80013cc:	d105      	bne.n	80013da <HAL_TIM_IC_CaptureCallback+0x282>
 80013ce:	4b3e      	ldr	r3, [pc, #248]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b08      	cmp	r3, #8
 80013d4:	d901      	bls.n	80013da <HAL_TIM_IC_CaptureCallback+0x282>
 80013d6:	f7ff f87b 	bl	80004d0 <Protocol>


        	  count++;
 80013da:	4b3b      	ldr	r3, [pc, #236]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	3301      	adds	r3, #1
 80013e0:	b2da      	uxtb	r2, r3
 80013e2:	4b39      	ldr	r3, [pc, #228]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80013e4:	701a      	strb	r2, [r3, #0]

                        }



          if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)&&(line_status!=0)) // FALLING с HIGH на LOW
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	7f1b      	ldrb	r3, [r3, #28]
 80013ea:	2b08      	cmp	r3, #8
 80013ec:	d000      	beq.n	80013f0 <HAL_TIM_IC_CaptureCallback+0x298>
 80013ee:	e0e4      	b.n	80015ba <HAL_TIM_IC_CaptureCallback+0x462>
 80013f0:	4b30      	ldr	r3, [pc, #192]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d100      	bne.n	80013fa <HAL_TIM_IC_CaptureCallback+0x2a2>
 80013f8:	e0df      	b.n	80015ba <HAL_TIM_IC_CaptureCallback+0x462>
                                 {
                                   pulse_x = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 80013fa:	4b2f      	ldr	r3, [pc, #188]	; (80014b8 <HAL_TIM_IC_CaptureCallback+0x360>)
 80013fc:	210c      	movs	r1, #12
 80013fe:	0018      	movs	r0, r3
 8001400:	f002 fece 	bl	80041a0 <HAL_TIM_ReadCapturedValue>
 8001404:	0003      	movs	r3, r0
 8001406:	b29a      	uxth	r2, r3
 8001408:	4b38      	ldr	r3, [pc, #224]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 800140a:	801a      	strh	r2, [r3, #0]
                                   HAL_IWDG_Refresh(&hiwdg);
 800140c:	4b31      	ldr	r3, [pc, #196]	; (80014d4 <HAL_TIM_IC_CaptureCallback+0x37c>)
 800140e:	0018      	movs	r0, r3
 8001410:	f001 fd28 	bl	8002e64 <HAL_IWDG_Refresh>

                                   line_status=0;
 8001414:	4b27      	ldr	r3, [pc, #156]	; (80014b4 <HAL_TIM_IC_CaptureCallback+0x35c>)
 8001416:	2200      	movs	r2, #0
 8001418:	701a      	strb	r2, [r3, #0]
                                 OWR_OFF;
 800141a:	2390      	movs	r3, #144	; 0x90
 800141c:	05db      	lsls	r3, r3, #23
 800141e:	2200      	movs	r2, #0
 8001420:	2180      	movs	r1, #128	; 0x80
 8001422:	0018      	movs	r0, r3
 8001424:	f001 fcaf 	bl	8002d86 <HAL_GPIO_WritePin>

                      if((pulse_x>55)&&(pulse_x<60))  {count=0;rcvd[count]=2;rcv_addres=0;directive=0;}
 8001428:	4b30      	ldr	r3, [pc, #192]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 800142a:	881b      	ldrh	r3, [r3, #0]
 800142c:	2b37      	cmp	r3, #55	; 0x37
 800142e:	d912      	bls.n	8001456 <HAL_TIM_IC_CaptureCallback+0x2fe>
 8001430:	4b2e      	ldr	r3, [pc, #184]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 8001432:	881b      	ldrh	r3, [r3, #0]
 8001434:	2b3b      	cmp	r3, #59	; 0x3b
 8001436:	d80e      	bhi.n	8001456 <HAL_TIM_IC_CaptureCallback+0x2fe>
 8001438:	4b23      	ldr	r3, [pc, #140]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 800143a:	2200      	movs	r2, #0
 800143c:	701a      	strb	r2, [r3, #0]
 800143e:	4b22      	ldr	r3, [pc, #136]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001440:	781b      	ldrb	r3, [r3, #0]
 8001442:	001a      	movs	r2, r3
 8001444:	4b24      	ldr	r3, [pc, #144]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001446:	2102      	movs	r1, #2
 8001448:	5499      	strb	r1, [r3, r2]
 800144a:	4b24      	ldr	r3, [pc, #144]	; (80014dc <HAL_TIM_IC_CaptureCallback+0x384>)
 800144c:	2200      	movs	r2, #0
 800144e:	701a      	strb	r2, [r3, #0]
 8001450:	4b23      	ldr	r3, [pc, #140]	; (80014e0 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001452:	2200      	movs	r2, #0
 8001454:	701a      	strb	r2, [r3, #0]
                 	 if((pulse_x>36)&&(pulse_x<40))  rcvd[count]=1;
 8001456:	4b25      	ldr	r3, [pc, #148]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 8001458:	881b      	ldrh	r3, [r3, #0]
 800145a:	2b24      	cmp	r3, #36	; 0x24
 800145c:	d909      	bls.n	8001472 <HAL_TIM_IC_CaptureCallback+0x31a>
 800145e:	4b23      	ldr	r3, [pc, #140]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 8001460:	881b      	ldrh	r3, [r3, #0]
 8001462:	2b27      	cmp	r3, #39	; 0x27
 8001464:	d805      	bhi.n	8001472 <HAL_TIM_IC_CaptureCallback+0x31a>
 8001466:	4b18      	ldr	r3, [pc, #96]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	001a      	movs	r2, r3
 800146c:	4b1a      	ldr	r3, [pc, #104]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 800146e:	2101      	movs	r1, #1
 8001470:	5499      	strb	r1, [r3, r2]
                 	 if((pulse_x>16)&&(pulse_x<21))  rcvd[count]=0;
 8001472:	4b1e      	ldr	r3, [pc, #120]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 8001474:	881b      	ldrh	r3, [r3, #0]
 8001476:	2b10      	cmp	r3, #16
 8001478:	d909      	bls.n	800148e <HAL_TIM_IC_CaptureCallback+0x336>
 800147a:	4b1c      	ldr	r3, [pc, #112]	; (80014ec <HAL_TIM_IC_CaptureCallback+0x394>)
 800147c:	881b      	ldrh	r3, [r3, #0]
 800147e:	2b14      	cmp	r3, #20
 8001480:	d805      	bhi.n	800148e <HAL_TIM_IC_CaptureCallback+0x336>
 8001482:	4b11      	ldr	r3, [pc, #68]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	001a      	movs	r2, r3
 8001488:	4b13      	ldr	r3, [pc, #76]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 800148a:	2100      	movs	r1, #0
 800148c:	5499      	strb	r1, [r3, r2]

                 	 if((rcvd[1]==1)&&(rcvd[2]==0)&&(count==2))
 800148e:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001490:	785b      	ldrb	r3, [r3, #1]
 8001492:	2b01      	cmp	r3, #1
 8001494:	d13c      	bne.n	8001510 <HAL_TIM_IC_CaptureCallback+0x3b8>
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001498:	789b      	ldrb	r3, [r3, #2]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d138      	bne.n	8001510 <HAL_TIM_IC_CaptureCallback+0x3b8>
 800149e:	4b0a      	ldr	r3, [pc, #40]	; (80014c8 <HAL_TIM_IC_CaptureCallback+0x370>)
 80014a0:	781b      	ldrb	r3, [r3, #0]
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d134      	bne.n	8001510 <HAL_TIM_IC_CaptureCallback+0x3b8>
                 	        	                        	  {
                 	        	                        		 addres_call=addres_call+1;
 80014a6:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <HAL_TIM_IC_CaptureCallback+0x38c>)
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	3301      	adds	r3, #1
 80014ac:	e020      	b.n	80014f0 <HAL_TIM_IC_CaptureCallback+0x398>
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	40012c00 	.word	0x40012c00
 80014b4:	2000032c 	.word	0x2000032c
 80014b8:	200000c0 	.word	0x200000c0
 80014bc:	2000021c 	.word	0x2000021c
 80014c0:	48000400 	.word	0x48000400
 80014c4:	20000224 	.word	0x20000224
 80014c8:	20000320 	.word	0x20000320
 80014cc:	2000021e 	.word	0x2000021e
 80014d0:	20000220 	.word	0x20000220
 80014d4:	200000b0 	.word	0x200000b0
 80014d8:	20000228 	.word	0x20000228
 80014dc:	20000321 	.word	0x20000321
 80014e0:	20000323 	.word	0x20000323
 80014e4:	20000322 	.word	0x20000322
 80014e8:	20000000 	.word	0x20000000
 80014ec:	20000222 	.word	0x20000222
 80014f0:	b2da      	uxtb	r2, r3
 80014f2:	4b35      	ldr	r3, [pc, #212]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x470>)
 80014f4:	701a      	strb	r2, [r3, #0]
                 	        	                        		 if(addres_call==addres)
 80014f6:	4b34      	ldr	r3, [pc, #208]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x470>)
 80014f8:	781a      	ldrb	r2, [r3, #0]
 80014fa:	4b34      	ldr	r3, [pc, #208]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x474>)
 80014fc:	781b      	ldrb	r3, [r3, #0]
 80014fe:	429a      	cmp	r2, r3
 8001500:	d106      	bne.n	8001510 <HAL_TIM_IC_CaptureCallback+0x3b8>
                 	        	                        		    {OWR_ON;}}
 8001502:	2390      	movs	r3, #144	; 0x90
 8001504:	05db      	lsls	r3, r3, #23
 8001506:	2201      	movs	r2, #1
 8001508:	2180      	movs	r1, #128	; 0x80
 800150a:	0018      	movs	r0, r3
 800150c:	f001 fc3b 	bl	8002d86 <HAL_GPIO_WritePin>

                 	 if (count==8)
 8001510:	4b2f      	ldr	r3, [pc, #188]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0x478>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b08      	cmp	r3, #8
 8001516:	d13e      	bne.n	8001596 <HAL_TIM_IC_CaptureCallback+0x43e>
                 	        	    {
                 	        	      rcv_addres=0;
 8001518:	4b2e      	ldr	r3, [pc, #184]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x47c>)
 800151a:	2200      	movs	r2, #0
 800151c:	701a      	strb	r2, [r3, #0]
                 	        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]);
 800151e:	4b2e      	ldr	r3, [pc, #184]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001520:	785b      	ldrb	r3, [r3, #1]
 8001522:	01db      	lsls	r3, r3, #7
 8001524:	b25a      	sxtb	r2, r3
 8001526:	4b2c      	ldr	r3, [pc, #176]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001528:	789b      	ldrb	r3, [r3, #2]
 800152a:	019b      	lsls	r3, r3, #6
 800152c:	b25b      	sxtb	r3, r3
 800152e:	4313      	orrs	r3, r2
 8001530:	b25a      	sxtb	r2, r3
 8001532:	4b29      	ldr	r3, [pc, #164]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001534:	78db      	ldrb	r3, [r3, #3]
 8001536:	015b      	lsls	r3, r3, #5
 8001538:	b25b      	sxtb	r3, r3
 800153a:	4313      	orrs	r3, r2
 800153c:	b25a      	sxtb	r2, r3
 800153e:	4b26      	ldr	r3, [pc, #152]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001540:	791b      	ldrb	r3, [r3, #4]
 8001542:	011b      	lsls	r3, r3, #4
 8001544:	b25b      	sxtb	r3, r3
 8001546:	4313      	orrs	r3, r2
 8001548:	b25a      	sxtb	r2, r3
 800154a:	4b23      	ldr	r3, [pc, #140]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 800154c:	795b      	ldrb	r3, [r3, #5]
 800154e:	00db      	lsls	r3, r3, #3
 8001550:	b25b      	sxtb	r3, r3
 8001552:	4313      	orrs	r3, r2
 8001554:	b25a      	sxtb	r2, r3
 8001556:	4b20      	ldr	r3, [pc, #128]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001558:	799b      	ldrb	r3, [r3, #6]
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	b25b      	sxtb	r3, r3
 800155e:	4313      	orrs	r3, r2
 8001560:	b25a      	sxtb	r2, r3
 8001562:	4b1d      	ldr	r3, [pc, #116]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001564:	79db      	ldrb	r3, [r3, #7]
 8001566:	005b      	lsls	r3, r3, #1
 8001568:	b25b      	sxtb	r3, r3
 800156a:	4313      	orrs	r3, r2
 800156c:	b25a      	sxtb	r2, r3
 800156e:	4b1a      	ldr	r3, [pc, #104]	; (80015d8 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001570:	7a1b      	ldrb	r3, [r3, #8]
 8001572:	b25b      	sxtb	r3, r3
 8001574:	4313      	orrs	r3, r2
 8001576:	b25a      	sxtb	r2, r3
 8001578:	4b16      	ldr	r3, [pc, #88]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x47c>)
 800157a:	781b      	ldrb	r3, [r3, #0]
 800157c:	b25b      	sxtb	r3, r3
 800157e:	4313      	orrs	r3, r2
 8001580:	b25b      	sxtb	r3, r3
 8001582:	b2da      	uxtb	r2, r3
 8001584:	4b13      	ldr	r3, [pc, #76]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001586:	701a      	strb	r2, [r3, #0]
                 	        	      if(rcv_addres==0){addres_call=0;}
 8001588:	4b12      	ldr	r3, [pc, #72]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x47c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b00      	cmp	r3, #0
 800158e:	d102      	bne.n	8001596 <HAL_TIM_IC_CaptureCallback+0x43e>
 8001590:	4b0d      	ldr	r3, [pc, #52]	; (80015c8 <HAL_TIM_IC_CaptureCallback+0x470>)
 8001592:	2200      	movs	r2, #0
 8001594:	701a      	strb	r2, [r3, #0]

                 	        	    }
                 	 if((rcv_addres==addres)&&(count>8)){Protocol();}
 8001596:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001598:	781a      	ldrb	r2, [r3, #0]
 800159a:	4b0c      	ldr	r3, [pc, #48]	; (80015cc <HAL_TIM_IC_CaptureCallback+0x474>)
 800159c:	781b      	ldrb	r3, [r3, #0]
 800159e:	429a      	cmp	r2, r3
 80015a0:	d105      	bne.n	80015ae <HAL_TIM_IC_CaptureCallback+0x456>
 80015a2:	4b0b      	ldr	r3, [pc, #44]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0x478>)
 80015a4:	781b      	ldrb	r3, [r3, #0]
 80015a6:	2b08      	cmp	r3, #8
 80015a8:	d901      	bls.n	80015ae <HAL_TIM_IC_CaptureCallback+0x456>
 80015aa:	f7fe ff91 	bl	80004d0 <Protocol>


                 	  count++;
 80015ae:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0x478>)
 80015b0:	781b      	ldrb	r3, [r3, #0]
 80015b2:	3301      	adds	r3, #1
 80015b4:	b2da      	uxtb	r2, r3
 80015b6:	4b06      	ldr	r3, [pc, #24]	; (80015d0 <HAL_TIM_IC_CaptureCallback+0x478>)
 80015b8:	701a      	strb	r2, [r3, #0]





          HAL_PWR_EnableSleepOnExit ();
 80015ba:	f001 fc7f 	bl	8002ebc <HAL_PWR_EnableSleepOnExit>
     }
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b002      	add	sp, #8
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000322 	.word	0x20000322
 80015cc:	20000000 	.word	0x20000000
 80015d0:	20000320 	.word	0x20000320
 80015d4:	20000321 	.word	0x20000321
 80015d8:	20000228 	.word	0x20000228

080015dc <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  LED2_OFF;
 80015e4:	2380      	movs	r3, #128	; 0x80
 80015e6:	0159      	lsls	r1, r3, #5
 80015e8:	2390      	movs	r3, #144	; 0x90
 80015ea:	05db      	lsls	r3, r3, #23
 80015ec:	2200      	movs	r2, #0
 80015ee:	0018      	movs	r0, r3
 80015f0:	f001 fbc9 	bl	8002d86 <HAL_GPIO_WritePin>
}
 80015f4:	46c0      	nop			; (mov r8, r8)
 80015f6:	46bd      	mov	sp, r7
 80015f8:	b002      	add	sp, #8
 80015fa:	bd80      	pop	{r7, pc}

080015fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015fc:	b580      	push	{r7, lr}
 80015fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001600:	b672      	cpsid	i
}
 8001602:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001604:	e7fe      	b.n	8001604 <Error_Handler+0x8>
	...

08001608 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800160e:	4b13      	ldr	r3, [pc, #76]	; (800165c <HAL_MspInit+0x54>)
 8001610:	699a      	ldr	r2, [r3, #24]
 8001612:	4b12      	ldr	r3, [pc, #72]	; (800165c <HAL_MspInit+0x54>)
 8001614:	2101      	movs	r1, #1
 8001616:	430a      	orrs	r2, r1
 8001618:	619a      	str	r2, [r3, #24]
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <HAL_MspInit+0x54>)
 800161c:	699b      	ldr	r3, [r3, #24]
 800161e:	2201      	movs	r2, #1
 8001620:	4013      	ands	r3, r2
 8001622:	607b      	str	r3, [r7, #4]
 8001624:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_MspInit+0x54>)
 8001628:	69da      	ldr	r2, [r3, #28]
 800162a:	4b0c      	ldr	r3, [pc, #48]	; (800165c <HAL_MspInit+0x54>)
 800162c:	2180      	movs	r1, #128	; 0x80
 800162e:	0549      	lsls	r1, r1, #21
 8001630:	430a      	orrs	r2, r1
 8001632:	61da      	str	r2, [r3, #28]
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_MspInit+0x54>)
 8001636:	69da      	ldr	r2, [r3, #28]
 8001638:	2380      	movs	r3, #128	; 0x80
 800163a:	055b      	lsls	r3, r3, #21
 800163c:	4013      	ands	r3, r2
 800163e:	603b      	str	r3, [r7, #0]
 8001640:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001642:	2200      	movs	r2, #0
 8001644:	2100      	movs	r1, #0
 8001646:	2004      	movs	r0, #4
 8001648:	f000 fe58 	bl	80022fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 800164c:	2004      	movs	r0, #4
 800164e:	f000 fe6a 	bl	8002326 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	46bd      	mov	sp, r7
 8001656:	b002      	add	sp, #8
 8001658:	bd80      	pop	{r7, pc}
 800165a:	46c0      	nop			; (mov r8, r8)
 800165c:	40021000 	.word	0x40021000

08001660 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001660:	b590      	push	{r4, r7, lr}
 8001662:	b08b      	sub	sp, #44	; 0x2c
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	2414      	movs	r4, #20
 800166a:	193b      	adds	r3, r7, r4
 800166c:	0018      	movs	r0, r3
 800166e:	2314      	movs	r3, #20
 8001670:	001a      	movs	r2, r3
 8001672:	2100      	movs	r1, #0
 8001674:	f003 ff52 	bl	800551c <memset>
  if(hadc->Instance==ADC1)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a3f      	ldr	r2, [pc, #252]	; (800177c <HAL_ADC_MspInit+0x11c>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d178      	bne.n	8001774 <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001682:	4b3f      	ldr	r3, [pc, #252]	; (8001780 <HAL_ADC_MspInit+0x120>)
 8001684:	699a      	ldr	r2, [r3, #24]
 8001686:	4b3e      	ldr	r3, [pc, #248]	; (8001780 <HAL_ADC_MspInit+0x120>)
 8001688:	2180      	movs	r1, #128	; 0x80
 800168a:	0089      	lsls	r1, r1, #2
 800168c:	430a      	orrs	r2, r1
 800168e:	619a      	str	r2, [r3, #24]
 8001690:	4b3b      	ldr	r3, [pc, #236]	; (8001780 <HAL_ADC_MspInit+0x120>)
 8001692:	699a      	ldr	r2, [r3, #24]
 8001694:	2380      	movs	r3, #128	; 0x80
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	4013      	ands	r3, r2
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800169e:	4b38      	ldr	r3, [pc, #224]	; (8001780 <HAL_ADC_MspInit+0x120>)
 80016a0:	695a      	ldr	r2, [r3, #20]
 80016a2:	4b37      	ldr	r3, [pc, #220]	; (8001780 <HAL_ADC_MspInit+0x120>)
 80016a4:	2180      	movs	r1, #128	; 0x80
 80016a6:	0289      	lsls	r1, r1, #10
 80016a8:	430a      	orrs	r2, r1
 80016aa:	615a      	str	r2, [r3, #20]
 80016ac:	4b34      	ldr	r3, [pc, #208]	; (8001780 <HAL_ADC_MspInit+0x120>)
 80016ae:	695a      	ldr	r2, [r3, #20]
 80016b0:	2380      	movs	r3, #128	; 0x80
 80016b2:	029b      	lsls	r3, r3, #10
 80016b4:	4013      	ands	r3, r2
 80016b6:	60fb      	str	r3, [r7, #12]
 80016b8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ba:	4b31      	ldr	r3, [pc, #196]	; (8001780 <HAL_ADC_MspInit+0x120>)
 80016bc:	695a      	ldr	r2, [r3, #20]
 80016be:	4b30      	ldr	r3, [pc, #192]	; (8001780 <HAL_ADC_MspInit+0x120>)
 80016c0:	2180      	movs	r1, #128	; 0x80
 80016c2:	02c9      	lsls	r1, r1, #11
 80016c4:	430a      	orrs	r2, r1
 80016c6:	615a      	str	r2, [r3, #20]
 80016c8:	4b2d      	ldr	r3, [pc, #180]	; (8001780 <HAL_ADC_MspInit+0x120>)
 80016ca:	695a      	ldr	r2, [r3, #20]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	02db      	lsls	r3, r3, #11
 80016d0:	4013      	ands	r3, r2
 80016d2:	60bb      	str	r3, [r7, #8]
 80016d4:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80016d6:	193b      	adds	r3, r7, r4
 80016d8:	2233      	movs	r2, #51	; 0x33
 80016da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016dc:	193b      	adds	r3, r7, r4
 80016de:	2203      	movs	r2, #3
 80016e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	193b      	adds	r3, r7, r4
 80016e4:	2200      	movs	r2, #0
 80016e6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e8:	193a      	adds	r2, r7, r4
 80016ea:	2390      	movs	r3, #144	; 0x90
 80016ec:	05db      	lsls	r3, r3, #23
 80016ee:	0011      	movs	r1, r2
 80016f0:	0018      	movs	r0, r3
 80016f2:	f001 f9bb 	bl	8002a6c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_M_Pin;
 80016f6:	193b      	adds	r3, r7, r4
 80016f8:	2201      	movs	r2, #1
 80016fa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016fc:	193b      	adds	r3, r7, r4
 80016fe:	2203      	movs	r2, #3
 8001700:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	193b      	adds	r3, r7, r4
 8001704:	2200      	movs	r2, #0
 8001706:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_M_GPIO_Port, &GPIO_InitStruct);
 8001708:	193b      	adds	r3, r7, r4
 800170a:	4a1e      	ldr	r2, [pc, #120]	; (8001784 <HAL_ADC_MspInit+0x124>)
 800170c:	0019      	movs	r1, r3
 800170e:	0010      	movs	r0, r2
 8001710:	f001 f9ac 	bl	8002a6c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 8001714:	4b1c      	ldr	r3, [pc, #112]	; (8001788 <HAL_ADC_MspInit+0x128>)
 8001716:	4a1d      	ldr	r2, [pc, #116]	; (800178c <HAL_ADC_MspInit+0x12c>)
 8001718:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800171a:	4b1b      	ldr	r3, [pc, #108]	; (8001788 <HAL_ADC_MspInit+0x128>)
 800171c:	2200      	movs	r2, #0
 800171e:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_ADC_MspInit+0x128>)
 8001722:	2200      	movs	r2, #0
 8001724:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 8001726:	4b18      	ldr	r3, [pc, #96]	; (8001788 <HAL_ADC_MspInit+0x128>)
 8001728:	2280      	movs	r2, #128	; 0x80
 800172a:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800172c:	4b16      	ldr	r3, [pc, #88]	; (8001788 <HAL_ADC_MspInit+0x128>)
 800172e:	2280      	movs	r2, #128	; 0x80
 8001730:	0052      	lsls	r2, r2, #1
 8001732:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001734:	4b14      	ldr	r3, [pc, #80]	; (8001788 <HAL_ADC_MspInit+0x128>)
 8001736:	2280      	movs	r2, #128	; 0x80
 8001738:	00d2      	lsls	r2, r2, #3
 800173a:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 800173c:	4b12      	ldr	r3, [pc, #72]	; (8001788 <HAL_ADC_MspInit+0x128>)
 800173e:	2200      	movs	r2, #0
 8001740:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 8001742:	4b11      	ldr	r3, [pc, #68]	; (8001788 <HAL_ADC_MspInit+0x128>)
 8001744:	2200      	movs	r2, #0
 8001746:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001748:	4b0f      	ldr	r3, [pc, #60]	; (8001788 <HAL_ADC_MspInit+0x128>)
 800174a:	0018      	movs	r0, r3
 800174c:	f000 fe08 	bl	8002360 <HAL_DMA_Init>
 8001750:	1e03      	subs	r3, r0, #0
 8001752:	d001      	beq.n	8001758 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 8001754:	f7ff ff52 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	4a0b      	ldr	r2, [pc, #44]	; (8001788 <HAL_ADC_MspInit+0x128>)
 800175c:	631a      	str	r2, [r3, #48]	; 0x30
 800175e:	4b0a      	ldr	r3, [pc, #40]	; (8001788 <HAL_ADC_MspInit+0x128>)
 8001760:	687a      	ldr	r2, [r7, #4]
 8001762:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001764:	2200      	movs	r2, #0
 8001766:	2100      	movs	r1, #0
 8001768:	200c      	movs	r0, #12
 800176a:	f000 fdc7 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 800176e:	200c      	movs	r0, #12
 8001770:	f000 fdd9 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001774:	46c0      	nop			; (mov r8, r8)
 8001776:	46bd      	mov	sp, r7
 8001778:	b00b      	add	sp, #44	; 0x2c
 800177a:	bd90      	pop	{r4, r7, pc}
 800177c:	40012400 	.word	0x40012400
 8001780:	40021000 	.word	0x40021000
 8001784:	48000400 	.word	0x48000400
 8001788:	2000006c 	.word	0x2000006c
 800178c:	40020008 	.word	0x40020008

08001790 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001790:	b590      	push	{r4, r7, lr}
 8001792:	b08b      	sub	sp, #44	; 0x2c
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	2414      	movs	r4, #20
 800179a:	193b      	adds	r3, r7, r4
 800179c:	0018      	movs	r0, r3
 800179e:	2314      	movs	r3, #20
 80017a0:	001a      	movs	r2, r3
 80017a2:	2100      	movs	r1, #0
 80017a4:	f003 feba 	bl	800551c <memset>
  if(htim_base->Instance==TIM1)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a32      	ldr	r2, [pc, #200]	; (8001878 <HAL_TIM_Base_MspInit+0xe8>)
 80017ae:	4293      	cmp	r3, r2
 80017b0:	d144      	bne.n	800183c <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80017b2:	4b32      	ldr	r3, [pc, #200]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 80017b4:	699a      	ldr	r2, [r3, #24]
 80017b6:	4b31      	ldr	r3, [pc, #196]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 80017b8:	2180      	movs	r1, #128	; 0x80
 80017ba:	0109      	lsls	r1, r1, #4
 80017bc:	430a      	orrs	r2, r1
 80017be:	619a      	str	r2, [r3, #24]
 80017c0:	4b2e      	ldr	r3, [pc, #184]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 80017c2:	699a      	ldr	r2, [r3, #24]
 80017c4:	2380      	movs	r3, #128	; 0x80
 80017c6:	011b      	lsls	r3, r3, #4
 80017c8:	4013      	ands	r3, r2
 80017ca:	613b      	str	r3, [r7, #16]
 80017cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ce:	4b2b      	ldr	r3, [pc, #172]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 80017d0:	695a      	ldr	r2, [r3, #20]
 80017d2:	4b2a      	ldr	r3, [pc, #168]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 80017d4:	2180      	movs	r1, #128	; 0x80
 80017d6:	0289      	lsls	r1, r1, #10
 80017d8:	430a      	orrs	r2, r1
 80017da:	615a      	str	r2, [r3, #20]
 80017dc:	4b27      	ldr	r3, [pc, #156]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 80017de:	695a      	ldr	r2, [r3, #20]
 80017e0:	2380      	movs	r3, #128	; 0x80
 80017e2:	029b      	lsls	r3, r3, #10
 80017e4:	4013      	ands	r3, r2
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L__Pin|L___Pin;
 80017ea:	193b      	adds	r3, r7, r4
 80017ec:	22a0      	movs	r2, #160	; 0xa0
 80017ee:	00d2      	lsls	r2, r2, #3
 80017f0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	0021      	movs	r1, r4
 80017f4:	187b      	adds	r3, r7, r1
 80017f6:	2202      	movs	r2, #2
 80017f8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fa:	187b      	adds	r3, r7, r1
 80017fc:	2200      	movs	r2, #0
 80017fe:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001800:	187b      	adds	r3, r7, r1
 8001802:	2200      	movs	r2, #0
 8001804:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001806:	187b      	adds	r3, r7, r1
 8001808:	2202      	movs	r2, #2
 800180a:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800180c:	187a      	adds	r2, r7, r1
 800180e:	2390      	movs	r3, #144	; 0x90
 8001810:	05db      	lsls	r3, r3, #23
 8001812:	0011      	movs	r1, r2
 8001814:	0018      	movs	r0, r3
 8001816:	f001 f929 	bl	8002a6c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 800181a:	2200      	movs	r2, #0
 800181c:	2100      	movs	r1, #0
 800181e:	200d      	movs	r0, #13
 8001820:	f000 fd6c 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001824:	200d      	movs	r0, #13
 8001826:	f000 fd7e 	bl	8002326 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800182a:	2200      	movs	r2, #0
 800182c:	2100      	movs	r1, #0
 800182e:	200e      	movs	r0, #14
 8001830:	f000 fd64 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001834:	200e      	movs	r0, #14
 8001836:	f000 fd76 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800183a:	e018      	b.n	800186e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	4a0f      	ldr	r2, [pc, #60]	; (8001880 <HAL_TIM_Base_MspInit+0xf0>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d113      	bne.n	800186e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001846:	4b0d      	ldr	r3, [pc, #52]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 8001848:	69da      	ldr	r2, [r3, #28]
 800184a:	4b0c      	ldr	r3, [pc, #48]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 800184c:	2102      	movs	r1, #2
 800184e:	430a      	orrs	r2, r1
 8001850:	61da      	str	r2, [r3, #28]
 8001852:	4b0a      	ldr	r3, [pc, #40]	; (800187c <HAL_TIM_Base_MspInit+0xec>)
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	2202      	movs	r2, #2
 8001858:	4013      	ands	r3, r2
 800185a:	60bb      	str	r3, [r7, #8]
 800185c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2010      	movs	r0, #16
 8001864:	f000 fd4a 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001868:	2010      	movs	r0, #16
 800186a:	f000 fd5c 	bl	8002326 <HAL_NVIC_EnableIRQ>
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b00b      	add	sp, #44	; 0x2c
 8001874:	bd90      	pop	{r4, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	40012c00 	.word	0x40012c00
 800187c:	40021000 	.word	0x40021000
 8001880:	40000400 	.word	0x40000400

08001884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001884:	b590      	push	{r4, r7, lr}
 8001886:	b08b      	sub	sp, #44	; 0x2c
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800188c:	2414      	movs	r4, #20
 800188e:	193b      	adds	r3, r7, r4
 8001890:	0018      	movs	r0, r3
 8001892:	2314      	movs	r3, #20
 8001894:	001a      	movs	r2, r3
 8001896:	2100      	movs	r1, #0
 8001898:	f003 fe40 	bl	800551c <memset>
  if(huart->Instance==USART1)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a33      	ldr	r2, [pc, #204]	; (8001970 <HAL_UART_MspInit+0xec>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d160      	bne.n	8001968 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80018a6:	4b33      	ldr	r3, [pc, #204]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018a8:	699a      	ldr	r2, [r3, #24]
 80018aa:	4b32      	ldr	r3, [pc, #200]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018ac:	2180      	movs	r1, #128	; 0x80
 80018ae:	01c9      	lsls	r1, r1, #7
 80018b0:	430a      	orrs	r2, r1
 80018b2:	619a      	str	r2, [r3, #24]
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018b6:	699a      	ldr	r2, [r3, #24]
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	01db      	lsls	r3, r3, #7
 80018bc:	4013      	ands	r3, r2
 80018be:	613b      	str	r3, [r7, #16]
 80018c0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018c2:	4b2c      	ldr	r3, [pc, #176]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018c4:	695a      	ldr	r2, [r3, #20]
 80018c6:	4b2b      	ldr	r3, [pc, #172]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	0289      	lsls	r1, r1, #10
 80018cc:	430a      	orrs	r2, r1
 80018ce:	615a      	str	r2, [r3, #20]
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <HAL_UART_MspInit+0xf0>)
 80018d2:	695a      	ldr	r2, [r3, #20]
 80018d4:	2380      	movs	r3, #128	; 0x80
 80018d6:	029b      	lsls	r3, r3, #10
 80018d8:	4013      	ands	r3, r2
 80018da:	60fb      	str	r3, [r7, #12]
 80018dc:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80018de:	0021      	movs	r1, r4
 80018e0:	187b      	adds	r3, r7, r1
 80018e2:	220c      	movs	r2, #12
 80018e4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018e6:	187b      	adds	r3, r7, r1
 80018e8:	2202      	movs	r2, #2
 80018ea:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ec:	187b      	adds	r3, r7, r1
 80018ee:	2200      	movs	r2, #0
 80018f0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80018f2:	187b      	adds	r3, r7, r1
 80018f4:	2203      	movs	r2, #3
 80018f6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80018f8:	187b      	adds	r3, r7, r1
 80018fa:	2201      	movs	r2, #1
 80018fc:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018fe:	187a      	adds	r2, r7, r1
 8001900:	2390      	movs	r3, #144	; 0x90
 8001902:	05db      	lsls	r3, r3, #23
 8001904:	0011      	movs	r1, r2
 8001906:	0018      	movs	r0, r3
 8001908:	f001 f8b0 	bl	8002a6c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <HAL_UART_MspInit+0xf4>)
 800190e:	4a1b      	ldr	r2, [pc, #108]	; (800197c <HAL_UART_MspInit+0xf8>)
 8001910:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001914:	2210      	movs	r2, #16
 8001916:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001918:	4b17      	ldr	r3, [pc, #92]	; (8001978 <HAL_UART_MspInit+0xf4>)
 800191a:	2200      	movs	r2, #0
 800191c:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800191e:	4b16      	ldr	r3, [pc, #88]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001920:	2280      	movs	r2, #128	; 0x80
 8001922:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001924:	4b14      	ldr	r3, [pc, #80]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001926:	2200      	movs	r2, #0
 8001928:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800192a:	4b13      	ldr	r3, [pc, #76]	; (8001978 <HAL_UART_MspInit+0xf4>)
 800192c:	2200      	movs	r2, #0
 800192e:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001930:	4b11      	ldr	r3, [pc, #68]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001932:	2200      	movs	r2, #0
 8001934:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001936:	4b10      	ldr	r3, [pc, #64]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001938:	2200      	movs	r2, #0
 800193a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 800193c:	4b0e      	ldr	r3, [pc, #56]	; (8001978 <HAL_UART_MspInit+0xf4>)
 800193e:	0018      	movs	r0, r3
 8001940:	f000 fd0e 	bl	8002360 <HAL_DMA_Init>
 8001944:	1e03      	subs	r3, r0, #0
 8001946:	d001      	beq.n	800194c <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001948:	f7ff fe58 	bl	80015fc <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	4a0a      	ldr	r2, [pc, #40]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001950:	671a      	str	r2, [r3, #112]	; 0x70
 8001952:	4b09      	ldr	r3, [pc, #36]	; (8001978 <HAL_UART_MspInit+0xf4>)
 8001954:	687a      	ldr	r2, [r7, #4]
 8001956:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	2100      	movs	r1, #0
 800195c:	201b      	movs	r0, #27
 800195e:	f000 fccd 	bl	80022fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001962:	201b      	movs	r0, #27
 8001964:	f000 fcdf 	bl	8002326 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001968:	46c0      	nop			; (mov r8, r8)
 800196a:	46bd      	mov	sp, r7
 800196c:	b00b      	add	sp, #44	; 0x2c
 800196e:	bd90      	pop	{r4, r7, pc}
 8001970:	40013800 	.word	0x40013800
 8001974:	40021000 	.word	0x40021000
 8001978:	200001d8 	.word	0x200001d8
 800197c:	4002001c 	.word	0x4002001c

08001980 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001984:	e7fe      	b.n	8001984 <NMI_Handler+0x4>

08001986 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001986:	b580      	push	{r7, lr}
 8001988:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800198a:	e7fe      	b.n	800198a <HardFault_Handler+0x4>

0800198c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001990:	46c0      	nop			; (mov r8, r8)
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}

08001996 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001996:	b580      	push	{r7, lr}
 8001998:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800199a:	46c0      	nop			; (mov r8, r8)
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019a4:	f000 f8d4 	bl	8001b50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a8:	46c0      	nop			; (mov r8, r8)
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 80019b2:	46c0      	nop			; (mov r8, r8)
 80019b4:	46bd      	mov	sp, r7
 80019b6:	bd80      	pop	{r7, pc}

080019b8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 80019bc:	4b03      	ldr	r3, [pc, #12]	; (80019cc <DMA1_Channel1_IRQHandler+0x14>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f000 fd93 	bl	80024ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019c4:	46c0      	nop			; (mov r8, r8)
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	46c0      	nop			; (mov r8, r8)
 80019cc:	2000006c 	.word	0x2000006c

080019d0 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80019d4:	4b03      	ldr	r3, [pc, #12]	; (80019e4 <DMA1_Channel2_3_IRQHandler+0x14>)
 80019d6:	0018      	movs	r0, r3
 80019d8:	f000 fd87 	bl	80024ea <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80019dc:	46c0      	nop			; (mov r8, r8)
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	46c0      	nop			; (mov r8, r8)
 80019e4:	200001d8 	.word	0x200001d8

080019e8 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80019ec:	4b03      	ldr	r3, [pc, #12]	; (80019fc <ADC1_IRQHandler+0x14>)
 80019ee:	0018      	movs	r0, r3
 80019f0:	f000 fa26 	bl	8001e40 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80019f4:	46c0      	nop			; (mov r8, r8)
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	46c0      	nop			; (mov r8, r8)
 80019fc:	2000002c 	.word	0x2000002c

08001a00 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a04:	4b03      	ldr	r3, [pc, #12]	; (8001a14 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8001a06:	0018      	movs	r0, r3
 8001a08:	f002 f93c 	bl	8003c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8001a0c:	46c0      	nop			; (mov r8, r8)
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	46c0      	nop			; (mov r8, r8)
 8001a14:	200000c0 	.word	0x200000c0

08001a18 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001a1c:	4b03      	ldr	r3, [pc, #12]	; (8001a2c <TIM1_CC_IRQHandler+0x14>)
 8001a1e:	0018      	movs	r0, r3
 8001a20:	f002 f930 	bl	8003c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001a24:	46c0      	nop			; (mov r8, r8)
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
 8001a2a:	46c0      	nop			; (mov r8, r8)
 8001a2c:	200000c0 	.word	0x200000c0

08001a30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <TIM3_IRQHandler+0x14>)
 8001a36:	0018      	movs	r0, r3
 8001a38:	f002 f924 	bl	8003c84 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001a3c:	46c0      	nop			; (mov r8, r8)
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
 8001a42:	46c0      	nop			; (mov r8, r8)
 8001a44:	20000108 	.word	0x20000108

08001a48 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a4c:	4b03      	ldr	r3, [pc, #12]	; (8001a5c <USART1_IRQHandler+0x14>)
 8001a4e:	0018      	movs	r0, r3
 8001a50:	f002 fef4 	bl	800483c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001a54:	46c0      	nop			; (mov r8, r8)
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	46c0      	nop			; (mov r8, r8)
 8001a5c:	20000150 	.word	0x20000150

08001a60 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001a64:	46c0      	nop			; (mov r8, r8)
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
	...

08001a6c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001a6c:	480d      	ldr	r0, [pc, #52]	; (8001aa4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001a6e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001a70:	480d      	ldr	r0, [pc, #52]	; (8001aa8 <LoopForever+0x6>)
  ldr r1, =_edata
 8001a72:	490e      	ldr	r1, [pc, #56]	; (8001aac <LoopForever+0xa>)
  ldr r2, =_sidata
 8001a74:	4a0e      	ldr	r2, [pc, #56]	; (8001ab0 <LoopForever+0xe>)
  movs r3, #0
 8001a76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001a78:	e002      	b.n	8001a80 <LoopCopyDataInit>

08001a7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001a7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001a7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001a7e:	3304      	adds	r3, #4

08001a80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001a80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001a82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001a84:	d3f9      	bcc.n	8001a7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001a86:	4a0b      	ldr	r2, [pc, #44]	; (8001ab4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001a88:	4c0b      	ldr	r4, [pc, #44]	; (8001ab8 <LoopForever+0x16>)
  movs r3, #0
 8001a8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001a8c:	e001      	b.n	8001a92 <LoopFillZerobss>

08001a8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001a8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001a90:	3204      	adds	r2, #4

08001a92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001a92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001a94:	d3fb      	bcc.n	8001a8e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001a96:	f7ff ffe3 	bl	8001a60 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001a9a:	f003 fd47 	bl	800552c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001a9e:	f7fe ffc9 	bl	8000a34 <main>

08001aa2 <LoopForever>:

LoopForever:
    b LoopForever
 8001aa2:	e7fe      	b.n	8001aa2 <LoopForever>
  ldr   r0, =_estack
 8001aa4:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001aa8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001aac:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001ab0:	08005608 	.word	0x08005608
  ldr r2, =_sbss
 8001ab4:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001ab8:	20000358 	.word	0x20000358

08001abc <DMA1_Channel4_5_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001abc:	e7fe      	b.n	8001abc <DMA1_Channel4_5_IRQHandler>
	...

08001ac0 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001ac4:	4b07      	ldr	r3, [pc, #28]	; (8001ae4 <HAL_Init+0x24>)
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	4b06      	ldr	r3, [pc, #24]	; (8001ae4 <HAL_Init+0x24>)
 8001aca:	2110      	movs	r1, #16
 8001acc:	430a      	orrs	r2, r1
 8001ace:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001ad0:	2003      	movs	r0, #3
 8001ad2:	f000 f809 	bl	8001ae8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001ad6:	f7ff fd97 	bl	8001608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001ada:	2300      	movs	r3, #0
}
 8001adc:	0018      	movs	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	46c0      	nop			; (mov r8, r8)
 8001ae4:	40022000 	.word	0x40022000

08001ae8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ae8:	b590      	push	{r4, r7, lr}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001af0:	4b14      	ldr	r3, [pc, #80]	; (8001b44 <HAL_InitTick+0x5c>)
 8001af2:	681c      	ldr	r4, [r3, #0]
 8001af4:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_InitTick+0x60>)
 8001af6:	781b      	ldrb	r3, [r3, #0]
 8001af8:	0019      	movs	r1, r3
 8001afa:	23fa      	movs	r3, #250	; 0xfa
 8001afc:	0098      	lsls	r0, r3, #2
 8001afe:	f7fe fb03 	bl	8000108 <__udivsi3>
 8001b02:	0003      	movs	r3, r0
 8001b04:	0019      	movs	r1, r3
 8001b06:	0020      	movs	r0, r4
 8001b08:	f7fe fafe 	bl	8000108 <__udivsi3>
 8001b0c:	0003      	movs	r3, r0
 8001b0e:	0018      	movs	r0, r3
 8001b10:	f000 fc19 	bl	8002346 <HAL_SYSTICK_Config>
 8001b14:	1e03      	subs	r3, r0, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00f      	b.n	8001b3c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	d80b      	bhi.n	8001b3a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	2301      	movs	r3, #1
 8001b26:	425b      	negs	r3, r3
 8001b28:	2200      	movs	r2, #0
 8001b2a:	0018      	movs	r0, r3
 8001b2c:	f000 fbe6 	bl	80022fc <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001b30:	4b06      	ldr	r3, [pc, #24]	; (8001b4c <HAL_InitTick+0x64>)
 8001b32:	687a      	ldr	r2, [r7, #4]
 8001b34:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 8001b36:	2300      	movs	r3, #0
 8001b38:	e000      	b.n	8001b3c <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001b3a:	2301      	movs	r3, #1
}
 8001b3c:	0018      	movs	r0, r3
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	b003      	add	sp, #12
 8001b42:	bd90      	pop	{r4, r7, pc}
 8001b44:	20000004 	.word	0x20000004
 8001b48:	2000000c 	.word	0x2000000c
 8001b4c:	20000008 	.word	0x20000008

08001b50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <HAL_IncTick+0x1c>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
 8001b58:	001a      	movs	r2, r3
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <HAL_IncTick+0x20>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	18d2      	adds	r2, r2, r3
 8001b60:	4b03      	ldr	r3, [pc, #12]	; (8001b70 <HAL_IncTick+0x20>)
 8001b62:	601a      	str	r2, [r3, #0]
}
 8001b64:	46c0      	nop			; (mov r8, r8)
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	2000000c 	.word	0x2000000c
 8001b70:	20000330 	.word	0x20000330

08001b74 <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  return uwTick;
 8001b78:	4b02      	ldr	r3, [pc, #8]	; (8001b84 <HAL_GetTick+0x10>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
}
 8001b7c:	0018      	movs	r0, r3
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	46c0      	nop			; (mov r8, r8)
 8001b84:	20000330 	.word	0x20000330

08001b88 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001b8c:	4b04      	ldr	r3, [pc, #16]	; (8001ba0 <HAL_SuspendTick+0x18>)
 8001b8e:	681a      	ldr	r2, [r3, #0]
 8001b90:	4b03      	ldr	r3, [pc, #12]	; (8001ba0 <HAL_SuspendTick+0x18>)
 8001b92:	2102      	movs	r1, #2
 8001b94:	438a      	bics	r2, r1
 8001b96:	601a      	str	r2, [r3, #0]
}
 8001b98:	46c0      	nop			; (mov r8, r8)
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	46c0      	nop			; (mov r8, r8)
 8001ba0:	e000e010 	.word	0xe000e010

08001ba4 <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8001ba8:	4b04      	ldr	r3, [pc, #16]	; (8001bbc <HAL_ResumeTick+0x18>)
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	4b03      	ldr	r3, [pc, #12]	; (8001bbc <HAL_ResumeTick+0x18>)
 8001bae:	2102      	movs	r1, #2
 8001bb0:	430a      	orrs	r2, r1
 8001bb2:	601a      	str	r2, [r3, #0]
}
 8001bb4:	46c0      	nop			; (mov r8, r8)
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}
 8001bba:	46c0      	nop			; (mov r8, r8)
 8001bbc:	e000e010 	.word	0xe000e010

08001bc0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001bc8:	230f      	movs	r3, #15
 8001bca:	18fb      	adds	r3, r7, r3
 8001bcc:	2200      	movs	r2, #0
 8001bce:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e125      	b.n	8001e2a <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d10a      	bne.n	8001bfc <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2234      	movs	r2, #52	; 0x34
 8001bf0:	2100      	movs	r1, #0
 8001bf2:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	0018      	movs	r0, r3
 8001bf8:	f7ff fd32 	bl	8001660 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c00:	2210      	movs	r2, #16
 8001c02:	4013      	ands	r3, r2
 8001c04:	d000      	beq.n	8001c08 <HAL_ADC_Init+0x48>
 8001c06:	e103      	b.n	8001e10 <HAL_ADC_Init+0x250>
 8001c08:	230f      	movs	r3, #15
 8001c0a:	18fb      	adds	r3, r7, r3
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d000      	beq.n	8001c14 <HAL_ADC_Init+0x54>
 8001c12:	e0fd      	b.n	8001e10 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	689b      	ldr	r3, [r3, #8]
 8001c1a:	2204      	movs	r2, #4
 8001c1c:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001c1e:	d000      	beq.n	8001c22 <HAL_ADC_Init+0x62>
 8001c20:	e0f6      	b.n	8001e10 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c26:	4a83      	ldr	r2, [pc, #524]	; (8001e34 <HAL_ADC_Init+0x274>)
 8001c28:	4013      	ands	r3, r2
 8001c2a:	2202      	movs	r2, #2
 8001c2c:	431a      	orrs	r2, r3
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	689b      	ldr	r3, [r3, #8]
 8001c38:	2203      	movs	r2, #3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	2b01      	cmp	r3, #1
 8001c3e:	d112      	bne.n	8001c66 <HAL_ADC_Init+0xa6>
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	2201      	movs	r2, #1
 8001c48:	4013      	ands	r3, r2
 8001c4a:	2b01      	cmp	r3, #1
 8001c4c:	d009      	beq.n	8001c62 <HAL_ADC_Init+0xa2>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68da      	ldr	r2, [r3, #12]
 8001c54:	2380      	movs	r3, #128	; 0x80
 8001c56:	021b      	lsls	r3, r3, #8
 8001c58:	401a      	ands	r2, r3
 8001c5a:	2380      	movs	r3, #128	; 0x80
 8001c5c:	021b      	lsls	r3, r3, #8
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d101      	bne.n	8001c66 <HAL_ADC_Init+0xa6>
 8001c62:	2301      	movs	r3, #1
 8001c64:	e000      	b.n	8001c68 <HAL_ADC_Init+0xa8>
 8001c66:	2300      	movs	r3, #0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d116      	bne.n	8001c9a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	68db      	ldr	r3, [r3, #12]
 8001c72:	2218      	movs	r2, #24
 8001c74:	4393      	bics	r3, r2
 8001c76:	0019      	movs	r1, r3
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	430a      	orrs	r2, r1
 8001c82:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	691b      	ldr	r3, [r3, #16]
 8001c8a:	009b      	lsls	r3, r3, #2
 8001c8c:	0899      	lsrs	r1, r3, #2
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685a      	ldr	r2, [r3, #4]
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	430a      	orrs	r2, r1
 8001c98:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	68da      	ldr	r2, [r3, #12]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4964      	ldr	r1, [pc, #400]	; (8001e38 <HAL_ADC_Init+0x278>)
 8001ca6:	400a      	ands	r2, r1
 8001ca8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	7e1b      	ldrb	r3, [r3, #24]
 8001cae:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	7e5b      	ldrb	r3, [r3, #25]
 8001cb4:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cb6:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	7e9b      	ldrb	r3, [r3, #26]
 8001cbc:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cbe:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	d002      	beq.n	8001cce <HAL_ADC_Init+0x10e>
 8001cc8:	2380      	movs	r3, #128	; 0x80
 8001cca:	015b      	lsls	r3, r3, #5
 8001ccc:	e000      	b.n	8001cd0 <HAL_ADC_Init+0x110>
 8001cce:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001cd0:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001cd6:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	691b      	ldr	r3, [r3, #16]
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d101      	bne.n	8001ce4 <HAL_ADC_Init+0x124>
 8001ce0:	2304      	movs	r3, #4
 8001ce2:	e000      	b.n	8001ce6 <HAL_ADC_Init+0x126>
 8001ce4:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001ce6:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2124      	movs	r1, #36	; 0x24
 8001cec:	5c5b      	ldrb	r3, [r3, r1]
 8001cee:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001cf0:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cf2:	68ba      	ldr	r2, [r7, #8]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	7edb      	ldrb	r3, [r3, #27]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d115      	bne.n	8001d2c <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	7e9b      	ldrb	r3, [r3, #26]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d105      	bne.n	8001d14 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2280      	movs	r2, #128	; 0x80
 8001d0c:	0252      	lsls	r2, r2, #9
 8001d0e:	4313      	orrs	r3, r2
 8001d10:	60bb      	str	r3, [r7, #8]
 8001d12:	e00b      	b.n	8001d2c <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d18:	2220      	movs	r2, #32
 8001d1a:	431a      	orrs	r2, r3
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d24:	2201      	movs	r2, #1
 8001d26:	431a      	orrs	r2, r3
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	69da      	ldr	r2, [r3, #28]
 8001d30:	23c2      	movs	r3, #194	; 0xc2
 8001d32:	33ff      	adds	r3, #255	; 0xff
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d007      	beq.n	8001d48 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d40:	4313      	orrs	r3, r2
 8001d42:	68ba      	ldr	r2, [r7, #8]
 8001d44:	4313      	orrs	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	68d9      	ldr	r1, [r3, #12]
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	68ba      	ldr	r2, [r7, #8]
 8001d54:	430a      	orrs	r2, r1
 8001d56:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	055b      	lsls	r3, r3, #21
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d01b      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d68:	2b01      	cmp	r3, #1
 8001d6a:	d017      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d70:	2b02      	cmp	r3, #2
 8001d72:	d013      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d78:	2b03      	cmp	r3, #3
 8001d7a:	d00f      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d80:	2b04      	cmp	r3, #4
 8001d82:	d00b      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d88:	2b05      	cmp	r3, #5
 8001d8a:	d007      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d90:	2b06      	cmp	r3, #6
 8001d92:	d003      	beq.n	8001d9c <HAL_ADC_Init+0x1dc>
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d98:	2b07      	cmp	r3, #7
 8001d9a:	d112      	bne.n	8001dc2 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	695a      	ldr	r2, [r3, #20]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2107      	movs	r1, #7
 8001da8:	438a      	bics	r2, r1
 8001daa:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	6959      	ldr	r1, [r3, #20]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001db6:	2207      	movs	r2, #7
 8001db8:	401a      	ands	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	68db      	ldr	r3, [r3, #12]
 8001dc8:	4a1c      	ldr	r2, [pc, #112]	; (8001e3c <HAL_ADC_Init+0x27c>)
 8001dca:	4013      	ands	r3, r2
 8001dcc:	68ba      	ldr	r2, [r7, #8]
 8001dce:	429a      	cmp	r2, r3
 8001dd0:	d10b      	bne.n	8001dea <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ddc:	2203      	movs	r2, #3
 8001dde:	4393      	bics	r3, r2
 8001de0:	2201      	movs	r2, #1
 8001de2:	431a      	orrs	r2, r3
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001de8:	e01c      	b.n	8001e24 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dee:	2212      	movs	r2, #18
 8001df0:	4393      	bics	r3, r2
 8001df2:	2210      	movs	r2, #16
 8001df4:	431a      	orrs	r2, r3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dfe:	2201      	movs	r2, #1
 8001e00:	431a      	orrs	r2, r3
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001e06:	230f      	movs	r3, #15
 8001e08:	18fb      	adds	r3, r7, r3
 8001e0a:	2201      	movs	r2, #1
 8001e0c:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001e0e:	e009      	b.n	8001e24 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e14:	2210      	movs	r2, #16
 8001e16:	431a      	orrs	r2, r3
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001e1c:	230f      	movs	r3, #15
 8001e1e:	18fb      	adds	r3, r7, r3
 8001e20:	2201      	movs	r2, #1
 8001e22:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001e24:	230f      	movs	r3, #15
 8001e26:	18fb      	adds	r3, r7, r3
 8001e28:	781b      	ldrb	r3, [r3, #0]
}
 8001e2a:	0018      	movs	r0, r3
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	b004      	add	sp, #16
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	46c0      	nop			; (mov r8, r8)
 8001e34:	fffffefd 	.word	0xfffffefd
 8001e38:	fffe0219 	.word	0xfffe0219
 8001e3c:	833fffe7 	.word	0x833fffe7

08001e40 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	685b      	ldr	r3, [r3, #4]
 8001e56:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2204      	movs	r2, #4
 8001e5c:	4013      	ands	r3, r2
 8001e5e:	d003      	beq.n	8001e68 <HAL_ADC_IRQHandler+0x28>
 8001e60:	68bb      	ldr	r3, [r7, #8]
 8001e62:	2204      	movs	r2, #4
 8001e64:	4013      	ands	r3, r2
 8001e66:	d107      	bne.n	8001e78 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2208      	movs	r2, #8
 8001e6c:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001e6e:	d049      	beq.n	8001f04 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	2208      	movs	r2, #8
 8001e74:	4013      	ands	r3, r2
 8001e76:	d045      	beq.n	8001f04 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e7c:	2210      	movs	r2, #16
 8001e7e:	4013      	ands	r3, r2
 8001e80:	d106      	bne.n	8001e90 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e86:	2280      	movs	r2, #128	; 0x80
 8001e88:	0092      	lsls	r2, r2, #2
 8001e8a:	431a      	orrs	r2, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	68da      	ldr	r2, [r3, #12]
 8001e96:	23c0      	movs	r3, #192	; 0xc0
 8001e98:	011b      	lsls	r3, r3, #4
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	d12a      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d126      	bne.n	8001ef4 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2208      	movs	r2, #8
 8001eaa:	4013      	ands	r3, r2
 8001eac:	d022      	beq.n	8001ef4 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	689b      	ldr	r3, [r3, #8]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	d110      	bne.n	8001edc <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	685a      	ldr	r2, [r3, #4]
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	210c      	movs	r1, #12
 8001ec6:	438a      	bics	r2, r1
 8001ec8:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ece:	4a2d      	ldr	r2, [pc, #180]	; (8001f84 <HAL_ADC_IRQHandler+0x144>)
 8001ed0:	4013      	ands	r3, r2
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	431a      	orrs	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	639a      	str	r2, [r3, #56]	; 0x38
 8001eda:	e00b      	b.n	8001ef4 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ee0:	2220      	movs	r2, #32
 8001ee2:	431a      	orrs	r2, r3
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eec:	2201      	movs	r2, #1
 8001eee:	431a      	orrs	r2, r3
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	0018      	movs	r0, r3
 8001ef8:	f000 f846 	bl	8001f88 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	220c      	movs	r2, #12
 8001f02:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	2280      	movs	r2, #128	; 0x80
 8001f08:	4013      	ands	r3, r2
 8001f0a:	d012      	beq.n	8001f32 <HAL_ADC_IRQHandler+0xf2>
 8001f0c:	68bb      	ldr	r3, [r7, #8]
 8001f0e:	2280      	movs	r2, #128	; 0x80
 8001f10:	4013      	ands	r3, r2
 8001f12:	d00e      	beq.n	8001f32 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f18:	2280      	movs	r2, #128	; 0x80
 8001f1a:	0252      	lsls	r2, r2, #9
 8001f1c:	431a      	orrs	r2, r3
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	0018      	movs	r0, r3
 8001f26:	f000 f837 	bl	8001f98 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	2280      	movs	r2, #128	; 0x80
 8001f30:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	2210      	movs	r2, #16
 8001f36:	4013      	ands	r3, r2
 8001f38:	d020      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x13c>
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	4013      	ands	r3, r2
 8001f40:	d01c      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f46:	2b01      	cmp	r3, #1
 8001f48:	d006      	beq.n	8001f58 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	68db      	ldr	r3, [r3, #12]
 8001f50:	2201      	movs	r2, #1
 8001f52:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001f54:	2b01      	cmp	r3, #1
 8001f56:	d10d      	bne.n	8001f74 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	2202      	movs	r2, #2
 8001f5e:	431a      	orrs	r2, r3
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	2210      	movs	r2, #16
 8001f6a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	0018      	movs	r0, r3
 8001f70:	f000 f81a 	bl	8001fa8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	2210      	movs	r2, #16
 8001f7a:	601a      	str	r2, [r3, #0]
  }

}
 8001f7c:	46c0      	nop			; (mov r8, r8)
 8001f7e:	46bd      	mov	sp, r7
 8001f80:	b004      	add	sp, #16
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	fffffefe 	.word	0xfffffefe

08001f88 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b082      	sub	sp, #8
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001f90:	46c0      	nop			; (mov r8, r8)
 8001f92:	46bd      	mov	sp, r7
 8001f94:	b002      	add	sp, #8
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b082      	sub	sp, #8
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001fa0:	46c0      	nop			; (mov r8, r8)
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	b002      	add	sp, #8
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001fa8:	b580      	push	{r7, lr}
 8001faa:	b082      	sub	sp, #8
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001fb0:	46c0      	nop			; (mov r8, r8)
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b002      	add	sp, #8
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b084      	sub	sp, #16
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
 8001fc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001fc2:	230f      	movs	r3, #15
 8001fc4:	18fb      	adds	r3, r7, r3
 8001fc6:	2200      	movs	r2, #0
 8001fc8:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fd2:	2380      	movs	r3, #128	; 0x80
 8001fd4:	055b      	lsls	r3, r3, #21
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d011      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d00d      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fe6:	2b02      	cmp	r3, #2
 8001fe8:	d009      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fee:	2b03      	cmp	r3, #3
 8001ff0:	d005      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ff6:	2b04      	cmp	r3, #4
 8001ff8:	d001      	beq.n	8001ffe <HAL_ADC_ConfigChannel+0x46>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	2234      	movs	r2, #52	; 0x34
 8002002:	5c9b      	ldrb	r3, [r3, r2]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d101      	bne.n	800200c <HAL_ADC_ConfigChannel+0x54>
 8002008:	2302      	movs	r3, #2
 800200a:	e0bb      	b.n	8002184 <HAL_ADC_ConfigChannel+0x1cc>
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2234      	movs	r2, #52	; 0x34
 8002010:	2101      	movs	r1, #1
 8002012:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2204      	movs	r2, #4
 800201c:	4013      	ands	r3, r2
 800201e:	d000      	beq.n	8002022 <HAL_ADC_ConfigChannel+0x6a>
 8002020:	e09f      	b.n	8002162 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	4a59      	ldr	r2, [pc, #356]	; (800218c <HAL_ADC_ConfigChannel+0x1d4>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d100      	bne.n	800202e <HAL_ADC_ConfigChannel+0x76>
 800202c:	e077      	b.n	800211e <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8002034:	683b      	ldr	r3, [r7, #0]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	2201      	movs	r2, #1
 800203a:	409a      	lsls	r2, r3
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	430a      	orrs	r2, r1
 8002042:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002048:	2380      	movs	r3, #128	; 0x80
 800204a:	055b      	lsls	r3, r3, #21
 800204c:	429a      	cmp	r2, r3
 800204e:	d037      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002054:	2b01      	cmp	r3, #1
 8002056:	d033      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800205c:	2b02      	cmp	r3, #2
 800205e:	d02f      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002064:	2b03      	cmp	r3, #3
 8002066:	d02b      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800206c:	2b04      	cmp	r3, #4
 800206e:	d027      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002074:	2b05      	cmp	r3, #5
 8002076:	d023      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800207c:	2b06      	cmp	r3, #6
 800207e:	d01f      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002084:	2b07      	cmp	r3, #7
 8002086:	d01b      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	689a      	ldr	r2, [r3, #8]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	695b      	ldr	r3, [r3, #20]
 8002092:	2107      	movs	r1, #7
 8002094:	400b      	ands	r3, r1
 8002096:	429a      	cmp	r2, r3
 8002098:	d012      	beq.n	80020c0 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	695a      	ldr	r2, [r3, #20]
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	2107      	movs	r1, #7
 80020a6:	438a      	bics	r2, r1
 80020a8:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6959      	ldr	r1, [r3, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	2207      	movs	r2, #7
 80020b6:	401a      	ands	r2, r3
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	430a      	orrs	r2, r1
 80020be:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	2b10      	cmp	r3, #16
 80020c6:	d003      	beq.n	80020d0 <HAL_ADC_ConfigChannel+0x118>
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	2b11      	cmp	r3, #17
 80020ce:	d152      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80020d0:	4b2f      	ldr	r3, [pc, #188]	; (8002190 <HAL_ADC_ConfigChannel+0x1d8>)
 80020d2:	6819      	ldr	r1, [r3, #0]
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	2b10      	cmp	r3, #16
 80020da:	d102      	bne.n	80020e2 <HAL_ADC_ConfigChannel+0x12a>
 80020dc:	2380      	movs	r3, #128	; 0x80
 80020de:	041b      	lsls	r3, r3, #16
 80020e0:	e001      	b.n	80020e6 <HAL_ADC_ConfigChannel+0x12e>
 80020e2:	2380      	movs	r3, #128	; 0x80
 80020e4:	03db      	lsls	r3, r3, #15
 80020e6:	4a2a      	ldr	r2, [pc, #168]	; (8002190 <HAL_ADC_ConfigChannel+0x1d8>)
 80020e8:	430b      	orrs	r3, r1
 80020ea:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2b10      	cmp	r3, #16
 80020f2:	d140      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80020f4:	4b27      	ldr	r3, [pc, #156]	; (8002194 <HAL_ADC_ConfigChannel+0x1dc>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4927      	ldr	r1, [pc, #156]	; (8002198 <HAL_ADC_ConfigChannel+0x1e0>)
 80020fa:	0018      	movs	r0, r3
 80020fc:	f7fe f804 	bl	8000108 <__udivsi3>
 8002100:	0003      	movs	r3, r0
 8002102:	001a      	movs	r2, r3
 8002104:	0013      	movs	r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	189b      	adds	r3, r3, r2
 800210a:	005b      	lsls	r3, r3, #1
 800210c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800210e:	e002      	b.n	8002116 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	3b01      	subs	r3, #1
 8002114:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	2b00      	cmp	r3, #0
 800211a:	d1f9      	bne.n	8002110 <HAL_ADC_ConfigChannel+0x158>
 800211c:	e02b      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2101      	movs	r1, #1
 800212a:	4099      	lsls	r1, r3
 800212c:	000b      	movs	r3, r1
 800212e:	43d9      	mvns	r1, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	400a      	ands	r2, r1
 8002136:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002138:	683b      	ldr	r3, [r7, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	2b10      	cmp	r3, #16
 800213e:	d003      	beq.n	8002148 <HAL_ADC_ConfigChannel+0x190>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2b11      	cmp	r3, #17
 8002146:	d116      	bne.n	8002176 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002148:	4b11      	ldr	r3, [pc, #68]	; (8002190 <HAL_ADC_ConfigChannel+0x1d8>)
 800214a:	6819      	ldr	r1, [r3, #0]
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	2b10      	cmp	r3, #16
 8002152:	d101      	bne.n	8002158 <HAL_ADC_ConfigChannel+0x1a0>
 8002154:	4a11      	ldr	r2, [pc, #68]	; (800219c <HAL_ADC_ConfigChannel+0x1e4>)
 8002156:	e000      	b.n	800215a <HAL_ADC_ConfigChannel+0x1a2>
 8002158:	4a11      	ldr	r2, [pc, #68]	; (80021a0 <HAL_ADC_ConfigChannel+0x1e8>)
 800215a:	4b0d      	ldr	r3, [pc, #52]	; (8002190 <HAL_ADC_ConfigChannel+0x1d8>)
 800215c:	400a      	ands	r2, r1
 800215e:	601a      	str	r2, [r3, #0]
 8002160:	e009      	b.n	8002176 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002166:	2220      	movs	r2, #32
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 800216e:	230f      	movs	r3, #15
 8002170:	18fb      	adds	r3, r7, r3
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2234      	movs	r2, #52	; 0x34
 800217a:	2100      	movs	r1, #0
 800217c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 800217e:	230f      	movs	r3, #15
 8002180:	18fb      	adds	r3, r7, r3
 8002182:	781b      	ldrb	r3, [r3, #0]
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	b004      	add	sp, #16
 800218a:	bd80      	pop	{r7, pc}
 800218c:	00001001 	.word	0x00001001
 8002190:	40012708 	.word	0x40012708
 8002194:	20000004 	.word	0x20000004
 8002198:	000f4240 	.word	0x000f4240
 800219c:	ff7fffff 	.word	0xff7fffff
 80021a0:	ffbfffff 	.word	0xffbfffff

080021a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	b082      	sub	sp, #8
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	0002      	movs	r2, r0
 80021ac:	1dfb      	adds	r3, r7, #7
 80021ae:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021b0:	1dfb      	adds	r3, r7, #7
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	2b7f      	cmp	r3, #127	; 0x7f
 80021b6:	d809      	bhi.n	80021cc <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021b8:	1dfb      	adds	r3, r7, #7
 80021ba:	781b      	ldrb	r3, [r3, #0]
 80021bc:	001a      	movs	r2, r3
 80021be:	231f      	movs	r3, #31
 80021c0:	401a      	ands	r2, r3
 80021c2:	4b04      	ldr	r3, [pc, #16]	; (80021d4 <__NVIC_EnableIRQ+0x30>)
 80021c4:	2101      	movs	r1, #1
 80021c6:	4091      	lsls	r1, r2
 80021c8:	000a      	movs	r2, r1
 80021ca:	601a      	str	r2, [r3, #0]
  }
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	b002      	add	sp, #8
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	e000e100 	.word	0xe000e100

080021d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b083      	sub	sp, #12
 80021dc:	af00      	add	r7, sp, #0
 80021de:	0002      	movs	r2, r0
 80021e0:	6039      	str	r1, [r7, #0]
 80021e2:	1dfb      	adds	r3, r7, #7
 80021e4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80021e6:	1dfb      	adds	r3, r7, #7
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	2b7f      	cmp	r3, #127	; 0x7f
 80021ec:	d828      	bhi.n	8002240 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80021ee:	4a2f      	ldr	r2, [pc, #188]	; (80022ac <__NVIC_SetPriority+0xd4>)
 80021f0:	1dfb      	adds	r3, r7, #7
 80021f2:	781b      	ldrb	r3, [r3, #0]
 80021f4:	b25b      	sxtb	r3, r3
 80021f6:	089b      	lsrs	r3, r3, #2
 80021f8:	33c0      	adds	r3, #192	; 0xc0
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	589b      	ldr	r3, [r3, r2]
 80021fe:	1dfa      	adds	r2, r7, #7
 8002200:	7812      	ldrb	r2, [r2, #0]
 8002202:	0011      	movs	r1, r2
 8002204:	2203      	movs	r2, #3
 8002206:	400a      	ands	r2, r1
 8002208:	00d2      	lsls	r2, r2, #3
 800220a:	21ff      	movs	r1, #255	; 0xff
 800220c:	4091      	lsls	r1, r2
 800220e:	000a      	movs	r2, r1
 8002210:	43d2      	mvns	r2, r2
 8002212:	401a      	ands	r2, r3
 8002214:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	019b      	lsls	r3, r3, #6
 800221a:	22ff      	movs	r2, #255	; 0xff
 800221c:	401a      	ands	r2, r3
 800221e:	1dfb      	adds	r3, r7, #7
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	0018      	movs	r0, r3
 8002224:	2303      	movs	r3, #3
 8002226:	4003      	ands	r3, r0
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800222c:	481f      	ldr	r0, [pc, #124]	; (80022ac <__NVIC_SetPriority+0xd4>)
 800222e:	1dfb      	adds	r3, r7, #7
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	b25b      	sxtb	r3, r3
 8002234:	089b      	lsrs	r3, r3, #2
 8002236:	430a      	orrs	r2, r1
 8002238:	33c0      	adds	r3, #192	; 0xc0
 800223a:	009b      	lsls	r3, r3, #2
 800223c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800223e:	e031      	b.n	80022a4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002240:	4a1b      	ldr	r2, [pc, #108]	; (80022b0 <__NVIC_SetPriority+0xd8>)
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	0019      	movs	r1, r3
 8002248:	230f      	movs	r3, #15
 800224a:	400b      	ands	r3, r1
 800224c:	3b08      	subs	r3, #8
 800224e:	089b      	lsrs	r3, r3, #2
 8002250:	3306      	adds	r3, #6
 8002252:	009b      	lsls	r3, r3, #2
 8002254:	18d3      	adds	r3, r2, r3
 8002256:	3304      	adds	r3, #4
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	1dfa      	adds	r2, r7, #7
 800225c:	7812      	ldrb	r2, [r2, #0]
 800225e:	0011      	movs	r1, r2
 8002260:	2203      	movs	r2, #3
 8002262:	400a      	ands	r2, r1
 8002264:	00d2      	lsls	r2, r2, #3
 8002266:	21ff      	movs	r1, #255	; 0xff
 8002268:	4091      	lsls	r1, r2
 800226a:	000a      	movs	r2, r1
 800226c:	43d2      	mvns	r2, r2
 800226e:	401a      	ands	r2, r3
 8002270:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002272:	683b      	ldr	r3, [r7, #0]
 8002274:	019b      	lsls	r3, r3, #6
 8002276:	22ff      	movs	r2, #255	; 0xff
 8002278:	401a      	ands	r2, r3
 800227a:	1dfb      	adds	r3, r7, #7
 800227c:	781b      	ldrb	r3, [r3, #0]
 800227e:	0018      	movs	r0, r3
 8002280:	2303      	movs	r3, #3
 8002282:	4003      	ands	r3, r0
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002288:	4809      	ldr	r0, [pc, #36]	; (80022b0 <__NVIC_SetPriority+0xd8>)
 800228a:	1dfb      	adds	r3, r7, #7
 800228c:	781b      	ldrb	r3, [r3, #0]
 800228e:	001c      	movs	r4, r3
 8002290:	230f      	movs	r3, #15
 8002292:	4023      	ands	r3, r4
 8002294:	3b08      	subs	r3, #8
 8002296:	089b      	lsrs	r3, r3, #2
 8002298:	430a      	orrs	r2, r1
 800229a:	3306      	adds	r3, #6
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	18c3      	adds	r3, r0, r3
 80022a0:	3304      	adds	r3, #4
 80022a2:	601a      	str	r2, [r3, #0]
}
 80022a4:	46c0      	nop			; (mov r8, r8)
 80022a6:	46bd      	mov	sp, r7
 80022a8:	b003      	add	sp, #12
 80022aa:	bd90      	pop	{r4, r7, pc}
 80022ac:	e000e100 	.word	0xe000e100
 80022b0:	e000ed00 	.word	0xe000ed00

080022b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022b4:	b580      	push	{r7, lr}
 80022b6:	b082      	sub	sp, #8
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	1e5a      	subs	r2, r3, #1
 80022c0:	2380      	movs	r3, #128	; 0x80
 80022c2:	045b      	lsls	r3, r3, #17
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d301      	bcc.n	80022cc <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022c8:	2301      	movs	r3, #1
 80022ca:	e010      	b.n	80022ee <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022cc:	4b0a      	ldr	r3, [pc, #40]	; (80022f8 <SysTick_Config+0x44>)
 80022ce:	687a      	ldr	r2, [r7, #4]
 80022d0:	3a01      	subs	r2, #1
 80022d2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022d4:	2301      	movs	r3, #1
 80022d6:	425b      	negs	r3, r3
 80022d8:	2103      	movs	r1, #3
 80022da:	0018      	movs	r0, r3
 80022dc:	f7ff ff7c 	bl	80021d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e0:	4b05      	ldr	r3, [pc, #20]	; (80022f8 <SysTick_Config+0x44>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022e6:	4b04      	ldr	r3, [pc, #16]	; (80022f8 <SysTick_Config+0x44>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	0018      	movs	r0, r3
 80022f0:	46bd      	mov	sp, r7
 80022f2:	b002      	add	sp, #8
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	46c0      	nop			; (mov r8, r8)
 80022f8:	e000e010 	.word	0xe000e010

080022fc <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b084      	sub	sp, #16
 8002300:	af00      	add	r7, sp, #0
 8002302:	60b9      	str	r1, [r7, #8]
 8002304:	607a      	str	r2, [r7, #4]
 8002306:	210f      	movs	r1, #15
 8002308:	187b      	adds	r3, r7, r1
 800230a:	1c02      	adds	r2, r0, #0
 800230c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800230e:	68ba      	ldr	r2, [r7, #8]
 8002310:	187b      	adds	r3, r7, r1
 8002312:	781b      	ldrb	r3, [r3, #0]
 8002314:	b25b      	sxtb	r3, r3
 8002316:	0011      	movs	r1, r2
 8002318:	0018      	movs	r0, r3
 800231a:	f7ff ff5d 	bl	80021d8 <__NVIC_SetPriority>
}
 800231e:	46c0      	nop			; (mov r8, r8)
 8002320:	46bd      	mov	sp, r7
 8002322:	b004      	add	sp, #16
 8002324:	bd80      	pop	{r7, pc}

08002326 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	0002      	movs	r2, r0
 800232e:	1dfb      	adds	r3, r7, #7
 8002330:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002332:	1dfb      	adds	r3, r7, #7
 8002334:	781b      	ldrb	r3, [r3, #0]
 8002336:	b25b      	sxtb	r3, r3
 8002338:	0018      	movs	r0, r3
 800233a:	f7ff ff33 	bl	80021a4 <__NVIC_EnableIRQ>
}
 800233e:	46c0      	nop			; (mov r8, r8)
 8002340:	46bd      	mov	sp, r7
 8002342:	b002      	add	sp, #8
 8002344:	bd80      	pop	{r7, pc}

08002346 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b082      	sub	sp, #8
 800234a:	af00      	add	r7, sp, #0
 800234c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	0018      	movs	r0, r3
 8002352:	f7ff ffaf 	bl	80022b4 <SysTick_Config>
 8002356:	0003      	movs	r3, r0
}
 8002358:	0018      	movs	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	b002      	add	sp, #8
 800235e:	bd80      	pop	{r7, pc}

08002360 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	b084      	sub	sp, #16
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002368:	2300      	movs	r3, #0
 800236a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e036      	b.n	80023e4 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2221      	movs	r2, #33	; 0x21
 800237a:	2102      	movs	r1, #2
 800237c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	4a18      	ldr	r2, [pc, #96]	; (80023ec <HAL_DMA_Init+0x8c>)
 800238a:	4013      	ands	r3, r2
 800238c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002396:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80023a2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	695b      	ldr	r3, [r3, #20]
 80023a8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80023ae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	69db      	ldr	r3, [r3, #28]
 80023b4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	4313      	orrs	r3, r2
 80023ba:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68fa      	ldr	r2, [r7, #12]
 80023c2:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	0018      	movs	r0, r3
 80023c8:	f000 f932 	bl	8002630 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	2200      	movs	r2, #0
 80023d0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	2221      	movs	r2, #33	; 0x21
 80023d6:	2101      	movs	r1, #1
 80023d8:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2220      	movs	r2, #32
 80023de:	2100      	movs	r1, #0
 80023e0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	0018      	movs	r0, r3
 80023e6:	46bd      	mov	sp, r7
 80023e8:	b004      	add	sp, #16
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	ffffc00f 	.word	0xffffc00f

080023f0 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b082      	sub	sp, #8
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	2221      	movs	r2, #33	; 0x21
 80023fc:	5c9b      	ldrb	r3, [r3, r2]
 80023fe:	b2db      	uxtb	r3, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d008      	beq.n	8002416 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2204      	movs	r2, #4
 8002408:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2220      	movs	r2, #32
 800240e:	2100      	movs	r1, #0
 8002410:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	e020      	b.n	8002458 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	681a      	ldr	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	210e      	movs	r1, #14
 8002422:	438a      	bics	r2, r1
 8002424:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	2101      	movs	r1, #1
 8002432:	438a      	bics	r2, r1
 8002434:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800243e:	2101      	movs	r1, #1
 8002440:	4091      	lsls	r1, r2
 8002442:	000a      	movs	r2, r1
 8002444:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2221      	movs	r2, #33	; 0x21
 800244a:	2101      	movs	r1, #1
 800244c:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	2220      	movs	r2, #32
 8002452:	2100      	movs	r1, #0
 8002454:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002456:	2300      	movs	r3, #0
}
 8002458:	0018      	movs	r0, r3
 800245a:	46bd      	mov	sp, r7
 800245c:	b002      	add	sp, #8
 800245e:	bd80      	pop	{r7, pc}

08002460 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b084      	sub	sp, #16
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002468:	210f      	movs	r1, #15
 800246a:	187b      	adds	r3, r7, r1
 800246c:	2200      	movs	r2, #0
 800246e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2221      	movs	r2, #33	; 0x21
 8002474:	5c9b      	ldrb	r3, [r3, r2]
 8002476:	b2db      	uxtb	r3, r3
 8002478:	2b02      	cmp	r3, #2
 800247a:	d006      	beq.n	800248a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	2204      	movs	r2, #4
 8002480:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002482:	187b      	adds	r3, r7, r1
 8002484:	2201      	movs	r2, #1
 8002486:	701a      	strb	r2, [r3, #0]
 8002488:	e028      	b.n	80024dc <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	681a      	ldr	r2, [r3, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	210e      	movs	r1, #14
 8002496:	438a      	bics	r2, r1
 8002498:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	2101      	movs	r1, #1
 80024a6:	438a      	bics	r2, r1
 80024a8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024b2:	2101      	movs	r1, #1
 80024b4:	4091      	lsls	r1, r2
 80024b6:	000a      	movs	r2, r1
 80024b8:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	2221      	movs	r2, #33	; 0x21
 80024be:	2101      	movs	r1, #1
 80024c0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2220      	movs	r2, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d004      	beq.n	80024dc <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	0010      	movs	r0, r2
 80024da:	4798      	blx	r3
    }
  }
  return status;
 80024dc:	230f      	movs	r3, #15
 80024de:	18fb      	adds	r3, r7, r3
 80024e0:	781b      	ldrb	r3, [r3, #0]
}
 80024e2:	0018      	movs	r0, r3
 80024e4:	46bd      	mov	sp, r7
 80024e6:	b004      	add	sp, #16
 80024e8:	bd80      	pop	{r7, pc}

080024ea <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80024ea:	b580      	push	{r7, lr}
 80024ec:	b084      	sub	sp, #16
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002506:	2204      	movs	r2, #4
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	68fa      	ldr	r2, [r7, #12]
 800250e:	4013      	ands	r3, r2
 8002510:	d024      	beq.n	800255c <HAL_DMA_IRQHandler+0x72>
 8002512:	68bb      	ldr	r3, [r7, #8]
 8002514:	2204      	movs	r2, #4
 8002516:	4013      	ands	r3, r2
 8002518:	d020      	beq.n	800255c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2220      	movs	r2, #32
 8002522:	4013      	ands	r3, r2
 8002524:	d107      	bne.n	8002536 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	681a      	ldr	r2, [r3, #0]
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	2104      	movs	r1, #4
 8002532:	438a      	bics	r2, r1
 8002534:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800253e:	2104      	movs	r1, #4
 8002540:	4091      	lsls	r1, r2
 8002542:	000a      	movs	r2, r1
 8002544:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254a:	2b00      	cmp	r3, #0
 800254c:	d100      	bne.n	8002550 <HAL_DMA_IRQHandler+0x66>
 800254e:	e06a      	b.n	8002626 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	0010      	movs	r0, r2
 8002558:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800255a:	e064      	b.n	8002626 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002560:	2202      	movs	r2, #2
 8002562:	409a      	lsls	r2, r3
 8002564:	0013      	movs	r3, r2
 8002566:	68fa      	ldr	r2, [r7, #12]
 8002568:	4013      	ands	r3, r2
 800256a:	d02b      	beq.n	80025c4 <HAL_DMA_IRQHandler+0xda>
 800256c:	68bb      	ldr	r3, [r7, #8]
 800256e:	2202      	movs	r2, #2
 8002570:	4013      	ands	r3, r2
 8002572:	d027      	beq.n	80025c4 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	2220      	movs	r2, #32
 800257c:	4013      	ands	r3, r2
 800257e:	d10b      	bne.n	8002598 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	681a      	ldr	r2, [r3, #0]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	210a      	movs	r1, #10
 800258c:	438a      	bics	r2, r1
 800258e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2221      	movs	r2, #33	; 0x21
 8002594:	2101      	movs	r1, #1
 8002596:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025a0:	2102      	movs	r1, #2
 80025a2:	4091      	lsls	r1, r2
 80025a4:	000a      	movs	r2, r1
 80025a6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2220      	movs	r2, #32
 80025ac:	2100      	movs	r1, #0
 80025ae:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d036      	beq.n	8002626 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025bc:	687a      	ldr	r2, [r7, #4]
 80025be:	0010      	movs	r0, r2
 80025c0:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80025c2:	e030      	b.n	8002626 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025c8:	2208      	movs	r2, #8
 80025ca:	409a      	lsls	r2, r3
 80025cc:	0013      	movs	r3, r2
 80025ce:	68fa      	ldr	r2, [r7, #12]
 80025d0:	4013      	ands	r3, r2
 80025d2:	d028      	beq.n	8002626 <HAL_DMA_IRQHandler+0x13c>
 80025d4:	68bb      	ldr	r3, [r7, #8]
 80025d6:	2208      	movs	r2, #8
 80025d8:	4013      	ands	r3, r2
 80025da:	d024      	beq.n	8002626 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	681a      	ldr	r2, [r3, #0]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	210e      	movs	r1, #14
 80025e8:	438a      	bics	r2, r1
 80025ea:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80025f4:	2101      	movs	r1, #1
 80025f6:	4091      	lsls	r1, r2
 80025f8:	000a      	movs	r2, r1
 80025fa:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2221      	movs	r2, #33	; 0x21
 8002606:	2101      	movs	r1, #1
 8002608:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2220      	movs	r2, #32
 800260e:	2100      	movs	r1, #0
 8002610:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002616:	2b00      	cmp	r3, #0
 8002618:	d005      	beq.n	8002626 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261e:	687a      	ldr	r2, [r7, #4]
 8002620:	0010      	movs	r0, r2
 8002622:	4798      	blx	r3
    }
  }
}
 8002624:	e7ff      	b.n	8002626 <HAL_DMA_IRQHandler+0x13c>
 8002626:	46c0      	nop			; (mov r8, r8)
 8002628:	46bd      	mov	sp, r7
 800262a:	b004      	add	sp, #16
 800262c:	bd80      	pop	{r7, pc}
	...

08002630 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b082      	sub	sp, #8
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a08      	ldr	r2, [pc, #32]	; (8002660 <DMA_CalcBaseAndBitshift+0x30>)
 800263e:	4694      	mov	ip, r2
 8002640:	4463      	add	r3, ip
 8002642:	2114      	movs	r1, #20
 8002644:	0018      	movs	r0, r3
 8002646:	f7fd fd5f 	bl	8000108 <__udivsi3>
 800264a:	0003      	movs	r3, r0
 800264c:	009a      	lsls	r2, r3, #2
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	4a03      	ldr	r2, [pc, #12]	; (8002664 <DMA_CalcBaseAndBitshift+0x34>)
 8002656:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8002658:	46c0      	nop			; (mov r8, r8)
 800265a:	46bd      	mov	sp, r7
 800265c:	b002      	add	sp, #8
 800265e:	bd80      	pop	{r7, pc}
 8002660:	bffdfff8 	.word	0xbffdfff8
 8002664:	40020000 	.word	0x40020000

08002668 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002668:	b5f0      	push	{r4, r5, r6, r7, lr}
 800266a:	b087      	sub	sp, #28
 800266c:	af00      	add	r7, sp, #0
 800266e:	60f8      	str	r0, [r7, #12]
 8002670:	60b9      	str	r1, [r7, #8]
 8002672:	603a      	str	r2, [r7, #0]
 8002674:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8002676:	2317      	movs	r3, #23
 8002678:	18fb      	adds	r3, r7, r3
 800267a:	2201      	movs	r2, #1
 800267c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800267e:	2316      	movs	r3, #22
 8002680:	18fb      	adds	r3, r7, r3
 8002682:	2200      	movs	r2, #0
 8002684:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8002686:	2315      	movs	r3, #21
 8002688:	18fb      	adds	r3, r7, r3
 800268a:	2200      	movs	r2, #0
 800268c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800268e:	4b3e      	ldr	r3, [pc, #248]	; (8002788 <HAL_FLASH_Program+0x120>)
 8002690:	7e1b      	ldrb	r3, [r3, #24]
 8002692:	2b01      	cmp	r3, #1
 8002694:	d101      	bne.n	800269a <HAL_FLASH_Program+0x32>
 8002696:	2302      	movs	r3, #2
 8002698:	e072      	b.n	8002780 <HAL_FLASH_Program+0x118>
 800269a:	4b3b      	ldr	r3, [pc, #236]	; (8002788 <HAL_FLASH_Program+0x120>)
 800269c:	2201      	movs	r2, #1
 800269e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80026a0:	2317      	movs	r3, #23
 80026a2:	18fe      	adds	r6, r7, r3
 80026a4:	4b39      	ldr	r3, [pc, #228]	; (800278c <HAL_FLASH_Program+0x124>)
 80026a6:	0018      	movs	r0, r3
 80026a8:	f000 f8c4 	bl	8002834 <FLASH_WaitForLastOperation>
 80026ac:	0003      	movs	r3, r0
 80026ae:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 80026b0:	2317      	movs	r3, #23
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d15c      	bne.n	8002774 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	2b01      	cmp	r3, #1
 80026be:	d104      	bne.n	80026ca <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 80026c0:	2315      	movs	r3, #21
 80026c2:	18fb      	adds	r3, r7, r3
 80026c4:	2201      	movs	r2, #1
 80026c6:	701a      	strb	r2, [r3, #0]
 80026c8:	e00b      	b.n	80026e2 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d104      	bne.n	80026da <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 80026d0:	2315      	movs	r3, #21
 80026d2:	18fb      	adds	r3, r7, r3
 80026d4:	2202      	movs	r2, #2
 80026d6:	701a      	strb	r2, [r3, #0]
 80026d8:	e003      	b.n	80026e2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 80026da:	2315      	movs	r3, #21
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	2204      	movs	r2, #4
 80026e0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80026e2:	2316      	movs	r3, #22
 80026e4:	18fb      	adds	r3, r7, r3
 80026e6:	2200      	movs	r2, #0
 80026e8:	701a      	strb	r2, [r3, #0]
 80026ea:	e039      	b.n	8002760 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80026ec:	2116      	movs	r1, #22
 80026ee:	187b      	adds	r3, r7, r1
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	005a      	lsls	r2, r3, #1
 80026f4:	68bb      	ldr	r3, [r7, #8]
 80026f6:	18d0      	adds	r0, r2, r3
 80026f8:	187b      	adds	r3, r7, r1
 80026fa:	781b      	ldrb	r3, [r3, #0]
 80026fc:	011b      	lsls	r3, r3, #4
 80026fe:	001a      	movs	r2, r3
 8002700:	3a20      	subs	r2, #32
 8002702:	2a00      	cmp	r2, #0
 8002704:	db03      	blt.n	800270e <HAL_FLASH_Program+0xa6>
 8002706:	6879      	ldr	r1, [r7, #4]
 8002708:	40d1      	lsrs	r1, r2
 800270a:	000c      	movs	r4, r1
 800270c:	e008      	b.n	8002720 <HAL_FLASH_Program+0xb8>
 800270e:	2220      	movs	r2, #32
 8002710:	1ad2      	subs	r2, r2, r3
 8002712:	6879      	ldr	r1, [r7, #4]
 8002714:	4091      	lsls	r1, r2
 8002716:	000a      	movs	r2, r1
 8002718:	6839      	ldr	r1, [r7, #0]
 800271a:	40d9      	lsrs	r1, r3
 800271c:	000c      	movs	r4, r1
 800271e:	4314      	orrs	r4, r2
 8002720:	687a      	ldr	r2, [r7, #4]
 8002722:	40da      	lsrs	r2, r3
 8002724:	0015      	movs	r5, r2
 8002726:	b2a3      	uxth	r3, r4
 8002728:	0019      	movs	r1, r3
 800272a:	f000 f867 	bl	80027fc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800272e:	2317      	movs	r3, #23
 8002730:	18fe      	adds	r6, r7, r3
 8002732:	4b16      	ldr	r3, [pc, #88]	; (800278c <HAL_FLASH_Program+0x124>)
 8002734:	0018      	movs	r0, r3
 8002736:	f000 f87d 	bl	8002834 <FLASH_WaitForLastOperation>
 800273a:	0003      	movs	r3, r0
 800273c:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 800273e:	4b14      	ldr	r3, [pc, #80]	; (8002790 <HAL_FLASH_Program+0x128>)
 8002740:	691a      	ldr	r2, [r3, #16]
 8002742:	4b13      	ldr	r3, [pc, #76]	; (8002790 <HAL_FLASH_Program+0x128>)
 8002744:	2101      	movs	r1, #1
 8002746:	438a      	bics	r2, r1
 8002748:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800274a:	2317      	movs	r3, #23
 800274c:	18fb      	adds	r3, r7, r3
 800274e:	781b      	ldrb	r3, [r3, #0]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10e      	bne.n	8002772 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8002754:	2116      	movs	r1, #22
 8002756:	187b      	adds	r3, r7, r1
 8002758:	781a      	ldrb	r2, [r3, #0]
 800275a:	187b      	adds	r3, r7, r1
 800275c:	3201      	adds	r2, #1
 800275e:	701a      	strb	r2, [r3, #0]
 8002760:	2316      	movs	r3, #22
 8002762:	18fa      	adds	r2, r7, r3
 8002764:	2315      	movs	r3, #21
 8002766:	18fb      	adds	r3, r7, r3
 8002768:	7812      	ldrb	r2, [r2, #0]
 800276a:	781b      	ldrb	r3, [r3, #0]
 800276c:	429a      	cmp	r2, r3
 800276e:	d3bd      	bcc.n	80026ec <HAL_FLASH_Program+0x84>
 8002770:	e000      	b.n	8002774 <HAL_FLASH_Program+0x10c>
      {
        break;
 8002772:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8002774:	4b04      	ldr	r3, [pc, #16]	; (8002788 <HAL_FLASH_Program+0x120>)
 8002776:	2200      	movs	r2, #0
 8002778:	761a      	strb	r2, [r3, #24]

  return status;
 800277a:	2317      	movs	r3, #23
 800277c:	18fb      	adds	r3, r7, r3
 800277e:	781b      	ldrb	r3, [r3, #0]
}
 8002780:	0018      	movs	r0, r3
 8002782:	46bd      	mov	sp, r7
 8002784:	b007      	add	sp, #28
 8002786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002788:	20000338 	.word	0x20000338
 800278c:	0000c350 	.word	0x0000c350
 8002790:	40022000 	.word	0x40022000

08002794 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8002794:	b580      	push	{r7, lr}
 8002796:	b082      	sub	sp, #8
 8002798:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800279a:	1dfb      	adds	r3, r7, #7
 800279c:	2200      	movs	r2, #0
 800279e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027a0:	4b0c      	ldr	r3, [pc, #48]	; (80027d4 <HAL_FLASH_Unlock+0x40>)
 80027a2:	691b      	ldr	r3, [r3, #16]
 80027a4:	2280      	movs	r2, #128	; 0x80
 80027a6:	4013      	ands	r3, r2
 80027a8:	d00d      	beq.n	80027c6 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80027aa:	4b0a      	ldr	r3, [pc, #40]	; (80027d4 <HAL_FLASH_Unlock+0x40>)
 80027ac:	4a0a      	ldr	r2, [pc, #40]	; (80027d8 <HAL_FLASH_Unlock+0x44>)
 80027ae:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80027b0:	4b08      	ldr	r3, [pc, #32]	; (80027d4 <HAL_FLASH_Unlock+0x40>)
 80027b2:	4a0a      	ldr	r2, [pc, #40]	; (80027dc <HAL_FLASH_Unlock+0x48>)
 80027b4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80027b6:	4b07      	ldr	r3, [pc, #28]	; (80027d4 <HAL_FLASH_Unlock+0x40>)
 80027b8:	691b      	ldr	r3, [r3, #16]
 80027ba:	2280      	movs	r2, #128	; 0x80
 80027bc:	4013      	ands	r3, r2
 80027be:	d002      	beq.n	80027c6 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 80027c0:	1dfb      	adds	r3, r7, #7
 80027c2:	2201      	movs	r2, #1
 80027c4:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 80027c6:	1dfb      	adds	r3, r7, #7
 80027c8:	781b      	ldrb	r3, [r3, #0]
}
 80027ca:	0018      	movs	r0, r3
 80027cc:	46bd      	mov	sp, r7
 80027ce:	b002      	add	sp, #8
 80027d0:	bd80      	pop	{r7, pc}
 80027d2:	46c0      	nop			; (mov r8, r8)
 80027d4:	40022000 	.word	0x40022000
 80027d8:	45670123 	.word	0x45670123
 80027dc:	cdef89ab 	.word	0xcdef89ab

080027e0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80027e4:	4b04      	ldr	r3, [pc, #16]	; (80027f8 <HAL_FLASH_Lock+0x18>)
 80027e6:	691a      	ldr	r2, [r3, #16]
 80027e8:	4b03      	ldr	r3, [pc, #12]	; (80027f8 <HAL_FLASH_Lock+0x18>)
 80027ea:	2180      	movs	r1, #128	; 0x80
 80027ec:	430a      	orrs	r2, r1
 80027ee:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80027f0:	2300      	movs	r3, #0
}
 80027f2:	0018      	movs	r0, r3
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	40022000 	.word	0x40022000

080027fc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b082      	sub	sp, #8
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
 8002804:	000a      	movs	r2, r1
 8002806:	1cbb      	adds	r3, r7, #2
 8002808:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800280a:	4b08      	ldr	r3, [pc, #32]	; (800282c <FLASH_Program_HalfWord+0x30>)
 800280c:	2200      	movs	r2, #0
 800280e:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002810:	4b07      	ldr	r3, [pc, #28]	; (8002830 <FLASH_Program_HalfWord+0x34>)
 8002812:	691a      	ldr	r2, [r3, #16]
 8002814:	4b06      	ldr	r3, [pc, #24]	; (8002830 <FLASH_Program_HalfWord+0x34>)
 8002816:	2101      	movs	r1, #1
 8002818:	430a      	orrs	r2, r1
 800281a:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	1cba      	adds	r2, r7, #2
 8002820:	8812      	ldrh	r2, [r2, #0]
 8002822:	801a      	strh	r2, [r3, #0]
}
 8002824:	46c0      	nop			; (mov r8, r8)
 8002826:	46bd      	mov	sp, r7
 8002828:	b002      	add	sp, #8
 800282a:	bd80      	pop	{r7, pc}
 800282c:	20000338 	.word	0x20000338
 8002830:	40022000 	.word	0x40022000

08002834 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800283c:	f7ff f99a 	bl	8001b74 <HAL_GetTick>
 8002840:	0003      	movs	r3, r0
 8002842:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002844:	e00f      	b.n	8002866 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	3301      	adds	r3, #1
 800284a:	d00c      	beq.n	8002866 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2b00      	cmp	r3, #0
 8002850:	d007      	beq.n	8002862 <FLASH_WaitForLastOperation+0x2e>
 8002852:	f7ff f98f 	bl	8001b74 <HAL_GetTick>
 8002856:	0002      	movs	r2, r0
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	687a      	ldr	r2, [r7, #4]
 800285e:	429a      	cmp	r2, r3
 8002860:	d201      	bcs.n	8002866 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e01f      	b.n	80028a6 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002866:	4b12      	ldr	r3, [pc, #72]	; (80028b0 <FLASH_WaitForLastOperation+0x7c>)
 8002868:	68db      	ldr	r3, [r3, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	4013      	ands	r3, r2
 800286e:	2b01      	cmp	r3, #1
 8002870:	d0e9      	beq.n	8002846 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8002872:	4b0f      	ldr	r3, [pc, #60]	; (80028b0 <FLASH_WaitForLastOperation+0x7c>)
 8002874:	68db      	ldr	r3, [r3, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	4013      	ands	r3, r2
 800287a:	2b20      	cmp	r3, #32
 800287c:	d102      	bne.n	8002884 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800287e:	4b0c      	ldr	r3, [pc, #48]	; (80028b0 <FLASH_WaitForLastOperation+0x7c>)
 8002880:	2220      	movs	r2, #32
 8002882:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002884:	4b0a      	ldr	r3, [pc, #40]	; (80028b0 <FLASH_WaitForLastOperation+0x7c>)
 8002886:	68db      	ldr	r3, [r3, #12]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	2b10      	cmp	r3, #16
 800288e:	d005      	beq.n	800289c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002890:	4b07      	ldr	r3, [pc, #28]	; (80028b0 <FLASH_WaitForLastOperation+0x7c>)
 8002892:	68db      	ldr	r3, [r3, #12]
 8002894:	2204      	movs	r2, #4
 8002896:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002898:	2b04      	cmp	r3, #4
 800289a:	d103      	bne.n	80028a4 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800289c:	f000 f80a 	bl	80028b4 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80028a0:	2301      	movs	r3, #1
 80028a2:	e000      	b.n	80028a6 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	0018      	movs	r0, r3
 80028a8:	46bd      	mov	sp, r7
 80028aa:	b004      	add	sp, #16
 80028ac:	bd80      	pop	{r7, pc}
 80028ae:	46c0      	nop			; (mov r8, r8)
 80028b0:	40022000 	.word	0x40022000

080028b4 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 80028ba:	2300      	movs	r3, #0
 80028bc:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 80028be:	4b13      	ldr	r3, [pc, #76]	; (800290c <FLASH_SetErrorCode+0x58>)
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	2210      	movs	r2, #16
 80028c4:	4013      	ands	r3, r2
 80028c6:	2b10      	cmp	r3, #16
 80028c8:	d109      	bne.n	80028de <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80028ca:	4b11      	ldr	r3, [pc, #68]	; (8002910 <FLASH_SetErrorCode+0x5c>)
 80028cc:	69db      	ldr	r3, [r3, #28]
 80028ce:	2202      	movs	r2, #2
 80028d0:	431a      	orrs	r2, r3
 80028d2:	4b0f      	ldr	r3, [pc, #60]	; (8002910 <FLASH_SetErrorCode+0x5c>)
 80028d4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2210      	movs	r2, #16
 80028da:	4313      	orrs	r3, r2
 80028dc:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80028de:	4b0b      	ldr	r3, [pc, #44]	; (800290c <FLASH_SetErrorCode+0x58>)
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	2204      	movs	r2, #4
 80028e4:	4013      	ands	r3, r2
 80028e6:	2b04      	cmp	r3, #4
 80028e8:	d109      	bne.n	80028fe <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <FLASH_SetErrorCode+0x5c>)
 80028ec:	69db      	ldr	r3, [r3, #28]
 80028ee:	2201      	movs	r2, #1
 80028f0:	431a      	orrs	r2, r3
 80028f2:	4b07      	ldr	r3, [pc, #28]	; (8002910 <FLASH_SetErrorCode+0x5c>)
 80028f4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2204      	movs	r2, #4
 80028fa:	4313      	orrs	r3, r2
 80028fc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80028fe:	4b03      	ldr	r3, [pc, #12]	; (800290c <FLASH_SetErrorCode+0x58>)
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	60da      	str	r2, [r3, #12]
}  
 8002904:	46c0      	nop			; (mov r8, r8)
 8002906:	46bd      	mov	sp, r7
 8002908:	b002      	add	sp, #8
 800290a:	bd80      	pop	{r7, pc}
 800290c:	40022000 	.word	0x40022000
 8002910:	20000338 	.word	0x20000338

08002914 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8002914:	b5b0      	push	{r4, r5, r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800291e:	230f      	movs	r3, #15
 8002920:	18fb      	adds	r3, r7, r3
 8002922:	2201      	movs	r2, #1
 8002924:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800292a:	4b32      	ldr	r3, [pc, #200]	; (80029f4 <HAL_FLASHEx_Erase+0xe0>)
 800292c:	7e1b      	ldrb	r3, [r3, #24]
 800292e:	2b01      	cmp	r3, #1
 8002930:	d101      	bne.n	8002936 <HAL_FLASHEx_Erase+0x22>
 8002932:	2302      	movs	r3, #2
 8002934:	e05a      	b.n	80029ec <HAL_FLASHEx_Erase+0xd8>
 8002936:	4b2f      	ldr	r3, [pc, #188]	; (80029f4 <HAL_FLASHEx_Erase+0xe0>)
 8002938:	2201      	movs	r2, #1
 800293a:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	2b01      	cmp	r3, #1
 8002942:	d116      	bne.n	8002972 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002944:	4b2c      	ldr	r3, [pc, #176]	; (80029f8 <HAL_FLASHEx_Erase+0xe4>)
 8002946:	0018      	movs	r0, r3
 8002948:	f7ff ff74 	bl	8002834 <FLASH_WaitForLastOperation>
 800294c:	1e03      	subs	r3, r0, #0
 800294e:	d147      	bne.n	80029e0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8002950:	f000 f856 	bl	8002a00 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002954:	230f      	movs	r3, #15
 8002956:	18fc      	adds	r4, r7, r3
 8002958:	4b27      	ldr	r3, [pc, #156]	; (80029f8 <HAL_FLASHEx_Erase+0xe4>)
 800295a:	0018      	movs	r0, r3
 800295c:	f7ff ff6a 	bl	8002834 <FLASH_WaitForLastOperation>
 8002960:	0003      	movs	r3, r0
 8002962:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8002964:	4b25      	ldr	r3, [pc, #148]	; (80029fc <HAL_FLASHEx_Erase+0xe8>)
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	4b24      	ldr	r3, [pc, #144]	; (80029fc <HAL_FLASHEx_Erase+0xe8>)
 800296a:	2104      	movs	r1, #4
 800296c:	438a      	bics	r2, r1
 800296e:	611a      	str	r2, [r3, #16]
 8002970:	e036      	b.n	80029e0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002972:	4b21      	ldr	r3, [pc, #132]	; (80029f8 <HAL_FLASHEx_Erase+0xe4>)
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff ff5d 	bl	8002834 <FLASH_WaitForLastOperation>
 800297a:	1e03      	subs	r3, r0, #0
 800297c:	d130      	bne.n	80029e0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	2201      	movs	r2, #1
 8002982:	4252      	negs	r2, r2
 8002984:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	e01f      	b.n	80029ce <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800298e:	68bb      	ldr	r3, [r7, #8]
 8002990:	0018      	movs	r0, r3
 8002992:	f000 f84d 	bl	8002a30 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002996:	250f      	movs	r5, #15
 8002998:	197c      	adds	r4, r7, r5
 800299a:	4b17      	ldr	r3, [pc, #92]	; (80029f8 <HAL_FLASHEx_Erase+0xe4>)
 800299c:	0018      	movs	r0, r3
 800299e:	f7ff ff49 	bl	8002834 <FLASH_WaitForLastOperation>
 80029a2:	0003      	movs	r3, r0
 80029a4:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80029a6:	4b15      	ldr	r3, [pc, #84]	; (80029fc <HAL_FLASHEx_Erase+0xe8>)
 80029a8:	691a      	ldr	r2, [r3, #16]
 80029aa:	4b14      	ldr	r3, [pc, #80]	; (80029fc <HAL_FLASHEx_Erase+0xe8>)
 80029ac:	2102      	movs	r1, #2
 80029ae:	438a      	bics	r2, r1
 80029b0:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 80029b2:	197b      	adds	r3, r7, r5
 80029b4:	781b      	ldrb	r3, [r3, #0]
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d003      	beq.n	80029c2 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	68ba      	ldr	r2, [r7, #8]
 80029be:	601a      	str	r2, [r3, #0]
            break;
 80029c0:	e00e      	b.n	80029e0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	2280      	movs	r2, #128	; 0x80
 80029c6:	00d2      	lsls	r2, r2, #3
 80029c8:	4694      	mov	ip, r2
 80029ca:	4463      	add	r3, ip
 80029cc:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	029a      	lsls	r2, r3, #10
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	685b      	ldr	r3, [r3, #4]
 80029d8:	18d3      	adds	r3, r2, r3
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d3d6      	bcc.n	800298e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80029e0:	4b04      	ldr	r3, [pc, #16]	; (80029f4 <HAL_FLASHEx_Erase+0xe0>)
 80029e2:	2200      	movs	r2, #0
 80029e4:	761a      	strb	r2, [r3, #24]

  return status;
 80029e6:	230f      	movs	r3, #15
 80029e8:	18fb      	adds	r3, r7, r3
 80029ea:	781b      	ldrb	r3, [r3, #0]
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b004      	add	sp, #16
 80029f2:	bdb0      	pop	{r4, r5, r7, pc}
 80029f4:	20000338 	.word	0x20000338
 80029f8:	0000c350 	.word	0x0000c350
 80029fc:	40022000 	.word	0x40022000

08002a00 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a04:	4b08      	ldr	r3, [pc, #32]	; (8002a28 <FLASH_MassErase+0x28>)
 8002a06:	2200      	movs	r2, #0
 8002a08:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002a0a:	4b08      	ldr	r3, [pc, #32]	; (8002a2c <FLASH_MassErase+0x2c>)
 8002a0c:	691a      	ldr	r2, [r3, #16]
 8002a0e:	4b07      	ldr	r3, [pc, #28]	; (8002a2c <FLASH_MassErase+0x2c>)
 8002a10:	2104      	movs	r1, #4
 8002a12:	430a      	orrs	r2, r1
 8002a14:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a16:	4b05      	ldr	r3, [pc, #20]	; (8002a2c <FLASH_MassErase+0x2c>)
 8002a18:	691a      	ldr	r2, [r3, #16]
 8002a1a:	4b04      	ldr	r3, [pc, #16]	; (8002a2c <FLASH_MassErase+0x2c>)
 8002a1c:	2140      	movs	r1, #64	; 0x40
 8002a1e:	430a      	orrs	r2, r1
 8002a20:	611a      	str	r2, [r3, #16]
}
 8002a22:	46c0      	nop			; (mov r8, r8)
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bd80      	pop	{r7, pc}
 8002a28:	20000338 	.word	0x20000338
 8002a2c:	40022000 	.word	0x40022000

08002a30 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b082      	sub	sp, #8
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002a38:	4b0a      	ldr	r3, [pc, #40]	; (8002a64 <FLASH_PageErase+0x34>)
 8002a3a:	2200      	movs	r2, #0
 8002a3c:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 8002a3e:	4b0a      	ldr	r3, [pc, #40]	; (8002a68 <FLASH_PageErase+0x38>)
 8002a40:	691a      	ldr	r2, [r3, #16]
 8002a42:	4b09      	ldr	r3, [pc, #36]	; (8002a68 <FLASH_PageErase+0x38>)
 8002a44:	2102      	movs	r1, #2
 8002a46:	430a      	orrs	r2, r1
 8002a48:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 8002a4a:	4b07      	ldr	r3, [pc, #28]	; (8002a68 <FLASH_PageErase+0x38>)
 8002a4c:	687a      	ldr	r2, [r7, #4]
 8002a4e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002a50:	4b05      	ldr	r3, [pc, #20]	; (8002a68 <FLASH_PageErase+0x38>)
 8002a52:	691a      	ldr	r2, [r3, #16]
 8002a54:	4b04      	ldr	r3, [pc, #16]	; (8002a68 <FLASH_PageErase+0x38>)
 8002a56:	2140      	movs	r1, #64	; 0x40
 8002a58:	430a      	orrs	r2, r1
 8002a5a:	611a      	str	r2, [r3, #16]
}
 8002a5c:	46c0      	nop			; (mov r8, r8)
 8002a5e:	46bd      	mov	sp, r7
 8002a60:	b002      	add	sp, #8
 8002a62:	bd80      	pop	{r7, pc}
 8002a64:	20000338 	.word	0x20000338
 8002a68:	40022000 	.word	0x40022000

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b086      	sub	sp, #24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002a7a:	e14f      	b.n	8002d1c <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	2101      	movs	r1, #1
 8002a82:	697a      	ldr	r2, [r7, #20]
 8002a84:	4091      	lsls	r1, r2
 8002a86:	000a      	movs	r2, r1
 8002a88:	4013      	ands	r3, r2
 8002a8a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d100      	bne.n	8002a94 <HAL_GPIO_Init+0x28>
 8002a92:	e140      	b.n	8002d16 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	685b      	ldr	r3, [r3, #4]
 8002a98:	2203      	movs	r2, #3
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	2b01      	cmp	r3, #1
 8002a9e:	d005      	beq.n	8002aac <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	2203      	movs	r2, #3
 8002aa6:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002aa8:	2b02      	cmp	r3, #2
 8002aaa:	d130      	bne.n	8002b0e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	005b      	lsls	r3, r3, #1
 8002ab6:	2203      	movs	r2, #3
 8002ab8:	409a      	lsls	r2, r3
 8002aba:	0013      	movs	r3, r2
 8002abc:	43da      	mvns	r2, r3
 8002abe:	693b      	ldr	r3, [r7, #16]
 8002ac0:	4013      	ands	r3, r2
 8002ac2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	697b      	ldr	r3, [r7, #20]
 8002aca:	005b      	lsls	r3, r3, #1
 8002acc:	409a      	lsls	r2, r3
 8002ace:	0013      	movs	r3, r2
 8002ad0:	693a      	ldr	r2, [r7, #16]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	693a      	ldr	r2, [r7, #16]
 8002ada:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	697b      	ldr	r3, [r7, #20]
 8002ae6:	409a      	lsls	r2, r3
 8002ae8:	0013      	movs	r3, r2
 8002aea:	43da      	mvns	r2, r3
 8002aec:	693b      	ldr	r3, [r7, #16]
 8002aee:	4013      	ands	r3, r2
 8002af0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685b      	ldr	r3, [r3, #4]
 8002af6:	091b      	lsrs	r3, r3, #4
 8002af8:	2201      	movs	r2, #1
 8002afa:	401a      	ands	r2, r3
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	409a      	lsls	r2, r3
 8002b00:	0013      	movs	r3, r2
 8002b02:	693a      	ldr	r2, [r7, #16]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	693a      	ldr	r2, [r7, #16]
 8002b0c:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	2203      	movs	r2, #3
 8002b14:	4013      	ands	r3, r2
 8002b16:	2b03      	cmp	r3, #3
 8002b18:	d017      	beq.n	8002b4a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	68db      	ldr	r3, [r3, #12]
 8002b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	005b      	lsls	r3, r3, #1
 8002b24:	2203      	movs	r2, #3
 8002b26:	409a      	lsls	r2, r3
 8002b28:	0013      	movs	r3, r2
 8002b2a:	43da      	mvns	r2, r3
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	4013      	ands	r3, r2
 8002b30:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	689a      	ldr	r2, [r3, #8]
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	005b      	lsls	r3, r3, #1
 8002b3a:	409a      	lsls	r2, r3
 8002b3c:	0013      	movs	r3, r2
 8002b3e:	693a      	ldr	r2, [r7, #16]
 8002b40:	4313      	orrs	r3, r2
 8002b42:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	693a      	ldr	r2, [r7, #16]
 8002b48:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b4a:	683b      	ldr	r3, [r7, #0]
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	2203      	movs	r2, #3
 8002b50:	4013      	ands	r3, r2
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d123      	bne.n	8002b9e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	08da      	lsrs	r2, r3, #3
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3208      	adds	r2, #8
 8002b5e:	0092      	lsls	r2, r2, #2
 8002b60:	58d3      	ldr	r3, [r2, r3]
 8002b62:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	2207      	movs	r2, #7
 8002b68:	4013      	ands	r3, r2
 8002b6a:	009b      	lsls	r3, r3, #2
 8002b6c:	220f      	movs	r2, #15
 8002b6e:	409a      	lsls	r2, r3
 8002b70:	0013      	movs	r3, r2
 8002b72:	43da      	mvns	r2, r3
 8002b74:	693b      	ldr	r3, [r7, #16]
 8002b76:	4013      	ands	r3, r2
 8002b78:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002b7a:	683b      	ldr	r3, [r7, #0]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	697b      	ldr	r3, [r7, #20]
 8002b80:	2107      	movs	r1, #7
 8002b82:	400b      	ands	r3, r1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	409a      	lsls	r2, r3
 8002b88:	0013      	movs	r3, r2
 8002b8a:	693a      	ldr	r2, [r7, #16]
 8002b8c:	4313      	orrs	r3, r2
 8002b8e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002b90:	697b      	ldr	r3, [r7, #20]
 8002b92:	08da      	lsrs	r2, r3, #3
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	3208      	adds	r2, #8
 8002b98:	0092      	lsls	r2, r2, #2
 8002b9a:	6939      	ldr	r1, [r7, #16]
 8002b9c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002ba4:	697b      	ldr	r3, [r7, #20]
 8002ba6:	005b      	lsls	r3, r3, #1
 8002ba8:	2203      	movs	r2, #3
 8002baa:	409a      	lsls	r2, r3
 8002bac:	0013      	movs	r3, r2
 8002bae:	43da      	mvns	r2, r3
 8002bb0:	693b      	ldr	r3, [r7, #16]
 8002bb2:	4013      	ands	r3, r2
 8002bb4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	685b      	ldr	r3, [r3, #4]
 8002bba:	2203      	movs	r2, #3
 8002bbc:	401a      	ands	r2, r3
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	005b      	lsls	r3, r3, #1
 8002bc2:	409a      	lsls	r2, r3
 8002bc4:	0013      	movs	r3, r2
 8002bc6:	693a      	ldr	r2, [r7, #16]
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	693a      	ldr	r2, [r7, #16]
 8002bd0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	23c0      	movs	r3, #192	; 0xc0
 8002bd8:	029b      	lsls	r3, r3, #10
 8002bda:	4013      	ands	r3, r2
 8002bdc:	d100      	bne.n	8002be0 <HAL_GPIO_Init+0x174>
 8002bde:	e09a      	b.n	8002d16 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002be0:	4b54      	ldr	r3, [pc, #336]	; (8002d34 <HAL_GPIO_Init+0x2c8>)
 8002be2:	699a      	ldr	r2, [r3, #24]
 8002be4:	4b53      	ldr	r3, [pc, #332]	; (8002d34 <HAL_GPIO_Init+0x2c8>)
 8002be6:	2101      	movs	r1, #1
 8002be8:	430a      	orrs	r2, r1
 8002bea:	619a      	str	r2, [r3, #24]
 8002bec:	4b51      	ldr	r3, [pc, #324]	; (8002d34 <HAL_GPIO_Init+0x2c8>)
 8002bee:	699b      	ldr	r3, [r3, #24]
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	60bb      	str	r3, [r7, #8]
 8002bf6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002bf8:	4a4f      	ldr	r2, [pc, #316]	; (8002d38 <HAL_GPIO_Init+0x2cc>)
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	089b      	lsrs	r3, r3, #2
 8002bfe:	3302      	adds	r3, #2
 8002c00:	009b      	lsls	r3, r3, #2
 8002c02:	589b      	ldr	r3, [r3, r2]
 8002c04:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002c06:	697b      	ldr	r3, [r7, #20]
 8002c08:	2203      	movs	r2, #3
 8002c0a:	4013      	ands	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	220f      	movs	r2, #15
 8002c10:	409a      	lsls	r2, r3
 8002c12:	0013      	movs	r3, r2
 8002c14:	43da      	mvns	r2, r3
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	4013      	ands	r3, r2
 8002c1a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	2390      	movs	r3, #144	; 0x90
 8002c20:	05db      	lsls	r3, r3, #23
 8002c22:	429a      	cmp	r2, r3
 8002c24:	d013      	beq.n	8002c4e <HAL_GPIO_Init+0x1e2>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	4a44      	ldr	r2, [pc, #272]	; (8002d3c <HAL_GPIO_Init+0x2d0>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	d00d      	beq.n	8002c4a <HAL_GPIO_Init+0x1de>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	4a43      	ldr	r2, [pc, #268]	; (8002d40 <HAL_GPIO_Init+0x2d4>)
 8002c32:	4293      	cmp	r3, r2
 8002c34:	d007      	beq.n	8002c46 <HAL_GPIO_Init+0x1da>
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	4a42      	ldr	r2, [pc, #264]	; (8002d44 <HAL_GPIO_Init+0x2d8>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d101      	bne.n	8002c42 <HAL_GPIO_Init+0x1d6>
 8002c3e:	2303      	movs	r3, #3
 8002c40:	e006      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c42:	2305      	movs	r3, #5
 8002c44:	e004      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c46:	2302      	movs	r3, #2
 8002c48:	e002      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c4a:	2301      	movs	r3, #1
 8002c4c:	e000      	b.n	8002c50 <HAL_GPIO_Init+0x1e4>
 8002c4e:	2300      	movs	r3, #0
 8002c50:	697a      	ldr	r2, [r7, #20]
 8002c52:	2103      	movs	r1, #3
 8002c54:	400a      	ands	r2, r1
 8002c56:	0092      	lsls	r2, r2, #2
 8002c58:	4093      	lsls	r3, r2
 8002c5a:	693a      	ldr	r2, [r7, #16]
 8002c5c:	4313      	orrs	r3, r2
 8002c5e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002c60:	4935      	ldr	r1, [pc, #212]	; (8002d38 <HAL_GPIO_Init+0x2cc>)
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	089b      	lsrs	r3, r3, #2
 8002c66:	3302      	adds	r3, #2
 8002c68:	009b      	lsls	r3, r3, #2
 8002c6a:	693a      	ldr	r2, [r7, #16]
 8002c6c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002c6e:	4b36      	ldr	r3, [pc, #216]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	43da      	mvns	r2, r3
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002c7e:	683b      	ldr	r3, [r7, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	2380      	movs	r3, #128	; 0x80
 8002c84:	035b      	lsls	r3, r3, #13
 8002c86:	4013      	ands	r3, r2
 8002c88:	d003      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002c8a:	693a      	ldr	r2, [r7, #16]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002c92:	4b2d      	ldr	r3, [pc, #180]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c94:	693a      	ldr	r2, [r7, #16]
 8002c96:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002c98:	4b2b      	ldr	r3, [pc, #172]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	43da      	mvns	r2, r3
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	4013      	ands	r3, r2
 8002ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002ca8:	683b      	ldr	r3, [r7, #0]
 8002caa:	685a      	ldr	r2, [r3, #4]
 8002cac:	2380      	movs	r3, #128	; 0x80
 8002cae:	039b      	lsls	r3, r3, #14
 8002cb0:	4013      	ands	r3, r2
 8002cb2:	d003      	beq.n	8002cbc <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002cb4:	693a      	ldr	r2, [r7, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002cbc:	4b22      	ldr	r3, [pc, #136]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002cbe:	693a      	ldr	r2, [r7, #16]
 8002cc0:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8002cc2:	4b21      	ldr	r3, [pc, #132]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	43da      	mvns	r2, r3
 8002ccc:	693b      	ldr	r3, [r7, #16]
 8002cce:	4013      	ands	r3, r2
 8002cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685a      	ldr	r2, [r3, #4]
 8002cd6:	2380      	movs	r3, #128	; 0x80
 8002cd8:	029b      	lsls	r3, r3, #10
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d003      	beq.n	8002ce6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 8002cde:	693a      	ldr	r2, [r7, #16]
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	4313      	orrs	r3, r2
 8002ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002ce6:	4b18      	ldr	r3, [pc, #96]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002ce8:	693a      	ldr	r2, [r7, #16]
 8002cea:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002cec:	4b16      	ldr	r3, [pc, #88]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	43da      	mvns	r2, r3
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	4013      	ands	r3, r2
 8002cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	685a      	ldr	r2, [r3, #4]
 8002d00:	2380      	movs	r3, #128	; 0x80
 8002d02:	025b      	lsls	r3, r3, #9
 8002d04:	4013      	ands	r3, r2
 8002d06:	d003      	beq.n	8002d10 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	4313      	orrs	r3, r2
 8002d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002d10:	4b0d      	ldr	r3, [pc, #52]	; (8002d48 <HAL_GPIO_Init+0x2dc>)
 8002d12:	693a      	ldr	r2, [r7, #16]
 8002d14:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8002d16:	697b      	ldr	r3, [r7, #20]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002d1c:	683b      	ldr	r3, [r7, #0]
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	40da      	lsrs	r2, r3
 8002d24:	1e13      	subs	r3, r2, #0
 8002d26:	d000      	beq.n	8002d2a <HAL_GPIO_Init+0x2be>
 8002d28:	e6a8      	b.n	8002a7c <HAL_GPIO_Init+0x10>
  } 
}
 8002d2a:	46c0      	nop			; (mov r8, r8)
 8002d2c:	46c0      	nop			; (mov r8, r8)
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	b006      	add	sp, #24
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	40021000 	.word	0x40021000
 8002d38:	40010000 	.word	0x40010000
 8002d3c:	48000400 	.word	0x48000400
 8002d40:	48000800 	.word	0x48000800
 8002d44:	48000c00 	.word	0x48000c00
 8002d48:	40010400 	.word	0x40010400

08002d4c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b084      	sub	sp, #16
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
 8002d54:	000a      	movs	r2, r1
 8002d56:	1cbb      	adds	r3, r7, #2
 8002d58:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	1cba      	adds	r2, r7, #2
 8002d60:	8812      	ldrh	r2, [r2, #0]
 8002d62:	4013      	ands	r3, r2
 8002d64:	d004      	beq.n	8002d70 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002d66:	230f      	movs	r3, #15
 8002d68:	18fb      	adds	r3, r7, r3
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	701a      	strb	r2, [r3, #0]
 8002d6e:	e003      	b.n	8002d78 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002d70:	230f      	movs	r3, #15
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	2200      	movs	r2, #0
 8002d76:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002d78:	230f      	movs	r3, #15
 8002d7a:	18fb      	adds	r3, r7, r3
 8002d7c:	781b      	ldrb	r3, [r3, #0]
  }
 8002d7e:	0018      	movs	r0, r3
 8002d80:	46bd      	mov	sp, r7
 8002d82:	b004      	add	sp, #16
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002d86:	b580      	push	{r7, lr}
 8002d88:	b082      	sub	sp, #8
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
 8002d8e:	0008      	movs	r0, r1
 8002d90:	0011      	movs	r1, r2
 8002d92:	1cbb      	adds	r3, r7, #2
 8002d94:	1c02      	adds	r2, r0, #0
 8002d96:	801a      	strh	r2, [r3, #0]
 8002d98:	1c7b      	adds	r3, r7, #1
 8002d9a:	1c0a      	adds	r2, r1, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002d9e:	1c7b      	adds	r3, r7, #1
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d004      	beq.n	8002db0 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002da6:	1cbb      	adds	r3, r7, #2
 8002da8:	881a      	ldrh	r2, [r3, #0]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002dae:	e003      	b.n	8002db8 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002db0:	1cbb      	adds	r3, r7, #2
 8002db2:	881a      	ldrh	r2, [r3, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002db8:	46c0      	nop			; (mov r8, r8)
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	b002      	add	sp, #8
 8002dbe:	bd80      	pop	{r7, pc}

08002dc0 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d101      	bne.n	8002dd2 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8002dce:	2301      	movs	r3, #1
 8002dd0:	e03d      	b.n	8002e4e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a20      	ldr	r2, [pc, #128]	; (8002e58 <HAL_IWDG_Init+0x98>)
 8002dd8:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a1f      	ldr	r2, [pc, #124]	; (8002e5c <HAL_IWDG_Init+0x9c>)
 8002de0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	687a      	ldr	r2, [r7, #4]
 8002de8:	6852      	ldr	r2, [r2, #4]
 8002dea:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	687a      	ldr	r2, [r7, #4]
 8002df2:	6892      	ldr	r2, [r2, #8]
 8002df4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002df6:	f7fe febd 	bl	8001b74 <HAL_GetTick>
 8002dfa:	0003      	movs	r3, r0
 8002dfc:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002dfe:	e00e      	b.n	8002e1e <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8002e00:	f7fe feb8 	bl	8001b74 <HAL_GetTick>
 8002e04:	0002      	movs	r2, r0
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	2b27      	cmp	r3, #39	; 0x27
 8002e0c:	d907      	bls.n	8002e1e <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	68db      	ldr	r3, [r3, #12]
 8002e14:	2207      	movs	r2, #7
 8002e16:	4013      	ands	r3, r2
 8002e18:	d001      	beq.n	8002e1e <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8002e1a:	2303      	movs	r3, #3
 8002e1c:	e017      	b.n	8002e4e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	2207      	movs	r2, #7
 8002e26:	4013      	ands	r3, r2
 8002e28:	d1ea      	bne.n	8002e00 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	691a      	ldr	r2, [r3, #16]
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	429a      	cmp	r2, r3
 8002e36:	d005      	beq.n	8002e44 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	687a      	ldr	r2, [r7, #4]
 8002e3e:	68d2      	ldr	r2, [r2, #12]
 8002e40:	611a      	str	r2, [r3, #16]
 8002e42:	e003      	b.n	8002e4c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <HAL_IWDG_Init+0xa0>)
 8002e4a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e4c:	2300      	movs	r3, #0
}
 8002e4e:	0018      	movs	r0, r3
 8002e50:	46bd      	mov	sp, r7
 8002e52:	b004      	add	sp, #16
 8002e54:	bd80      	pop	{r7, pc}
 8002e56:	46c0      	nop			; (mov r8, r8)
 8002e58:	0000cccc 	.word	0x0000cccc
 8002e5c:	00005555 	.word	0x00005555
 8002e60:	0000aaaa 	.word	0x0000aaaa

08002e64 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a03      	ldr	r2, [pc, #12]	; (8002e80 <HAL_IWDG_Refresh+0x1c>)
 8002e72:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	0018      	movs	r0, r3
 8002e78:	46bd      	mov	sp, r7
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	46c0      	nop			; (mov r8, r8)
 8002e80:	0000aaaa 	.word	0x0000aaaa

08002e84 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b082      	sub	sp, #8
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
 8002e8c:	000a      	movs	r2, r1
 8002e8e:	1cfb      	adds	r3, r7, #3
 8002e90:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8002e92:	4b09      	ldr	r3, [pc, #36]	; (8002eb8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e94:	691a      	ldr	r2, [r3, #16]
 8002e96:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <HAL_PWR_EnterSLEEPMode+0x34>)
 8002e98:	2104      	movs	r1, #4
 8002e9a:	438a      	bics	r2, r1
 8002e9c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8002e9e:	1cfb      	adds	r3, r7, #3
 8002ea0:	781b      	ldrb	r3, [r3, #0]
 8002ea2:	2b01      	cmp	r3, #1
 8002ea4:	d101      	bne.n	8002eaa <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8002ea6:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8002ea8:	e002      	b.n	8002eb0 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8002eaa:	bf40      	sev
    __WFE();
 8002eac:	bf20      	wfe
    __WFE();
 8002eae:	bf20      	wfe
}
 8002eb0:	46c0      	nop			; (mov r8, r8)
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	b002      	add	sp, #8
 8002eb6:	bd80      	pop	{r7, pc}
 8002eb8:	e000ed00 	.word	0xe000ed00

08002ebc <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002ec0:	4b04      	ldr	r3, [pc, #16]	; (8002ed4 <HAL_PWR_EnableSleepOnExit+0x18>)
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	4b03      	ldr	r3, [pc, #12]	; (8002ed4 <HAL_PWR_EnableSleepOnExit+0x18>)
 8002ec6:	2102      	movs	r1, #2
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	611a      	str	r2, [r3, #16]
}
 8002ecc:	46c0      	nop			; (mov r8, r8)
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}
 8002ed2:	46c0      	nop			; (mov r8, r8)
 8002ed4:	e000ed00 	.word	0xe000ed00

08002ed8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b088      	sub	sp, #32
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e301      	b.n	80034ee <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2201      	movs	r2, #1
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	d100      	bne.n	8002ef6 <HAL_RCC_OscConfig+0x1e>
 8002ef4:	e08d      	b.n	8003012 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002ef6:	4bc3      	ldr	r3, [pc, #780]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	220c      	movs	r2, #12
 8002efc:	4013      	ands	r3, r2
 8002efe:	2b04      	cmp	r3, #4
 8002f00:	d00e      	beq.n	8002f20 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f02:	4bc0      	ldr	r3, [pc, #768]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	220c      	movs	r2, #12
 8002f08:	4013      	ands	r3, r2
 8002f0a:	2b08      	cmp	r3, #8
 8002f0c:	d116      	bne.n	8002f3c <HAL_RCC_OscConfig+0x64>
 8002f0e:	4bbd      	ldr	r3, [pc, #756]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	025b      	lsls	r3, r3, #9
 8002f16:	401a      	ands	r2, r3
 8002f18:	2380      	movs	r3, #128	; 0x80
 8002f1a:	025b      	lsls	r3, r3, #9
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	d10d      	bne.n	8002f3c <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f20:	4bb8      	ldr	r3, [pc, #736]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2380      	movs	r3, #128	; 0x80
 8002f26:	029b      	lsls	r3, r3, #10
 8002f28:	4013      	ands	r3, r2
 8002f2a:	d100      	bne.n	8002f2e <HAL_RCC_OscConfig+0x56>
 8002f2c:	e070      	b.n	8003010 <HAL_RCC_OscConfig+0x138>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	685b      	ldr	r3, [r3, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d000      	beq.n	8002f38 <HAL_RCC_OscConfig+0x60>
 8002f36:	e06b      	b.n	8003010 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e2d8      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d107      	bne.n	8002f54 <HAL_RCC_OscConfig+0x7c>
 8002f44:	4baf      	ldr	r3, [pc, #700]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f46:	681a      	ldr	r2, [r3, #0]
 8002f48:	4bae      	ldr	r3, [pc, #696]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f4a:	2180      	movs	r1, #128	; 0x80
 8002f4c:	0249      	lsls	r1, r1, #9
 8002f4e:	430a      	orrs	r2, r1
 8002f50:	601a      	str	r2, [r3, #0]
 8002f52:	e02f      	b.n	8002fb4 <HAL_RCC_OscConfig+0xdc>
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	685b      	ldr	r3, [r3, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d10c      	bne.n	8002f76 <HAL_RCC_OscConfig+0x9e>
 8002f5c:	4ba9      	ldr	r3, [pc, #676]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f5e:	681a      	ldr	r2, [r3, #0]
 8002f60:	4ba8      	ldr	r3, [pc, #672]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f62:	49a9      	ldr	r1, [pc, #676]	; (8003208 <HAL_RCC_OscConfig+0x330>)
 8002f64:	400a      	ands	r2, r1
 8002f66:	601a      	str	r2, [r3, #0]
 8002f68:	4ba6      	ldr	r3, [pc, #664]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f6a:	681a      	ldr	r2, [r3, #0]
 8002f6c:	4ba5      	ldr	r3, [pc, #660]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f6e:	49a7      	ldr	r1, [pc, #668]	; (800320c <HAL_RCC_OscConfig+0x334>)
 8002f70:	400a      	ands	r2, r1
 8002f72:	601a      	str	r2, [r3, #0]
 8002f74:	e01e      	b.n	8002fb4 <HAL_RCC_OscConfig+0xdc>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	685b      	ldr	r3, [r3, #4]
 8002f7a:	2b05      	cmp	r3, #5
 8002f7c:	d10e      	bne.n	8002f9c <HAL_RCC_OscConfig+0xc4>
 8002f7e:	4ba1      	ldr	r3, [pc, #644]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f80:	681a      	ldr	r2, [r3, #0]
 8002f82:	4ba0      	ldr	r3, [pc, #640]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f84:	2180      	movs	r1, #128	; 0x80
 8002f86:	02c9      	lsls	r1, r1, #11
 8002f88:	430a      	orrs	r2, r1
 8002f8a:	601a      	str	r2, [r3, #0]
 8002f8c:	4b9d      	ldr	r3, [pc, #628]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f8e:	681a      	ldr	r2, [r3, #0]
 8002f90:	4b9c      	ldr	r3, [pc, #624]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f92:	2180      	movs	r1, #128	; 0x80
 8002f94:	0249      	lsls	r1, r1, #9
 8002f96:	430a      	orrs	r2, r1
 8002f98:	601a      	str	r2, [r3, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xdc>
 8002f9c:	4b99      	ldr	r3, [pc, #612]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002f9e:	681a      	ldr	r2, [r3, #0]
 8002fa0:	4b98      	ldr	r3, [pc, #608]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002fa2:	4999      	ldr	r1, [pc, #612]	; (8003208 <HAL_RCC_OscConfig+0x330>)
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	601a      	str	r2, [r3, #0]
 8002fa8:	4b96      	ldr	r3, [pc, #600]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002faa:	681a      	ldr	r2, [r3, #0]
 8002fac:	4b95      	ldr	r3, [pc, #596]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002fae:	4997      	ldr	r1, [pc, #604]	; (800320c <HAL_RCC_OscConfig+0x334>)
 8002fb0:	400a      	ands	r2, r1
 8002fb2:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d014      	beq.n	8002fe6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7fe fdda 	bl	8001b74 <HAL_GetTick>
 8002fc0:	0003      	movs	r3, r0
 8002fc2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc4:	e008      	b.n	8002fd8 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fc6:	f7fe fdd5 	bl	8001b74 <HAL_GetTick>
 8002fca:	0002      	movs	r2, r0
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	1ad3      	subs	r3, r2, r3
 8002fd0:	2b64      	cmp	r3, #100	; 0x64
 8002fd2:	d901      	bls.n	8002fd8 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002fd4:	2303      	movs	r3, #3
 8002fd6:	e28a      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd8:	4b8a      	ldr	r3, [pc, #552]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8002fda:	681a      	ldr	r2, [r3, #0]
 8002fdc:	2380      	movs	r3, #128	; 0x80
 8002fde:	029b      	lsls	r3, r3, #10
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	d0f0      	beq.n	8002fc6 <HAL_RCC_OscConfig+0xee>
 8002fe4:	e015      	b.n	8003012 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe6:	f7fe fdc5 	bl	8001b74 <HAL_GetTick>
 8002fea:	0003      	movs	r3, r0
 8002fec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	e008      	b.n	8003002 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002ff0:	f7fe fdc0 	bl	8001b74 <HAL_GetTick>
 8002ff4:	0002      	movs	r2, r0
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	1ad3      	subs	r3, r2, r3
 8002ffa:	2b64      	cmp	r3, #100	; 0x64
 8002ffc:	d901      	bls.n	8003002 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002ffe:	2303      	movs	r3, #3
 8003000:	e275      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003002:	4b80      	ldr	r3, [pc, #512]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003004:	681a      	ldr	r2, [r3, #0]
 8003006:	2380      	movs	r3, #128	; 0x80
 8003008:	029b      	lsls	r3, r3, #10
 800300a:	4013      	ands	r3, r2
 800300c:	d1f0      	bne.n	8002ff0 <HAL_RCC_OscConfig+0x118>
 800300e:	e000      	b.n	8003012 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003010:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	2202      	movs	r2, #2
 8003018:	4013      	ands	r3, r2
 800301a:	d100      	bne.n	800301e <HAL_RCC_OscConfig+0x146>
 800301c:	e069      	b.n	80030f2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800301e:	4b79      	ldr	r3, [pc, #484]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	220c      	movs	r2, #12
 8003024:	4013      	ands	r3, r2
 8003026:	d00b      	beq.n	8003040 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003028:	4b76      	ldr	r3, [pc, #472]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	220c      	movs	r2, #12
 800302e:	4013      	ands	r3, r2
 8003030:	2b08      	cmp	r3, #8
 8003032:	d11c      	bne.n	800306e <HAL_RCC_OscConfig+0x196>
 8003034:	4b73      	ldr	r3, [pc, #460]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	2380      	movs	r3, #128	; 0x80
 800303a:	025b      	lsls	r3, r3, #9
 800303c:	4013      	ands	r3, r2
 800303e:	d116      	bne.n	800306e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003040:	4b70      	ldr	r3, [pc, #448]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	2202      	movs	r2, #2
 8003046:	4013      	ands	r3, r2
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x17e>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	68db      	ldr	r3, [r3, #12]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e24b      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b6b      	ldr	r3, [pc, #428]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	22f8      	movs	r2, #248	; 0xf8
 800305c:	4393      	bics	r3, r2
 800305e:	0019      	movs	r1, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	691b      	ldr	r3, [r3, #16]
 8003064:	00da      	lsls	r2, r3, #3
 8003066:	4b67      	ldr	r3, [pc, #412]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003068:	430a      	orrs	r2, r1
 800306a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306c:	e041      	b.n	80030f2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b00      	cmp	r3, #0
 8003074:	d024      	beq.n	80030c0 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003076:	4b63      	ldr	r3, [pc, #396]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	4b62      	ldr	r3, [pc, #392]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800307c:	2101      	movs	r1, #1
 800307e:	430a      	orrs	r2, r1
 8003080:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003082:	f7fe fd77 	bl	8001b74 <HAL_GetTick>
 8003086:	0003      	movs	r3, r0
 8003088:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800308a:	e008      	b.n	800309e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800308c:	f7fe fd72 	bl	8001b74 <HAL_GetTick>
 8003090:	0002      	movs	r2, r0
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	1ad3      	subs	r3, r2, r3
 8003096:	2b02      	cmp	r3, #2
 8003098:	d901      	bls.n	800309e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 800309a:	2303      	movs	r3, #3
 800309c:	e227      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309e:	4b59      	ldr	r3, [pc, #356]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2202      	movs	r2, #2
 80030a4:	4013      	ands	r3, r2
 80030a6:	d0f1      	beq.n	800308c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b56      	ldr	r3, [pc, #344]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	22f8      	movs	r2, #248	; 0xf8
 80030ae:	4393      	bics	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	691b      	ldr	r3, [r3, #16]
 80030b6:	00da      	lsls	r2, r3, #3
 80030b8:	4b52      	ldr	r3, [pc, #328]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80030ba:	430a      	orrs	r2, r1
 80030bc:	601a      	str	r2, [r3, #0]
 80030be:	e018      	b.n	80030f2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030c0:	4b50      	ldr	r3, [pc, #320]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b4f      	ldr	r3, [pc, #316]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80030c6:	2101      	movs	r1, #1
 80030c8:	438a      	bics	r2, r1
 80030ca:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030cc:	f7fe fd52 	bl	8001b74 <HAL_GetTick>
 80030d0:	0003      	movs	r3, r0
 80030d2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030d6:	f7fe fd4d 	bl	8001b74 <HAL_GetTick>
 80030da:	0002      	movs	r2, r0
 80030dc:	69bb      	ldr	r3, [r7, #24]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e202      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e8:	4b46      	ldr	r3, [pc, #280]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	2202      	movs	r2, #2
 80030ee:	4013      	ands	r3, r2
 80030f0:	d1f1      	bne.n	80030d6 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2208      	movs	r2, #8
 80030f8:	4013      	ands	r3, r2
 80030fa:	d036      	beq.n	800316a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	69db      	ldr	r3, [r3, #28]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d019      	beq.n	8003138 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003104:	4b3f      	ldr	r3, [pc, #252]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003106:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003108:	4b3e      	ldr	r3, [pc, #248]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800310a:	2101      	movs	r1, #1
 800310c:	430a      	orrs	r2, r1
 800310e:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003110:	f7fe fd30 	bl	8001b74 <HAL_GetTick>
 8003114:	0003      	movs	r3, r0
 8003116:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003118:	e008      	b.n	800312c <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800311a:	f7fe fd2b 	bl	8001b74 <HAL_GetTick>
 800311e:	0002      	movs	r2, r0
 8003120:	69bb      	ldr	r3, [r7, #24]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	2b02      	cmp	r3, #2
 8003126:	d901      	bls.n	800312c <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003128:	2303      	movs	r3, #3
 800312a:	e1e0      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312c:	4b35      	ldr	r3, [pc, #212]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800312e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003130:	2202      	movs	r2, #2
 8003132:	4013      	ands	r3, r2
 8003134:	d0f1      	beq.n	800311a <HAL_RCC_OscConfig+0x242>
 8003136:	e018      	b.n	800316a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b32      	ldr	r3, [pc, #200]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800313a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800313c:	4b31      	ldr	r3, [pc, #196]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800313e:	2101      	movs	r1, #1
 8003140:	438a      	bics	r2, r1
 8003142:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003144:	f7fe fd16 	bl	8001b74 <HAL_GetTick>
 8003148:	0003      	movs	r3, r0
 800314a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800314c:	e008      	b.n	8003160 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800314e:	f7fe fd11 	bl	8001b74 <HAL_GetTick>
 8003152:	0002      	movs	r2, r0
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	1ad3      	subs	r3, r2, r3
 8003158:	2b02      	cmp	r3, #2
 800315a:	d901      	bls.n	8003160 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 800315c:	2303      	movs	r3, #3
 800315e:	e1c6      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003160:	4b28      	ldr	r3, [pc, #160]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003162:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003164:	2202      	movs	r2, #2
 8003166:	4013      	ands	r3, r2
 8003168:	d1f1      	bne.n	800314e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	2204      	movs	r2, #4
 8003170:	4013      	ands	r3, r2
 8003172:	d100      	bne.n	8003176 <HAL_RCC_OscConfig+0x29e>
 8003174:	e0b4      	b.n	80032e0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003176:	201f      	movs	r0, #31
 8003178:	183b      	adds	r3, r7, r0
 800317a:	2200      	movs	r2, #0
 800317c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800317e:	4b21      	ldr	r3, [pc, #132]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003180:	69da      	ldr	r2, [r3, #28]
 8003182:	2380      	movs	r3, #128	; 0x80
 8003184:	055b      	lsls	r3, r3, #21
 8003186:	4013      	ands	r3, r2
 8003188:	d110      	bne.n	80031ac <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318a:	4b1e      	ldr	r3, [pc, #120]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800318c:	69da      	ldr	r2, [r3, #28]
 800318e:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 8003190:	2180      	movs	r1, #128	; 0x80
 8003192:	0549      	lsls	r1, r1, #21
 8003194:	430a      	orrs	r2, r1
 8003196:	61da      	str	r2, [r3, #28]
 8003198:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 800319a:	69da      	ldr	r2, [r3, #28]
 800319c:	2380      	movs	r3, #128	; 0x80
 800319e:	055b      	lsls	r3, r3, #21
 80031a0:	4013      	ands	r3, r2
 80031a2:	60fb      	str	r3, [r7, #12]
 80031a4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80031a6:	183b      	adds	r3, r7, r0
 80031a8:	2201      	movs	r2, #1
 80031aa:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ac:	4b18      	ldr	r3, [pc, #96]	; (8003210 <HAL_RCC_OscConfig+0x338>)
 80031ae:	681a      	ldr	r2, [r3, #0]
 80031b0:	2380      	movs	r3, #128	; 0x80
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	4013      	ands	r3, r2
 80031b6:	d11a      	bne.n	80031ee <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031b8:	4b15      	ldr	r3, [pc, #84]	; (8003210 <HAL_RCC_OscConfig+0x338>)
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	4b14      	ldr	r3, [pc, #80]	; (8003210 <HAL_RCC_OscConfig+0x338>)
 80031be:	2180      	movs	r1, #128	; 0x80
 80031c0:	0049      	lsls	r1, r1, #1
 80031c2:	430a      	orrs	r2, r1
 80031c4:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fcd5 	bl	8001b74 <HAL_GetTick>
 80031ca:	0003      	movs	r3, r0
 80031cc:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ce:	e008      	b.n	80031e2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031d0:	f7fe fcd0 	bl	8001b74 <HAL_GetTick>
 80031d4:	0002      	movs	r2, r0
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	1ad3      	subs	r3, r2, r3
 80031da:	2b64      	cmp	r3, #100	; 0x64
 80031dc:	d901      	bls.n	80031e2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 80031de:	2303      	movs	r3, #3
 80031e0:	e185      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e2:	4b0b      	ldr	r3, [pc, #44]	; (8003210 <HAL_RCC_OscConfig+0x338>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	2380      	movs	r3, #128	; 0x80
 80031e8:	005b      	lsls	r3, r3, #1
 80031ea:	4013      	ands	r3, r2
 80031ec:	d0f0      	beq.n	80031d0 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	2b01      	cmp	r3, #1
 80031f4:	d10e      	bne.n	8003214 <HAL_RCC_OscConfig+0x33c>
 80031f6:	4b03      	ldr	r3, [pc, #12]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80031f8:	6a1a      	ldr	r2, [r3, #32]
 80031fa:	4b02      	ldr	r3, [pc, #8]	; (8003204 <HAL_RCC_OscConfig+0x32c>)
 80031fc:	2101      	movs	r1, #1
 80031fe:	430a      	orrs	r2, r1
 8003200:	621a      	str	r2, [r3, #32]
 8003202:	e035      	b.n	8003270 <HAL_RCC_OscConfig+0x398>
 8003204:	40021000 	.word	0x40021000
 8003208:	fffeffff 	.word	0xfffeffff
 800320c:	fffbffff 	.word	0xfffbffff
 8003210:	40007000 	.word	0x40007000
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	2b00      	cmp	r3, #0
 800321a:	d10c      	bne.n	8003236 <HAL_RCC_OscConfig+0x35e>
 800321c:	4bb6      	ldr	r3, [pc, #728]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800321e:	6a1a      	ldr	r2, [r3, #32]
 8003220:	4bb5      	ldr	r3, [pc, #724]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003222:	2101      	movs	r1, #1
 8003224:	438a      	bics	r2, r1
 8003226:	621a      	str	r2, [r3, #32]
 8003228:	4bb3      	ldr	r3, [pc, #716]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800322a:	6a1a      	ldr	r2, [r3, #32]
 800322c:	4bb2      	ldr	r3, [pc, #712]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800322e:	2104      	movs	r1, #4
 8003230:	438a      	bics	r2, r1
 8003232:	621a      	str	r2, [r3, #32]
 8003234:	e01c      	b.n	8003270 <HAL_RCC_OscConfig+0x398>
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	689b      	ldr	r3, [r3, #8]
 800323a:	2b05      	cmp	r3, #5
 800323c:	d10c      	bne.n	8003258 <HAL_RCC_OscConfig+0x380>
 800323e:	4bae      	ldr	r3, [pc, #696]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003240:	6a1a      	ldr	r2, [r3, #32]
 8003242:	4bad      	ldr	r3, [pc, #692]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003244:	2104      	movs	r1, #4
 8003246:	430a      	orrs	r2, r1
 8003248:	621a      	str	r2, [r3, #32]
 800324a:	4bab      	ldr	r3, [pc, #684]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800324c:	6a1a      	ldr	r2, [r3, #32]
 800324e:	4baa      	ldr	r3, [pc, #680]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003250:	2101      	movs	r1, #1
 8003252:	430a      	orrs	r2, r1
 8003254:	621a      	str	r2, [r3, #32]
 8003256:	e00b      	b.n	8003270 <HAL_RCC_OscConfig+0x398>
 8003258:	4ba7      	ldr	r3, [pc, #668]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	4ba6      	ldr	r3, [pc, #664]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800325e:	2101      	movs	r1, #1
 8003260:	438a      	bics	r2, r1
 8003262:	621a      	str	r2, [r3, #32]
 8003264:	4ba4      	ldr	r3, [pc, #656]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003266:	6a1a      	ldr	r2, [r3, #32]
 8003268:	4ba3      	ldr	r3, [pc, #652]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800326a:	2104      	movs	r1, #4
 800326c:	438a      	bics	r2, r1
 800326e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d014      	beq.n	80032a2 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003278:	f7fe fc7c 	bl	8001b74 <HAL_GetTick>
 800327c:	0003      	movs	r3, r0
 800327e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003280:	e009      	b.n	8003296 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003282:	f7fe fc77 	bl	8001b74 <HAL_GetTick>
 8003286:	0002      	movs	r2, r0
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	1ad3      	subs	r3, r2, r3
 800328c:	4a9b      	ldr	r2, [pc, #620]	; (80034fc <HAL_RCC_OscConfig+0x624>)
 800328e:	4293      	cmp	r3, r2
 8003290:	d901      	bls.n	8003296 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003292:	2303      	movs	r3, #3
 8003294:	e12b      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003296:	4b98      	ldr	r3, [pc, #608]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	2202      	movs	r2, #2
 800329c:	4013      	ands	r3, r2
 800329e:	d0f0      	beq.n	8003282 <HAL_RCC_OscConfig+0x3aa>
 80032a0:	e013      	b.n	80032ca <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80032a2:	f7fe fc67 	bl	8001b74 <HAL_GetTick>
 80032a6:	0003      	movs	r3, r0
 80032a8:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032aa:	e009      	b.n	80032c0 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80032ac:	f7fe fc62 	bl	8001b74 <HAL_GetTick>
 80032b0:	0002      	movs	r2, r0
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	4a91      	ldr	r2, [pc, #580]	; (80034fc <HAL_RCC_OscConfig+0x624>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e116      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032c0:	4b8d      	ldr	r3, [pc, #564]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80032c2:	6a1b      	ldr	r3, [r3, #32]
 80032c4:	2202      	movs	r2, #2
 80032c6:	4013      	ands	r3, r2
 80032c8:	d1f0      	bne.n	80032ac <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80032ca:	231f      	movs	r3, #31
 80032cc:	18fb      	adds	r3, r7, r3
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	2b01      	cmp	r3, #1
 80032d2:	d105      	bne.n	80032e0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032d4:	4b88      	ldr	r3, [pc, #544]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80032d6:	69da      	ldr	r2, [r3, #28]
 80032d8:	4b87      	ldr	r3, [pc, #540]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80032da:	4989      	ldr	r1, [pc, #548]	; (8003500 <HAL_RCC_OscConfig+0x628>)
 80032dc:	400a      	ands	r2, r1
 80032de:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2210      	movs	r2, #16
 80032e6:	4013      	ands	r3, r2
 80032e8:	d063      	beq.n	80033b2 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	695b      	ldr	r3, [r3, #20]
 80032ee:	2b01      	cmp	r3, #1
 80032f0:	d12a      	bne.n	8003348 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 80032f2:	4b81      	ldr	r3, [pc, #516]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80032f4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032f6:	4b80      	ldr	r3, [pc, #512]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80032f8:	2104      	movs	r1, #4
 80032fa:	430a      	orrs	r2, r1
 80032fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 80032fe:	4b7e      	ldr	r3, [pc, #504]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003300:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003302:	4b7d      	ldr	r3, [pc, #500]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003304:	2101      	movs	r1, #1
 8003306:	430a      	orrs	r2, r1
 8003308:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800330a:	f7fe fc33 	bl	8001b74 <HAL_GetTick>
 800330e:	0003      	movs	r3, r0
 8003310:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003312:	e008      	b.n	8003326 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003314:	f7fe fc2e 	bl	8001b74 <HAL_GetTick>
 8003318:	0002      	movs	r2, r0
 800331a:	69bb      	ldr	r3, [r7, #24]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0e3      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003326:	4b74      	ldr	r3, [pc, #464]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003328:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800332a:	2202      	movs	r2, #2
 800332c:	4013      	ands	r3, r2
 800332e:	d0f1      	beq.n	8003314 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003330:	4b71      	ldr	r3, [pc, #452]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003332:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003334:	22f8      	movs	r2, #248	; 0xf8
 8003336:	4393      	bics	r3, r2
 8003338:	0019      	movs	r1, r3
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	699b      	ldr	r3, [r3, #24]
 800333e:	00da      	lsls	r2, r3, #3
 8003340:	4b6d      	ldr	r3, [pc, #436]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003342:	430a      	orrs	r2, r1
 8003344:	635a      	str	r2, [r3, #52]	; 0x34
 8003346:	e034      	b.n	80033b2 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	695b      	ldr	r3, [r3, #20]
 800334c:	3305      	adds	r3, #5
 800334e:	d111      	bne.n	8003374 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8003350:	4b69      	ldr	r3, [pc, #420]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	4b68      	ldr	r3, [pc, #416]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003356:	2104      	movs	r1, #4
 8003358:	438a      	bics	r2, r1
 800335a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800335c:	4b66      	ldr	r3, [pc, #408]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800335e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003360:	22f8      	movs	r2, #248	; 0xf8
 8003362:	4393      	bics	r3, r2
 8003364:	0019      	movs	r1, r3
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	699b      	ldr	r3, [r3, #24]
 800336a:	00da      	lsls	r2, r3, #3
 800336c:	4b62      	ldr	r3, [pc, #392]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800336e:	430a      	orrs	r2, r1
 8003370:	635a      	str	r2, [r3, #52]	; 0x34
 8003372:	e01e      	b.n	80033b2 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003374:	4b60      	ldr	r3, [pc, #384]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003376:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003378:	4b5f      	ldr	r3, [pc, #380]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800337a:	2104      	movs	r1, #4
 800337c:	430a      	orrs	r2, r1
 800337e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8003380:	4b5d      	ldr	r3, [pc, #372]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003382:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003384:	4b5c      	ldr	r3, [pc, #368]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003386:	2101      	movs	r1, #1
 8003388:	438a      	bics	r2, r1
 800338a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800338c:	f7fe fbf2 	bl	8001b74 <HAL_GetTick>
 8003390:	0003      	movs	r3, r0
 8003392:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003394:	e008      	b.n	80033a8 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003396:	f7fe fbed 	bl	8001b74 <HAL_GetTick>
 800339a:	0002      	movs	r2, r0
 800339c:	69bb      	ldr	r3, [r7, #24]
 800339e:	1ad3      	subs	r3, r2, r3
 80033a0:	2b02      	cmp	r3, #2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0a2      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80033a8:	4b53      	ldr	r3, [pc, #332]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80033aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ac:	2202      	movs	r2, #2
 80033ae:	4013      	ands	r3, r2
 80033b0:	d1f1      	bne.n	8003396 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d100      	bne.n	80033bc <HAL_RCC_OscConfig+0x4e4>
 80033ba:	e097      	b.n	80034ec <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033bc:	4b4e      	ldr	r3, [pc, #312]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80033be:	685b      	ldr	r3, [r3, #4]
 80033c0:	220c      	movs	r2, #12
 80033c2:	4013      	ands	r3, r2
 80033c4:	2b08      	cmp	r3, #8
 80033c6:	d100      	bne.n	80033ca <HAL_RCC_OscConfig+0x4f2>
 80033c8:	e06b      	b.n	80034a2 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a1b      	ldr	r3, [r3, #32]
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d14c      	bne.n	800346c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033d2:	4b49      	ldr	r3, [pc, #292]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80033d4:	681a      	ldr	r2, [r3, #0]
 80033d6:	4b48      	ldr	r3, [pc, #288]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80033d8:	494a      	ldr	r1, [pc, #296]	; (8003504 <HAL_RCC_OscConfig+0x62c>)
 80033da:	400a      	ands	r2, r1
 80033dc:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033de:	f7fe fbc9 	bl	8001b74 <HAL_GetTick>
 80033e2:	0003      	movs	r3, r0
 80033e4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80033e8:	f7fe fbc4 	bl	8001b74 <HAL_GetTick>
 80033ec:	0002      	movs	r2, r0
 80033ee:	69bb      	ldr	r3, [r7, #24]
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e079      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80033fa:	4b3f      	ldr	r3, [pc, #252]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80033fc:	681a      	ldr	r2, [r3, #0]
 80033fe:	2380      	movs	r3, #128	; 0x80
 8003400:	049b      	lsls	r3, r3, #18
 8003402:	4013      	ands	r3, r2
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003406:	4b3c      	ldr	r3, [pc, #240]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800340a:	220f      	movs	r2, #15
 800340c:	4393      	bics	r3, r2
 800340e:	0019      	movs	r1, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003414:	4b38      	ldr	r3, [pc, #224]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003416:	430a      	orrs	r2, r1
 8003418:	62da      	str	r2, [r3, #44]	; 0x2c
 800341a:	4b37      	ldr	r3, [pc, #220]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800341c:	685b      	ldr	r3, [r3, #4]
 800341e:	4a3a      	ldr	r2, [pc, #232]	; (8003508 <HAL_RCC_OscConfig+0x630>)
 8003420:	4013      	ands	r3, r2
 8003422:	0019      	movs	r1, r3
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342c:	431a      	orrs	r2, r3
 800342e:	4b32      	ldr	r3, [pc, #200]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003430:	430a      	orrs	r2, r1
 8003432:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003434:	4b30      	ldr	r3, [pc, #192]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	4b2f      	ldr	r3, [pc, #188]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800343a:	2180      	movs	r1, #128	; 0x80
 800343c:	0449      	lsls	r1, r1, #17
 800343e:	430a      	orrs	r2, r1
 8003440:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003442:	f7fe fb97 	bl	8001b74 <HAL_GetTick>
 8003446:	0003      	movs	r3, r0
 8003448:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800344c:	f7fe fb92 	bl	8001b74 <HAL_GetTick>
 8003450:	0002      	movs	r2, r0
 8003452:	69bb      	ldr	r3, [r7, #24]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b02      	cmp	r3, #2
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e047      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800345e:	4b26      	ldr	r3, [pc, #152]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	2380      	movs	r3, #128	; 0x80
 8003464:	049b      	lsls	r3, r3, #18
 8003466:	4013      	ands	r3, r2
 8003468:	d0f0      	beq.n	800344c <HAL_RCC_OscConfig+0x574>
 800346a:	e03f      	b.n	80034ec <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800346c:	4b22      	ldr	r3, [pc, #136]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	4b21      	ldr	r3, [pc, #132]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003472:	4924      	ldr	r1, [pc, #144]	; (8003504 <HAL_RCC_OscConfig+0x62c>)
 8003474:	400a      	ands	r2, r1
 8003476:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003478:	f7fe fb7c 	bl	8001b74 <HAL_GetTick>
 800347c:	0003      	movs	r3, r0
 800347e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003480:	e008      	b.n	8003494 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003482:	f7fe fb77 	bl	8001b74 <HAL_GetTick>
 8003486:	0002      	movs	r2, r0
 8003488:	69bb      	ldr	r3, [r7, #24]
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	2b02      	cmp	r3, #2
 800348e:	d901      	bls.n	8003494 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8003490:	2303      	movs	r3, #3
 8003492:	e02c      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003494:	4b18      	ldr	r3, [pc, #96]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 8003496:	681a      	ldr	r2, [r3, #0]
 8003498:	2380      	movs	r3, #128	; 0x80
 800349a:	049b      	lsls	r3, r3, #18
 800349c:	4013      	ands	r3, r2
 800349e:	d1f0      	bne.n	8003482 <HAL_RCC_OscConfig+0x5aa>
 80034a0:	e024      	b.n	80034ec <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	6a1b      	ldr	r3, [r3, #32]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d101      	bne.n	80034ae <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e01f      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 80034ae:	4b12      	ldr	r3, [pc, #72]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 80034b4:	4b10      	ldr	r3, [pc, #64]	; (80034f8 <HAL_RCC_OscConfig+0x620>)
 80034b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034b8:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ba:	697a      	ldr	r2, [r7, #20]
 80034bc:	2380      	movs	r3, #128	; 0x80
 80034be:	025b      	lsls	r3, r3, #9
 80034c0:	401a      	ands	r2, r3
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	429a      	cmp	r2, r3
 80034c8:	d10e      	bne.n	80034e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034ca:	693b      	ldr	r3, [r7, #16]
 80034cc:	220f      	movs	r2, #15
 80034ce:	401a      	ands	r2, r3
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	429a      	cmp	r2, r3
 80034d6:	d107      	bne.n	80034e8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 80034d8:	697a      	ldr	r2, [r7, #20]
 80034da:	23f0      	movs	r3, #240	; 0xf0
 80034dc:	039b      	lsls	r3, r3, #14
 80034de:	401a      	ands	r2, r3
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d001      	beq.n	80034ec <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80034ec:	2300      	movs	r3, #0
}
 80034ee:	0018      	movs	r0, r3
 80034f0:	46bd      	mov	sp, r7
 80034f2:	b008      	add	sp, #32
 80034f4:	bd80      	pop	{r7, pc}
 80034f6:	46c0      	nop			; (mov r8, r8)
 80034f8:	40021000 	.word	0x40021000
 80034fc:	00001388 	.word	0x00001388
 8003500:	efffffff 	.word	0xefffffff
 8003504:	feffffff 	.word	0xfeffffff
 8003508:	ffc2ffff 	.word	0xffc2ffff

0800350c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b084      	sub	sp, #16
 8003510:	af00      	add	r7, sp, #0
 8003512:	6078      	str	r0, [r7, #4]
 8003514:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d101      	bne.n	8003520 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e0b3      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003520:	4b5b      	ldr	r3, [pc, #364]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	2201      	movs	r2, #1
 8003526:	4013      	ands	r3, r2
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	429a      	cmp	r2, r3
 800352c:	d911      	bls.n	8003552 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800352e:	4b58      	ldr	r3, [pc, #352]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	2201      	movs	r2, #1
 8003534:	4393      	bics	r3, r2
 8003536:	0019      	movs	r1, r3
 8003538:	4b55      	ldr	r3, [pc, #340]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 800353a:	683a      	ldr	r2, [r7, #0]
 800353c:	430a      	orrs	r2, r1
 800353e:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003540:	4b53      	ldr	r3, [pc, #332]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2201      	movs	r2, #1
 8003546:	4013      	ands	r3, r2
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	429a      	cmp	r2, r3
 800354c:	d001      	beq.n	8003552 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e09a      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2202      	movs	r2, #2
 8003558:	4013      	ands	r3, r2
 800355a:	d015      	beq.n	8003588 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	2204      	movs	r2, #4
 8003562:	4013      	ands	r3, r2
 8003564:	d006      	beq.n	8003574 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003566:	4b4b      	ldr	r3, [pc, #300]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 8003568:	685a      	ldr	r2, [r3, #4]
 800356a:	4b4a      	ldr	r3, [pc, #296]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 800356c:	21e0      	movs	r1, #224	; 0xe0
 800356e:	00c9      	lsls	r1, r1, #3
 8003570:	430a      	orrs	r2, r1
 8003572:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003574:	4b47      	ldr	r3, [pc, #284]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	22f0      	movs	r2, #240	; 0xf0
 800357a:	4393      	bics	r3, r2
 800357c:	0019      	movs	r1, r3
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	689a      	ldr	r2, [r3, #8]
 8003582:	4b44      	ldr	r3, [pc, #272]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	2201      	movs	r2, #1
 800358e:	4013      	ands	r3, r2
 8003590:	d040      	beq.n	8003614 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	685b      	ldr	r3, [r3, #4]
 8003596:	2b01      	cmp	r3, #1
 8003598:	d107      	bne.n	80035aa <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800359a:	4b3e      	ldr	r3, [pc, #248]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 800359c:	681a      	ldr	r2, [r3, #0]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	029b      	lsls	r3, r3, #10
 80035a2:	4013      	ands	r3, r2
 80035a4:	d114      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e06e      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	2b02      	cmp	r3, #2
 80035b0:	d107      	bne.n	80035c2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035b2:	4b38      	ldr	r3, [pc, #224]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 80035b4:	681a      	ldr	r2, [r3, #0]
 80035b6:	2380      	movs	r3, #128	; 0x80
 80035b8:	049b      	lsls	r3, r3, #18
 80035ba:	4013      	ands	r3, r2
 80035bc:	d108      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80035be:	2301      	movs	r3, #1
 80035c0:	e062      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c2:	4b34      	ldr	r3, [pc, #208]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	2202      	movs	r2, #2
 80035c8:	4013      	ands	r3, r2
 80035ca:	d101      	bne.n	80035d0 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 80035cc:	2301      	movs	r3, #1
 80035ce:	e05b      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035d0:	4b30      	ldr	r3, [pc, #192]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	2203      	movs	r2, #3
 80035d6:	4393      	bics	r3, r2
 80035d8:	0019      	movs	r1, r3
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 80035e0:	430a      	orrs	r2, r1
 80035e2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035e4:	f7fe fac6 	bl	8001b74 <HAL_GetTick>
 80035e8:	0003      	movs	r3, r0
 80035ea:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035ec:	e009      	b.n	8003602 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035ee:	f7fe fac1 	bl	8001b74 <HAL_GetTick>
 80035f2:	0002      	movs	r2, r0
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	1ad3      	subs	r3, r2, r3
 80035f8:	4a27      	ldr	r2, [pc, #156]	; (8003698 <HAL_RCC_ClockConfig+0x18c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e042      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003602:	4b24      	ldr	r3, [pc, #144]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	220c      	movs	r2, #12
 8003608:	401a      	ands	r2, r3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	009b      	lsls	r3, r3, #2
 8003610:	429a      	cmp	r2, r3
 8003612:	d1ec      	bne.n	80035ee <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	2201      	movs	r2, #1
 800361a:	4013      	ands	r3, r2
 800361c:	683a      	ldr	r2, [r7, #0]
 800361e:	429a      	cmp	r2, r3
 8003620:	d211      	bcs.n	8003646 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003622:	4b1b      	ldr	r3, [pc, #108]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2201      	movs	r2, #1
 8003628:	4393      	bics	r3, r2
 800362a:	0019      	movs	r1, r3
 800362c:	4b18      	ldr	r3, [pc, #96]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 800362e:	683a      	ldr	r2, [r7, #0]
 8003630:	430a      	orrs	r2, r1
 8003632:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003634:	4b16      	ldr	r3, [pc, #88]	; (8003690 <HAL_RCC_ClockConfig+0x184>)
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2201      	movs	r2, #1
 800363a:	4013      	ands	r3, r2
 800363c:	683a      	ldr	r2, [r7, #0]
 800363e:	429a      	cmp	r2, r3
 8003640:	d001      	beq.n	8003646 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e020      	b.n	8003688 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	2204      	movs	r2, #4
 800364c:	4013      	ands	r3, r2
 800364e:	d009      	beq.n	8003664 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003650:	4b10      	ldr	r3, [pc, #64]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	4a11      	ldr	r2, [pc, #68]	; (800369c <HAL_RCC_ClockConfig+0x190>)
 8003656:	4013      	ands	r3, r2
 8003658:	0019      	movs	r1, r3
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	68da      	ldr	r2, [r3, #12]
 800365e:	4b0d      	ldr	r3, [pc, #52]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 8003660:	430a      	orrs	r2, r1
 8003662:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003664:	f000 f820 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8003668:	0001      	movs	r1, r0
 800366a:	4b0a      	ldr	r3, [pc, #40]	; (8003694 <HAL_RCC_ClockConfig+0x188>)
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	091b      	lsrs	r3, r3, #4
 8003670:	220f      	movs	r2, #15
 8003672:	4013      	ands	r3, r2
 8003674:	4a0a      	ldr	r2, [pc, #40]	; (80036a0 <HAL_RCC_ClockConfig+0x194>)
 8003676:	5cd3      	ldrb	r3, [r2, r3]
 8003678:	000a      	movs	r2, r1
 800367a:	40da      	lsrs	r2, r3
 800367c:	4b09      	ldr	r3, [pc, #36]	; (80036a4 <HAL_RCC_ClockConfig+0x198>)
 800367e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8003680:	2003      	movs	r0, #3
 8003682:	f7fe fa31 	bl	8001ae8 <HAL_InitTick>
  
  return HAL_OK;
 8003686:	2300      	movs	r3, #0
}
 8003688:	0018      	movs	r0, r3
 800368a:	46bd      	mov	sp, r7
 800368c:	b004      	add	sp, #16
 800368e:	bd80      	pop	{r7, pc}
 8003690:	40022000 	.word	0x40022000
 8003694:	40021000 	.word	0x40021000
 8003698:	00001388 	.word	0x00001388
 800369c:	fffff8ff 	.word	0xfffff8ff
 80036a0:	080055c8 	.word	0x080055c8
 80036a4:	20000004 	.word	0x20000004

080036a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036ae:	2300      	movs	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
 80036b2:	2300      	movs	r3, #0
 80036b4:	60bb      	str	r3, [r7, #8]
 80036b6:	2300      	movs	r3, #0
 80036b8:	617b      	str	r3, [r7, #20]
 80036ba:	2300      	movs	r3, #0
 80036bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036be:	2300      	movs	r3, #0
 80036c0:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 80036c2:	4b20      	ldr	r3, [pc, #128]	; (8003744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036c4:	685b      	ldr	r3, [r3, #4]
 80036c6:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	220c      	movs	r2, #12
 80036cc:	4013      	ands	r3, r2
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d002      	beq.n	80036d8 <HAL_RCC_GetSysClockFreq+0x30>
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d003      	beq.n	80036de <HAL_RCC_GetSysClockFreq+0x36>
 80036d6:	e02c      	b.n	8003732 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80036d8:	4b1b      	ldr	r3, [pc, #108]	; (8003748 <HAL_RCC_GetSysClockFreq+0xa0>)
 80036da:	613b      	str	r3, [r7, #16]
      break;
 80036dc:	e02c      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	0c9b      	lsrs	r3, r3, #18
 80036e2:	220f      	movs	r2, #15
 80036e4:	4013      	ands	r3, r2
 80036e6:	4a19      	ldr	r2, [pc, #100]	; (800374c <HAL_RCC_GetSysClockFreq+0xa4>)
 80036e8:	5cd3      	ldrb	r3, [r2, r3]
 80036ea:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80036ec:	4b15      	ldr	r3, [pc, #84]	; (8003744 <HAL_RCC_GetSysClockFreq+0x9c>)
 80036ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f0:	220f      	movs	r2, #15
 80036f2:	4013      	ands	r3, r2
 80036f4:	4a16      	ldr	r2, [pc, #88]	; (8003750 <HAL_RCC_GetSysClockFreq+0xa8>)
 80036f6:	5cd3      	ldrb	r3, [r2, r3]
 80036f8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	2380      	movs	r3, #128	; 0x80
 80036fe:	025b      	lsls	r3, r3, #9
 8003700:	4013      	ands	r3, r2
 8003702:	d009      	beq.n	8003718 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003704:	68b9      	ldr	r1, [r7, #8]
 8003706:	4810      	ldr	r0, [pc, #64]	; (8003748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003708:	f7fc fcfe 	bl	8000108 <__udivsi3>
 800370c:	0003      	movs	r3, r0
 800370e:	001a      	movs	r2, r3
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	4353      	muls	r3, r2
 8003714:	617b      	str	r3, [r7, #20]
 8003716:	e009      	b.n	800372c <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8003718:	6879      	ldr	r1, [r7, #4]
 800371a:	000a      	movs	r2, r1
 800371c:	0152      	lsls	r2, r2, #5
 800371e:	1a52      	subs	r2, r2, r1
 8003720:	0193      	lsls	r3, r2, #6
 8003722:	1a9b      	subs	r3, r3, r2
 8003724:	00db      	lsls	r3, r3, #3
 8003726:	185b      	adds	r3, r3, r1
 8003728:	021b      	lsls	r3, r3, #8
 800372a:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	613b      	str	r3, [r7, #16]
      break;
 8003730:	e002      	b.n	8003738 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003732:	4b05      	ldr	r3, [pc, #20]	; (8003748 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003734:	613b      	str	r3, [r7, #16]
      break;
 8003736:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8003738:	693b      	ldr	r3, [r7, #16]
}
 800373a:	0018      	movs	r0, r3
 800373c:	46bd      	mov	sp, r7
 800373e:	b006      	add	sp, #24
 8003740:	bd80      	pop	{r7, pc}
 8003742:	46c0      	nop			; (mov r8, r8)
 8003744:	40021000 	.word	0x40021000
 8003748:	007a1200 	.word	0x007a1200
 800374c:	080055e0 	.word	0x080055e0
 8003750:	080055f0 	.word	0x080055f0

08003754 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003754:	b580      	push	{r7, lr}
 8003756:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003758:	4b02      	ldr	r3, [pc, #8]	; (8003764 <HAL_RCC_GetHCLKFreq+0x10>)
 800375a:	681b      	ldr	r3, [r3, #0]
}
 800375c:	0018      	movs	r0, r3
 800375e:	46bd      	mov	sp, r7
 8003760:	bd80      	pop	{r7, pc}
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	20000004 	.word	0x20000004

08003768 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800376c:	f7ff fff2 	bl	8003754 <HAL_RCC_GetHCLKFreq>
 8003770:	0001      	movs	r1, r0
 8003772:	4b06      	ldr	r3, [pc, #24]	; (800378c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	0a1b      	lsrs	r3, r3, #8
 8003778:	2207      	movs	r2, #7
 800377a:	4013      	ands	r3, r2
 800377c:	4a04      	ldr	r2, [pc, #16]	; (8003790 <HAL_RCC_GetPCLK1Freq+0x28>)
 800377e:	5cd3      	ldrb	r3, [r2, r3]
 8003780:	40d9      	lsrs	r1, r3
 8003782:	000b      	movs	r3, r1
}    
 8003784:	0018      	movs	r0, r3
 8003786:	46bd      	mov	sp, r7
 8003788:	bd80      	pop	{r7, pc}
 800378a:	46c0      	nop			; (mov r8, r8)
 800378c:	40021000 	.word	0x40021000
 8003790:	080055d8 	.word	0x080055d8

08003794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003794:	b580      	push	{r7, lr}
 8003796:	b086      	sub	sp, #24
 8003798:	af00      	add	r7, sp, #0
 800379a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800379c:	2300      	movs	r3, #0
 800379e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 80037a0:	2300      	movs	r3, #0
 80037a2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681a      	ldr	r2, [r3, #0]
 80037a8:	2380      	movs	r3, #128	; 0x80
 80037aa:	025b      	lsls	r3, r3, #9
 80037ac:	4013      	ands	r3, r2
 80037ae:	d100      	bne.n	80037b2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 80037b0:	e08e      	b.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 80037b2:	2017      	movs	r0, #23
 80037b4:	183b      	adds	r3, r7, r0
 80037b6:	2200      	movs	r2, #0
 80037b8:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80037ba:	4b57      	ldr	r3, [pc, #348]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037bc:	69da      	ldr	r2, [r3, #28]
 80037be:	2380      	movs	r3, #128	; 0x80
 80037c0:	055b      	lsls	r3, r3, #21
 80037c2:	4013      	ands	r3, r2
 80037c4:	d110      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80037c6:	4b54      	ldr	r3, [pc, #336]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037c8:	69da      	ldr	r2, [r3, #28]
 80037ca:	4b53      	ldr	r3, [pc, #332]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037cc:	2180      	movs	r1, #128	; 0x80
 80037ce:	0549      	lsls	r1, r1, #21
 80037d0:	430a      	orrs	r2, r1
 80037d2:	61da      	str	r2, [r3, #28]
 80037d4:	4b50      	ldr	r3, [pc, #320]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80037d6:	69da      	ldr	r2, [r3, #28]
 80037d8:	2380      	movs	r3, #128	; 0x80
 80037da:	055b      	lsls	r3, r3, #21
 80037dc:	4013      	ands	r3, r2
 80037de:	60bb      	str	r3, [r7, #8]
 80037e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80037e2:	183b      	adds	r3, r7, r0
 80037e4:	2201      	movs	r2, #1
 80037e6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037e8:	4b4c      	ldr	r3, [pc, #304]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	2380      	movs	r3, #128	; 0x80
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4013      	ands	r3, r2
 80037f2:	d11a      	bne.n	800382a <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80037f4:	4b49      	ldr	r3, [pc, #292]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037f6:	681a      	ldr	r2, [r3, #0]
 80037f8:	4b48      	ldr	r3, [pc, #288]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80037fa:	2180      	movs	r1, #128	; 0x80
 80037fc:	0049      	lsls	r1, r1, #1
 80037fe:	430a      	orrs	r2, r1
 8003800:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003802:	f7fe f9b7 	bl	8001b74 <HAL_GetTick>
 8003806:	0003      	movs	r3, r0
 8003808:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800380a:	e008      	b.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800380c:	f7fe f9b2 	bl	8001b74 <HAL_GetTick>
 8003810:	0002      	movs	r2, r0
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	2b64      	cmp	r3, #100	; 0x64
 8003818:	d901      	bls.n	800381e <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800381a:	2303      	movs	r3, #3
 800381c:	e077      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800381e:	4b3f      	ldr	r3, [pc, #252]	; (800391c <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	2380      	movs	r3, #128	; 0x80
 8003824:	005b      	lsls	r3, r3, #1
 8003826:	4013      	ands	r3, r2
 8003828:	d0f0      	beq.n	800380c <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800382a:	4b3b      	ldr	r3, [pc, #236]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800382c:	6a1a      	ldr	r2, [r3, #32]
 800382e:	23c0      	movs	r3, #192	; 0xc0
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	4013      	ands	r3, r2
 8003834:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d034      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	685a      	ldr	r2, [r3, #4]
 8003840:	23c0      	movs	r3, #192	; 0xc0
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	4013      	ands	r3, r2
 8003846:	68fa      	ldr	r2, [r7, #12]
 8003848:	429a      	cmp	r2, r3
 800384a:	d02c      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800384c:	4b32      	ldr	r3, [pc, #200]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	4a33      	ldr	r2, [pc, #204]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003852:	4013      	ands	r3, r2
 8003854:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003856:	4b30      	ldr	r3, [pc, #192]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003858:	6a1a      	ldr	r2, [r3, #32]
 800385a:	4b2f      	ldr	r3, [pc, #188]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800385c:	2180      	movs	r1, #128	; 0x80
 800385e:	0249      	lsls	r1, r1, #9
 8003860:	430a      	orrs	r2, r1
 8003862:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003864:	4b2c      	ldr	r3, [pc, #176]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003866:	6a1a      	ldr	r2, [r3, #32]
 8003868:	4b2b      	ldr	r3, [pc, #172]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800386a:	492e      	ldr	r1, [pc, #184]	; (8003924 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800386c:	400a      	ands	r2, r1
 800386e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003870:	4b29      	ldr	r3, [pc, #164]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003872:	68fa      	ldr	r2, [r7, #12]
 8003874:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	2201      	movs	r2, #1
 800387a:	4013      	ands	r3, r2
 800387c:	d013      	beq.n	80038a6 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800387e:	f7fe f979 	bl	8001b74 <HAL_GetTick>
 8003882:	0003      	movs	r3, r0
 8003884:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003886:	e009      	b.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003888:	f7fe f974 	bl	8001b74 <HAL_GetTick>
 800388c:	0002      	movs	r2, r0
 800388e:	693b      	ldr	r3, [r7, #16]
 8003890:	1ad3      	subs	r3, r2, r3
 8003892:	4a25      	ldr	r2, [pc, #148]	; (8003928 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d901      	bls.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8003898:	2303      	movs	r3, #3
 800389a:	e038      	b.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800389c:	4b1e      	ldr	r3, [pc, #120]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800389e:	6a1b      	ldr	r3, [r3, #32]
 80038a0:	2202      	movs	r2, #2
 80038a2:	4013      	ands	r3, r2
 80038a4:	d0f0      	beq.n	8003888 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80038a6:	4b1c      	ldr	r3, [pc, #112]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038a8:	6a1b      	ldr	r3, [r3, #32]
 80038aa:	4a1d      	ldr	r2, [pc, #116]	; (8003920 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80038ac:	4013      	ands	r3, r2
 80038ae:	0019      	movs	r1, r3
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	685a      	ldr	r2, [r3, #4]
 80038b4:	4b18      	ldr	r3, [pc, #96]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038b6:	430a      	orrs	r2, r1
 80038b8:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80038ba:	2317      	movs	r3, #23
 80038bc:	18fb      	adds	r3, r7, r3
 80038be:	781b      	ldrb	r3, [r3, #0]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d105      	bne.n	80038d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80038c4:	4b14      	ldr	r3, [pc, #80]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038c6:	69da      	ldr	r2, [r3, #28]
 80038c8:	4b13      	ldr	r3, [pc, #76]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038ca:	4918      	ldr	r1, [pc, #96]	; (800392c <HAL_RCCEx_PeriphCLKConfig+0x198>)
 80038cc:	400a      	ands	r2, r1
 80038ce:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2201      	movs	r2, #1
 80038d6:	4013      	ands	r3, r2
 80038d8:	d009      	beq.n	80038ee <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80038da:	4b0f      	ldr	r3, [pc, #60]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	2203      	movs	r2, #3
 80038e0:	4393      	bics	r3, r2
 80038e2:	0019      	movs	r1, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	689a      	ldr	r2, [r3, #8]
 80038e8:	4b0b      	ldr	r3, [pc, #44]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038ea:	430a      	orrs	r2, r1
 80038ec:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	2220      	movs	r2, #32
 80038f4:	4013      	ands	r3, r2
 80038f6:	d009      	beq.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80038f8:	4b07      	ldr	r3, [pc, #28]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80038fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038fc:	2210      	movs	r2, #16
 80038fe:	4393      	bics	r3, r2
 8003900:	0019      	movs	r1, r3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	68da      	ldr	r2, [r3, #12]
 8003906:	4b04      	ldr	r3, [pc, #16]	; (8003918 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003908:	430a      	orrs	r2, r1
 800390a:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 800390c:	2300      	movs	r3, #0
}
 800390e:	0018      	movs	r0, r3
 8003910:	46bd      	mov	sp, r7
 8003912:	b006      	add	sp, #24
 8003914:	bd80      	pop	{r7, pc}
 8003916:	46c0      	nop			; (mov r8, r8)
 8003918:	40021000 	.word	0x40021000
 800391c:	40007000 	.word	0x40007000
 8003920:	fffffcff 	.word	0xfffffcff
 8003924:	fffeffff 	.word	0xfffeffff
 8003928:	00001388 	.word	0x00001388
 800392c:	efffffff 	.word	0xefffffff

08003930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e042      	b.n	80039c8 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	223d      	movs	r2, #61	; 0x3d
 8003946:	5c9b      	ldrb	r3, [r3, r2]
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d107      	bne.n	800395e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	223c      	movs	r2, #60	; 0x3c
 8003952:	2100      	movs	r1, #0
 8003954:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	0018      	movs	r0, r3
 800395a:	f7fd ff19 	bl	8001790 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	223d      	movs	r2, #61	; 0x3d
 8003962:	2102      	movs	r1, #2
 8003964:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	3304      	adds	r3, #4
 800396e:	0019      	movs	r1, r3
 8003970:	0010      	movs	r0, r2
 8003972:	f000 fc69 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2246      	movs	r2, #70	; 0x46
 800397a:	2101      	movs	r1, #1
 800397c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	223e      	movs	r2, #62	; 0x3e
 8003982:	2101      	movs	r1, #1
 8003984:	5499      	strb	r1, [r3, r2]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	223f      	movs	r2, #63	; 0x3f
 800398a:	2101      	movs	r1, #1
 800398c:	5499      	strb	r1, [r3, r2]
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2240      	movs	r2, #64	; 0x40
 8003992:	2101      	movs	r1, #1
 8003994:	5499      	strb	r1, [r3, r2]
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2241      	movs	r2, #65	; 0x41
 800399a:	2101      	movs	r1, #1
 800399c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2242      	movs	r2, #66	; 0x42
 80039a2:	2101      	movs	r1, #1
 80039a4:	5499      	strb	r1, [r3, r2]
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2243      	movs	r2, #67	; 0x43
 80039aa:	2101      	movs	r1, #1
 80039ac:	5499      	strb	r1, [r3, r2]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2244      	movs	r2, #68	; 0x44
 80039b2:	2101      	movs	r1, #1
 80039b4:	5499      	strb	r1, [r3, r2]
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2245      	movs	r2, #69	; 0x45
 80039ba:	2101      	movs	r1, #1
 80039bc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	223d      	movs	r2, #61	; 0x3d
 80039c2:	2101      	movs	r1, #1
 80039c4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	0018      	movs	r0, r3
 80039ca:	46bd      	mov	sp, r7
 80039cc:	b002      	add	sp, #8
 80039ce:	bd80      	pop	{r7, pc}

080039d0 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80039d0:	b580      	push	{r7, lr}
 80039d2:	b082      	sub	sp, #8
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d101      	bne.n	80039e2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80039de:	2301      	movs	r3, #1
 80039e0:	e042      	b.n	8003a68 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	223d      	movs	r2, #61	; 0x3d
 80039e6:	5c9b      	ldrb	r3, [r3, r2]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d107      	bne.n	80039fe <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	223c      	movs	r2, #60	; 0x3c
 80039f2:	2100      	movs	r1, #0
 80039f4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	0018      	movs	r0, r3
 80039fa:	f000 f839 	bl	8003a70 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	223d      	movs	r2, #61	; 0x3d
 8003a02:	2102      	movs	r1, #2
 8003a04:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681a      	ldr	r2, [r3, #0]
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	3304      	adds	r3, #4
 8003a0e:	0019      	movs	r1, r3
 8003a10:	0010      	movs	r0, r2
 8003a12:	f000 fc19 	bl	8004248 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	2246      	movs	r2, #70	; 0x46
 8003a1a:	2101      	movs	r1, #1
 8003a1c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	223e      	movs	r2, #62	; 0x3e
 8003a22:	2101      	movs	r1, #1
 8003a24:	5499      	strb	r1, [r3, r2]
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	223f      	movs	r2, #63	; 0x3f
 8003a2a:	2101      	movs	r1, #1
 8003a2c:	5499      	strb	r1, [r3, r2]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2240      	movs	r2, #64	; 0x40
 8003a32:	2101      	movs	r1, #1
 8003a34:	5499      	strb	r1, [r3, r2]
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2241      	movs	r2, #65	; 0x41
 8003a3a:	2101      	movs	r1, #1
 8003a3c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	2242      	movs	r2, #66	; 0x42
 8003a42:	2101      	movs	r1, #1
 8003a44:	5499      	strb	r1, [r3, r2]
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	2243      	movs	r2, #67	; 0x43
 8003a4a:	2101      	movs	r1, #1
 8003a4c:	5499      	strb	r1, [r3, r2]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2244      	movs	r2, #68	; 0x44
 8003a52:	2101      	movs	r1, #1
 8003a54:	5499      	strb	r1, [r3, r2]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2245      	movs	r2, #69	; 0x45
 8003a5a:	2101      	movs	r1, #1
 8003a5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	223d      	movs	r2, #61	; 0x3d
 8003a62:	2101      	movs	r1, #1
 8003a64:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a66:	2300      	movs	r3, #0
}
 8003a68:	0018      	movs	r0, r3
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	b002      	add	sp, #8
 8003a6e:	bd80      	pop	{r7, pc}

08003a70 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b082      	sub	sp, #8
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a8a:	230f      	movs	r3, #15
 8003a8c:	18fb      	adds	r3, r7, r3
 8003a8e:	2200      	movs	r2, #0
 8003a90:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003a92:	683b      	ldr	r3, [r7, #0]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d104      	bne.n	8003aa2 <HAL_TIM_IC_Start_IT+0x22>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	223e      	movs	r2, #62	; 0x3e
 8003a9c:	5c9b      	ldrb	r3, [r3, r2]
 8003a9e:	b2db      	uxtb	r3, r3
 8003aa0:	e013      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x4a>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b04      	cmp	r3, #4
 8003aa6:	d104      	bne.n	8003ab2 <HAL_TIM_IC_Start_IT+0x32>
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	223f      	movs	r2, #63	; 0x3f
 8003aac:	5c9b      	ldrb	r3, [r3, r2]
 8003aae:	b2db      	uxtb	r3, r3
 8003ab0:	e00b      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x4a>
 8003ab2:	683b      	ldr	r3, [r7, #0]
 8003ab4:	2b08      	cmp	r3, #8
 8003ab6:	d104      	bne.n	8003ac2 <HAL_TIM_IC_Start_IT+0x42>
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2240      	movs	r2, #64	; 0x40
 8003abc:	5c9b      	ldrb	r3, [r3, r2]
 8003abe:	b2db      	uxtb	r3, r3
 8003ac0:	e003      	b.n	8003aca <HAL_TIM_IC_Start_IT+0x4a>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2241      	movs	r2, #65	; 0x41
 8003ac6:	5c9b      	ldrb	r3, [r3, r2]
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	220e      	movs	r2, #14
 8003acc:	18ba      	adds	r2, r7, r2
 8003ace:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d104      	bne.n	8003ae0 <HAL_TIM_IC_Start_IT+0x60>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2242      	movs	r2, #66	; 0x42
 8003ada:	5c9b      	ldrb	r3, [r3, r2]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	e013      	b.n	8003b08 <HAL_TIM_IC_Start_IT+0x88>
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d104      	bne.n	8003af0 <HAL_TIM_IC_Start_IT+0x70>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	2243      	movs	r2, #67	; 0x43
 8003aea:	5c9b      	ldrb	r3, [r3, r2]
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	e00b      	b.n	8003b08 <HAL_TIM_IC_Start_IT+0x88>
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	2b08      	cmp	r3, #8
 8003af4:	d104      	bne.n	8003b00 <HAL_TIM_IC_Start_IT+0x80>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2244      	movs	r2, #68	; 0x44
 8003afa:	5c9b      	ldrb	r3, [r3, r2]
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	e003      	b.n	8003b08 <HAL_TIM_IC_Start_IT+0x88>
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2245      	movs	r2, #69	; 0x45
 8003b04:	5c9b      	ldrb	r3, [r3, r2]
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	210d      	movs	r1, #13
 8003b0a:	187a      	adds	r2, r7, r1
 8003b0c:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003b0e:	230e      	movs	r3, #14
 8003b10:	18fb      	adds	r3, r7, r3
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	2b01      	cmp	r3, #1
 8003b16:	d103      	bne.n	8003b20 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003b18:	187b      	adds	r3, r7, r1
 8003b1a:	781b      	ldrb	r3, [r3, #0]
 8003b1c:	2b01      	cmp	r3, #1
 8003b1e:	d001      	beq.n	8003b24 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e0a6      	b.n	8003c72 <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <HAL_TIM_IC_Start_IT+0xb4>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	223e      	movs	r2, #62	; 0x3e
 8003b2e:	2102      	movs	r1, #2
 8003b30:	5499      	strb	r1, [r3, r2]
 8003b32:	e013      	b.n	8003b5c <HAL_TIM_IC_Start_IT+0xdc>
 8003b34:	683b      	ldr	r3, [r7, #0]
 8003b36:	2b04      	cmp	r3, #4
 8003b38:	d104      	bne.n	8003b44 <HAL_TIM_IC_Start_IT+0xc4>
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	223f      	movs	r2, #63	; 0x3f
 8003b3e:	2102      	movs	r1, #2
 8003b40:	5499      	strb	r1, [r3, r2]
 8003b42:	e00b      	b.n	8003b5c <HAL_TIM_IC_Start_IT+0xdc>
 8003b44:	683b      	ldr	r3, [r7, #0]
 8003b46:	2b08      	cmp	r3, #8
 8003b48:	d104      	bne.n	8003b54 <HAL_TIM_IC_Start_IT+0xd4>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2240      	movs	r2, #64	; 0x40
 8003b4e:	2102      	movs	r1, #2
 8003b50:	5499      	strb	r1, [r3, r2]
 8003b52:	e003      	b.n	8003b5c <HAL_TIM_IC_Start_IT+0xdc>
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2241      	movs	r2, #65	; 0x41
 8003b58:	2102      	movs	r1, #2
 8003b5a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b5c:	683b      	ldr	r3, [r7, #0]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d104      	bne.n	8003b6c <HAL_TIM_IC_Start_IT+0xec>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2242      	movs	r2, #66	; 0x42
 8003b66:	2102      	movs	r1, #2
 8003b68:	5499      	strb	r1, [r3, r2]
 8003b6a:	e013      	b.n	8003b94 <HAL_TIM_IC_Start_IT+0x114>
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	2b04      	cmp	r3, #4
 8003b70:	d104      	bne.n	8003b7c <HAL_TIM_IC_Start_IT+0xfc>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	2243      	movs	r2, #67	; 0x43
 8003b76:	2102      	movs	r1, #2
 8003b78:	5499      	strb	r1, [r3, r2]
 8003b7a:	e00b      	b.n	8003b94 <HAL_TIM_IC_Start_IT+0x114>
 8003b7c:	683b      	ldr	r3, [r7, #0]
 8003b7e:	2b08      	cmp	r3, #8
 8003b80:	d104      	bne.n	8003b8c <HAL_TIM_IC_Start_IT+0x10c>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2244      	movs	r2, #68	; 0x44
 8003b86:	2102      	movs	r1, #2
 8003b88:	5499      	strb	r1, [r3, r2]
 8003b8a:	e003      	b.n	8003b94 <HAL_TIM_IC_Start_IT+0x114>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2245      	movs	r2, #69	; 0x45
 8003b90:	2102      	movs	r1, #2
 8003b92:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	2b0c      	cmp	r3, #12
 8003b98:	d02a      	beq.n	8003bf0 <HAL_TIM_IC_Start_IT+0x170>
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	2b0c      	cmp	r3, #12
 8003b9e:	d830      	bhi.n	8003c02 <HAL_TIM_IC_Start_IT+0x182>
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	2b08      	cmp	r3, #8
 8003ba4:	d01b      	beq.n	8003bde <HAL_TIM_IC_Start_IT+0x15e>
 8003ba6:	683b      	ldr	r3, [r7, #0]
 8003ba8:	2b08      	cmp	r3, #8
 8003baa:	d82a      	bhi.n	8003c02 <HAL_TIM_IC_Start_IT+0x182>
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d003      	beq.n	8003bba <HAL_TIM_IC_Start_IT+0x13a>
 8003bb2:	683b      	ldr	r3, [r7, #0]
 8003bb4:	2b04      	cmp	r3, #4
 8003bb6:	d009      	beq.n	8003bcc <HAL_TIM_IC_Start_IT+0x14c>
 8003bb8:	e023      	b.n	8003c02 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	68da      	ldr	r2, [r3, #12]
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	2102      	movs	r1, #2
 8003bc6:	430a      	orrs	r2, r1
 8003bc8:	60da      	str	r2, [r3, #12]
      break;
 8003bca:	e01f      	b.n	8003c0c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	68da      	ldr	r2, [r3, #12]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	2104      	movs	r1, #4
 8003bd8:	430a      	orrs	r2, r1
 8003bda:	60da      	str	r2, [r3, #12]
      break;
 8003bdc:	e016      	b.n	8003c0c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	68da      	ldr	r2, [r3, #12]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	2108      	movs	r1, #8
 8003bea:	430a      	orrs	r2, r1
 8003bec:	60da      	str	r2, [r3, #12]
      break;
 8003bee:	e00d      	b.n	8003c0c <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	68da      	ldr	r2, [r3, #12]
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	2110      	movs	r1, #16
 8003bfc:	430a      	orrs	r2, r1
 8003bfe:	60da      	str	r2, [r3, #12]
      break;
 8003c00:	e004      	b.n	8003c0c <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8003c02:	230f      	movs	r3, #15
 8003c04:	18fb      	adds	r3, r7, r3
 8003c06:	2201      	movs	r2, #1
 8003c08:	701a      	strb	r2, [r3, #0]
      break;
 8003c0a:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003c0c:	230f      	movs	r3, #15
 8003c0e:	18fb      	adds	r3, r7, r3
 8003c10:	781b      	ldrb	r3, [r3, #0]
 8003c12:	2b00      	cmp	r3, #0
 8003c14:	d12a      	bne.n	8003c6c <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	6839      	ldr	r1, [r7, #0]
 8003c1c:	2201      	movs	r2, #1
 8003c1e:	0018      	movs	r0, r3
 8003c20:	f000 fd32 	bl	8004688 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a14      	ldr	r2, [pc, #80]	; (8003c7c <HAL_TIM_IC_Start_IT+0x1fc>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d004      	beq.n	8003c38 <HAL_TIM_IC_Start_IT+0x1b8>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a13      	ldr	r2, [pc, #76]	; (8003c80 <HAL_TIM_IC_Start_IT+0x200>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d111      	bne.n	8003c5c <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689b      	ldr	r3, [r3, #8]
 8003c3e:	2207      	movs	r2, #7
 8003c40:	4013      	ands	r3, r2
 8003c42:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	2b06      	cmp	r3, #6
 8003c48:	d010      	beq.n	8003c6c <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	2101      	movs	r1, #1
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c5a:	e007      	b.n	8003c6c <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	2101      	movs	r1, #1
 8003c68:	430a      	orrs	r2, r1
 8003c6a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8003c6c:	230f      	movs	r3, #15
 8003c6e:	18fb      	adds	r3, r7, r3
 8003c70:	781b      	ldrb	r3, [r3, #0]
}
 8003c72:	0018      	movs	r0, r3
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b004      	add	sp, #16
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	40012c00 	.word	0x40012c00
 8003c80:	40000400 	.word	0x40000400

08003c84 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	2202      	movs	r2, #2
 8003c94:	4013      	ands	r3, r2
 8003c96:	2b02      	cmp	r3, #2
 8003c98:	d124      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	2202      	movs	r2, #2
 8003ca2:	4013      	ands	r3, r2
 8003ca4:	2b02      	cmp	r3, #2
 8003ca6:	d11d      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2203      	movs	r2, #3
 8003cae:	4252      	negs	r2, r2
 8003cb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	699b      	ldr	r3, [r3, #24]
 8003cbe:	2203      	movs	r2, #3
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	d004      	beq.n	8003cce <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	0018      	movs	r0, r3
 8003cc8:	f7fd fa46 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003ccc:	e007      	b.n	8003cde <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f000 faa1 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	0018      	movs	r0, r3
 8003cda:	f000 faa5 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	2200      	movs	r2, #0
 8003ce2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2204      	movs	r2, #4
 8003cec:	4013      	ands	r3, r2
 8003cee:	2b04      	cmp	r3, #4
 8003cf0:	d125      	bne.n	8003d3e <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	68db      	ldr	r3, [r3, #12]
 8003cf8:	2204      	movs	r2, #4
 8003cfa:	4013      	ands	r3, r2
 8003cfc:	2b04      	cmp	r3, #4
 8003cfe:	d11e      	bne.n	8003d3e <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2205      	movs	r2, #5
 8003d06:	4252      	negs	r2, r2
 8003d08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2202      	movs	r2, #2
 8003d0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	699a      	ldr	r2, [r3, #24]
 8003d16:	23c0      	movs	r3, #192	; 0xc0
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	4013      	ands	r3, r2
 8003d1c:	d004      	beq.n	8003d28 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	0018      	movs	r0, r3
 8003d22:	f7fd fa19 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003d26:	e007      	b.n	8003d38 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	0018      	movs	r0, r3
 8003d2c:	f000 fa74 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	0018      	movs	r0, r3
 8003d34:	f000 fa78 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	2208      	movs	r2, #8
 8003d46:	4013      	ands	r3, r2
 8003d48:	2b08      	cmp	r3, #8
 8003d4a:	d124      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	68db      	ldr	r3, [r3, #12]
 8003d52:	2208      	movs	r2, #8
 8003d54:	4013      	ands	r3, r2
 8003d56:	2b08      	cmp	r3, #8
 8003d58:	d11d      	bne.n	8003d96 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	2209      	movs	r2, #9
 8003d60:	4252      	negs	r2, r2
 8003d62:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2204      	movs	r2, #4
 8003d68:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	69db      	ldr	r3, [r3, #28]
 8003d70:	2203      	movs	r2, #3
 8003d72:	4013      	ands	r3, r2
 8003d74:	d004      	beq.n	8003d80 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	0018      	movs	r0, r3
 8003d7a:	f7fd f9ed 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003d7e:	e007      	b.n	8003d90 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	0018      	movs	r0, r3
 8003d84:	f000 fa48 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	0018      	movs	r0, r3
 8003d8c:	f000 fa4c 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2200      	movs	r2, #0
 8003d94:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	2210      	movs	r2, #16
 8003d9e:	4013      	ands	r3, r2
 8003da0:	2b10      	cmp	r3, #16
 8003da2:	d125      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	68db      	ldr	r3, [r3, #12]
 8003daa:	2210      	movs	r2, #16
 8003dac:	4013      	ands	r3, r2
 8003dae:	2b10      	cmp	r3, #16
 8003db0:	d11e      	bne.n	8003df0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2211      	movs	r2, #17
 8003db8:	4252      	negs	r2, r2
 8003dba:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2208      	movs	r2, #8
 8003dc0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	69da      	ldr	r2, [r3, #28]
 8003dc8:	23c0      	movs	r3, #192	; 0xc0
 8003dca:	009b      	lsls	r3, r3, #2
 8003dcc:	4013      	ands	r3, r2
 8003dce:	d004      	beq.n	8003dda <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	0018      	movs	r0, r3
 8003dd4:	f7fd f9c0 	bl	8001158 <HAL_TIM_IC_CaptureCallback>
 8003dd8:	e007      	b.n	8003dea <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f000 fa1b 	bl	8004218 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	0018      	movs	r0, r3
 8003de6:	f000 fa1f 	bl	8004228 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	2200      	movs	r2, #0
 8003dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	691b      	ldr	r3, [r3, #16]
 8003df6:	2201      	movs	r2, #1
 8003df8:	4013      	ands	r3, r2
 8003dfa:	2b01      	cmp	r3, #1
 8003dfc:	d10f      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68db      	ldr	r3, [r3, #12]
 8003e04:	2201      	movs	r2, #1
 8003e06:	4013      	ands	r3, r2
 8003e08:	2b01      	cmp	r3, #1
 8003e0a:	d108      	bne.n	8003e1e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2202      	movs	r2, #2
 8003e12:	4252      	negs	r2, r2
 8003e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	0018      	movs	r0, r3
 8003e1a:	f000 f9f5 	bl	8004208 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	2280      	movs	r2, #128	; 0x80
 8003e26:	4013      	ands	r3, r2
 8003e28:	2b80      	cmp	r3, #128	; 0x80
 8003e2a:	d10f      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68db      	ldr	r3, [r3, #12]
 8003e32:	2280      	movs	r2, #128	; 0x80
 8003e34:	4013      	ands	r3, r2
 8003e36:	2b80      	cmp	r3, #128	; 0x80
 8003e38:	d108      	bne.n	8003e4c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	2281      	movs	r2, #129	; 0x81
 8003e40:	4252      	negs	r2, r2
 8003e42:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	0018      	movs	r0, r3
 8003e48:	f000 fc9c 	bl	8004784 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	691b      	ldr	r3, [r3, #16]
 8003e52:	2240      	movs	r2, #64	; 0x40
 8003e54:	4013      	ands	r3, r2
 8003e56:	2b40      	cmp	r3, #64	; 0x40
 8003e58:	d10f      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	68db      	ldr	r3, [r3, #12]
 8003e60:	2240      	movs	r2, #64	; 0x40
 8003e62:	4013      	ands	r3, r2
 8003e64:	2b40      	cmp	r3, #64	; 0x40
 8003e66:	d108      	bne.n	8003e7a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	2241      	movs	r2, #65	; 0x41
 8003e6e:	4252      	negs	r2, r2
 8003e70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	0018      	movs	r0, r3
 8003e76:	f000 f9df 	bl	8004238 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691b      	ldr	r3, [r3, #16]
 8003e80:	2220      	movs	r2, #32
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b20      	cmp	r3, #32
 8003e86:	d10f      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	68db      	ldr	r3, [r3, #12]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	4013      	ands	r3, r2
 8003e92:	2b20      	cmp	r3, #32
 8003e94:	d108      	bne.n	8003ea8 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	2221      	movs	r2, #33	; 0x21
 8003e9c:	4252      	negs	r2, r2
 8003e9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	0018      	movs	r0, r3
 8003ea4:	f000 fc66 	bl	8004774 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ea8:	46c0      	nop			; (mov r8, r8)
 8003eaa:	46bd      	mov	sp, r7
 8003eac:	b002      	add	sp, #8
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003ebc:	2317      	movs	r3, #23
 8003ebe:	18fb      	adds	r3, r7, r3
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	223c      	movs	r2, #60	; 0x3c
 8003ec8:	5c9b      	ldrb	r3, [r3, r2]
 8003eca:	2b01      	cmp	r3, #1
 8003ecc:	d101      	bne.n	8003ed2 <HAL_TIM_IC_ConfigChannel+0x22>
 8003ece:	2302      	movs	r3, #2
 8003ed0:	e08c      	b.n	8003fec <HAL_TIM_IC_ConfigChannel+0x13c>
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	223c      	movs	r2, #60	; 0x3c
 8003ed6:	2101      	movs	r1, #1
 8003ed8:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d11b      	bne.n	8003f18 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003ee4:	68bb      	ldr	r3, [r7, #8]
 8003ee6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ef0:	f000 fa16 	bl	8004320 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	699a      	ldr	r2, [r3, #24]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	210c      	movs	r1, #12
 8003f00:	438a      	bics	r2, r1
 8003f02:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	6999      	ldr	r1, [r3, #24]
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	689a      	ldr	r2, [r3, #8]
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	430a      	orrs	r2, r1
 8003f14:	619a      	str	r2, [r3, #24]
 8003f16:	e062      	b.n	8003fde <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2b04      	cmp	r3, #4
 8003f1c:	d11c      	bne.n	8003f58 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003f2e:	f000 fa77 	bl	8004420 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	699a      	ldr	r2, [r3, #24]
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	492d      	ldr	r1, [pc, #180]	; (8003ff4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003f3e:	400a      	ands	r2, r1
 8003f40:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	6999      	ldr	r1, [r3, #24]
 8003f48:	68bb      	ldr	r3, [r7, #8]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	021a      	lsls	r2, r3, #8
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	430a      	orrs	r2, r1
 8003f54:	619a      	str	r2, [r3, #24]
 8003f56:	e042      	b.n	8003fde <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2b08      	cmp	r3, #8
 8003f5c:	d11b      	bne.n	8003f96 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003f6e:	f000 facb 	bl	8004508 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	69da      	ldr	r2, [r3, #28]
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	210c      	movs	r1, #12
 8003f7e:	438a      	bics	r2, r1
 8003f80:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69d9      	ldr	r1, [r3, #28]
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	689a      	ldr	r2, [r3, #8]
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	430a      	orrs	r2, r1
 8003f92:	61da      	str	r2, [r3, #28]
 8003f94:	e023      	b.n	8003fde <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2b0c      	cmp	r3, #12
 8003f9a:	d11c      	bne.n	8003fd6 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003fac:	f000 faec 	bl	8004588 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	69da      	ldr	r2, [r3, #28]
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	490e      	ldr	r1, [pc, #56]	; (8003ff4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003fbc:	400a      	ands	r2, r1
 8003fbe:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	69d9      	ldr	r1, [r3, #28]
 8003fc6:	68bb      	ldr	r3, [r7, #8]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	021a      	lsls	r2, r3, #8
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	430a      	orrs	r2, r1
 8003fd2:	61da      	str	r2, [r3, #28]
 8003fd4:	e003      	b.n	8003fde <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8003fd6:	2317      	movs	r3, #23
 8003fd8:	18fb      	adds	r3, r7, r3
 8003fda:	2201      	movs	r2, #1
 8003fdc:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	223c      	movs	r2, #60	; 0x3c
 8003fe2:	2100      	movs	r1, #0
 8003fe4:	5499      	strb	r1, [r3, r2]

  return status;
 8003fe6:	2317      	movs	r3, #23
 8003fe8:	18fb      	adds	r3, r7, r3
 8003fea:	781b      	ldrb	r3, [r3, #0]
}
 8003fec:	0018      	movs	r0, r3
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	b006      	add	sp, #24
 8003ff2:	bd80      	pop	{r7, pc}
 8003ff4:	fffff3ff 	.word	0xfffff3ff

08003ff8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b084      	sub	sp, #16
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
 8004000:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004002:	230f      	movs	r3, #15
 8004004:	18fb      	adds	r3, r7, r3
 8004006:	2200      	movs	r2, #0
 8004008:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	223c      	movs	r2, #60	; 0x3c
 800400e:	5c9b      	ldrb	r3, [r3, r2]
 8004010:	2b01      	cmp	r3, #1
 8004012:	d101      	bne.n	8004018 <HAL_TIM_ConfigClockSource+0x20>
 8004014:	2302      	movs	r3, #2
 8004016:	e0bc      	b.n	8004192 <HAL_TIM_ConfigClockSource+0x19a>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	223c      	movs	r2, #60	; 0x3c
 800401c:	2101      	movs	r1, #1
 800401e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	223d      	movs	r2, #61	; 0x3d
 8004024:	2102      	movs	r1, #2
 8004026:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004030:	68bb      	ldr	r3, [r7, #8]
 8004032:	2277      	movs	r2, #119	; 0x77
 8004034:	4393      	bics	r3, r2
 8004036:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4a58      	ldr	r2, [pc, #352]	; (800419c <HAL_TIM_ConfigClockSource+0x1a4>)
 800403c:	4013      	ands	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004048:	683b      	ldr	r3, [r7, #0]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	2280      	movs	r2, #128	; 0x80
 800404e:	0192      	lsls	r2, r2, #6
 8004050:	4293      	cmp	r3, r2
 8004052:	d040      	beq.n	80040d6 <HAL_TIM_ConfigClockSource+0xde>
 8004054:	2280      	movs	r2, #128	; 0x80
 8004056:	0192      	lsls	r2, r2, #6
 8004058:	4293      	cmp	r3, r2
 800405a:	d900      	bls.n	800405e <HAL_TIM_ConfigClockSource+0x66>
 800405c:	e088      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 800405e:	2280      	movs	r2, #128	; 0x80
 8004060:	0152      	lsls	r2, r2, #5
 8004062:	4293      	cmp	r3, r2
 8004064:	d100      	bne.n	8004068 <HAL_TIM_ConfigClockSource+0x70>
 8004066:	e088      	b.n	800417a <HAL_TIM_ConfigClockSource+0x182>
 8004068:	2280      	movs	r2, #128	; 0x80
 800406a:	0152      	lsls	r2, r2, #5
 800406c:	4293      	cmp	r3, r2
 800406e:	d900      	bls.n	8004072 <HAL_TIM_ConfigClockSource+0x7a>
 8004070:	e07e      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 8004072:	2b70      	cmp	r3, #112	; 0x70
 8004074:	d018      	beq.n	80040a8 <HAL_TIM_ConfigClockSource+0xb0>
 8004076:	d900      	bls.n	800407a <HAL_TIM_ConfigClockSource+0x82>
 8004078:	e07a      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 800407a:	2b60      	cmp	r3, #96	; 0x60
 800407c:	d04f      	beq.n	800411e <HAL_TIM_ConfigClockSource+0x126>
 800407e:	d900      	bls.n	8004082 <HAL_TIM_ConfigClockSource+0x8a>
 8004080:	e076      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 8004082:	2b50      	cmp	r3, #80	; 0x50
 8004084:	d03b      	beq.n	80040fe <HAL_TIM_ConfigClockSource+0x106>
 8004086:	d900      	bls.n	800408a <HAL_TIM_ConfigClockSource+0x92>
 8004088:	e072      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 800408a:	2b40      	cmp	r3, #64	; 0x40
 800408c:	d057      	beq.n	800413e <HAL_TIM_ConfigClockSource+0x146>
 800408e:	d900      	bls.n	8004092 <HAL_TIM_ConfigClockSource+0x9a>
 8004090:	e06e      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 8004092:	2b30      	cmp	r3, #48	; 0x30
 8004094:	d063      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x166>
 8004096:	d86b      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 8004098:	2b20      	cmp	r3, #32
 800409a:	d060      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x166>
 800409c:	d868      	bhi.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d05d      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x166>
 80040a2:	2b10      	cmp	r3, #16
 80040a4:	d05b      	beq.n	800415e <HAL_TIM_ConfigClockSource+0x166>
 80040a6:	e063      	b.n	8004170 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040b0:	683b      	ldr	r3, [r7, #0]
 80040b2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040b4:	683b      	ldr	r3, [r7, #0]
 80040b6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040b8:	f000 fac6 	bl	8004648 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	2277      	movs	r2, #119	; 0x77
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68ba      	ldr	r2, [r7, #8]
 80040d2:	609a      	str	r2, [r3, #8]
      break;
 80040d4:	e052      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80040e2:	683b      	ldr	r3, [r7, #0]
 80040e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80040e6:	f000 faaf 	bl	8004648 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	2180      	movs	r1, #128	; 0x80
 80040f6:	01c9      	lsls	r1, r1, #7
 80040f8:	430a      	orrs	r2, r1
 80040fa:	609a      	str	r2, [r3, #8]
      break;
 80040fc:	e03e      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	001a      	movs	r2, r3
 800410c:	f000 f95a 	bl	80043c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2150      	movs	r1, #80	; 0x50
 8004116:	0018      	movs	r0, r3
 8004118:	f000 fa7c 	bl	8004614 <TIM_ITRx_SetConfig>
      break;
 800411c:	e02e      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004126:	683b      	ldr	r3, [r7, #0]
 8004128:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412a:	001a      	movs	r2, r3
 800412c:	f000 f9ba 	bl	80044a4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2160      	movs	r1, #96	; 0x60
 8004136:	0018      	movs	r0, r3
 8004138:	f000 fa6c 	bl	8004614 <TIM_ITRx_SetConfig>
      break;
 800413c:	e01e      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	001a      	movs	r2, r3
 800414c:	f000 f93a 	bl	80043c4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2140      	movs	r1, #64	; 0x40
 8004156:	0018      	movs	r0, r3
 8004158:	f000 fa5c 	bl	8004614 <TIM_ITRx_SetConfig>
      break;
 800415c:	e00e      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	683b      	ldr	r3, [r7, #0]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	0019      	movs	r1, r3
 8004168:	0010      	movs	r0, r2
 800416a:	f000 fa53 	bl	8004614 <TIM_ITRx_SetConfig>
      break;
 800416e:	e005      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004170:	230f      	movs	r3, #15
 8004172:	18fb      	adds	r3, r7, r3
 8004174:	2201      	movs	r2, #1
 8004176:	701a      	strb	r2, [r3, #0]
      break;
 8004178:	e000      	b.n	800417c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800417a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	223d      	movs	r2, #61	; 0x3d
 8004180:	2101      	movs	r1, #1
 8004182:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	223c      	movs	r2, #60	; 0x3c
 8004188:	2100      	movs	r1, #0
 800418a:	5499      	strb	r1, [r3, r2]

  return status;
 800418c:	230f      	movs	r3, #15
 800418e:	18fb      	adds	r3, r7, r3
 8004190:	781b      	ldrb	r3, [r3, #0]
}
 8004192:	0018      	movs	r0, r3
 8004194:	46bd      	mov	sp, r7
 8004196:	b004      	add	sp, #16
 8004198:	bd80      	pop	{r7, pc}
 800419a:	46c0      	nop			; (mov r8, r8)
 800419c:	ffff00ff 	.word	0xffff00ff

080041a0 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80041aa:	2300      	movs	r3, #0
 80041ac:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	2b0c      	cmp	r3, #12
 80041b2:	d01e      	beq.n	80041f2 <HAL_TIM_ReadCapturedValue+0x52>
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	2b0c      	cmp	r3, #12
 80041b8:	d820      	bhi.n	80041fc <HAL_TIM_ReadCapturedValue+0x5c>
 80041ba:	683b      	ldr	r3, [r7, #0]
 80041bc:	2b08      	cmp	r3, #8
 80041be:	d013      	beq.n	80041e8 <HAL_TIM_ReadCapturedValue+0x48>
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	2b08      	cmp	r3, #8
 80041c4:	d81a      	bhi.n	80041fc <HAL_TIM_ReadCapturedValue+0x5c>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d003      	beq.n	80041d4 <HAL_TIM_ReadCapturedValue+0x34>
 80041cc:	683b      	ldr	r3, [r7, #0]
 80041ce:	2b04      	cmp	r3, #4
 80041d0:	d005      	beq.n	80041de <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 80041d2:	e013      	b.n	80041fc <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041da:	60fb      	str	r3, [r7, #12]
      break;
 80041dc:	e00f      	b.n	80041fe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041e4:	60fb      	str	r3, [r7, #12]
      break;
 80041e6:	e00a      	b.n	80041fe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ee:	60fb      	str	r3, [r7, #12]
      break;
 80041f0:	e005      	b.n	80041fe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	60fb      	str	r3, [r7, #12]
      break;
 80041fa:	e000      	b.n	80041fe <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 80041fc:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 80041fe:	68fb      	ldr	r3, [r7, #12]
}
 8004200:	0018      	movs	r0, r3
 8004202:	46bd      	mov	sp, r7
 8004204:	b004      	add	sp, #16
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b082      	sub	sp, #8
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004210:	46c0      	nop			; (mov r8, r8)
 8004212:	46bd      	mov	sp, r7
 8004214:	b002      	add	sp, #8
 8004216:	bd80      	pop	{r7, pc}

08004218 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b082      	sub	sp, #8
 800421c:	af00      	add	r7, sp, #0
 800421e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004220:	46c0      	nop			; (mov r8, r8)
 8004222:	46bd      	mov	sp, r7
 8004224:	b002      	add	sp, #8
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004228:	b580      	push	{r7, lr}
 800422a:	b082      	sub	sp, #8
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004230:	46c0      	nop			; (mov r8, r8)
 8004232:	46bd      	mov	sp, r7
 8004234:	b002      	add	sp, #8
 8004236:	bd80      	pop	{r7, pc}

08004238 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b082      	sub	sp, #8
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004240:	46c0      	nop			; (mov r8, r8)
 8004242:	46bd      	mov	sp, r7
 8004244:	b002      	add	sp, #8
 8004246:	bd80      	pop	{r7, pc}

08004248 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b084      	sub	sp, #16
 800424c:	af00      	add	r7, sp, #0
 800424e:	6078      	str	r0, [r7, #4]
 8004250:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	4a2b      	ldr	r2, [pc, #172]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 800425c:	4293      	cmp	r3, r2
 800425e:	d003      	beq.n	8004268 <TIM_Base_SetConfig+0x20>
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a2a      	ldr	r2, [pc, #168]	; (800430c <TIM_Base_SetConfig+0xc4>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d108      	bne.n	800427a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2270      	movs	r2, #112	; 0x70
 800426c:	4393      	bics	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	68fa      	ldr	r2, [r7, #12]
 8004276:	4313      	orrs	r3, r2
 8004278:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	4a22      	ldr	r2, [pc, #136]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d00f      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	4a21      	ldr	r2, [pc, #132]	; (800430c <TIM_Base_SetConfig+0xc4>)
 8004286:	4293      	cmp	r3, r2
 8004288:	d00b      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a20      	ldr	r2, [pc, #128]	; (8004310 <TIM_Base_SetConfig+0xc8>)
 800428e:	4293      	cmp	r3, r2
 8004290:	d007      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	4a1f      	ldr	r2, [pc, #124]	; (8004314 <TIM_Base_SetConfig+0xcc>)
 8004296:	4293      	cmp	r3, r2
 8004298:	d003      	beq.n	80042a2 <TIM_Base_SetConfig+0x5a>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	4a1e      	ldr	r2, [pc, #120]	; (8004318 <TIM_Base_SetConfig+0xd0>)
 800429e:	4293      	cmp	r3, r2
 80042a0:	d108      	bne.n	80042b4 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	4a1d      	ldr	r2, [pc, #116]	; (800431c <TIM_Base_SetConfig+0xd4>)
 80042a6:	4013      	ands	r3, r2
 80042a8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	68db      	ldr	r3, [r3, #12]
 80042ae:	68fa      	ldr	r2, [r7, #12]
 80042b0:	4313      	orrs	r3, r2
 80042b2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2280      	movs	r2, #128	; 0x80
 80042b8:	4393      	bics	r3, r2
 80042ba:	001a      	movs	r2, r3
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	695b      	ldr	r3, [r3, #20]
 80042c0:	4313      	orrs	r3, r2
 80042c2:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	68fa      	ldr	r2, [r7, #12]
 80042c8:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689a      	ldr	r2, [r3, #8]
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	4a0a      	ldr	r2, [pc, #40]	; (8004308 <TIM_Base_SetConfig+0xc0>)
 80042de:	4293      	cmp	r3, r2
 80042e0:	d007      	beq.n	80042f2 <TIM_Base_SetConfig+0xaa>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	4a0b      	ldr	r2, [pc, #44]	; (8004314 <TIM_Base_SetConfig+0xcc>)
 80042e6:	4293      	cmp	r3, r2
 80042e8:	d003      	beq.n	80042f2 <TIM_Base_SetConfig+0xaa>
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	4a0a      	ldr	r2, [pc, #40]	; (8004318 <TIM_Base_SetConfig+0xd0>)
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d103      	bne.n	80042fa <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042f2:	683b      	ldr	r3, [r7, #0]
 80042f4:	691a      	ldr	r2, [r3, #16]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	2201      	movs	r2, #1
 80042fe:	615a      	str	r2, [r3, #20]
}
 8004300:	46c0      	nop			; (mov r8, r8)
 8004302:	46bd      	mov	sp, r7
 8004304:	b004      	add	sp, #16
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40012c00 	.word	0x40012c00
 800430c:	40000400 	.word	0x40000400
 8004310:	40002000 	.word	0x40002000
 8004314:	40014400 	.word	0x40014400
 8004318:	40014800 	.word	0x40014800
 800431c:	fffffcff 	.word	0xfffffcff

08004320 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b086      	sub	sp, #24
 8004324:	af00      	add	r7, sp, #0
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
 800432c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6a1b      	ldr	r3, [r3, #32]
 8004332:	2201      	movs	r2, #1
 8004334:	4393      	bics	r3, r2
 8004336:	001a      	movs	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	699b      	ldr	r3, [r3, #24]
 8004340:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6a1b      	ldr	r3, [r3, #32]
 8004346:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	4a1c      	ldr	r2, [pc, #112]	; (80043bc <TIM_TI1_SetConfig+0x9c>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d003      	beq.n	8004358 <TIM_TI1_SetConfig+0x38>
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	4a1b      	ldr	r2, [pc, #108]	; (80043c0 <TIM_TI1_SetConfig+0xa0>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d101      	bne.n	800435c <TIM_TI1_SetConfig+0x3c>
 8004358:	2301      	movs	r3, #1
 800435a:	e000      	b.n	800435e <TIM_TI1_SetConfig+0x3e>
 800435c:	2300      	movs	r3, #0
 800435e:	2b00      	cmp	r3, #0
 8004360:	d008      	beq.n	8004374 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	2203      	movs	r2, #3
 8004366:	4393      	bics	r3, r2
 8004368:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]
 8004372:	e003      	b.n	800437c <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004374:	697b      	ldr	r3, [r7, #20]
 8004376:	2201      	movs	r2, #1
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	22f0      	movs	r2, #240	; 0xf0
 8004380:	4393      	bics	r3, r2
 8004382:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	011b      	lsls	r3, r3, #4
 8004388:	22ff      	movs	r2, #255	; 0xff
 800438a:	4013      	ands	r3, r2
 800438c:	697a      	ldr	r2, [r7, #20]
 800438e:	4313      	orrs	r3, r2
 8004390:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	220a      	movs	r2, #10
 8004396:	4393      	bics	r3, r2
 8004398:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	220a      	movs	r2, #10
 800439e:	4013      	ands	r3, r2
 80043a0:	693a      	ldr	r2, [r7, #16]
 80043a2:	4313      	orrs	r3, r2
 80043a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	697a      	ldr	r2, [r7, #20]
 80043aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	621a      	str	r2, [r3, #32]
}
 80043b2:	46c0      	nop			; (mov r8, r8)
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b006      	add	sp, #24
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			; (mov r8, r8)
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40000400 	.word	0x40000400

080043c4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b086      	sub	sp, #24
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	6a1b      	ldr	r3, [r3, #32]
 80043d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	6a1b      	ldr	r3, [r3, #32]
 80043da:	2201      	movs	r2, #1
 80043dc:	4393      	bics	r3, r2
 80043de:	001a      	movs	r2, r3
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	22f0      	movs	r2, #240	; 0xf0
 80043ee:	4393      	bics	r3, r2
 80043f0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	011b      	lsls	r3, r3, #4
 80043f6:	693a      	ldr	r2, [r7, #16]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	220a      	movs	r2, #10
 8004400:	4393      	bics	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004404:	697a      	ldr	r2, [r7, #20]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	4313      	orrs	r3, r2
 800440a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	693a      	ldr	r2, [r7, #16]
 8004410:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	621a      	str	r2, [r3, #32]
}
 8004418:	46c0      	nop			; (mov r8, r8)
 800441a:	46bd      	mov	sp, r7
 800441c:	b006      	add	sp, #24
 800441e:	bd80      	pop	{r7, pc}

08004420 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004420:	b580      	push	{r7, lr}
 8004422:	b086      	sub	sp, #24
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a1b      	ldr	r3, [r3, #32]
 8004432:	2210      	movs	r2, #16
 8004434:	4393      	bics	r3, r2
 8004436:	001a      	movs	r2, r3
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	699b      	ldr	r3, [r3, #24]
 8004440:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	6a1b      	ldr	r3, [r3, #32]
 8004446:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004448:	697b      	ldr	r3, [r7, #20]
 800444a:	4a14      	ldr	r2, [pc, #80]	; (800449c <TIM_TI2_SetConfig+0x7c>)
 800444c:	4013      	ands	r3, r2
 800444e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	021b      	lsls	r3, r3, #8
 8004454:	697a      	ldr	r2, [r7, #20]
 8004456:	4313      	orrs	r3, r2
 8004458:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800445a:	697b      	ldr	r3, [r7, #20]
 800445c:	4a10      	ldr	r2, [pc, #64]	; (80044a0 <TIM_TI2_SetConfig+0x80>)
 800445e:	4013      	ands	r3, r2
 8004460:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	031b      	lsls	r3, r3, #12
 8004466:	041b      	lsls	r3, r3, #16
 8004468:	0c1b      	lsrs	r3, r3, #16
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	4313      	orrs	r3, r2
 800446e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	22a0      	movs	r2, #160	; 0xa0
 8004474:	4393      	bics	r3, r2
 8004476:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004478:	68bb      	ldr	r3, [r7, #8]
 800447a:	011b      	lsls	r3, r3, #4
 800447c:	22a0      	movs	r2, #160	; 0xa0
 800447e:	4013      	ands	r3, r2
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	697a      	ldr	r2, [r7, #20]
 800448a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	621a      	str	r2, [r3, #32]
}
 8004492:	46c0      	nop			; (mov r8, r8)
 8004494:	46bd      	mov	sp, r7
 8004496:	b006      	add	sp, #24
 8004498:	bd80      	pop	{r7, pc}
 800449a:	46c0      	nop			; (mov r8, r8)
 800449c:	fffffcff 	.word	0xfffffcff
 80044a0:	ffff0fff 	.word	0xffff0fff

080044a4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b086      	sub	sp, #24
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	60f8      	str	r0, [r7, #12]
 80044ac:	60b9      	str	r1, [r7, #8]
 80044ae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	6a1b      	ldr	r3, [r3, #32]
 80044b4:	2210      	movs	r2, #16
 80044b6:	4393      	bics	r3, r2
 80044b8:	001a      	movs	r2, r3
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ca:	697b      	ldr	r3, [r7, #20]
 80044cc:	4a0d      	ldr	r2, [pc, #52]	; (8004504 <TIM_TI2_ConfigInputStage+0x60>)
 80044ce:	4013      	ands	r3, r2
 80044d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	031b      	lsls	r3, r3, #12
 80044d6:	697a      	ldr	r2, [r7, #20]
 80044d8:	4313      	orrs	r3, r2
 80044da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044dc:	693b      	ldr	r3, [r7, #16]
 80044de:	22a0      	movs	r2, #160	; 0xa0
 80044e0:	4393      	bics	r3, r2
 80044e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044e4:	68bb      	ldr	r3, [r7, #8]
 80044e6:	011b      	lsls	r3, r3, #4
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	4313      	orrs	r3, r2
 80044ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	697a      	ldr	r2, [r7, #20]
 80044f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	693a      	ldr	r2, [r7, #16]
 80044f8:	621a      	str	r2, [r3, #32]
}
 80044fa:	46c0      	nop			; (mov r8, r8)
 80044fc:	46bd      	mov	sp, r7
 80044fe:	b006      	add	sp, #24
 8004500:	bd80      	pop	{r7, pc}
 8004502:	46c0      	nop			; (mov r8, r8)
 8004504:	ffff0fff 	.word	0xffff0fff

08004508 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004508:	b580      	push	{r7, lr}
 800450a:	b086      	sub	sp, #24
 800450c:	af00      	add	r7, sp, #0
 800450e:	60f8      	str	r0, [r7, #12]
 8004510:	60b9      	str	r1, [r7, #8]
 8004512:	607a      	str	r2, [r7, #4]
 8004514:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	4a19      	ldr	r2, [pc, #100]	; (8004580 <TIM_TI3_SetConfig+0x78>)
 800451c:	401a      	ands	r2, r3
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	69db      	ldr	r3, [r3, #28]
 8004526:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	2203      	movs	r2, #3
 8004532:	4393      	bics	r3, r2
 8004534:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8004536:	697a      	ldr	r2, [r7, #20]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4313      	orrs	r3, r2
 800453c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	22f0      	movs	r2, #240	; 0xf0
 8004542:	4393      	bics	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	22ff      	movs	r2, #255	; 0xff
 800454c:	4013      	ands	r3, r2
 800454e:	697a      	ldr	r2, [r7, #20]
 8004550:	4313      	orrs	r3, r2
 8004552:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	4a0b      	ldr	r2, [pc, #44]	; (8004584 <TIM_TI3_SetConfig+0x7c>)
 8004558:	4013      	ands	r3, r2
 800455a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800455c:	68bb      	ldr	r3, [r7, #8]
 800455e:	021a      	lsls	r2, r3, #8
 8004560:	23a0      	movs	r3, #160	; 0xa0
 8004562:	011b      	lsls	r3, r3, #4
 8004564:	4013      	ands	r3, r2
 8004566:	693a      	ldr	r2, [r7, #16]
 8004568:	4313      	orrs	r3, r2
 800456a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	697a      	ldr	r2, [r7, #20]
 8004570:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	621a      	str	r2, [r3, #32]
}
 8004578:	46c0      	nop			; (mov r8, r8)
 800457a:	46bd      	mov	sp, r7
 800457c:	b006      	add	sp, #24
 800457e:	bd80      	pop	{r7, pc}
 8004580:	fffffeff 	.word	0xfffffeff
 8004584:	fffff5ff 	.word	0xfffff5ff

08004588 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b086      	sub	sp, #24
 800458c:	af00      	add	r7, sp, #0
 800458e:	60f8      	str	r0, [r7, #12]
 8004590:	60b9      	str	r1, [r7, #8]
 8004592:	607a      	str	r2, [r7, #4]
 8004594:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	6a1b      	ldr	r3, [r3, #32]
 800459a:	4a1a      	ldr	r2, [pc, #104]	; (8004604 <TIM_TI4_SetConfig+0x7c>)
 800459c:	401a      	ands	r2, r3
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	69db      	ldr	r3, [r3, #28]
 80045a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	6a1b      	ldr	r3, [r3, #32]
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	4a15      	ldr	r2, [pc, #84]	; (8004608 <TIM_TI4_SetConfig+0x80>)
 80045b2:	4013      	ands	r3, r2
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	021b      	lsls	r3, r3, #8
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80045c0:	697b      	ldr	r3, [r7, #20]
 80045c2:	4a12      	ldr	r2, [pc, #72]	; (800460c <TIM_TI4_SetConfig+0x84>)
 80045c4:	4013      	ands	r3, r2
 80045c6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	031b      	lsls	r3, r3, #12
 80045cc:	041b      	lsls	r3, r3, #16
 80045ce:	0c1b      	lsrs	r3, r3, #16
 80045d0:	697a      	ldr	r2, [r7, #20]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80045d6:	693b      	ldr	r3, [r7, #16]
 80045d8:	4a0d      	ldr	r2, [pc, #52]	; (8004610 <TIM_TI4_SetConfig+0x88>)
 80045da:	4013      	ands	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	031a      	lsls	r2, r3, #12
 80045e2:	23a0      	movs	r3, #160	; 0xa0
 80045e4:	021b      	lsls	r3, r3, #8
 80045e6:	4013      	ands	r3, r2
 80045e8:	693a      	ldr	r2, [r7, #16]
 80045ea:	4313      	orrs	r3, r2
 80045ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	697a      	ldr	r2, [r7, #20]
 80045f2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	693a      	ldr	r2, [r7, #16]
 80045f8:	621a      	str	r2, [r3, #32]
}
 80045fa:	46c0      	nop			; (mov r8, r8)
 80045fc:	46bd      	mov	sp, r7
 80045fe:	b006      	add	sp, #24
 8004600:	bd80      	pop	{r7, pc}
 8004602:	46c0      	nop			; (mov r8, r8)
 8004604:	ffffefff 	.word	0xffffefff
 8004608:	fffffcff 	.word	0xfffffcff
 800460c:	ffff0fff 	.word	0xffff0fff
 8004610:	ffff5fff 	.word	0xffff5fff

08004614 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	689b      	ldr	r3, [r3, #8]
 8004622:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	2270      	movs	r2, #112	; 0x70
 8004628:	4393      	bics	r3, r2
 800462a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4313      	orrs	r3, r2
 8004632:	2207      	movs	r2, #7
 8004634:	4313      	orrs	r3, r2
 8004636:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	68fa      	ldr	r2, [r7, #12]
 800463c:	609a      	str	r2, [r3, #8]
}
 800463e:	46c0      	nop			; (mov r8, r8)
 8004640:	46bd      	mov	sp, r7
 8004642:	b004      	add	sp, #16
 8004644:	bd80      	pop	{r7, pc}
	...

08004648 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004648:	b580      	push	{r7, lr}
 800464a:	b086      	sub	sp, #24
 800464c:	af00      	add	r7, sp, #0
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
 8004654:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004656:	68fb      	ldr	r3, [r7, #12]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800465c:	697b      	ldr	r3, [r7, #20]
 800465e:	4a09      	ldr	r2, [pc, #36]	; (8004684 <TIM_ETR_SetConfig+0x3c>)
 8004660:	4013      	ands	r3, r2
 8004662:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	021a      	lsls	r2, r3, #8
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	431a      	orrs	r2, r3
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	4313      	orrs	r3, r2
 8004670:	697a      	ldr	r2, [r7, #20]
 8004672:	4313      	orrs	r3, r2
 8004674:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	697a      	ldr	r2, [r7, #20]
 800467a:	609a      	str	r2, [r3, #8]
}
 800467c:	46c0      	nop			; (mov r8, r8)
 800467e:	46bd      	mov	sp, r7
 8004680:	b006      	add	sp, #24
 8004682:	bd80      	pop	{r7, pc}
 8004684:	ffff00ff 	.word	0xffff00ff

08004688 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b086      	sub	sp, #24
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004694:	68bb      	ldr	r3, [r7, #8]
 8004696:	221f      	movs	r2, #31
 8004698:	4013      	ands	r3, r2
 800469a:	2201      	movs	r2, #1
 800469c:	409a      	lsls	r2, r3
 800469e:	0013      	movs	r3, r2
 80046a0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6a1b      	ldr	r3, [r3, #32]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	43d2      	mvns	r2, r2
 80046aa:	401a      	ands	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	6a1a      	ldr	r2, [r3, #32]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	211f      	movs	r1, #31
 80046b8:	400b      	ands	r3, r1
 80046ba:	6879      	ldr	r1, [r7, #4]
 80046bc:	4099      	lsls	r1, r3
 80046be:	000b      	movs	r3, r1
 80046c0:	431a      	orrs	r2, r3
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	621a      	str	r2, [r3, #32]
}
 80046c6:	46c0      	nop			; (mov r8, r8)
 80046c8:	46bd      	mov	sp, r7
 80046ca:	b006      	add	sp, #24
 80046cc:	bd80      	pop	{r7, pc}
	...

080046d0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046d0:	b580      	push	{r7, lr}
 80046d2:	b084      	sub	sp, #16
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	223c      	movs	r2, #60	; 0x3c
 80046de:	5c9b      	ldrb	r3, [r3, r2]
 80046e0:	2b01      	cmp	r3, #1
 80046e2:	d101      	bne.n	80046e8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046e4:	2302      	movs	r3, #2
 80046e6:	e03c      	b.n	8004762 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	223c      	movs	r2, #60	; 0x3c
 80046ec:	2101      	movs	r1, #1
 80046ee:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	223d      	movs	r2, #61	; 0x3d
 80046f4:	2102      	movs	r1, #2
 80046f6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2270      	movs	r2, #112	; 0x70
 800470c:	4393      	bics	r3, r2
 800470e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004710:	683b      	ldr	r3, [r7, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68fa      	ldr	r2, [r7, #12]
 8004716:	4313      	orrs	r3, r2
 8004718:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68fa      	ldr	r2, [r7, #12]
 8004720:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	4a11      	ldr	r2, [pc, #68]	; (800476c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8004728:	4293      	cmp	r3, r2
 800472a:	d004      	beq.n	8004736 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4a0f      	ldr	r2, [pc, #60]	; (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8004732:	4293      	cmp	r3, r2
 8004734:	d10c      	bne.n	8004750 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2280      	movs	r2, #128	; 0x80
 800473a:	4393      	bics	r3, r2
 800473c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	685b      	ldr	r3, [r3, #4]
 8004742:	68ba      	ldr	r2, [r7, #8]
 8004744:	4313      	orrs	r3, r2
 8004746:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	68ba      	ldr	r2, [r7, #8]
 800474e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	223d      	movs	r2, #61	; 0x3d
 8004754:	2101      	movs	r1, #1
 8004756:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	223c      	movs	r2, #60	; 0x3c
 800475c:	2100      	movs	r1, #0
 800475e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004760:	2300      	movs	r3, #0
}
 8004762:	0018      	movs	r0, r3
 8004764:	46bd      	mov	sp, r7
 8004766:	b004      	add	sp, #16
 8004768:	bd80      	pop	{r7, pc}
 800476a:	46c0      	nop			; (mov r8, r8)
 800476c:	40012c00 	.word	0x40012c00
 8004770:	40000400 	.word	0x40000400

08004774 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b082      	sub	sp, #8
 8004778:	af00      	add	r7, sp, #0
 800477a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b002      	add	sp, #8
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800478c:	46c0      	nop			; (mov r8, r8)
 800478e:	46bd      	mov	sp, r7
 8004790:	b002      	add	sp, #8
 8004792:	bd80      	pop	{r7, pc}

08004794 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2b00      	cmp	r3, #0
 80047a0:	d101      	bne.n	80047a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80047a2:	2301      	movs	r3, #1
 80047a4:	e044      	b.n	8004830 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d107      	bne.n	80047be <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2278      	movs	r2, #120	; 0x78
 80047b2:	2100      	movs	r1, #0
 80047b4:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f7fd f863 	bl	8001884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2224      	movs	r2, #36	; 0x24
 80047c2:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	2101      	movs	r1, #1
 80047d0:	438a      	bics	r2, r1
 80047d2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 fb0c 	bl	8004df4 <UART_SetConfig>
 80047dc:	0003      	movs	r3, r0
 80047de:	2b01      	cmp	r3, #1
 80047e0:	d101      	bne.n	80047e6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e024      	b.n	8004830 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d003      	beq.n	80047f6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	0018      	movs	r0, r3
 80047f2:	f000 fc27 	bl	8005044 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685a      	ldr	r2, [r3, #4]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	490d      	ldr	r1, [pc, #52]	; (8004838 <HAL_UART_Init+0xa4>)
 8004802:	400a      	ands	r2, r1
 8004804:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	689a      	ldr	r2, [r3, #8]
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	2108      	movs	r1, #8
 8004812:	438a      	bics	r2, r1
 8004814:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	681a      	ldr	r2, [r3, #0]
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2101      	movs	r1, #1
 8004822:	430a      	orrs	r2, r1
 8004824:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	0018      	movs	r0, r3
 800482a:	f000 fcbf 	bl	80051ac <UART_CheckIdleState>
 800482e:	0003      	movs	r3, r0
}
 8004830:	0018      	movs	r0, r3
 8004832:	46bd      	mov	sp, r7
 8004834:	b002      	add	sp, #8
 8004836:	bd80      	pop	{r7, pc}
 8004838:	fffff7ff 	.word	0xfffff7ff

0800483c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800483c:	b590      	push	{r4, r7, lr}
 800483e:	b0ab      	sub	sp, #172	; 0xac
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	69db      	ldr	r3, [r3, #28]
 800484a:	22a4      	movs	r2, #164	; 0xa4
 800484c:	18b9      	adds	r1, r7, r2
 800484e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	20a0      	movs	r0, #160	; 0xa0
 8004858:	1839      	adds	r1, r7, r0
 800485a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	219c      	movs	r1, #156	; 0x9c
 8004864:	1879      	adds	r1, r7, r1
 8004866:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8004868:	0011      	movs	r1, r2
 800486a:	18bb      	adds	r3, r7, r2
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a99      	ldr	r2, [pc, #612]	; (8004ad4 <HAL_UART_IRQHandler+0x298>)
 8004870:	4013      	ands	r3, r2
 8004872:	2298      	movs	r2, #152	; 0x98
 8004874:	18bc      	adds	r4, r7, r2
 8004876:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8004878:	18bb      	adds	r3, r7, r2
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d114      	bne.n	80048aa <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8004880:	187b      	adds	r3, r7, r1
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2220      	movs	r2, #32
 8004886:	4013      	ands	r3, r2
 8004888:	d00f      	beq.n	80048aa <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800488a:	183b      	adds	r3, r7, r0
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	2220      	movs	r2, #32
 8004890:	4013      	ands	r3, r2
 8004892:	d00a      	beq.n	80048aa <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004898:	2b00      	cmp	r3, #0
 800489a:	d100      	bne.n	800489e <HAL_UART_IRQHandler+0x62>
 800489c:	e286      	b.n	8004dac <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80048a2:	687a      	ldr	r2, [r7, #4]
 80048a4:	0010      	movs	r0, r2
 80048a6:	4798      	blx	r3
      }
      return;
 80048a8:	e280      	b.n	8004dac <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80048aa:	2398      	movs	r3, #152	; 0x98
 80048ac:	18fb      	adds	r3, r7, r3
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d100      	bne.n	80048b6 <HAL_UART_IRQHandler+0x7a>
 80048b4:	e114      	b.n	8004ae0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80048b6:	239c      	movs	r3, #156	; 0x9c
 80048b8:	18fb      	adds	r3, r7, r3
 80048ba:	681b      	ldr	r3, [r3, #0]
 80048bc:	2201      	movs	r2, #1
 80048be:	4013      	ands	r3, r2
 80048c0:	d106      	bne.n	80048d0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80048c2:	23a0      	movs	r3, #160	; 0xa0
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4a83      	ldr	r2, [pc, #524]	; (8004ad8 <HAL_UART_IRQHandler+0x29c>)
 80048ca:	4013      	ands	r3, r2
 80048cc:	d100      	bne.n	80048d0 <HAL_UART_IRQHandler+0x94>
 80048ce:	e107      	b.n	8004ae0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80048d0:	23a4      	movs	r3, #164	; 0xa4
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	d012      	beq.n	8004902 <HAL_UART_IRQHandler+0xc6>
 80048dc:	23a0      	movs	r3, #160	; 0xa0
 80048de:	18fb      	adds	r3, r7, r3
 80048e0:	681a      	ldr	r2, [r3, #0]
 80048e2:	2380      	movs	r3, #128	; 0x80
 80048e4:	005b      	lsls	r3, r3, #1
 80048e6:	4013      	ands	r3, r2
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2201      	movs	r2, #1
 80048f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2284      	movs	r2, #132	; 0x84
 80048f6:	589b      	ldr	r3, [r3, r2]
 80048f8:	2201      	movs	r2, #1
 80048fa:	431a      	orrs	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2184      	movs	r1, #132	; 0x84
 8004900:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004902:	23a4      	movs	r3, #164	; 0xa4
 8004904:	18fb      	adds	r3, r7, r3
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2202      	movs	r2, #2
 800490a:	4013      	ands	r3, r2
 800490c:	d011      	beq.n	8004932 <HAL_UART_IRQHandler+0xf6>
 800490e:	239c      	movs	r3, #156	; 0x9c
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2201      	movs	r2, #1
 8004916:	4013      	ands	r3, r2
 8004918:	d00b      	beq.n	8004932 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	2202      	movs	r2, #2
 8004920:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2284      	movs	r2, #132	; 0x84
 8004926:	589b      	ldr	r3, [r3, r2]
 8004928:	2204      	movs	r2, #4
 800492a:	431a      	orrs	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2184      	movs	r1, #132	; 0x84
 8004930:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004932:	23a4      	movs	r3, #164	; 0xa4
 8004934:	18fb      	adds	r3, r7, r3
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	2204      	movs	r2, #4
 800493a:	4013      	ands	r3, r2
 800493c:	d011      	beq.n	8004962 <HAL_UART_IRQHandler+0x126>
 800493e:	239c      	movs	r3, #156	; 0x9c
 8004940:	18fb      	adds	r3, r7, r3
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2201      	movs	r2, #1
 8004946:	4013      	ands	r3, r2
 8004948:	d00b      	beq.n	8004962 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	2204      	movs	r2, #4
 8004950:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2284      	movs	r2, #132	; 0x84
 8004956:	589b      	ldr	r3, [r3, r2]
 8004958:	2202      	movs	r2, #2
 800495a:	431a      	orrs	r2, r3
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2184      	movs	r1, #132	; 0x84
 8004960:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8004962:	23a4      	movs	r3, #164	; 0xa4
 8004964:	18fb      	adds	r3, r7, r3
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	2208      	movs	r2, #8
 800496a:	4013      	ands	r3, r2
 800496c:	d017      	beq.n	800499e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800496e:	23a0      	movs	r3, #160	; 0xa0
 8004970:	18fb      	adds	r3, r7, r3
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	2220      	movs	r2, #32
 8004976:	4013      	ands	r3, r2
 8004978:	d105      	bne.n	8004986 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800497a:	239c      	movs	r3, #156	; 0x9c
 800497c:	18fb      	adds	r3, r7, r3
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	2201      	movs	r2, #1
 8004982:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8004984:	d00b      	beq.n	800499e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	2208      	movs	r2, #8
 800498c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2284      	movs	r2, #132	; 0x84
 8004992:	589b      	ldr	r3, [r3, r2]
 8004994:	2208      	movs	r2, #8
 8004996:	431a      	orrs	r2, r3
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2184      	movs	r1, #132	; 0x84
 800499c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800499e:	23a4      	movs	r3, #164	; 0xa4
 80049a0:	18fb      	adds	r3, r7, r3
 80049a2:	681a      	ldr	r2, [r3, #0]
 80049a4:	2380      	movs	r3, #128	; 0x80
 80049a6:	011b      	lsls	r3, r3, #4
 80049a8:	4013      	ands	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_UART_IRQHandler+0x198>
 80049ac:	23a0      	movs	r3, #160	; 0xa0
 80049ae:	18fb      	adds	r3, r7, r3
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	2380      	movs	r3, #128	; 0x80
 80049b4:	04db      	lsls	r3, r3, #19
 80049b6:	4013      	ands	r3, r2
 80049b8:	d00c      	beq.n	80049d4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	2280      	movs	r2, #128	; 0x80
 80049c0:	0112      	lsls	r2, r2, #4
 80049c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2284      	movs	r2, #132	; 0x84
 80049c8:	589b      	ldr	r3, [r3, r2]
 80049ca:	2220      	movs	r2, #32
 80049cc:	431a      	orrs	r2, r3
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	2184      	movs	r1, #132	; 0x84
 80049d2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2284      	movs	r2, #132	; 0x84
 80049d8:	589b      	ldr	r3, [r3, r2]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d100      	bne.n	80049e0 <HAL_UART_IRQHandler+0x1a4>
 80049de:	e1e7      	b.n	8004db0 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80049e0:	23a4      	movs	r3, #164	; 0xa4
 80049e2:	18fb      	adds	r3, r7, r3
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	2220      	movs	r2, #32
 80049e8:	4013      	ands	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80049ec:	23a0      	movs	r3, #160	; 0xa0
 80049ee:	18fb      	adds	r3, r7, r3
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	2220      	movs	r2, #32
 80049f4:	4013      	ands	r3, r2
 80049f6:	d008      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d004      	beq.n	8004a0a <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	0010      	movs	r0, r2
 8004a08:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	2284      	movs	r2, #132	; 0x84
 8004a0e:	589b      	ldr	r3, [r3, r2]
 8004a10:	2194      	movs	r1, #148	; 0x94
 8004a12:	187a      	adds	r2, r7, r1
 8004a14:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	2240      	movs	r2, #64	; 0x40
 8004a1e:	4013      	ands	r3, r2
 8004a20:	2b40      	cmp	r3, #64	; 0x40
 8004a22:	d004      	beq.n	8004a2e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004a24:	187b      	adds	r3, r7, r1
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	2228      	movs	r2, #40	; 0x28
 8004a2a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004a2c:	d047      	beq.n	8004abe <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	0018      	movs	r0, r3
 8004a32:	f000 fccd 	bl	80053d0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	2240      	movs	r2, #64	; 0x40
 8004a3e:	4013      	ands	r3, r2
 8004a40:	2b40      	cmp	r3, #64	; 0x40
 8004a42:	d137      	bne.n	8004ab4 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a44:	f3ef 8310 	mrs	r3, PRIMASK
 8004a48:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8004a4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004a4c:	2090      	movs	r0, #144	; 0x90
 8004a4e:	183a      	adds	r2, r7, r0
 8004a50:	6013      	str	r3, [r2, #0]
 8004a52:	2301      	movs	r3, #1
 8004a54:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004a58:	f383 8810 	msr	PRIMASK, r3
}
 8004a5c:	46c0      	nop			; (mov r8, r8)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	689a      	ldr	r2, [r3, #8]
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	2140      	movs	r1, #64	; 0x40
 8004a6a:	438a      	bics	r2, r1
 8004a6c:	609a      	str	r2, [r3, #8]
 8004a6e:	183b      	adds	r3, r7, r0
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a74:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004a76:	f383 8810 	msr	PRIMASK, r3
}
 8004a7a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d012      	beq.n	8004aaa <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a88:	4a14      	ldr	r2, [pc, #80]	; (8004adc <HAL_UART_IRQHandler+0x2a0>)
 8004a8a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a90:	0018      	movs	r0, r3
 8004a92:	f7fd fce5 	bl	8002460 <HAL_DMA_Abort_IT>
 8004a96:	1e03      	subs	r3, r0, #0
 8004a98:	d01a      	beq.n	8004ad0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004aa8:	e012      	b.n	8004ad0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	0018      	movs	r0, r3
 8004aae:	f000 f98d 	bl	8004dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ab2:	e00d      	b.n	8004ad0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	0018      	movs	r0, r3
 8004ab8:	f000 f988 	bl	8004dcc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	e008      	b.n	8004ad0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	0018      	movs	r0, r3
 8004ac2:	f000 f983 	bl	8004dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	2284      	movs	r2, #132	; 0x84
 8004aca:	2100      	movs	r1, #0
 8004acc:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004ace:	e16f      	b.n	8004db0 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ad0:	46c0      	nop			; (mov r8, r8)
    return;
 8004ad2:	e16d      	b.n	8004db0 <HAL_UART_IRQHandler+0x574>
 8004ad4:	0000080f 	.word	0x0000080f
 8004ad8:	04000120 	.word	0x04000120
 8004adc:	08005499 	.word	0x08005499

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d000      	beq.n	8004aea <HAL_UART_IRQHandler+0x2ae>
 8004ae8:	e139      	b.n	8004d5e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8004aea:	23a4      	movs	r3, #164	; 0xa4
 8004aec:	18fb      	adds	r3, r7, r3
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	2210      	movs	r2, #16
 8004af2:	4013      	ands	r3, r2
 8004af4:	d100      	bne.n	8004af8 <HAL_UART_IRQHandler+0x2bc>
 8004af6:	e132      	b.n	8004d5e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8004af8:	23a0      	movs	r3, #160	; 0xa0
 8004afa:	18fb      	adds	r3, r7, r3
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2210      	movs	r2, #16
 8004b00:	4013      	ands	r3, r2
 8004b02:	d100      	bne.n	8004b06 <HAL_UART_IRQHandler+0x2ca>
 8004b04:	e12b      	b.n	8004d5e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	2210      	movs	r2, #16
 8004b0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	689b      	ldr	r3, [r3, #8]
 8004b14:	2240      	movs	r2, #64	; 0x40
 8004b16:	4013      	ands	r3, r2
 8004b18:	2b40      	cmp	r3, #64	; 0x40
 8004b1a:	d000      	beq.n	8004b1e <HAL_UART_IRQHandler+0x2e2>
 8004b1c:	e09f      	b.n	8004c5e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	685a      	ldr	r2, [r3, #4]
 8004b26:	217e      	movs	r1, #126	; 0x7e
 8004b28:	187b      	adds	r3, r7, r1
 8004b2a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004b2c:	187b      	adds	r3, r7, r1
 8004b2e:	881b      	ldrh	r3, [r3, #0]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d100      	bne.n	8004b36 <HAL_UART_IRQHandler+0x2fa>
 8004b34:	e13e      	b.n	8004db4 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2258      	movs	r2, #88	; 0x58
 8004b3a:	5a9b      	ldrh	r3, [r3, r2]
 8004b3c:	187a      	adds	r2, r7, r1
 8004b3e:	8812      	ldrh	r2, [r2, #0]
 8004b40:	429a      	cmp	r2, r3
 8004b42:	d300      	bcc.n	8004b46 <HAL_UART_IRQHandler+0x30a>
 8004b44:	e136      	b.n	8004db4 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	187a      	adds	r2, r7, r1
 8004b4a:	215a      	movs	r1, #90	; 0x5a
 8004b4c:	8812      	ldrh	r2, [r2, #0]
 8004b4e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	699b      	ldr	r3, [r3, #24]
 8004b56:	2b20      	cmp	r3, #32
 8004b58:	d06f      	beq.n	8004c3a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b5a:	f3ef 8310 	mrs	r3, PRIMASK
 8004b5e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8004b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b62:	67bb      	str	r3, [r7, #120]	; 0x78
 8004b64:	2301      	movs	r3, #1
 8004b66:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b6a:	f383 8810 	msr	PRIMASK, r3
}
 8004b6e:	46c0      	nop			; (mov r8, r8)
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	4992      	ldr	r1, [pc, #584]	; (8004dc4 <HAL_UART_IRQHandler+0x588>)
 8004b7c:	400a      	ands	r2, r1
 8004b7e:	601a      	str	r2, [r3, #0]
 8004b80:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b82:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b86:	f383 8810 	msr	PRIMASK, r3
}
 8004b8a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004b90:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8004b92:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b94:	677b      	str	r3, [r7, #116]	; 0x74
 8004b96:	2301      	movs	r3, #1
 8004b98:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	f383 8810 	msr	PRIMASK, r3
}
 8004ba0:	46c0      	nop			; (mov r8, r8)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	689a      	ldr	r2, [r3, #8]
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2101      	movs	r1, #1
 8004bae:	438a      	bics	r2, r1
 8004bb0:	609a      	str	r2, [r3, #8]
 8004bb2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004bb4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bb8:	f383 8810 	msr	PRIMASK, r3
}
 8004bbc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bbe:	f3ef 8310 	mrs	r3, PRIMASK
 8004bc2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004bc4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bc6:	673b      	str	r3, [r7, #112]	; 0x70
 8004bc8:	2301      	movs	r3, #1
 8004bca:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004bcc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bce:	f383 8810 	msr	PRIMASK, r3
}
 8004bd2:	46c0      	nop			; (mov r8, r8)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	689a      	ldr	r2, [r3, #8]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2140      	movs	r1, #64	; 0x40
 8004be0:	438a      	bics	r2, r1
 8004be2:	609a      	str	r2, [r3, #8]
 8004be4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004be6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004be8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004bea:	f383 8810 	msr	PRIMASK, r3
}
 8004bee:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2280      	movs	r2, #128	; 0x80
 8004bf4:	2120      	movs	r1, #32
 8004bf6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004bfe:	f3ef 8310 	mrs	r3, PRIMASK
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004c06:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004c08:	2301      	movs	r3, #1
 8004c0a:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c0c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004c0e:	f383 8810 	msr	PRIMASK, r3
}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	681a      	ldr	r2, [r3, #0]
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2110      	movs	r1, #16
 8004c20:	438a      	bics	r2, r1
 8004c22:	601a      	str	r2, [r3, #0]
 8004c24:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004c26:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004c2a:	f383 8810 	msr	PRIMASK, r3
}
 8004c2e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004c34:	0018      	movs	r0, r3
 8004c36:	f7fd fbdb 	bl	80023f0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	2202      	movs	r2, #2
 8004c3e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2258      	movs	r2, #88	; 0x58
 8004c44:	5a9a      	ldrh	r2, [r3, r2]
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	215a      	movs	r1, #90	; 0x5a
 8004c4a:	5a5b      	ldrh	r3, [r3, r1]
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	b29a      	uxth	r2, r3
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	0011      	movs	r1, r2
 8004c56:	0018      	movs	r0, r3
 8004c58:	f000 f8c0 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004c5c:	e0aa      	b.n	8004db4 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	2258      	movs	r2, #88	; 0x58
 8004c62:	5a99      	ldrh	r1, [r3, r2]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	225a      	movs	r2, #90	; 0x5a
 8004c68:	5a9b      	ldrh	r3, [r3, r2]
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	208e      	movs	r0, #142	; 0x8e
 8004c6e:	183b      	adds	r3, r7, r0
 8004c70:	1a8a      	subs	r2, r1, r2
 8004c72:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	225a      	movs	r2, #90	; 0x5a
 8004c78:	5a9b      	ldrh	r3, [r3, r2]
 8004c7a:	b29b      	uxth	r3, r3
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d100      	bne.n	8004c82 <HAL_UART_IRQHandler+0x446>
 8004c80:	e09a      	b.n	8004db8 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8004c82:	183b      	adds	r3, r7, r0
 8004c84:	881b      	ldrh	r3, [r3, #0]
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d100      	bne.n	8004c8c <HAL_UART_IRQHandler+0x450>
 8004c8a:	e095      	b.n	8004db8 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c8c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c90:	60fb      	str	r3, [r7, #12]
  return(result);
 8004c92:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c94:	2488      	movs	r4, #136	; 0x88
 8004c96:	193a      	adds	r2, r7, r4
 8004c98:	6013      	str	r3, [r2, #0]
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c9e:	693b      	ldr	r3, [r7, #16]
 8004ca0:	f383 8810 	msr	PRIMASK, r3
}
 8004ca4:	46c0      	nop			; (mov r8, r8)
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	4945      	ldr	r1, [pc, #276]	; (8004dc8 <HAL_UART_IRQHandler+0x58c>)
 8004cb2:	400a      	ands	r2, r1
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	193b      	adds	r3, r7, r4
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	f383 8810 	msr	PRIMASK, r3
}
 8004cc2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004cc4:	f3ef 8310 	mrs	r3, PRIMASK
 8004cc8:	61bb      	str	r3, [r7, #24]
  return(result);
 8004cca:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ccc:	2484      	movs	r4, #132	; 0x84
 8004cce:	193a      	adds	r2, r7, r4
 8004cd0:	6013      	str	r3, [r2, #0]
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f383 8810 	msr	PRIMASK, r3
}
 8004cdc:	46c0      	nop			; (mov r8, r8)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	2101      	movs	r1, #1
 8004cea:	438a      	bics	r2, r1
 8004cec:	609a      	str	r2, [r3, #8]
 8004cee:	193b      	adds	r3, r7, r4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cf4:	6a3b      	ldr	r3, [r7, #32]
 8004cf6:	f383 8810 	msr	PRIMASK, r3
}
 8004cfa:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	2280      	movs	r2, #128	; 0x80
 8004d00:	2120      	movs	r1, #32
 8004d02:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d10:	f3ef 8310 	mrs	r3, PRIMASK
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d18:	2480      	movs	r4, #128	; 0x80
 8004d1a:	193a      	adds	r2, r7, r4
 8004d1c:	6013      	str	r3, [r2, #0]
 8004d1e:	2301      	movs	r3, #1
 8004d20:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d24:	f383 8810 	msr	PRIMASK, r3
}
 8004d28:	46c0      	nop			; (mov r8, r8)
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	681a      	ldr	r2, [r3, #0]
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	2110      	movs	r1, #16
 8004d36:	438a      	bics	r2, r1
 8004d38:	601a      	str	r2, [r3, #0]
 8004d3a:	193b      	adds	r3, r7, r4
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d42:	f383 8810 	msr	PRIMASK, r3
}
 8004d46:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	2202      	movs	r2, #2
 8004d4c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d4e:	183b      	adds	r3, r7, r0
 8004d50:	881a      	ldrh	r2, [r3, #0]
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	0011      	movs	r1, r2
 8004d56:	0018      	movs	r0, r3
 8004d58:	f000 f840 	bl	8004ddc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004d5c:	e02c      	b.n	8004db8 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8004d5e:	23a4      	movs	r3, #164	; 0xa4
 8004d60:	18fb      	adds	r3, r7, r3
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	2280      	movs	r2, #128	; 0x80
 8004d66:	4013      	ands	r3, r2
 8004d68:	d00f      	beq.n	8004d8a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004d6a:	23a0      	movs	r3, #160	; 0xa0
 8004d6c:	18fb      	adds	r3, r7, r3
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	2280      	movs	r2, #128	; 0x80
 8004d72:	4013      	ands	r3, r2
 8004d74:	d009      	beq.n	8004d8a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d01e      	beq.n	8004dbc <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	0010      	movs	r0, r2
 8004d86:	4798      	blx	r3
    }
    return;
 8004d88:	e018      	b.n	8004dbc <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004d8a:	23a4      	movs	r3, #164	; 0xa4
 8004d8c:	18fb      	adds	r3, r7, r3
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	2240      	movs	r2, #64	; 0x40
 8004d92:	4013      	ands	r3, r2
 8004d94:	d013      	beq.n	8004dbe <HAL_UART_IRQHandler+0x582>
 8004d96:	23a0      	movs	r3, #160	; 0xa0
 8004d98:	18fb      	adds	r3, r7, r3
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	2240      	movs	r2, #64	; 0x40
 8004d9e:	4013      	ands	r3, r2
 8004da0:	d00d      	beq.n	8004dbe <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	0018      	movs	r0, r3
 8004da6:	f000 fb8e 	bl	80054c6 <UART_EndTransmit_IT>
    return;
 8004daa:	e008      	b.n	8004dbe <HAL_UART_IRQHandler+0x582>
      return;
 8004dac:	46c0      	nop			; (mov r8, r8)
 8004dae:	e006      	b.n	8004dbe <HAL_UART_IRQHandler+0x582>
    return;
 8004db0:	46c0      	nop			; (mov r8, r8)
 8004db2:	e004      	b.n	8004dbe <HAL_UART_IRQHandler+0x582>
      return;
 8004db4:	46c0      	nop			; (mov r8, r8)
 8004db6:	e002      	b.n	8004dbe <HAL_UART_IRQHandler+0x582>
      return;
 8004db8:	46c0      	nop			; (mov r8, r8)
 8004dba:	e000      	b.n	8004dbe <HAL_UART_IRQHandler+0x582>
    return;
 8004dbc:	46c0      	nop			; (mov r8, r8)
  }

}
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	b02b      	add	sp, #172	; 0xac
 8004dc2:	bd90      	pop	{r4, r7, pc}
 8004dc4:	fffffeff 	.word	0xfffffeff
 8004dc8:	fffffedf 	.word	0xfffffedf

08004dcc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b082      	sub	sp, #8
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004dd4:	46c0      	nop			; (mov r8, r8)
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	b002      	add	sp, #8
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b082      	sub	sp, #8
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	6078      	str	r0, [r7, #4]
 8004de4:	000a      	movs	r2, r1
 8004de6:	1cbb      	adds	r3, r7, #2
 8004de8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dea:	46c0      	nop			; (mov r8, r8)
 8004dec:	46bd      	mov	sp, r7
 8004dee:	b002      	add	sp, #8
 8004df0:	bd80      	pop	{r7, pc}
	...

08004df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004df4:	b580      	push	{r7, lr}
 8004df6:	b088      	sub	sp, #32
 8004df8:	af00      	add	r7, sp, #0
 8004dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004dfc:	231e      	movs	r3, #30
 8004dfe:	18fb      	adds	r3, r7, r3
 8004e00:	2200      	movs	r2, #0
 8004e02:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	689a      	ldr	r2, [r3, #8]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	691b      	ldr	r3, [r3, #16]
 8004e0c:	431a      	orrs	r2, r3
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	695b      	ldr	r3, [r3, #20]
 8004e12:	431a      	orrs	r2, r3
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	69db      	ldr	r3, [r3, #28]
 8004e18:	4313      	orrs	r3, r2
 8004e1a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	4a83      	ldr	r2, [pc, #524]	; (8005030 <UART_SetConfig+0x23c>)
 8004e24:	4013      	ands	r3, r2
 8004e26:	0019      	movs	r1, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	430a      	orrs	r2, r1
 8004e30:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	685b      	ldr	r3, [r3, #4]
 8004e38:	4a7e      	ldr	r2, [pc, #504]	; (8005034 <UART_SetConfig+0x240>)
 8004e3a:	4013      	ands	r3, r2
 8004e3c:	0019      	movs	r1, r3
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	68da      	ldr	r2, [r3, #12]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	430a      	orrs	r2, r1
 8004e48:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	6a1b      	ldr	r3, [r3, #32]
 8004e54:	697a      	ldr	r2, [r7, #20]
 8004e56:	4313      	orrs	r3, r2
 8004e58:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	4a75      	ldr	r2, [pc, #468]	; (8005038 <UART_SetConfig+0x244>)
 8004e62:	4013      	ands	r3, r2
 8004e64:	0019      	movs	r1, r3
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	697a      	ldr	r2, [r7, #20]
 8004e6c:	430a      	orrs	r2, r1
 8004e6e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004e70:	4b72      	ldr	r3, [pc, #456]	; (800503c <UART_SetConfig+0x248>)
 8004e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e74:	2203      	movs	r2, #3
 8004e76:	4013      	ands	r3, r2
 8004e78:	2b03      	cmp	r3, #3
 8004e7a:	d00d      	beq.n	8004e98 <UART_SetConfig+0xa4>
 8004e7c:	d81b      	bhi.n	8004eb6 <UART_SetConfig+0xc2>
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d014      	beq.n	8004eac <UART_SetConfig+0xb8>
 8004e82:	d818      	bhi.n	8004eb6 <UART_SetConfig+0xc2>
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d002      	beq.n	8004e8e <UART_SetConfig+0x9a>
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d00a      	beq.n	8004ea2 <UART_SetConfig+0xae>
 8004e8c:	e013      	b.n	8004eb6 <UART_SetConfig+0xc2>
 8004e8e:	231f      	movs	r3, #31
 8004e90:	18fb      	adds	r3, r7, r3
 8004e92:	2200      	movs	r2, #0
 8004e94:	701a      	strb	r2, [r3, #0]
 8004e96:	e012      	b.n	8004ebe <UART_SetConfig+0xca>
 8004e98:	231f      	movs	r3, #31
 8004e9a:	18fb      	adds	r3, r7, r3
 8004e9c:	2202      	movs	r2, #2
 8004e9e:	701a      	strb	r2, [r3, #0]
 8004ea0:	e00d      	b.n	8004ebe <UART_SetConfig+0xca>
 8004ea2:	231f      	movs	r3, #31
 8004ea4:	18fb      	adds	r3, r7, r3
 8004ea6:	2204      	movs	r2, #4
 8004ea8:	701a      	strb	r2, [r3, #0]
 8004eaa:	e008      	b.n	8004ebe <UART_SetConfig+0xca>
 8004eac:	231f      	movs	r3, #31
 8004eae:	18fb      	adds	r3, r7, r3
 8004eb0:	2208      	movs	r2, #8
 8004eb2:	701a      	strb	r2, [r3, #0]
 8004eb4:	e003      	b.n	8004ebe <UART_SetConfig+0xca>
 8004eb6:	231f      	movs	r3, #31
 8004eb8:	18fb      	adds	r3, r7, r3
 8004eba:	2210      	movs	r2, #16
 8004ebc:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	69da      	ldr	r2, [r3, #28]
 8004ec2:	2380      	movs	r3, #128	; 0x80
 8004ec4:	021b      	lsls	r3, r3, #8
 8004ec6:	429a      	cmp	r2, r3
 8004ec8:	d15c      	bne.n	8004f84 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8004eca:	231f      	movs	r3, #31
 8004ecc:	18fb      	adds	r3, r7, r3
 8004ece:	781b      	ldrb	r3, [r3, #0]
 8004ed0:	2b08      	cmp	r3, #8
 8004ed2:	d015      	beq.n	8004f00 <UART_SetConfig+0x10c>
 8004ed4:	dc18      	bgt.n	8004f08 <UART_SetConfig+0x114>
 8004ed6:	2b04      	cmp	r3, #4
 8004ed8:	d00d      	beq.n	8004ef6 <UART_SetConfig+0x102>
 8004eda:	dc15      	bgt.n	8004f08 <UART_SetConfig+0x114>
 8004edc:	2b00      	cmp	r3, #0
 8004ede:	d002      	beq.n	8004ee6 <UART_SetConfig+0xf2>
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d005      	beq.n	8004ef0 <UART_SetConfig+0xfc>
 8004ee4:	e010      	b.n	8004f08 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004ee6:	f7fe fc3f 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004eea:	0003      	movs	r3, r0
 8004eec:	61bb      	str	r3, [r7, #24]
        break;
 8004eee:	e012      	b.n	8004f16 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ef0:	4b53      	ldr	r3, [pc, #332]	; (8005040 <UART_SetConfig+0x24c>)
 8004ef2:	61bb      	str	r3, [r7, #24]
        break;
 8004ef4:	e00f      	b.n	8004f16 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ef6:	f7fe fbd7 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004efa:	0003      	movs	r3, r0
 8004efc:	61bb      	str	r3, [r7, #24]
        break;
 8004efe:	e00a      	b.n	8004f16 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f00:	2380      	movs	r3, #128	; 0x80
 8004f02:	021b      	lsls	r3, r3, #8
 8004f04:	61bb      	str	r3, [r7, #24]
        break;
 8004f06:	e006      	b.n	8004f16 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8004f08:	2300      	movs	r3, #0
 8004f0a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f0c:	231e      	movs	r3, #30
 8004f0e:	18fb      	adds	r3, r7, r3
 8004f10:	2201      	movs	r2, #1
 8004f12:	701a      	strb	r2, [r3, #0]
        break;
 8004f14:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004f16:	69bb      	ldr	r3, [r7, #24]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d100      	bne.n	8004f1e <UART_SetConfig+0x12a>
 8004f1c:	e07a      	b.n	8005014 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	005a      	lsls	r2, r3, #1
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	685b      	ldr	r3, [r3, #4]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	18d2      	adds	r2, r2, r3
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	0019      	movs	r1, r3
 8004f30:	0010      	movs	r0, r2
 8004f32:	f7fb f8e9 	bl	8000108 <__udivsi3>
 8004f36:	0003      	movs	r3, r0
 8004f38:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004f3a:	693b      	ldr	r3, [r7, #16]
 8004f3c:	2b0f      	cmp	r3, #15
 8004f3e:	d91c      	bls.n	8004f7a <UART_SetConfig+0x186>
 8004f40:	693a      	ldr	r2, [r7, #16]
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	025b      	lsls	r3, r3, #9
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d217      	bcs.n	8004f7a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f4a:	693b      	ldr	r3, [r7, #16]
 8004f4c:	b29a      	uxth	r2, r3
 8004f4e:	200e      	movs	r0, #14
 8004f50:	183b      	adds	r3, r7, r0
 8004f52:	210f      	movs	r1, #15
 8004f54:	438a      	bics	r2, r1
 8004f56:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	085b      	lsrs	r3, r3, #1
 8004f5c:	b29b      	uxth	r3, r3
 8004f5e:	2207      	movs	r2, #7
 8004f60:	4013      	ands	r3, r2
 8004f62:	b299      	uxth	r1, r3
 8004f64:	183b      	adds	r3, r7, r0
 8004f66:	183a      	adds	r2, r7, r0
 8004f68:	8812      	ldrh	r2, [r2, #0]
 8004f6a:	430a      	orrs	r2, r1
 8004f6c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	183a      	adds	r2, r7, r0
 8004f74:	8812      	ldrh	r2, [r2, #0]
 8004f76:	60da      	str	r2, [r3, #12]
 8004f78:	e04c      	b.n	8005014 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004f7a:	231e      	movs	r3, #30
 8004f7c:	18fb      	adds	r3, r7, r3
 8004f7e:	2201      	movs	r2, #1
 8004f80:	701a      	strb	r2, [r3, #0]
 8004f82:	e047      	b.n	8005014 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f84:	231f      	movs	r3, #31
 8004f86:	18fb      	adds	r3, r7, r3
 8004f88:	781b      	ldrb	r3, [r3, #0]
 8004f8a:	2b08      	cmp	r3, #8
 8004f8c:	d015      	beq.n	8004fba <UART_SetConfig+0x1c6>
 8004f8e:	dc18      	bgt.n	8004fc2 <UART_SetConfig+0x1ce>
 8004f90:	2b04      	cmp	r3, #4
 8004f92:	d00d      	beq.n	8004fb0 <UART_SetConfig+0x1bc>
 8004f94:	dc15      	bgt.n	8004fc2 <UART_SetConfig+0x1ce>
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d002      	beq.n	8004fa0 <UART_SetConfig+0x1ac>
 8004f9a:	2b02      	cmp	r3, #2
 8004f9c:	d005      	beq.n	8004faa <UART_SetConfig+0x1b6>
 8004f9e:	e010      	b.n	8004fc2 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004fa0:	f7fe fbe2 	bl	8003768 <HAL_RCC_GetPCLK1Freq>
 8004fa4:	0003      	movs	r3, r0
 8004fa6:	61bb      	str	r3, [r7, #24]
        break;
 8004fa8:	e012      	b.n	8004fd0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004faa:	4b25      	ldr	r3, [pc, #148]	; (8005040 <UART_SetConfig+0x24c>)
 8004fac:	61bb      	str	r3, [r7, #24]
        break;
 8004fae:	e00f      	b.n	8004fd0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004fb0:	f7fe fb7a 	bl	80036a8 <HAL_RCC_GetSysClockFreq>
 8004fb4:	0003      	movs	r3, r0
 8004fb6:	61bb      	str	r3, [r7, #24]
        break;
 8004fb8:	e00a      	b.n	8004fd0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004fba:	2380      	movs	r3, #128	; 0x80
 8004fbc:	021b      	lsls	r3, r3, #8
 8004fbe:	61bb      	str	r3, [r7, #24]
        break;
 8004fc0:	e006      	b.n	8004fd0 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004fc6:	231e      	movs	r3, #30
 8004fc8:	18fb      	adds	r3, r7, r3
 8004fca:	2201      	movs	r2, #1
 8004fcc:	701a      	strb	r2, [r3, #0]
        break;
 8004fce:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004fd0:	69bb      	ldr	r3, [r7, #24]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d01e      	beq.n	8005014 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	085a      	lsrs	r2, r3, #1
 8004fdc:	69bb      	ldr	r3, [r7, #24]
 8004fde:	18d2      	adds	r2, r2, r3
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	0019      	movs	r1, r3
 8004fe6:	0010      	movs	r0, r2
 8004fe8:	f7fb f88e 	bl	8000108 <__udivsi3>
 8004fec:	0003      	movs	r3, r0
 8004fee:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	2b0f      	cmp	r3, #15
 8004ff4:	d90a      	bls.n	800500c <UART_SetConfig+0x218>
 8004ff6:	693a      	ldr	r2, [r7, #16]
 8004ff8:	2380      	movs	r3, #128	; 0x80
 8004ffa:	025b      	lsls	r3, r3, #9
 8004ffc:	429a      	cmp	r2, r3
 8004ffe:	d205      	bcs.n	800500c <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	b29a      	uxth	r2, r3
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	60da      	str	r2, [r3, #12]
 800500a:	e003      	b.n	8005014 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 800500c:	231e      	movs	r3, #30
 800500e:	18fb      	adds	r3, r7, r3
 8005010:	2201      	movs	r2, #1
 8005012:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2200      	movs	r2, #0
 8005018:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	2200      	movs	r2, #0
 800501e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005020:	231e      	movs	r3, #30
 8005022:	18fb      	adds	r3, r7, r3
 8005024:	781b      	ldrb	r3, [r3, #0]
}
 8005026:	0018      	movs	r0, r3
 8005028:	46bd      	mov	sp, r7
 800502a:	b008      	add	sp, #32
 800502c:	bd80      	pop	{r7, pc}
 800502e:	46c0      	nop			; (mov r8, r8)
 8005030:	ffff69f3 	.word	0xffff69f3
 8005034:	ffffcfff 	.word	0xffffcfff
 8005038:	fffff4ff 	.word	0xfffff4ff
 800503c:	40021000 	.word	0x40021000
 8005040:	007a1200 	.word	0x007a1200

08005044 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b082      	sub	sp, #8
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2201      	movs	r2, #1
 8005052:	4013      	ands	r3, r2
 8005054:	d00b      	beq.n	800506e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	685b      	ldr	r3, [r3, #4]
 800505c:	4a4a      	ldr	r2, [pc, #296]	; (8005188 <UART_AdvFeatureConfig+0x144>)
 800505e:	4013      	ands	r3, r2
 8005060:	0019      	movs	r1, r3
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	430a      	orrs	r2, r1
 800506c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005072:	2202      	movs	r2, #2
 8005074:	4013      	ands	r3, r2
 8005076:	d00b      	beq.n	8005090 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	4a43      	ldr	r2, [pc, #268]	; (800518c <UART_AdvFeatureConfig+0x148>)
 8005080:	4013      	ands	r3, r2
 8005082:	0019      	movs	r1, r3
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	430a      	orrs	r2, r1
 800508e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	2204      	movs	r2, #4
 8005096:	4013      	ands	r3, r2
 8005098:	d00b      	beq.n	80050b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	4a3b      	ldr	r2, [pc, #236]	; (8005190 <UART_AdvFeatureConfig+0x14c>)
 80050a2:	4013      	ands	r3, r2
 80050a4:	0019      	movs	r1, r3
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	430a      	orrs	r2, r1
 80050b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050b6:	2208      	movs	r2, #8
 80050b8:	4013      	ands	r3, r2
 80050ba:	d00b      	beq.n	80050d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	4a34      	ldr	r2, [pc, #208]	; (8005194 <UART_AdvFeatureConfig+0x150>)
 80050c4:	4013      	ands	r3, r2
 80050c6:	0019      	movs	r1, r3
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	430a      	orrs	r2, r1
 80050d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2210      	movs	r2, #16
 80050da:	4013      	ands	r3, r2
 80050dc:	d00b      	beq.n	80050f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	689b      	ldr	r3, [r3, #8]
 80050e4:	4a2c      	ldr	r2, [pc, #176]	; (8005198 <UART_AdvFeatureConfig+0x154>)
 80050e6:	4013      	ands	r3, r2
 80050e8:	0019      	movs	r1, r3
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	430a      	orrs	r2, r1
 80050f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	2220      	movs	r2, #32
 80050fc:	4013      	ands	r3, r2
 80050fe:	d00b      	beq.n	8005118 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	689b      	ldr	r3, [r3, #8]
 8005106:	4a25      	ldr	r2, [pc, #148]	; (800519c <UART_AdvFeatureConfig+0x158>)
 8005108:	4013      	ands	r3, r2
 800510a:	0019      	movs	r1, r3
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	430a      	orrs	r2, r1
 8005116:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800511c:	2240      	movs	r2, #64	; 0x40
 800511e:	4013      	ands	r3, r2
 8005120:	d01d      	beq.n	800515e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a1d      	ldr	r2, [pc, #116]	; (80051a0 <UART_AdvFeatureConfig+0x15c>)
 800512a:	4013      	ands	r3, r2
 800512c:	0019      	movs	r1, r3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	430a      	orrs	r2, r1
 8005138:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800513e:	2380      	movs	r3, #128	; 0x80
 8005140:	035b      	lsls	r3, r3, #13
 8005142:	429a      	cmp	r2, r3
 8005144:	d10b      	bne.n	800515e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	685b      	ldr	r3, [r3, #4]
 800514c:	4a15      	ldr	r2, [pc, #84]	; (80051a4 <UART_AdvFeatureConfig+0x160>)
 800514e:	4013      	ands	r3, r2
 8005150:	0019      	movs	r1, r3
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	430a      	orrs	r2, r1
 800515c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005162:	2280      	movs	r2, #128	; 0x80
 8005164:	4013      	ands	r3, r2
 8005166:	d00b      	beq.n	8005180 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	4a0e      	ldr	r2, [pc, #56]	; (80051a8 <UART_AdvFeatureConfig+0x164>)
 8005170:	4013      	ands	r3, r2
 8005172:	0019      	movs	r1, r3
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	430a      	orrs	r2, r1
 800517e:	605a      	str	r2, [r3, #4]
  }
}
 8005180:	46c0      	nop			; (mov r8, r8)
 8005182:	46bd      	mov	sp, r7
 8005184:	b002      	add	sp, #8
 8005186:	bd80      	pop	{r7, pc}
 8005188:	fffdffff 	.word	0xfffdffff
 800518c:	fffeffff 	.word	0xfffeffff
 8005190:	fffbffff 	.word	0xfffbffff
 8005194:	ffff7fff 	.word	0xffff7fff
 8005198:	ffffefff 	.word	0xffffefff
 800519c:	ffffdfff 	.word	0xffffdfff
 80051a0:	ffefffff 	.word	0xffefffff
 80051a4:	ff9fffff 	.word	0xff9fffff
 80051a8:	fff7ffff 	.word	0xfff7ffff

080051ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	b092      	sub	sp, #72	; 0x48
 80051b0:	af02      	add	r7, sp, #8
 80051b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2284      	movs	r2, #132	; 0x84
 80051b8:	2100      	movs	r1, #0
 80051ba:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80051bc:	f7fc fcda 	bl	8001b74 <HAL_GetTick>
 80051c0:	0003      	movs	r3, r0
 80051c2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2208      	movs	r2, #8
 80051cc:	4013      	ands	r3, r2
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d12c      	bne.n	800522c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80051d4:	2280      	movs	r2, #128	; 0x80
 80051d6:	0391      	lsls	r1, r2, #14
 80051d8:	6878      	ldr	r0, [r7, #4]
 80051da:	4a46      	ldr	r2, [pc, #280]	; (80052f4 <UART_CheckIdleState+0x148>)
 80051dc:	9200      	str	r2, [sp, #0]
 80051de:	2200      	movs	r2, #0
 80051e0:	f000 f88c 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 80051e4:	1e03      	subs	r3, r0, #0
 80051e6:	d021      	beq.n	800522c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80051e8:	f3ef 8310 	mrs	r3, PRIMASK
 80051ec:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80051ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80051f0:	63bb      	str	r3, [r7, #56]	; 0x38
 80051f2:	2301      	movs	r3, #1
 80051f4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80051f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f8:	f383 8810 	msr	PRIMASK, r3
}
 80051fc:	46c0      	nop			; (mov r8, r8)
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	2180      	movs	r1, #128	; 0x80
 800520a:	438a      	bics	r2, r1
 800520c:	601a      	str	r2, [r3, #0]
 800520e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005210:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005214:	f383 8810 	msr	PRIMASK, r3
}
 8005218:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2220      	movs	r2, #32
 800521e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2278      	movs	r2, #120	; 0x78
 8005224:	2100      	movs	r1, #0
 8005226:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e05f      	b.n	80052ec <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	2204      	movs	r2, #4
 8005234:	4013      	ands	r3, r2
 8005236:	2b04      	cmp	r3, #4
 8005238:	d146      	bne.n	80052c8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800523a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800523c:	2280      	movs	r2, #128	; 0x80
 800523e:	03d1      	lsls	r1, r2, #15
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	4a2c      	ldr	r2, [pc, #176]	; (80052f4 <UART_CheckIdleState+0x148>)
 8005244:	9200      	str	r2, [sp, #0]
 8005246:	2200      	movs	r2, #0
 8005248:	f000 f858 	bl	80052fc <UART_WaitOnFlagUntilTimeout>
 800524c:	1e03      	subs	r3, r0, #0
 800524e:	d03b      	beq.n	80052c8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005250:	f3ef 8310 	mrs	r3, PRIMASK
 8005254:	60fb      	str	r3, [r7, #12]
  return(result);
 8005256:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005258:	637b      	str	r3, [r7, #52]	; 0x34
 800525a:	2301      	movs	r3, #1
 800525c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	f383 8810 	msr	PRIMASK, r3
}
 8005264:	46c0      	nop			; (mov r8, r8)
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	681a      	ldr	r2, [r3, #0]
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	4921      	ldr	r1, [pc, #132]	; (80052f8 <UART_CheckIdleState+0x14c>)
 8005272:	400a      	ands	r2, r1
 8005274:	601a      	str	r2, [r3, #0]
 8005276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005278:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f383 8810 	msr	PRIMASK, r3
}
 8005280:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005282:	f3ef 8310 	mrs	r3, PRIMASK
 8005286:	61bb      	str	r3, [r7, #24]
  return(result);
 8005288:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800528a:	633b      	str	r3, [r7, #48]	; 0x30
 800528c:	2301      	movs	r3, #1
 800528e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	f383 8810 	msr	PRIMASK, r3
}
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689a      	ldr	r2, [r3, #8]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	2101      	movs	r1, #1
 80052a4:	438a      	bics	r2, r1
 80052a6:	609a      	str	r2, [r3, #8]
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80052ac:	6a3b      	ldr	r3, [r7, #32]
 80052ae:	f383 8810 	msr	PRIMASK, r3
}
 80052b2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	2280      	movs	r2, #128	; 0x80
 80052b8:	2120      	movs	r1, #32
 80052ba:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2278      	movs	r2, #120	; 0x78
 80052c0:	2100      	movs	r1, #0
 80052c2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80052c4:	2303      	movs	r3, #3
 80052c6:	e011      	b.n	80052ec <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	2220      	movs	r2, #32
 80052cc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2280      	movs	r2, #128	; 0x80
 80052d2:	2120      	movs	r1, #32
 80052d4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2200      	movs	r2, #0
 80052e0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2278      	movs	r2, #120	; 0x78
 80052e6:	2100      	movs	r1, #0
 80052e8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052ea:	2300      	movs	r3, #0
}
 80052ec:	0018      	movs	r0, r3
 80052ee:	46bd      	mov	sp, r7
 80052f0:	b010      	add	sp, #64	; 0x40
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	01ffffff 	.word	0x01ffffff
 80052f8:	fffffedf 	.word	0xfffffedf

080052fc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b084      	sub	sp, #16
 8005300:	af00      	add	r7, sp, #0
 8005302:	60f8      	str	r0, [r7, #12]
 8005304:	60b9      	str	r1, [r7, #8]
 8005306:	603b      	str	r3, [r7, #0]
 8005308:	1dfb      	adds	r3, r7, #7
 800530a:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800530c:	e04b      	b.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800530e:	69bb      	ldr	r3, [r7, #24]
 8005310:	3301      	adds	r3, #1
 8005312:	d048      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005314:	f7fc fc2e 	bl	8001b74 <HAL_GetTick>
 8005318:	0002      	movs	r2, r0
 800531a:	683b      	ldr	r3, [r7, #0]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	69ba      	ldr	r2, [r7, #24]
 8005320:	429a      	cmp	r2, r3
 8005322:	d302      	bcc.n	800532a <UART_WaitOnFlagUntilTimeout+0x2e>
 8005324:	69bb      	ldr	r3, [r7, #24]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d101      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e04b      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2204      	movs	r2, #4
 8005336:	4013      	ands	r3, r2
 8005338:	d035      	beq.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	69db      	ldr	r3, [r3, #28]
 8005340:	2208      	movs	r2, #8
 8005342:	4013      	ands	r3, r2
 8005344:	2b08      	cmp	r3, #8
 8005346:	d111      	bne.n	800536c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	2208      	movs	r2, #8
 800534e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	0018      	movs	r0, r3
 8005354:	f000 f83c 	bl	80053d0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	2284      	movs	r2, #132	; 0x84
 800535c:	2108      	movs	r1, #8
 800535e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	2278      	movs	r2, #120	; 0x78
 8005364:	2100      	movs	r1, #0
 8005366:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8005368:	2301      	movs	r3, #1
 800536a:	e02c      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	69da      	ldr	r2, [r3, #28]
 8005372:	2380      	movs	r3, #128	; 0x80
 8005374:	011b      	lsls	r3, r3, #4
 8005376:	401a      	ands	r2, r3
 8005378:	2380      	movs	r3, #128	; 0x80
 800537a:	011b      	lsls	r3, r3, #4
 800537c:	429a      	cmp	r2, r3
 800537e:	d112      	bne.n	80053a6 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2280      	movs	r2, #128	; 0x80
 8005386:	0112      	lsls	r2, r2, #4
 8005388:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	0018      	movs	r0, r3
 800538e:	f000 f81f 	bl	80053d0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	2284      	movs	r2, #132	; 0x84
 8005396:	2120      	movs	r1, #32
 8005398:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	2278      	movs	r2, #120	; 0x78
 800539e:	2100      	movs	r1, #0
 80053a0:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80053a2:	2303      	movs	r3, #3
 80053a4:	e00f      	b.n	80053c6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	69db      	ldr	r3, [r3, #28]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	4013      	ands	r3, r2
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	1ad3      	subs	r3, r2, r3
 80053b4:	425a      	negs	r2, r3
 80053b6:	4153      	adcs	r3, r2
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	001a      	movs	r2, r3
 80053bc:	1dfb      	adds	r3, r7, #7
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	429a      	cmp	r2, r3
 80053c2:	d0a4      	beq.n	800530e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80053c4:	2300      	movs	r3, #0
}
 80053c6:	0018      	movs	r0, r3
 80053c8:	46bd      	mov	sp, r7
 80053ca:	b004      	add	sp, #16
 80053cc:	bd80      	pop	{r7, pc}
	...

080053d0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b08e      	sub	sp, #56	; 0x38
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80053d8:	f3ef 8310 	mrs	r3, PRIMASK
 80053dc:	617b      	str	r3, [r7, #20]
  return(result);
 80053de:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80053e0:	637b      	str	r3, [r7, #52]	; 0x34
 80053e2:	2301      	movs	r3, #1
 80053e4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80053e6:	69bb      	ldr	r3, [r7, #24]
 80053e8:	f383 8810 	msr	PRIMASK, r3
}
 80053ec:	46c0      	nop			; (mov r8, r8)
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	681a      	ldr	r2, [r3, #0]
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4926      	ldr	r1, [pc, #152]	; (8005494 <UART_EndRxTransfer+0xc4>)
 80053fa:	400a      	ands	r2, r1
 80053fc:	601a      	str	r2, [r3, #0]
 80053fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005400:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	f383 8810 	msr	PRIMASK, r3
}
 8005408:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800540a:	f3ef 8310 	mrs	r3, PRIMASK
 800540e:	623b      	str	r3, [r7, #32]
  return(result);
 8005410:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005412:	633b      	str	r3, [r7, #48]	; 0x30
 8005414:	2301      	movs	r3, #1
 8005416:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800541a:	f383 8810 	msr	PRIMASK, r3
}
 800541e:	46c0      	nop			; (mov r8, r8)
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	689a      	ldr	r2, [r3, #8]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2101      	movs	r1, #1
 800542c:	438a      	bics	r2, r1
 800542e:	609a      	str	r2, [r3, #8]
 8005430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005432:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005436:	f383 8810 	msr	PRIMASK, r3
}
 800543a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005440:	2b01      	cmp	r3, #1
 8005442:	d118      	bne.n	8005476 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005444:	f3ef 8310 	mrs	r3, PRIMASK
 8005448:	60bb      	str	r3, [r7, #8]
  return(result);
 800544a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800544c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800544e:	2301      	movs	r3, #1
 8005450:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	f383 8810 	msr	PRIMASK, r3
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	681a      	ldr	r2, [r3, #0]
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	2110      	movs	r1, #16
 8005466:	438a      	bics	r2, r1
 8005468:	601a      	str	r2, [r3, #0]
 800546a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800546c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	f383 8810 	msr	PRIMASK, r3
}
 8005474:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2280      	movs	r2, #128	; 0x80
 800547a:	2120      	movs	r1, #32
 800547c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2200      	movs	r2, #0
 8005482:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	2200      	movs	r2, #0
 8005488:	669a      	str	r2, [r3, #104]	; 0x68
}
 800548a:	46c0      	nop			; (mov r8, r8)
 800548c:	46bd      	mov	sp, r7
 800548e:	b00e      	add	sp, #56	; 0x38
 8005490:	bd80      	pop	{r7, pc}
 8005492:	46c0      	nop			; (mov r8, r8)
 8005494:	fffffedf 	.word	0xfffffedf

08005498 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b084      	sub	sp, #16
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054a4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	225a      	movs	r2, #90	; 0x5a
 80054aa:	2100      	movs	r1, #0
 80054ac:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2252      	movs	r2, #82	; 0x52
 80054b2:	2100      	movs	r1, #0
 80054b4:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f7ff fc87 	bl	8004dcc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80054be:	46c0      	nop			; (mov r8, r8)
 80054c0:	46bd      	mov	sp, r7
 80054c2:	b004      	add	sp, #16
 80054c4:	bd80      	pop	{r7, pc}

080054c6 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80054c6:	b580      	push	{r7, lr}
 80054c8:	b086      	sub	sp, #24
 80054ca:	af00      	add	r7, sp, #0
 80054cc:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80054ce:	f3ef 8310 	mrs	r3, PRIMASK
 80054d2:	60bb      	str	r3, [r7, #8]
  return(result);
 80054d4:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	2301      	movs	r3, #1
 80054da:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	f383 8810 	msr	PRIMASK, r3
}
 80054e2:	46c0      	nop			; (mov r8, r8)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	2140      	movs	r1, #64	; 0x40
 80054f0:	438a      	bics	r2, r1
 80054f2:	601a      	str	r2, [r3, #0]
 80054f4:	697b      	ldr	r3, [r7, #20]
 80054f6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80054f8:	693b      	ldr	r3, [r7, #16]
 80054fa:	f383 8810 	msr	PRIMASK, r3
}
 80054fe:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2220      	movs	r2, #32
 8005504:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2200      	movs	r2, #0
 800550a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	0018      	movs	r0, r3
 8005510:	f7fc f864 	bl	80015dc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005514:	46c0      	nop			; (mov r8, r8)
 8005516:	46bd      	mov	sp, r7
 8005518:	b006      	add	sp, #24
 800551a:	bd80      	pop	{r7, pc}

0800551c <memset>:
 800551c:	0003      	movs	r3, r0
 800551e:	1882      	adds	r2, r0, r2
 8005520:	4293      	cmp	r3, r2
 8005522:	d100      	bne.n	8005526 <memset+0xa>
 8005524:	4770      	bx	lr
 8005526:	7019      	strb	r1, [r3, #0]
 8005528:	3301      	adds	r3, #1
 800552a:	e7f9      	b.n	8005520 <memset+0x4>

0800552c <__libc_init_array>:
 800552c:	b570      	push	{r4, r5, r6, lr}
 800552e:	2600      	movs	r6, #0
 8005530:	4c0c      	ldr	r4, [pc, #48]	; (8005564 <__libc_init_array+0x38>)
 8005532:	4d0d      	ldr	r5, [pc, #52]	; (8005568 <__libc_init_array+0x3c>)
 8005534:	1b64      	subs	r4, r4, r5
 8005536:	10a4      	asrs	r4, r4, #2
 8005538:	42a6      	cmp	r6, r4
 800553a:	d109      	bne.n	8005550 <__libc_init_array+0x24>
 800553c:	2600      	movs	r6, #0
 800553e:	f000 f819 	bl	8005574 <_init>
 8005542:	4c0a      	ldr	r4, [pc, #40]	; (800556c <__libc_init_array+0x40>)
 8005544:	4d0a      	ldr	r5, [pc, #40]	; (8005570 <__libc_init_array+0x44>)
 8005546:	1b64      	subs	r4, r4, r5
 8005548:	10a4      	asrs	r4, r4, #2
 800554a:	42a6      	cmp	r6, r4
 800554c:	d105      	bne.n	800555a <__libc_init_array+0x2e>
 800554e:	bd70      	pop	{r4, r5, r6, pc}
 8005550:	00b3      	lsls	r3, r6, #2
 8005552:	58eb      	ldr	r3, [r5, r3]
 8005554:	4798      	blx	r3
 8005556:	3601      	adds	r6, #1
 8005558:	e7ee      	b.n	8005538 <__libc_init_array+0xc>
 800555a:	00b3      	lsls	r3, r6, #2
 800555c:	58eb      	ldr	r3, [r5, r3]
 800555e:	4798      	blx	r3
 8005560:	3601      	adds	r6, #1
 8005562:	e7f2      	b.n	800554a <__libc_init_array+0x1e>
 8005564:	08005600 	.word	0x08005600
 8005568:	08005600 	.word	0x08005600
 800556c:	08005604 	.word	0x08005604
 8005570:	08005600 	.word	0x08005600

08005574 <_init>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	46c0      	nop			; (mov r8, r8)
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr

08005580 <_fini>:
 8005580:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005582:	46c0      	nop			; (mov r8, r8)
 8005584:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005586:	bc08      	pop	{r3}
 8005588:	469e      	mov	lr, r3
 800558a:	4770      	bx	lr
