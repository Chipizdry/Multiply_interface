
SMART_HOME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006d30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ee0  08006ee0  00020060  2**0
                  CONTENTS
  4 .ARM          00000000  08006ee0  08006ee0  00020060  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006ee0  08006ee0  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ee0  08006ee0  00016ee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ee4  08006ee4  00016ee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  20000000  08006ee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000478  20000060  08006f48  00020060  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08006f48  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020088  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000f8ca  00000000  00000000  000200cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f9  00000000  00000000  0002f995  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f58  00000000  00000000  00032090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c04  00000000  00000000  00032fe8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000117ee  00000000  00000000  00033bec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000133d4  00000000  00000000  000453da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00068919  00000000  00000000  000587ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003b84  00000000  00000000  000c10c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000c4c4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000060 	.word	0x20000060
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006dd8 	.word	0x08006dd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000064 	.word	0x20000064
 8000104:	08006dd8 	.word	0x08006dd8

08000108 <__gnu_thumb1_case_shi>:
 8000108:	b403      	push	{r0, r1}
 800010a:	4671      	mov	r1, lr
 800010c:	0849      	lsrs	r1, r1, #1
 800010e:	0040      	lsls	r0, r0, #1
 8000110:	0049      	lsls	r1, r1, #1
 8000112:	5e09      	ldrsh	r1, [r1, r0]
 8000114:	0049      	lsls	r1, r1, #1
 8000116:	448e      	add	lr, r1
 8000118:	bc03      	pop	{r0, r1}
 800011a:	4770      	bx	lr

0800011c <__udivsi3>:
 800011c:	2200      	movs	r2, #0
 800011e:	0843      	lsrs	r3, r0, #1
 8000120:	428b      	cmp	r3, r1
 8000122:	d374      	bcc.n	800020e <__udivsi3+0xf2>
 8000124:	0903      	lsrs	r3, r0, #4
 8000126:	428b      	cmp	r3, r1
 8000128:	d35f      	bcc.n	80001ea <__udivsi3+0xce>
 800012a:	0a03      	lsrs	r3, r0, #8
 800012c:	428b      	cmp	r3, r1
 800012e:	d344      	bcc.n	80001ba <__udivsi3+0x9e>
 8000130:	0b03      	lsrs	r3, r0, #12
 8000132:	428b      	cmp	r3, r1
 8000134:	d328      	bcc.n	8000188 <__udivsi3+0x6c>
 8000136:	0c03      	lsrs	r3, r0, #16
 8000138:	428b      	cmp	r3, r1
 800013a:	d30d      	bcc.n	8000158 <__udivsi3+0x3c>
 800013c:	22ff      	movs	r2, #255	; 0xff
 800013e:	0209      	lsls	r1, r1, #8
 8000140:	ba12      	rev	r2, r2
 8000142:	0c03      	lsrs	r3, r0, #16
 8000144:	428b      	cmp	r3, r1
 8000146:	d302      	bcc.n	800014e <__udivsi3+0x32>
 8000148:	1212      	asrs	r2, r2, #8
 800014a:	0209      	lsls	r1, r1, #8
 800014c:	d065      	beq.n	800021a <__udivsi3+0xfe>
 800014e:	0b03      	lsrs	r3, r0, #12
 8000150:	428b      	cmp	r3, r1
 8000152:	d319      	bcc.n	8000188 <__udivsi3+0x6c>
 8000154:	e000      	b.n	8000158 <__udivsi3+0x3c>
 8000156:	0a09      	lsrs	r1, r1, #8
 8000158:	0bc3      	lsrs	r3, r0, #15
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x46>
 800015e:	03cb      	lsls	r3, r1, #15
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b83      	lsrs	r3, r0, #14
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x52>
 800016a:	038b      	lsls	r3, r1, #14
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0b43      	lsrs	r3, r0, #13
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x5e>
 8000176:	034b      	lsls	r3, r1, #13
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x6a>
 8000182:	030b      	lsls	r3, r1, #12
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0ac3      	lsrs	r3, r0, #11
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x76>
 800018e:	02cb      	lsls	r3, r1, #11
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a83      	lsrs	r3, r0, #10
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x82>
 800019a:	028b      	lsls	r3, r1, #10
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0a43      	lsrs	r3, r0, #9
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x8e>
 80001a6:	024b      	lsls	r3, r1, #9
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0a03      	lsrs	r3, r0, #8
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x9a>
 80001b2:	020b      	lsls	r3, r1, #8
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	d2cd      	bcs.n	8000156 <__udivsi3+0x3a>
 80001ba:	09c3      	lsrs	r3, r0, #7
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xa8>
 80001c0:	01cb      	lsls	r3, r1, #7
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0983      	lsrs	r3, r0, #6
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xb4>
 80001cc:	018b      	lsls	r3, r1, #6
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	0943      	lsrs	r3, r0, #5
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xc0>
 80001d8:	014b      	lsls	r3, r1, #5
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0903      	lsrs	r3, r0, #4
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xcc>
 80001e4:	010b      	lsls	r3, r1, #4
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	08c3      	lsrs	r3, r0, #3
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xd8>
 80001f0:	00cb      	lsls	r3, r1, #3
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0883      	lsrs	r3, r0, #2
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xe4>
 80001fc:	008b      	lsls	r3, r1, #2
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0843      	lsrs	r3, r0, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xf0>
 8000208:	004b      	lsls	r3, r1, #1
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	1a41      	subs	r1, r0, r1
 8000210:	d200      	bcs.n	8000214 <__udivsi3+0xf8>
 8000212:	4601      	mov	r1, r0
 8000214:	4152      	adcs	r2, r2
 8000216:	4610      	mov	r0, r2
 8000218:	4770      	bx	lr
 800021a:	e7ff      	b.n	800021c <__udivsi3+0x100>
 800021c:	b501      	push	{r0, lr}
 800021e:	2000      	movs	r0, #0
 8000220:	f000 f806 	bl	8000230 <__aeabi_idiv0>
 8000224:	bd02      	pop	{r1, pc}
 8000226:	46c0      	nop			; (mov r8, r8)

08000228 <__aeabi_uidivmod>:
 8000228:	2900      	cmp	r1, #0
 800022a:	d0f7      	beq.n	800021c <__udivsi3+0x100>
 800022c:	e776      	b.n	800011c <__udivsi3>
 800022e:	4770      	bx	lr

08000230 <__aeabi_idiv0>:
 8000230:	4770      	bx	lr
 8000232:	46c0      	nop			; (mov r8, r8)

08000234 <FlashRead>:
static void MX_TIM3_Init(void);
static void MX_IWDG_Init(void);
/* USER CODE BEGIN PFP */


uint32_t FlashRead(uint32_t address) {
 8000234:	b580      	push	{r7, lr}
 8000236:	b082      	sub	sp, #8
 8000238:	af00      	add	r7, sp, #0
 800023a:	6078      	str	r0, [r7, #4]
 return (*(__IO uint32_t*)address);
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	681b      	ldr	r3, [r3, #0]
}
 8000240:	0018      	movs	r0, r3
 8000242:	46bd      	mov	sp, r7
 8000244:	b002      	add	sp, #8
 8000246:	bd80      	pop	{r7, pc}

08000248 <WriteConfig>:



void WriteConfig() {
 8000248:	b5f0      	push	{r4, r5, r6, r7, lr}
 800024a:	b089      	sub	sp, #36	; 0x24
 800024c:	af00      	add	r7, sp, #0
 HAL_FLASH_Unlock(); // Открыть доступ к FLASH (она закрыта от случайной записи)
 800024e:	f003 f901 	bl	8003454 <HAL_FLASH_Unlock>
 // В структуре settings хранятся настройки, преобразую ее в 16-битный массив для удобства доступа
 uint16_t* data = (uint16_t*) &settings;
 8000252:	4b1e      	ldr	r3, [pc, #120]	; (80002cc <WriteConfig+0x84>)
 8000254:	61fb      	str	r3, [r7, #28]
 FLASH_EraseInitTypeDef ef; // Объявляю структуру, необходимую для функции стирания страницы
 HAL_StatusTypeDef stat;
 ef.TypeErase = FLASH_TYPEERASE_PAGES; // Стирать постранично
 8000256:	2108      	movs	r1, #8
 8000258:	187b      	adds	r3, r7, r1
 800025a:	2200      	movs	r2, #0
 800025c:	601a      	str	r2, [r3, #0]
 ef.PageAddress = SETTINGS_ADDRESS; // Адрес страницы для стирания
 800025e:	187b      	adds	r3, r7, r1
 8000260:	4a1b      	ldr	r2, [pc, #108]	; (80002d0 <WriteConfig+0x88>)
 8000262:	605a      	str	r2, [r3, #4]
 ef.NbPages = 1; //Число страниц = 1
 8000264:	187b      	adds	r3, r7, r1
 8000266:	2201      	movs	r2, #1
 8000268:	609a      	str	r2, [r3, #8]
 uint32_t temp; // Временная переменная для результата стирания (не использую)
 HAL_FLASHEx_Erase(&ef, &temp); // Вызов функции стирания
 800026a:	1d3a      	adds	r2, r7, #4
 800026c:	187b      	adds	r3, r7, r1
 800026e:	0011      	movs	r1, r2
 8000270:	0018      	movs	r0, r3
 8000272:	f003 f9af 	bl	80035d4 <HAL_FLASHEx_Erase>
 // Будьте уверены, что размер структуры настроек кратен 2 байтам
 for (int i = 0; i < sizeof(settings); i += 2) { // Запись всех настроек
 8000276:	2300      	movs	r3, #0
 8000278:	61bb      	str	r3, [r7, #24]
 800027a:	e01c      	b.n	80002b6 <WriteConfig+0x6e>
  stat = HAL_FLASH_Program (FLASH_TYPEPROGRAM_HALFWORD, SETTINGS_ADDRESS + i, *(data++));
 800027c:	69bb      	ldr	r3, [r7, #24]
 800027e:	4a14      	ldr	r2, [pc, #80]	; (80002d0 <WriteConfig+0x88>)
 8000280:	4694      	mov	ip, r2
 8000282:	4463      	add	r3, ip
 8000284:	0019      	movs	r1, r3
 8000286:	69fb      	ldr	r3, [r7, #28]
 8000288:	1c9a      	adds	r2, r3, #2
 800028a:	61fa      	str	r2, [r7, #28]
 800028c:	881b      	ldrh	r3, [r3, #0]
 800028e:	001c      	movs	r4, r3
 8000290:	2300      	movs	r3, #0
 8000292:	001d      	movs	r5, r3
 8000294:	2317      	movs	r3, #23
 8000296:	18fe      	adds	r6, r7, r3
 8000298:	0022      	movs	r2, r4
 800029a:	002b      	movs	r3, r5
 800029c:	2001      	movs	r0, #1
 800029e:	f003 f843 	bl	8003328 <HAL_FLASH_Program>
 80002a2:	0003      	movs	r3, r0
 80002a4:	7033      	strb	r3, [r6, #0]
  if (stat != HAL_OK) break; // Если что-то пошло не так - выскочить из цикла
 80002a6:	2317      	movs	r3, #23
 80002a8:	18fb      	adds	r3, r7, r3
 80002aa:	781b      	ldrb	r3, [r3, #0]
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d106      	bne.n	80002be <WriteConfig+0x76>
 for (int i = 0; i < sizeof(settings); i += 2) { // Запись всех настроек
 80002b0:	69bb      	ldr	r3, [r7, #24]
 80002b2:	3302      	adds	r3, #2
 80002b4:	61bb      	str	r3, [r7, #24]
 80002b6:	69bb      	ldr	r3, [r7, #24]
 80002b8:	2b03      	cmp	r3, #3
 80002ba:	d9df      	bls.n	800027c <WriteConfig+0x34>
 80002bc:	e000      	b.n	80002c0 <WriteConfig+0x78>
  if (stat != HAL_OK) break; // Если что-то пошло не так - выскочить из цикла
 80002be:	46c0      	nop			; (mov r8, r8)
 }
 HAL_FLASH_Lock(); // Закрыть флешку от случайной записи
 80002c0:	f003 f8ee 	bl	80034a0 <HAL_FLASH_Lock>
}
 80002c4:	46c0      	nop			; (mov r8, r8)
 80002c6:	46bd      	mov	sp, r7
 80002c8:	b009      	add	sp, #36	; 0x24
 80002ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80002cc:	2000035c 	.word	0x2000035c
 80002d0:	08007c00 	.word	0x08007c00

080002d4 <ReadConfig>:



// Пример чтения только 4 байт настроек. Для бОльшего объема данных используйте цикл
void ReadConfig() {
 80002d4:	b580      	push	{r7, lr}
 80002d6:	b082      	sub	sp, #8
 80002d8:	af00      	add	r7, sp, #0
 // Структуру настроек превращаю в указатель на массив 8-ми битных значений
 uint8_t* setData = (uint8_t*)&settings;
 80002da:	4b16      	ldr	r3, [pc, #88]	; (8000334 <ReadConfig+0x60>)
 80002dc:	607b      	str	r3, [r7, #4]
 LED1_ON;
 80002de:	2380      	movs	r3, #128	; 0x80
 80002e0:	0119      	lsls	r1, r3, #4
 80002e2:	2390      	movs	r3, #144	; 0x90
 80002e4:	05db      	lsls	r3, r3, #23
 80002e6:	2201      	movs	r2, #1
 80002e8:	0018      	movs	r0, r3
 80002ea:	f003 fbac 	bl	8003a46 <HAL_GPIO_WritePin>

 uint32_t tempData = FlashRead(SETTINGS_ADDRESS); // Прочесть слово из флешки
 80002ee:	4b12      	ldr	r3, [pc, #72]	; (8000338 <ReadConfig+0x64>)
 80002f0:	0018      	movs	r0, r3
 80002f2:	f7ff ff9f 	bl	8000234 <FlashRead>
 80002f6:	0003      	movs	r3, r0
 80002f8:	603b      	str	r3, [r7, #0]
// uint32_t tempData  = *(__IO uint32_t *)SETTINGS_ADDRESS;
 if (tempData != 0xffffffff) { // Если флешка не пустая
 80002fa:	683b      	ldr	r3, [r7, #0]
 80002fc:	3301      	adds	r3, #1
 80002fe:	d015      	beq.n	800032c <ReadConfig+0x58>
 setData[0] = (uint8_t)((tempData & 0xff000000) >> 24); // �?звлечь первый байт из слова
 8000300:	683b      	ldr	r3, [r7, #0]
 8000302:	0e1b      	lsrs	r3, r3, #24
 8000304:	b2da      	uxtb	r2, r3
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	701a      	strb	r2, [r3, #0]
 setData[1] = (uint8_t)((tempData & 0x00ff0000) >> 16); // �?звлечь второй байт из слова
 800030a:	683b      	ldr	r3, [r7, #0]
 800030c:	0c1a      	lsrs	r2, r3, #16
 800030e:	687b      	ldr	r3, [r7, #4]
 8000310:	3301      	adds	r3, #1
 8000312:	b2d2      	uxtb	r2, r2
 8000314:	701a      	strb	r2, [r3, #0]
 setData[2] = (uint8_t)((tempData & 0x0000ff00) >> 8); // �?злечь третий байт из слова
 8000316:	683b      	ldr	r3, [r7, #0]
 8000318:	0a1a      	lsrs	r2, r3, #8
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	3302      	adds	r3, #2
 800031e:	b2d2      	uxtb	r2, r2
 8000320:	701a      	strb	r2, [r3, #0]
 setData[3] = tempData & 0xff; // �?звлечь четвертый байт из слова
 8000322:	687b      	ldr	r3, [r7, #4]
 8000324:	3303      	adds	r3, #3
 8000326:	683a      	ldr	r2, [r7, #0]
 8000328:	b2d2      	uxtb	r2, r2
 800032a:	701a      	strb	r2, [r3, #0]
 }
}
 800032c:	46c0      	nop			; (mov r8, r8)
 800032e:	46bd      	mov	sp, r7
 8000330:	b002      	add	sp, #8
 8000332:	bd80      	pop	{r7, pc}
 8000334:	2000035c 	.word	0x2000035c
 8000338:	08007c00 	.word	0x08007c00

0800033c <Print_test>:





void Print_test(void){
 800033c:	b5b0      	push	{r4, r5, r7, lr}
 800033e:	b082      	sub	sp, #8
 8000340:	af02      	add	r7, sp, #8

	//sprintf(str, "\n\r Cnt-%02d,per-%04d,pul-%04d,adr-%04d,dir-%04d\n\r",count,period,pulse,rcv_addres,directive);
	sprintf(str, "\n\r Cnt-%02d,pul-%04d,adr-%04d,dir-%04d\n\r",count,rcvd[count],rcv_addres,directive);
 8000342:	4b0f      	ldr	r3, [pc, #60]	; (8000380 <Print_test+0x44>)
 8000344:	781b      	ldrb	r3, [r3, #0]
 8000346:	001c      	movs	r4, r3
 8000348:	4b0d      	ldr	r3, [pc, #52]	; (8000380 <Print_test+0x44>)
 800034a:	781b      	ldrb	r3, [r3, #0]
 800034c:	001a      	movs	r2, r3
 800034e:	4b0d      	ldr	r3, [pc, #52]	; (8000384 <Print_test+0x48>)
 8000350:	5c9b      	ldrb	r3, [r3, r2]
 8000352:	001d      	movs	r5, r3
 8000354:	4b0c      	ldr	r3, [pc, #48]	; (8000388 <Print_test+0x4c>)
 8000356:	781b      	ldrb	r3, [r3, #0]
 8000358:	001a      	movs	r2, r3
 800035a:	4b0c      	ldr	r3, [pc, #48]	; (800038c <Print_test+0x50>)
 800035c:	781b      	ldrb	r3, [r3, #0]
 800035e:	490c      	ldr	r1, [pc, #48]	; (8000390 <Print_test+0x54>)
 8000360:	480c      	ldr	r0, [pc, #48]	; (8000394 <Print_test+0x58>)
 8000362:	9301      	str	r3, [sp, #4]
 8000364:	9200      	str	r2, [sp, #0]
 8000366:	002b      	movs	r3, r5
 8000368:	0022      	movs	r2, r4
 800036a:	f006 f88f 	bl	800648c <siprintf>
	// LED2_ON;
	 HAL_UART_Transmit_DMA(&huart1, str, sizeof(str));
 800036e:	4909      	ldr	r1, [pc, #36]	; (8000394 <Print_test+0x58>)
 8000370:	4b09      	ldr	r3, [pc, #36]	; (8000398 <Print_test+0x5c>)
 8000372:	2226      	movs	r2, #38	; 0x26
 8000374:	0018      	movs	r0, r3
 8000376:	f005 f8c1 	bl	80054fc <HAL_UART_Transmit_DMA>

}
 800037a:	46c0      	nop			; (mov r8, r8)
 800037c:	46bd      	mov	sp, r7
 800037e:	bdb0      	pop	{r4, r5, r7, pc}
 8000380:	20000354 	.word	0x20000354
 8000384:	2000025c 	.word	0x2000025c
 8000388:	20000355 	.word	0x20000355
 800038c:	20000357 	.word	0x20000357
 8000390:	08006df0 	.word	0x08006df0
 8000394:	20000234 	.word	0x20000234
 8000398:	2000015c 	.word	0x2000015c

0800039c <TCT>:

void TCT(void){
 800039c:	b580      	push	{r7, lr}
 800039e:	af00      	add	r7, sp, #0

	                 if (count==13){OWR_ON;}
 80003a0:	4b6a      	ldr	r3, [pc, #424]	; (800054c <TCT+0x1b0>)
 80003a2:	781b      	ldrb	r3, [r3, #0]
 80003a4:	2b0d      	cmp	r3, #13
 80003a6:	d106      	bne.n	80003b6 <TCT+0x1a>
 80003a8:	2390      	movs	r3, #144	; 0x90
 80003aa:	05db      	lsls	r3, r3, #23
 80003ac:	2201      	movs	r2, #1
 80003ae:	2180      	movs	r1, #128	; 0x80
 80003b0:	0018      	movs	r0, r3
 80003b2:	f003 fb48 	bl	8003a46 <HAL_GPIO_WritePin>
	                 if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 80003b6:	4b65      	ldr	r3, [pc, #404]	; (800054c <TCT+0x1b0>)
 80003b8:	781b      	ldrb	r3, [r3, #0]
 80003ba:	2b0e      	cmp	r3, #14
 80003bc:	d112      	bne.n	80003e4 <TCT+0x48>
 80003be:	4b64      	ldr	r3, [pc, #400]	; (8000550 <TCT+0x1b4>)
 80003c0:	781b      	ldrb	r3, [r3, #0]
 80003c2:	2b01      	cmp	r3, #1
 80003c4:	d10e      	bne.n	80003e4 <TCT+0x48>
 80003c6:	2390      	movs	r3, #144	; 0x90
 80003c8:	05db      	lsls	r3, r3, #23
 80003ca:	2201      	movs	r2, #1
 80003cc:	2180      	movs	r1, #128	; 0x80
 80003ce:	0018      	movs	r0, r3
 80003d0:	f003 fb39 	bl	8003a46 <HAL_GPIO_WritePin>
 80003d4:	2380      	movs	r3, #128	; 0x80
 80003d6:	0159      	lsls	r1, r3, #5
 80003d8:	2390      	movs	r3, #144	; 0x90
 80003da:	05db      	lsls	r3, r3, #23
 80003dc:	2201      	movs	r2, #1
 80003de:	0018      	movs	r0, r3
 80003e0:	f003 fb31 	bl	8003a46 <HAL_GPIO_WritePin>
	                // if (count==14){Print_test();}
		        	 if (count==22){OWR_ON;}
 80003e4:	4b59      	ldr	r3, [pc, #356]	; (800054c <TCT+0x1b0>)
 80003e6:	781b      	ldrb	r3, [r3, #0]
 80003e8:	2b16      	cmp	r3, #22
 80003ea:	d106      	bne.n	80003fa <TCT+0x5e>
 80003ec:	2390      	movs	r3, #144	; 0x90
 80003ee:	05db      	lsls	r3, r3, #23
 80003f0:	2201      	movs	r2, #1
 80003f2:	2180      	movs	r1, #128	; 0x80
 80003f4:	0018      	movs	r0, r3
 80003f6:	f003 fb26 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==31){OWR_ON;}
 80003fa:	4b54      	ldr	r3, [pc, #336]	; (800054c <TCT+0x1b0>)
 80003fc:	781b      	ldrb	r3, [r3, #0]
 80003fe:	2b1f      	cmp	r3, #31
 8000400:	d106      	bne.n	8000410 <TCT+0x74>
 8000402:	2390      	movs	r3, #144	; 0x90
 8000404:	05db      	lsls	r3, r3, #23
 8000406:	2201      	movs	r2, #1
 8000408:	2180      	movs	r1, #128	; 0x80
 800040a:	0018      	movs	r0, r3
 800040c:	f003 fb1b 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==40){OWR_ON;}
 8000410:	4b4e      	ldr	r3, [pc, #312]	; (800054c <TCT+0x1b0>)
 8000412:	781b      	ldrb	r3, [r3, #0]
 8000414:	2b28      	cmp	r3, #40	; 0x28
 8000416:	d106      	bne.n	8000426 <TCT+0x8a>
 8000418:	2390      	movs	r3, #144	; 0x90
 800041a:	05db      	lsls	r3, r3, #23
 800041c:	2201      	movs	r2, #1
 800041e:	2180      	movs	r1, #128	; 0x80
 8000420:	0018      	movs	r0, r3
 8000422:	f003 fb10 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==49){OWR_ON;}
 8000426:	4b49      	ldr	r3, [pc, #292]	; (800054c <TCT+0x1b0>)
 8000428:	781b      	ldrb	r3, [r3, #0]
 800042a:	2b31      	cmp	r3, #49	; 0x31
 800042c:	d106      	bne.n	800043c <TCT+0xa0>
 800042e:	2390      	movs	r3, #144	; 0x90
 8000430:	05db      	lsls	r3, r3, #23
 8000432:	2201      	movs	r2, #1
 8000434:	2180      	movs	r1, #128	; 0x80
 8000436:	0018      	movs	r0, r3
 8000438:	f003 fb05 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==58){OWR_ON;}
 800043c:	4b43      	ldr	r3, [pc, #268]	; (800054c <TCT+0x1b0>)
 800043e:	781b      	ldrb	r3, [r3, #0]
 8000440:	2b3a      	cmp	r3, #58	; 0x3a
 8000442:	d106      	bne.n	8000452 <TCT+0xb6>
 8000444:	2390      	movs	r3, #144	; 0x90
 8000446:	05db      	lsls	r3, r3, #23
 8000448:	2201      	movs	r2, #1
 800044a:	2180      	movs	r1, #128	; 0x80
 800044c:	0018      	movs	r0, r3
 800044e:	f003 fafa 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==67){OWR_ON;}
 8000452:	4b3e      	ldr	r3, [pc, #248]	; (800054c <TCT+0x1b0>)
 8000454:	781b      	ldrb	r3, [r3, #0]
 8000456:	2b43      	cmp	r3, #67	; 0x43
 8000458:	d106      	bne.n	8000468 <TCT+0xcc>
 800045a:	2390      	movs	r3, #144	; 0x90
 800045c:	05db      	lsls	r3, r3, #23
 800045e:	2201      	movs	r2, #1
 8000460:	2180      	movs	r1, #128	; 0x80
 8000462:	0018      	movs	r0, r3
 8000464:	f003 faef 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==76){OWR_ON;}
 8000468:	4b38      	ldr	r3, [pc, #224]	; (800054c <TCT+0x1b0>)
 800046a:	781b      	ldrb	r3, [r3, #0]
 800046c:	2b4c      	cmp	r3, #76	; 0x4c
 800046e:	d106      	bne.n	800047e <TCT+0xe2>
 8000470:	2390      	movs	r3, #144	; 0x90
 8000472:	05db      	lsls	r3, r3, #23
 8000474:	2201      	movs	r2, #1
 8000476:	2180      	movs	r1, #128	; 0x80
 8000478:	0018      	movs	r0, r3
 800047a:	f003 fae4 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==85){OWR_ON;}
 800047e:	4b33      	ldr	r3, [pc, #204]	; (800054c <TCT+0x1b0>)
 8000480:	781b      	ldrb	r3, [r3, #0]
 8000482:	2b55      	cmp	r3, #85	; 0x55
 8000484:	d106      	bne.n	8000494 <TCT+0xf8>
 8000486:	2390      	movs	r3, #144	; 0x90
 8000488:	05db      	lsls	r3, r3, #23
 800048a:	2201      	movs	r2, #1
 800048c:	2180      	movs	r1, #128	; 0x80
 800048e:	0018      	movs	r0, r3
 8000490:	f003 fad9 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==94){OWR_ON;}
 8000494:	4b2d      	ldr	r3, [pc, #180]	; (800054c <TCT+0x1b0>)
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	2b5e      	cmp	r3, #94	; 0x5e
 800049a:	d106      	bne.n	80004aa <TCT+0x10e>
 800049c:	2390      	movs	r3, #144	; 0x90
 800049e:	05db      	lsls	r3, r3, #23
 80004a0:	2201      	movs	r2, #1
 80004a2:	2180      	movs	r1, #128	; 0x80
 80004a4:	0018      	movs	r0, r3
 80004a6:	f003 face 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==103){OWR_ON;}
 80004aa:	4b28      	ldr	r3, [pc, #160]	; (800054c <TCT+0x1b0>)
 80004ac:	781b      	ldrb	r3, [r3, #0]
 80004ae:	2b67      	cmp	r3, #103	; 0x67
 80004b0:	d106      	bne.n	80004c0 <TCT+0x124>
 80004b2:	2390      	movs	r3, #144	; 0x90
 80004b4:	05db      	lsls	r3, r3, #23
 80004b6:	2201      	movs	r2, #1
 80004b8:	2180      	movs	r1, #128	; 0x80
 80004ba:	0018      	movs	r0, r3
 80004bc:	f003 fac3 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==112){OWR_ON;}
 80004c0:	4b22      	ldr	r3, [pc, #136]	; (800054c <TCT+0x1b0>)
 80004c2:	781b      	ldrb	r3, [r3, #0]
 80004c4:	2b70      	cmp	r3, #112	; 0x70
 80004c6:	d106      	bne.n	80004d6 <TCT+0x13a>
 80004c8:	2390      	movs	r3, #144	; 0x90
 80004ca:	05db      	lsls	r3, r3, #23
 80004cc:	2201      	movs	r2, #1
 80004ce:	2180      	movs	r1, #128	; 0x80
 80004d0:	0018      	movs	r0, r3
 80004d2:	f003 fab8 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==121){OWR_ON;}
 80004d6:	4b1d      	ldr	r3, [pc, #116]	; (800054c <TCT+0x1b0>)
 80004d8:	781b      	ldrb	r3, [r3, #0]
 80004da:	2b79      	cmp	r3, #121	; 0x79
 80004dc:	d106      	bne.n	80004ec <TCT+0x150>
 80004de:	2390      	movs	r3, #144	; 0x90
 80004e0:	05db      	lsls	r3, r3, #23
 80004e2:	2201      	movs	r2, #1
 80004e4:	2180      	movs	r1, #128	; 0x80
 80004e6:	0018      	movs	r0, r3
 80004e8:	f003 faad 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==130){OWR_ON;}
 80004ec:	4b17      	ldr	r3, [pc, #92]	; (800054c <TCT+0x1b0>)
 80004ee:	781b      	ldrb	r3, [r3, #0]
 80004f0:	2b82      	cmp	r3, #130	; 0x82
 80004f2:	d106      	bne.n	8000502 <TCT+0x166>
 80004f4:	2390      	movs	r3, #144	; 0x90
 80004f6:	05db      	lsls	r3, r3, #23
 80004f8:	2201      	movs	r2, #1
 80004fa:	2180      	movs	r1, #128	; 0x80
 80004fc:	0018      	movs	r0, r3
 80004fe:	f003 faa2 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==139){OWR_ON;}
 8000502:	4b12      	ldr	r3, [pc, #72]	; (800054c <TCT+0x1b0>)
 8000504:	781b      	ldrb	r3, [r3, #0]
 8000506:	2b8b      	cmp	r3, #139	; 0x8b
 8000508:	d106      	bne.n	8000518 <TCT+0x17c>
 800050a:	2390      	movs	r3, #144	; 0x90
 800050c:	05db      	lsls	r3, r3, #23
 800050e:	2201      	movs	r2, #1
 8000510:	2180      	movs	r1, #128	; 0x80
 8000512:	0018      	movs	r0, r3
 8000514:	f003 fa97 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==148){OWR_ON;}
 8000518:	4b0c      	ldr	r3, [pc, #48]	; (800054c <TCT+0x1b0>)
 800051a:	781b      	ldrb	r3, [r3, #0]
 800051c:	2b94      	cmp	r3, #148	; 0x94
 800051e:	d106      	bne.n	800052e <TCT+0x192>
 8000520:	2390      	movs	r3, #144	; 0x90
 8000522:	05db      	lsls	r3, r3, #23
 8000524:	2201      	movs	r2, #1
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	0018      	movs	r0, r3
 800052a:	f003 fa8c 	bl	8003a46 <HAL_GPIO_WritePin>
		        	 if (count==157){OWR_ON;}
 800052e:	4b07      	ldr	r3, [pc, #28]	; (800054c <TCT+0x1b0>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b9d      	cmp	r3, #157	; 0x9d
 8000534:	d106      	bne.n	8000544 <TCT+0x1a8>
 8000536:	2390      	movs	r3, #144	; 0x90
 8000538:	05db      	lsls	r3, r3, #23
 800053a:	2201      	movs	r2, #1
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	0018      	movs	r0, r3
 8000540:	f003 fa81 	bl	8003a46 <HAL_GPIO_WritePin>

}
 8000544:	46c0      	nop			; (mov r8, r8)
 8000546:	46bd      	mov	sp, r7
 8000548:	bd80      	pop	{r7, pc}
 800054a:	46c0      	nop			; (mov r8, r8)
 800054c:	20000354 	.word	0x20000354
 8000550:	20000232 	.word	0x20000232

08000554 <Quick_protocol>:

void Quick_protocol(void){
 8000554:	b580      	push	{r7, lr}
 8000556:	af00      	add	r7, sp, #0
	 if((rcvd[1]==1)&&(rcvd[2]==0))
 8000558:	4b1f      	ldr	r3, [pc, #124]	; (80005d8 <Quick_protocol+0x84>)
 800055a:	785b      	ldrb	r3, [r3, #1]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d137      	bne.n	80005d0 <Quick_protocol+0x7c>
 8000560:	4b1d      	ldr	r3, [pc, #116]	; (80005d8 <Quick_protocol+0x84>)
 8000562:	789b      	ldrb	r3, [r3, #2]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d133      	bne.n	80005d0 <Quick_protocol+0x7c>
	        	  {

		               if(count==2){
 8000568:	4b1c      	ldr	r3, [pc, #112]	; (80005dc <Quick_protocol+0x88>)
 800056a:	781b      	ldrb	r3, [r3, #0]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d112      	bne.n	8000596 <Quick_protocol+0x42>
	        	       addres_call=addres_call+1;
 8000570:	4b1b      	ldr	r3, [pc, #108]	; (80005e0 <Quick_protocol+0x8c>)
 8000572:	781b      	ldrb	r3, [r3, #0]
 8000574:	3301      	adds	r3, #1
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b19      	ldr	r3, [pc, #100]	; (80005e0 <Quick_protocol+0x8c>)
 800057a:	701a      	strb	r2, [r3, #0]
	        	       if(addres_call==addres){OWR_ON;}}
 800057c:	4b18      	ldr	r3, [pc, #96]	; (80005e0 <Quick_protocol+0x8c>)
 800057e:	781a      	ldrb	r2, [r3, #0]
 8000580:	4b18      	ldr	r3, [pc, #96]	; (80005e4 <Quick_protocol+0x90>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	429a      	cmp	r2, r3
 8000586:	d106      	bne.n	8000596 <Quick_protocol+0x42>
 8000588:	2390      	movs	r3, #144	; 0x90
 800058a:	05db      	lsls	r3, r3, #23
 800058c:	2201      	movs	r2, #1
 800058e:	2180      	movs	r1, #128	; 0x80
 8000590:	0018      	movs	r0, r3
 8000592:	f003 fa58 	bl	8003a46 <HAL_GPIO_WritePin>
		               if((count==3)&&(addres_call==addres)&&(alarm==1)){OWR_ON;LED2_ON;}}}
 8000596:	4b11      	ldr	r3, [pc, #68]	; (80005dc <Quick_protocol+0x88>)
 8000598:	781b      	ldrb	r3, [r3, #0]
 800059a:	2b03      	cmp	r3, #3
 800059c:	d118      	bne.n	80005d0 <Quick_protocol+0x7c>
 800059e:	4b10      	ldr	r3, [pc, #64]	; (80005e0 <Quick_protocol+0x8c>)
 80005a0:	781a      	ldrb	r2, [r3, #0]
 80005a2:	4b10      	ldr	r3, [pc, #64]	; (80005e4 <Quick_protocol+0x90>)
 80005a4:	781b      	ldrb	r3, [r3, #0]
 80005a6:	429a      	cmp	r2, r3
 80005a8:	d112      	bne.n	80005d0 <Quick_protocol+0x7c>
 80005aa:	4b0f      	ldr	r3, [pc, #60]	; (80005e8 <Quick_protocol+0x94>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	2b01      	cmp	r3, #1
 80005b0:	d10e      	bne.n	80005d0 <Quick_protocol+0x7c>
 80005b2:	2390      	movs	r3, #144	; 0x90
 80005b4:	05db      	lsls	r3, r3, #23
 80005b6:	2201      	movs	r2, #1
 80005b8:	2180      	movs	r1, #128	; 0x80
 80005ba:	0018      	movs	r0, r3
 80005bc:	f003 fa43 	bl	8003a46 <HAL_GPIO_WritePin>
 80005c0:	2380      	movs	r3, #128	; 0x80
 80005c2:	0159      	lsls	r1, r3, #5
 80005c4:	2390      	movs	r3, #144	; 0x90
 80005c6:	05db      	lsls	r3, r3, #23
 80005c8:	2201      	movs	r2, #1
 80005ca:	0018      	movs	r0, r3
 80005cc:	f003 fa3b 	bl	8003a46 <HAL_GPIO_WritePin>
 80005d0:	46c0      	nop			; (mov r8, r8)
 80005d2:	46bd      	mov	sp, r7
 80005d4:	bd80      	pop	{r7, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	2000025c 	.word	0x2000025c
 80005dc:	20000354 	.word	0x20000354
 80005e0:	20000356 	.word	0x20000356
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000232 	.word	0x20000232

080005ec <Protocol>:


void Protocol(void){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	af00      	add	r7, sp, #0

	//Print_test();
	           // if ((count==9)&&(alarm=1)){OWR_ON;}
	 if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 80005f0:	4bad      	ldr	r3, [pc, #692]	; (80008a8 <Protocol+0x2bc>)
 80005f2:	781b      	ldrb	r3, [r3, #0]
 80005f4:	2b0e      	cmp	r3, #14
 80005f6:	d112      	bne.n	800061e <Protocol+0x32>
 80005f8:	4bac      	ldr	r3, [pc, #688]	; (80008ac <Protocol+0x2c0>)
 80005fa:	781b      	ldrb	r3, [r3, #0]
 80005fc:	2b01      	cmp	r3, #1
 80005fe:	d10e      	bne.n	800061e <Protocol+0x32>
 8000600:	2390      	movs	r3, #144	; 0x90
 8000602:	05db      	lsls	r3, r3, #23
 8000604:	2201      	movs	r2, #1
 8000606:	2180      	movs	r1, #128	; 0x80
 8000608:	0018      	movs	r0, r3
 800060a:	f003 fa1c 	bl	8003a46 <HAL_GPIO_WritePin>
 800060e:	2380      	movs	r3, #128	; 0x80
 8000610:	0159      	lsls	r1, r3, #5
 8000612:	2390      	movs	r3, #144	; 0x90
 8000614:	05db      	lsls	r3, r3, #23
 8000616:	2201      	movs	r2, #1
 8000618:	0018      	movs	r0, r3
 800061a:	f003 fa14 	bl	8003a46 <HAL_GPIO_WritePin>
              TCT();
 800061e:	f7ff febd 	bl	800039c <TCT>

	        	 if (count==13)
 8000622:	4ba1      	ldr	r3, [pc, #644]	; (80008a8 <Protocol+0x2bc>)
 8000624:	781b      	ldrb	r3, [r3, #0]
 8000626:	2b0d      	cmp	r3, #13
 8000628:	d12c      	bne.n	8000684 <Protocol+0x98>
	        	         	   {  directive=0;
 800062a:	4ba1      	ldr	r3, [pc, #644]	; (80008b0 <Protocol+0x2c4>)
 800062c:	2200      	movs	r2, #0
 800062e:	701a      	strb	r2, [r3, #0]

	        	         	     directive|= (rcvd[9]<<4)|(rcvd[10]<<3)|(rcvd[11]<<2)|(rcvd[12]<<1)|(rcvd[13]) ;
 8000630:	4ba0      	ldr	r3, [pc, #640]	; (80008b4 <Protocol+0x2c8>)
 8000632:	7a5b      	ldrb	r3, [r3, #9]
 8000634:	011b      	lsls	r3, r3, #4
 8000636:	b25a      	sxtb	r2, r3
 8000638:	4b9e      	ldr	r3, [pc, #632]	; (80008b4 <Protocol+0x2c8>)
 800063a:	7a9b      	ldrb	r3, [r3, #10]
 800063c:	00db      	lsls	r3, r3, #3
 800063e:	b25b      	sxtb	r3, r3
 8000640:	4313      	orrs	r3, r2
 8000642:	b25a      	sxtb	r2, r3
 8000644:	4b9b      	ldr	r3, [pc, #620]	; (80008b4 <Protocol+0x2c8>)
 8000646:	7adb      	ldrb	r3, [r3, #11]
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	b25b      	sxtb	r3, r3
 800064c:	4313      	orrs	r3, r2
 800064e:	b25a      	sxtb	r2, r3
 8000650:	4b98      	ldr	r3, [pc, #608]	; (80008b4 <Protocol+0x2c8>)
 8000652:	7b1b      	ldrb	r3, [r3, #12]
 8000654:	005b      	lsls	r3, r3, #1
 8000656:	b25b      	sxtb	r3, r3
 8000658:	4313      	orrs	r3, r2
 800065a:	b25a      	sxtb	r2, r3
 800065c:	4b95      	ldr	r3, [pc, #596]	; (80008b4 <Protocol+0x2c8>)
 800065e:	7b5b      	ldrb	r3, [r3, #13]
 8000660:	b25b      	sxtb	r3, r3
 8000662:	4313      	orrs	r3, r2
 8000664:	b25a      	sxtb	r2, r3
 8000666:	4b92      	ldr	r3, [pc, #584]	; (80008b0 <Protocol+0x2c4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	b25b      	sxtb	r3, r3
 800066c:	4313      	orrs	r3, r2
 800066e:	b25b      	sxtb	r3, r3
 8000670:	b2da      	uxtb	r2, r3
 8000672:	4b8f      	ldr	r3, [pc, #572]	; (80008b0 <Protocol+0x2c4>)
 8000674:	701a      	strb	r2, [r3, #0]

	        	         	   OWR_ON;
 8000676:	2390      	movs	r3, #144	; 0x90
 8000678:	05db      	lsls	r3, r3, #23
 800067a:	2201      	movs	r2, #1
 800067c:	2180      	movs	r1, #128	; 0x80
 800067e:	0018      	movs	r0, r3
 8000680:	f003 f9e1 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	    }


	        	         	 switch(directive)
 8000684:	4b8a      	ldr	r3, [pc, #552]	; (80008b0 <Protocol+0x2c4>)
 8000686:	781b      	ldrb	r3, [r3, #0]
 8000688:	2b0e      	cmp	r3, #14
 800068a:	d900      	bls.n	800068e <Protocol+0xa2>
 800068c:	e366      	b.n	8000d5c <Protocol+0x770>
 800068e:	009a      	lsls	r2, r3, #2
 8000690:	4b89      	ldr	r3, [pc, #548]	; (80008b8 <Protocol+0x2cc>)
 8000692:	18d3      	adds	r3, r2, r3
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	469f      	mov	pc, r3
	        	         			   {

	        	         	case 0 :
	        	         		//led_status=0;
                                  TCT();
 8000698:	f7ff fe80 	bl	800039c <TCT>
                                  if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 800069c:	4b82      	ldr	r3, [pc, #520]	; (80008a8 <Protocol+0x2bc>)
 800069e:	781b      	ldrb	r3, [r3, #0]
 80006a0:	2b0e      	cmp	r3, #14
 80006a2:	d112      	bne.n	80006ca <Protocol+0xde>
 80006a4:	4b81      	ldr	r3, [pc, #516]	; (80008ac <Protocol+0x2c0>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d10e      	bne.n	80006ca <Protocol+0xde>
 80006ac:	2390      	movs	r3, #144	; 0x90
 80006ae:	05db      	lsls	r3, r3, #23
 80006b0:	2201      	movs	r2, #1
 80006b2:	2180      	movs	r1, #128	; 0x80
 80006b4:	0018      	movs	r0, r3
 80006b6:	f003 f9c6 	bl	8003a46 <HAL_GPIO_WritePin>
 80006ba:	2380      	movs	r3, #128	; 0x80
 80006bc:	0159      	lsls	r1, r3, #5
 80006be:	2390      	movs	r3, #144	; 0x90
 80006c0:	05db      	lsls	r3, r3, #23
 80006c2:	2201      	movs	r2, #1
 80006c4:	0018      	movs	r0, r3
 80006c6:	f003 f9be 	bl	8003a46 <HAL_GPIO_WritePin>
                                  if (count==15){OWR_ON;LED2_ON;}
 80006ca:	4b77      	ldr	r3, [pc, #476]	; (80008a8 <Protocol+0x2bc>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b0f      	cmp	r3, #15
 80006d0:	d000      	beq.n	80006d4 <Protocol+0xe8>
 80006d2:	e334      	b.n	8000d3e <Protocol+0x752>
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2201      	movs	r2, #1
 80006da:	2180      	movs	r1, #128	; 0x80
 80006dc:	0018      	movs	r0, r3
 80006de:	f003 f9b2 	bl	8003a46 <HAL_GPIO_WritePin>
 80006e2:	2380      	movs	r3, #128	; 0x80
 80006e4:	0159      	lsls	r1, r3, #5
 80006e6:	2390      	movs	r3, #144	; 0x90
 80006e8:	05db      	lsls	r3, r3, #23
 80006ea:	2201      	movs	r2, #1
 80006ec:	0018      	movs	r0, r3
 80006ee:	f003 f9aa 	bl	8003a46 <HAL_GPIO_WritePin>
	        	            break;
 80006f2:	e324      	b.n	8000d3e <Protocol+0x752>

	        	         	case 1 :
	        	         		led_status=1;
 80006f4:	4b71      	ldr	r3, [pc, #452]	; (80008bc <Protocol+0x2d0>)
 80006f6:	2201      	movs	r2, #1
 80006f8:	701a      	strb	r2, [r3, #0]
	        	         	      TCT();
 80006fa:	f7ff fe4f 	bl	800039c <TCT>

	        	         	     if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 80006fe:	4b6a      	ldr	r3, [pc, #424]	; (80008a8 <Protocol+0x2bc>)
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	2b0e      	cmp	r3, #14
 8000704:	d112      	bne.n	800072c <Protocol+0x140>
 8000706:	4b69      	ldr	r3, [pc, #420]	; (80008ac <Protocol+0x2c0>)
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d10e      	bne.n	800072c <Protocol+0x140>
 800070e:	2390      	movs	r3, #144	; 0x90
 8000710:	05db      	lsls	r3, r3, #23
 8000712:	2201      	movs	r2, #1
 8000714:	2180      	movs	r1, #128	; 0x80
 8000716:	0018      	movs	r0, r3
 8000718:	f003 f995 	bl	8003a46 <HAL_GPIO_WritePin>
 800071c:	2380      	movs	r3, #128	; 0x80
 800071e:	0159      	lsls	r1, r3, #5
 8000720:	2390      	movs	r3, #144	; 0x90
 8000722:	05db      	lsls	r3, r3, #23
 8000724:	2201      	movs	r2, #1
 8000726:	0018      	movs	r0, r3
 8000728:	f003 f98d 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	    if(count==29){OWR_ON;LED2_ON;LED1_ON;} //Светодиод
 800072c:	4b5e      	ldr	r3, [pc, #376]	; (80008a8 <Protocol+0x2bc>)
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b1d      	cmp	r3, #29
 8000732:	d000      	beq.n	8000736 <Protocol+0x14a>
 8000734:	e305      	b.n	8000d42 <Protocol+0x756>
 8000736:	2390      	movs	r3, #144	; 0x90
 8000738:	05db      	lsls	r3, r3, #23
 800073a:	2201      	movs	r2, #1
 800073c:	2180      	movs	r1, #128	; 0x80
 800073e:	0018      	movs	r0, r3
 8000740:	f003 f981 	bl	8003a46 <HAL_GPIO_WritePin>
 8000744:	2380      	movs	r3, #128	; 0x80
 8000746:	0159      	lsls	r1, r3, #5
 8000748:	2390      	movs	r3, #144	; 0x90
 800074a:	05db      	lsls	r3, r3, #23
 800074c:	2201      	movs	r2, #1
 800074e:	0018      	movs	r0, r3
 8000750:	f003 f979 	bl	8003a46 <HAL_GPIO_WritePin>
 8000754:	2380      	movs	r3, #128	; 0x80
 8000756:	0119      	lsls	r1, r3, #4
 8000758:	2390      	movs	r3, #144	; 0x90
 800075a:	05db      	lsls	r3, r3, #23
 800075c:	2201      	movs	r2, #1
 800075e:	0018      	movs	r0, r3
 8000760:	f003 f971 	bl	8003a46 <HAL_GPIO_WritePin>
	        	            break;
 8000764:	e2ed      	b.n	8000d42 <Protocol+0x756>

	        	         	 case 2 :
	        	         		      TCT();
 8000766:	f7ff fe19 	bl	800039c <TCT>

	        	         		      if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 800076a:	4b4f      	ldr	r3, [pc, #316]	; (80008a8 <Protocol+0x2bc>)
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b0e      	cmp	r3, #14
 8000770:	d000      	beq.n	8000774 <Protocol+0x188>
 8000772:	e2e8      	b.n	8000d46 <Protocol+0x75a>
 8000774:	4b4d      	ldr	r3, [pc, #308]	; (80008ac <Protocol+0x2c0>)
 8000776:	781b      	ldrb	r3, [r3, #0]
 8000778:	2b01      	cmp	r3, #1
 800077a:	d000      	beq.n	800077e <Protocol+0x192>
 800077c:	e2e3      	b.n	8000d46 <Protocol+0x75a>
 800077e:	2390      	movs	r3, #144	; 0x90
 8000780:	05db      	lsls	r3, r3, #23
 8000782:	2201      	movs	r2, #1
 8000784:	2180      	movs	r1, #128	; 0x80
 8000786:	0018      	movs	r0, r3
 8000788:	f003 f95d 	bl	8003a46 <HAL_GPIO_WritePin>
 800078c:	2380      	movs	r3, #128	; 0x80
 800078e:	0159      	lsls	r1, r3, #5
 8000790:	2390      	movs	r3, #144	; 0x90
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2201      	movs	r2, #1
 8000796:	0018      	movs	r0, r3
 8000798:	f003 f955 	bl	8003a46 <HAL_GPIO_WritePin>


	        	         	 break;
 800079c:	e2d3      	b.n	8000d46 <Protocol+0x75a>

	        	          	 case 3 :
	        	          	//	led_status=0;
	        	         	                                   TCT();
 800079e:	f7ff fdfd 	bl	800039c <TCT>
	        	         	                                  if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 80007a2:	4b41      	ldr	r3, [pc, #260]	; (80008a8 <Protocol+0x2bc>)
 80007a4:	781b      	ldrb	r3, [r3, #0]
 80007a6:	2b0e      	cmp	r3, #14
 80007a8:	d112      	bne.n	80007d0 <Protocol+0x1e4>
 80007aa:	4b40      	ldr	r3, [pc, #256]	; (80008ac <Protocol+0x2c0>)
 80007ac:	781b      	ldrb	r3, [r3, #0]
 80007ae:	2b01      	cmp	r3, #1
 80007b0:	d10e      	bne.n	80007d0 <Protocol+0x1e4>
 80007b2:	2390      	movs	r3, #144	; 0x90
 80007b4:	05db      	lsls	r3, r3, #23
 80007b6:	2201      	movs	r2, #1
 80007b8:	2180      	movs	r1, #128	; 0x80
 80007ba:	0018      	movs	r0, r3
 80007bc:	f003 f943 	bl	8003a46 <HAL_GPIO_WritePin>
 80007c0:	2380      	movs	r3, #128	; 0x80
 80007c2:	0159      	lsls	r1, r3, #5
 80007c4:	2390      	movs	r3, #144	; 0x90
 80007c6:	05db      	lsls	r3, r3, #23
 80007c8:	2201      	movs	r2, #1
 80007ca:	0018      	movs	r0, r3
 80007cc:	f003 f93b 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         		 if((count>=14)&&(count<22))
 80007d0:	4b35      	ldr	r3, [pc, #212]	; (80008a8 <Protocol+0x2bc>)
 80007d2:	781b      	ldrb	r3, [r3, #0]
 80007d4:	2b0d      	cmp	r3, #13
 80007d6:	d932      	bls.n	800083e <Protocol+0x252>
 80007d8:	4b33      	ldr	r3, [pc, #204]	; (80008a8 <Protocol+0x2bc>)
 80007da:	781b      	ldrb	r3, [r3, #0]
 80007dc:	2b15      	cmp	r3, #21
 80007de:	d82e      	bhi.n	800083e <Protocol+0x252>
	        	         		        	         		        	         	       {
	        	         		        	         		        	         	            temp_ID|=((Device_ID>>(21-count))&(0b1));
 80007e0:	4b37      	ldr	r3, [pc, #220]	; (80008c0 <Protocol+0x2d4>)
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	001a      	movs	r2, r3
 80007e6:	4b30      	ldr	r3, [pc, #192]	; (80008a8 <Protocol+0x2bc>)
 80007e8:	781b      	ldrb	r3, [r3, #0]
 80007ea:	0019      	movs	r1, r3
 80007ec:	2315      	movs	r3, #21
 80007ee:	1a5b      	subs	r3, r3, r1
 80007f0:	411a      	asrs	r2, r3
 80007f2:	0013      	movs	r3, r2
 80007f4:	b25b      	sxtb	r3, r3
 80007f6:	2201      	movs	r2, #1
 80007f8:	4013      	ands	r3, r2
 80007fa:	b25a      	sxtb	r2, r3
 80007fc:	4b31      	ldr	r3, [pc, #196]	; (80008c4 <Protocol+0x2d8>)
 80007fe:	781b      	ldrb	r3, [r3, #0]
 8000800:	b25b      	sxtb	r3, r3
 8000802:	4313      	orrs	r3, r2
 8000804:	b25b      	sxtb	r3, r3
 8000806:	b2da      	uxtb	r2, r3
 8000808:	4b2e      	ldr	r3, [pc, #184]	; (80008c4 <Protocol+0x2d8>)
 800080a:	701a      	strb	r2, [r3, #0]
	        	         		        	         		        	         	            if(temp_ID==1){OWR_ON;}
 800080c:	4b2d      	ldr	r3, [pc, #180]	; (80008c4 <Protocol+0x2d8>)
 800080e:	781b      	ldrb	r3, [r3, #0]
 8000810:	2b01      	cmp	r3, #1
 8000812:	d106      	bne.n	8000822 <Protocol+0x236>
 8000814:	2390      	movs	r3, #144	; 0x90
 8000816:	05db      	lsls	r3, r3, #23
 8000818:	2201      	movs	r2, #1
 800081a:	2180      	movs	r1, #128	; 0x80
 800081c:	0018      	movs	r0, r3
 800081e:	f003 f912 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         		        	         	            if(temp_ID==0){OWR_OFF;}
 8000822:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <Protocol+0x2d8>)
 8000824:	781b      	ldrb	r3, [r3, #0]
 8000826:	2b00      	cmp	r3, #0
 8000828:	d106      	bne.n	8000838 <Protocol+0x24c>
 800082a:	2390      	movs	r3, #144	; 0x90
 800082c:	05db      	lsls	r3, r3, #23
 800082e:	2200      	movs	r2, #0
 8000830:	2180      	movs	r1, #128	; 0x80
 8000832:	0018      	movs	r0, r3
 8000834:	f003 f907 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         		        	         	            temp_ID=0;
 8000838:	4b22      	ldr	r3, [pc, #136]	; (80008c4 <Protocol+0x2d8>)
 800083a:	2200      	movs	r2, #0
 800083c:	701a      	strb	r2, [r3, #0]


	        	         		        	         //if(count==26){OWR_ON;}//EEPROM ERROR
	        	         		        	         //	if(count==27){OWR_ON;} //�?золятор линии
	        	         		        	         //	if(count==28){OWR_ON;} //Сработка изолятора
	        	         		        	         	if((count==29)&&(led_status==1)){OWR_ON;LED2_ON;} //Светодиод
 800083e:	4b1a      	ldr	r3, [pc, #104]	; (80008a8 <Protocol+0x2bc>)
 8000840:	781b      	ldrb	r3, [r3, #0]
 8000842:	2b1d      	cmp	r3, #29
 8000844:	d112      	bne.n	800086c <Protocol+0x280>
 8000846:	4b1d      	ldr	r3, [pc, #116]	; (80008bc <Protocol+0x2d0>)
 8000848:	781b      	ldrb	r3, [r3, #0]
 800084a:	2b01      	cmp	r3, #1
 800084c:	d10e      	bne.n	800086c <Protocol+0x280>
 800084e:	2390      	movs	r3, #144	; 0x90
 8000850:	05db      	lsls	r3, r3, #23
 8000852:	2201      	movs	r2, #1
 8000854:	2180      	movs	r1, #128	; 0x80
 8000856:	0018      	movs	r0, r3
 8000858:	f003 f8f5 	bl	8003a46 <HAL_GPIO_WritePin>
 800085c:	2380      	movs	r3, #128	; 0x80
 800085e:	0159      	lsls	r1, r3, #5
 8000860:	2390      	movs	r3, #144	; 0x90
 8000862:	05db      	lsls	r3, r3, #23
 8000864:	2201      	movs	r2, #1
 8000866:	0018      	movs	r0, r3
 8000868:	f003 f8ed 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	          if((count==30)&&(alarm==1)){OWR_ON;LED2_ON;} //Тревога
 800086c:	4b0e      	ldr	r3, [pc, #56]	; (80008a8 <Protocol+0x2bc>)
 800086e:	781b      	ldrb	r3, [r3, #0]
 8000870:	2b1e      	cmp	r3, #30
 8000872:	d000      	beq.n	8000876 <Protocol+0x28a>
 8000874:	e269      	b.n	8000d4a <Protocol+0x75e>
 8000876:	4b0d      	ldr	r3, [pc, #52]	; (80008ac <Protocol+0x2c0>)
 8000878:	781b      	ldrb	r3, [r3, #0]
 800087a:	2b01      	cmp	r3, #1
 800087c:	d000      	beq.n	8000880 <Protocol+0x294>
 800087e:	e264      	b.n	8000d4a <Protocol+0x75e>
 8000880:	2390      	movs	r3, #144	; 0x90
 8000882:	05db      	lsls	r3, r3, #23
 8000884:	2201      	movs	r2, #1
 8000886:	2180      	movs	r1, #128	; 0x80
 8000888:	0018      	movs	r0, r3
 800088a:	f003 f8dc 	bl	8003a46 <HAL_GPIO_WritePin>
 800088e:	2380      	movs	r3, #128	; 0x80
 8000890:	0159      	lsls	r1, r3, #5
 8000892:	2390      	movs	r3, #144	; 0x90
 8000894:	05db      	lsls	r3, r3, #23
 8000896:	2201      	movs	r2, #1
 8000898:	0018      	movs	r0, r3
 800089a:	f003 f8d4 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	//      if(count==44){ OWR_ON;}




	        	         		        	         	  break;
 800089e:	e254      	b.n	8000d4a <Protocol+0x75e>


	        	         	case 4 :
	        	         		      TCT();
 80008a0:	f7ff fd7c 	bl	800039c <TCT>
	        	         		break;
 80008a4:	e25a      	b.n	8000d5c <Protocol+0x770>
 80008a6:	46c0      	nop			; (mov r8, r8)
 80008a8:	20000354 	.word	0x20000354
 80008ac:	20000232 	.word	0x20000232
 80008b0:	20000357 	.word	0x20000357
 80008b4:	2000025c 	.word	0x2000025c
 80008b8:	08006e1c 	.word	0x08006e1c
 80008bc:	20000361 	.word	0x20000361
 80008c0:	20000001 	.word	0x20000001
 80008c4:	20000359 	.word	0x20000359



	        	         	 case 6 :

	        	         		 if(count==30){OWR_ON;}
 80008c8:	4b56      	ldr	r3, [pc, #344]	; (8000a24 <Protocol+0x438>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	2b1e      	cmp	r3, #30
 80008ce:	d106      	bne.n	80008de <Protocol+0x2f2>
 80008d0:	2390      	movs	r3, #144	; 0x90
 80008d2:	05db      	lsls	r3, r3, #23
 80008d4:	2201      	movs	r2, #1
 80008d6:	2180      	movs	r1, #128	; 0x80
 80008d8:	0018      	movs	r0, r3
 80008da:	f003 f8b4 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	  if(count==45){OWR_ON;}
 80008de:	4b51      	ldr	r3, [pc, #324]	; (8000a24 <Protocol+0x438>)
 80008e0:	781b      	ldrb	r3, [r3, #0]
 80008e2:	2b2d      	cmp	r3, #45	; 0x2d
 80008e4:	d106      	bne.n	80008f4 <Protocol+0x308>
 80008e6:	2390      	movs	r3, #144	; 0x90
 80008e8:	05db      	lsls	r3, r3, #23
 80008ea:	2201      	movs	r2, #1
 80008ec:	2180      	movs	r1, #128	; 0x80
 80008ee:	0018      	movs	r0, r3
 80008f0:	f003 f8a9 	bl	8003a46 <HAL_GPIO_WritePin>
	        	            if(count==46)
 80008f4:	4b4b      	ldr	r3, [pc, #300]	; (8000a24 <Protocol+0x438>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b2e      	cmp	r3, #46	; 0x2e
 80008fa:	d000      	beq.n	80008fe <Protocol+0x312>
 80008fc:	e227      	b.n	8000d4e <Protocol+0x762>
	        	           {
	        	            	if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 80008fe:	4b4a      	ldr	r3, [pc, #296]	; (8000a28 <Protocol+0x43c>)
 8000900:	2223      	movs	r2, #35	; 0x23
 8000902:	5c9b      	ldrb	r3, [r3, r2]
 8000904:	2b01      	cmp	r3, #1
 8000906:	d10c      	bne.n	8000922 <Protocol+0x336>
 8000908:	4b47      	ldr	r3, [pc, #284]	; (8000a28 <Protocol+0x43c>)
 800090a:	222a      	movs	r2, #42	; 0x2a
 800090c:	5c9b      	ldrb	r3, [r3, r2]
 800090e:	2b01      	cmp	r3, #1
 8000910:	d107      	bne.n	8000922 <Protocol+0x336>
 8000912:	2380      	movs	r3, #128	; 0x80
 8000914:	0119      	lsls	r1, r3, #4
 8000916:	2390      	movs	r3, #144	; 0x90
 8000918:	05db      	lsls	r3, r3, #23
 800091a:	2201      	movs	r2, #1
 800091c:	0018      	movs	r0, r3
 800091e:	f003 f892 	bl	8003a46 <HAL_GPIO_WritePin>
	        	                if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 8000922:	4b41      	ldr	r3, [pc, #260]	; (8000a28 <Protocol+0x43c>)
 8000924:	2224      	movs	r2, #36	; 0x24
 8000926:	5c9b      	ldrb	r3, [r3, r2]
 8000928:	2b01      	cmp	r3, #1
 800092a:	d10c      	bne.n	8000946 <Protocol+0x35a>
 800092c:	4b3e      	ldr	r3, [pc, #248]	; (8000a28 <Protocol+0x43c>)
 800092e:	222b      	movs	r2, #43	; 0x2b
 8000930:	5c9b      	ldrb	r3, [r3, r2]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d107      	bne.n	8000946 <Protocol+0x35a>
 8000936:	2380      	movs	r3, #128	; 0x80
 8000938:	0119      	lsls	r1, r3, #4
 800093a:	2390      	movs	r3, #144	; 0x90
 800093c:	05db      	lsls	r3, r3, #23
 800093e:	2200      	movs	r2, #0
 8000940:	0018      	movs	r0, r3
 8000942:	f003 f880 	bl	8003a46 <HAL_GPIO_WritePin>
	        	                if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 8000946:	4b38      	ldr	r3, [pc, #224]	; (8000a28 <Protocol+0x43c>)
 8000948:	2225      	movs	r2, #37	; 0x25
 800094a:	5c9b      	ldrb	r3, [r3, r2]
 800094c:	2b01      	cmp	r3, #1
 800094e:	d10c      	bne.n	800096a <Protocol+0x37e>
 8000950:	4b35      	ldr	r3, [pc, #212]	; (8000a28 <Protocol+0x43c>)
 8000952:	222c      	movs	r2, #44	; 0x2c
 8000954:	5c9b      	ldrb	r3, [r3, r2]
 8000956:	2b01      	cmp	r3, #1
 8000958:	d107      	bne.n	800096a <Protocol+0x37e>
 800095a:	2380      	movs	r3, #128	; 0x80
 800095c:	0159      	lsls	r1, r3, #5
 800095e:	2390      	movs	r3, #144	; 0x90
 8000960:	05db      	lsls	r3, r3, #23
 8000962:	2201      	movs	r2, #1
 8000964:	0018      	movs	r0, r3
 8000966:	f003 f86e 	bl	8003a46 <HAL_GPIO_WritePin>
	        	                if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 800096a:	4b2f      	ldr	r3, [pc, #188]	; (8000a28 <Protocol+0x43c>)
 800096c:	2226      	movs	r2, #38	; 0x26
 800096e:	5c9b      	ldrb	r3, [r3, r2]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d000      	beq.n	8000976 <Protocol+0x38a>
 8000974:	e1eb      	b.n	8000d4e <Protocol+0x762>
 8000976:	4b2c      	ldr	r3, [pc, #176]	; (8000a28 <Protocol+0x43c>)
 8000978:	222d      	movs	r2, #45	; 0x2d
 800097a:	5c9b      	ldrb	r3, [r3, r2]
 800097c:	2b01      	cmp	r3, #1
 800097e:	d000      	beq.n	8000982 <Protocol+0x396>
 8000980:	e1e5      	b.n	8000d4e <Protocol+0x762>
 8000982:	2380      	movs	r3, #128	; 0x80
 8000984:	0159      	lsls	r1, r3, #5
 8000986:	2390      	movs	r3, #144	; 0x90
 8000988:	05db      	lsls	r3, r3, #23
 800098a:	2200      	movs	r2, #0
 800098c:	0018      	movs	r0, r3
 800098e:	f003 f85a 	bl	8003a46 <HAL_GPIO_WritePin>

	        	         			        	         			   }


	        	         	 break;
 8000992:	e1dc      	b.n	8000d4e <Protocol+0x762>
	        	         	case 7 :
	        	         		  TCT();
 8000994:	f7ff fd02 	bl	800039c <TCT>

	        	         	 if ((count==14)&&(alarm==1)){OWR_ON;LED2_ON;}
 8000998:	4b22      	ldr	r3, [pc, #136]	; (8000a24 <Protocol+0x438>)
 800099a:	781b      	ldrb	r3, [r3, #0]
 800099c:	2b0e      	cmp	r3, #14
 800099e:	d112      	bne.n	80009c6 <Protocol+0x3da>
 80009a0:	4b22      	ldr	r3, [pc, #136]	; (8000a2c <Protocol+0x440>)
 80009a2:	781b      	ldrb	r3, [r3, #0]
 80009a4:	2b01      	cmp	r3, #1
 80009a6:	d10e      	bne.n	80009c6 <Protocol+0x3da>
 80009a8:	2390      	movs	r3, #144	; 0x90
 80009aa:	05db      	lsls	r3, r3, #23
 80009ac:	2201      	movs	r2, #1
 80009ae:	2180      	movs	r1, #128	; 0x80
 80009b0:	0018      	movs	r0, r3
 80009b2:	f003 f848 	bl	8003a46 <HAL_GPIO_WritePin>
 80009b6:	2380      	movs	r3, #128	; 0x80
 80009b8:	0159      	lsls	r1, r3, #5
 80009ba:	2390      	movs	r3, #144	; 0x90
 80009bc:	05db      	lsls	r3, r3, #23
 80009be:	2201      	movs	r2, #1
 80009c0:	0018      	movs	r0, r3
 80009c2:	f003 f840 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	 if (count==50){OWR_ON;}
 80009c6:	4b17      	ldr	r3, [pc, #92]	; (8000a24 <Protocol+0x438>)
 80009c8:	781b      	ldrb	r3, [r3, #0]
 80009ca:	2b32      	cmp	r3, #50	; 0x32
 80009cc:	d106      	bne.n	80009dc <Protocol+0x3f0>
 80009ce:	2390      	movs	r3, #144	; 0x90
 80009d0:	05db      	lsls	r3, r3, #23
 80009d2:	2201      	movs	r2, #1
 80009d4:	2180      	movs	r1, #128	; 0x80
 80009d6:	0018      	movs	r0, r3
 80009d8:	f003 f835 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	if (count==58){OWR_ON;}
 80009dc:	4b11      	ldr	r3, [pc, #68]	; (8000a24 <Protocol+0x438>)
 80009de:	781b      	ldrb	r3, [r3, #0]
 80009e0:	2b3a      	cmp	r3, #58	; 0x3a
 80009e2:	d106      	bne.n	80009f2 <Protocol+0x406>
 80009e4:	2390      	movs	r3, #144	; 0x90
 80009e6:	05db      	lsls	r3, r3, #23
 80009e8:	2201      	movs	r2, #1
 80009ea:	2180      	movs	r1, #128	; 0x80
 80009ec:	0018      	movs	r0, r3
 80009ee:	f003 f82a 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	 if (count==60){OWR_ON;}
 80009f2:	4b0c      	ldr	r3, [pc, #48]	; (8000a24 <Protocol+0x438>)
 80009f4:	781b      	ldrb	r3, [r3, #0]
 80009f6:	2b3c      	cmp	r3, #60	; 0x3c
 80009f8:	d106      	bne.n	8000a08 <Protocol+0x41c>
 80009fa:	2390      	movs	r3, #144	; 0x90
 80009fc:	05db      	lsls	r3, r3, #23
 80009fe:	2201      	movs	r2, #1
 8000a00:	2180      	movs	r1, #128	; 0x80
 8000a02:	0018      	movs	r0, r3
 8000a04:	f003 f81f 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         	 if (count==61){OWR_ON;}
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <Protocol+0x438>)
 8000a0a:	781b      	ldrb	r3, [r3, #0]
 8000a0c:	2b3d      	cmp	r3, #61	; 0x3d
 8000a0e:	d000      	beq.n	8000a12 <Protocol+0x426>
 8000a10:	e19f      	b.n	8000d52 <Protocol+0x766>
 8000a12:	2390      	movs	r3, #144	; 0x90
 8000a14:	05db      	lsls	r3, r3, #23
 8000a16:	2201      	movs	r2, #1
 8000a18:	2180      	movs	r1, #128	; 0x80
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	f003 f813 	bl	8003a46 <HAL_GPIO_WritePin>

	        	         	 break;
 8000a20:	e197      	b.n	8000d52 <Protocol+0x766>
 8000a22:	46c0      	nop			; (mov r8, r8)
 8000a24:	20000354 	.word	0x20000354
 8000a28:	2000025c 	.word	0x2000025c
 8000a2c:	20000232 	.word	0x20000232

	        	         	 case 13 :

	        	         		        	         	 if(count==30){OWR_ON;}
 8000a30:	4bcc      	ldr	r3, [pc, #816]	; (8000d64 <Protocol+0x778>)
 8000a32:	781b      	ldrb	r3, [r3, #0]
 8000a34:	2b1e      	cmp	r3, #30
 8000a36:	d106      	bne.n	8000a46 <Protocol+0x45a>
 8000a38:	2390      	movs	r3, #144	; 0x90
 8000a3a:	05db      	lsls	r3, r3, #23
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	2180      	movs	r1, #128	; 0x80
 8000a40:	0018      	movs	r0, r3
 8000a42:	f003 f800 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==45){OWR_ON;}
 8000a46:	4bc7      	ldr	r3, [pc, #796]	; (8000d64 <Protocol+0x778>)
 8000a48:	781b      	ldrb	r3, [r3, #0]
 8000a4a:	2b2d      	cmp	r3, #45	; 0x2d
 8000a4c:	d106      	bne.n	8000a5c <Protocol+0x470>
 8000a4e:	2390      	movs	r3, #144	; 0x90
 8000a50:	05db      	lsls	r3, r3, #23
 8000a52:	2201      	movs	r2, #1
 8000a54:	2180      	movs	r1, #128	; 0x80
 8000a56:	0018      	movs	r0, r3
 8000a58:	f002 fff5 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==54){OWR_ON;}
 8000a5c:	4bc1      	ldr	r3, [pc, #772]	; (8000d64 <Protocol+0x778>)
 8000a5e:	781b      	ldrb	r3, [r3, #0]
 8000a60:	2b36      	cmp	r3, #54	; 0x36
 8000a62:	d106      	bne.n	8000a72 <Protocol+0x486>
 8000a64:	2390      	movs	r3, #144	; 0x90
 8000a66:	05db      	lsls	r3, r3, #23
 8000a68:	2201      	movs	r2, #1
 8000a6a:	2180      	movs	r1, #128	; 0x80
 8000a6c:	0018      	movs	r0, r3
 8000a6e:	f002 ffea 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==63){OWR_ON;}
 8000a72:	4bbc      	ldr	r3, [pc, #752]	; (8000d64 <Protocol+0x778>)
 8000a74:	781b      	ldrb	r3, [r3, #0]
 8000a76:	2b3f      	cmp	r3, #63	; 0x3f
 8000a78:	d106      	bne.n	8000a88 <Protocol+0x49c>
 8000a7a:	2390      	movs	r3, #144	; 0x90
 8000a7c:	05db      	lsls	r3, r3, #23
 8000a7e:	2201      	movs	r2, #1
 8000a80:	2180      	movs	r1, #128	; 0x80
 8000a82:	0018      	movs	r0, r3
 8000a84:	f002 ffdf 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==72){OWR_ON;}
 8000a88:	4bb6      	ldr	r3, [pc, #728]	; (8000d64 <Protocol+0x778>)
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	2b48      	cmp	r3, #72	; 0x48
 8000a8e:	d106      	bne.n	8000a9e <Protocol+0x4b2>
 8000a90:	2390      	movs	r3, #144	; 0x90
 8000a92:	05db      	lsls	r3, r3, #23
 8000a94:	2201      	movs	r2, #1
 8000a96:	2180      	movs	r1, #128	; 0x80
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 ffd4 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==81){OWR_ON;}
 8000a9e:	4bb1      	ldr	r3, [pc, #708]	; (8000d64 <Protocol+0x778>)
 8000aa0:	781b      	ldrb	r3, [r3, #0]
 8000aa2:	2b51      	cmp	r3, #81	; 0x51
 8000aa4:	d106      	bne.n	8000ab4 <Protocol+0x4c8>
 8000aa6:	2390      	movs	r3, #144	; 0x90
 8000aa8:	05db      	lsls	r3, r3, #23
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2180      	movs	r1, #128	; 0x80
 8000aae:	0018      	movs	r0, r3
 8000ab0:	f002 ffc9 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==90){OWR_ON;}
 8000ab4:	4bab      	ldr	r3, [pc, #684]	; (8000d64 <Protocol+0x778>)
 8000ab6:	781b      	ldrb	r3, [r3, #0]
 8000ab8:	2b5a      	cmp	r3, #90	; 0x5a
 8000aba:	d106      	bne.n	8000aca <Protocol+0x4de>
 8000abc:	2390      	movs	r3, #144	; 0x90
 8000abe:	05db      	lsls	r3, r3, #23
 8000ac0:	2201      	movs	r2, #1
 8000ac2:	2180      	movs	r1, #128	; 0x80
 8000ac4:	0018      	movs	r0, r3
 8000ac6:	f002 ffbe 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==99){OWR_ON;}
 8000aca:	4ba6      	ldr	r3, [pc, #664]	; (8000d64 <Protocol+0x778>)
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	2b63      	cmp	r3, #99	; 0x63
 8000ad0:	d106      	bne.n	8000ae0 <Protocol+0x4f4>
 8000ad2:	2390      	movs	r3, #144	; 0x90
 8000ad4:	05db      	lsls	r3, r3, #23
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	2180      	movs	r1, #128	; 0x80
 8000ada:	0018      	movs	r0, r3
 8000adc:	f002 ffb3 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==108){OWR_ON;}
 8000ae0:	4ba0      	ldr	r3, [pc, #640]	; (8000d64 <Protocol+0x778>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b6c      	cmp	r3, #108	; 0x6c
 8000ae6:	d106      	bne.n	8000af6 <Protocol+0x50a>
 8000ae8:	2390      	movs	r3, #144	; 0x90
 8000aea:	05db      	lsls	r3, r3, #23
 8000aec:	2201      	movs	r2, #1
 8000aee:	2180      	movs	r1, #128	; 0x80
 8000af0:	0018      	movs	r0, r3
 8000af2:	f002 ffa8 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==117){OWR_ON;}
 8000af6:	4b9b      	ldr	r3, [pc, #620]	; (8000d64 <Protocol+0x778>)
 8000af8:	781b      	ldrb	r3, [r3, #0]
 8000afa:	2b75      	cmp	r3, #117	; 0x75
 8000afc:	d106      	bne.n	8000b0c <Protocol+0x520>
 8000afe:	2390      	movs	r3, #144	; 0x90
 8000b00:	05db      	lsls	r3, r3, #23
 8000b02:	2201      	movs	r2, #1
 8000b04:	2180      	movs	r1, #128	; 0x80
 8000b06:	0018      	movs	r0, r3
 8000b08:	f002 ff9d 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	         	 if(count==126){OWR_ON;WriteConfig();}
 8000b0c:	4b95      	ldr	r3, [pc, #596]	; (8000d64 <Protocol+0x778>)
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	2b7e      	cmp	r3, #126	; 0x7e
 8000b12:	d108      	bne.n	8000b26 <Protocol+0x53a>
 8000b14:	2390      	movs	r3, #144	; 0x90
 8000b16:	05db      	lsls	r3, r3, #23
 8000b18:	2201      	movs	r2, #1
 8000b1a:	2180      	movs	r1, #128	; 0x80
 8000b1c:	0018      	movs	r0, r3
 8000b1e:	f002 ff92 	bl	8003a46 <HAL_GPIO_WritePin>
 8000b22:	f7ff fb91 	bl	8000248 <WriteConfig>
	        	         		        	         	//if(count==127){OWR_ON;WriteConfig();}

	        	         		        	            if(count==46)
 8000b26:	4b8f      	ldr	r3, [pc, #572]	; (8000d64 <Protocol+0x778>)
 8000b28:	781b      	ldrb	r3, [r3, #0]
 8000b2a:	2b2e      	cmp	r3, #46	; 0x2e
 8000b2c:	d147      	bne.n	8000bbe <Protocol+0x5d2>
	        	         		        	           {
	        	         		        	            	if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 8000b2e:	4b8e      	ldr	r3, [pc, #568]	; (8000d68 <Protocol+0x77c>)
 8000b30:	2223      	movs	r2, #35	; 0x23
 8000b32:	5c9b      	ldrb	r3, [r3, r2]
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d10c      	bne.n	8000b52 <Protocol+0x566>
 8000b38:	4b8b      	ldr	r3, [pc, #556]	; (8000d68 <Protocol+0x77c>)
 8000b3a:	222a      	movs	r2, #42	; 0x2a
 8000b3c:	5c9b      	ldrb	r3, [r3, r2]
 8000b3e:	2b01      	cmp	r3, #1
 8000b40:	d107      	bne.n	8000b52 <Protocol+0x566>
 8000b42:	2380      	movs	r3, #128	; 0x80
 8000b44:	0119      	lsls	r1, r3, #4
 8000b46:	2390      	movs	r3, #144	; 0x90
 8000b48:	05db      	lsls	r3, r3, #23
 8000b4a:	2201      	movs	r2, #1
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	f002 ff7a 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	                if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 8000b52:	4b85      	ldr	r3, [pc, #532]	; (8000d68 <Protocol+0x77c>)
 8000b54:	2224      	movs	r2, #36	; 0x24
 8000b56:	5c9b      	ldrb	r3, [r3, r2]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d10c      	bne.n	8000b76 <Protocol+0x58a>
 8000b5c:	4b82      	ldr	r3, [pc, #520]	; (8000d68 <Protocol+0x77c>)
 8000b5e:	222b      	movs	r2, #43	; 0x2b
 8000b60:	5c9b      	ldrb	r3, [r3, r2]
 8000b62:	2b01      	cmp	r3, #1
 8000b64:	d107      	bne.n	8000b76 <Protocol+0x58a>
 8000b66:	2380      	movs	r3, #128	; 0x80
 8000b68:	0119      	lsls	r1, r3, #4
 8000b6a:	2390      	movs	r3, #144	; 0x90
 8000b6c:	05db      	lsls	r3, r3, #23
 8000b6e:	2200      	movs	r2, #0
 8000b70:	0018      	movs	r0, r3
 8000b72:	f002 ff68 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	                if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 8000b76:	4b7c      	ldr	r3, [pc, #496]	; (8000d68 <Protocol+0x77c>)
 8000b78:	2225      	movs	r2, #37	; 0x25
 8000b7a:	5c9b      	ldrb	r3, [r3, r2]
 8000b7c:	2b01      	cmp	r3, #1
 8000b7e:	d10c      	bne.n	8000b9a <Protocol+0x5ae>
 8000b80:	4b79      	ldr	r3, [pc, #484]	; (8000d68 <Protocol+0x77c>)
 8000b82:	222c      	movs	r2, #44	; 0x2c
 8000b84:	5c9b      	ldrb	r3, [r3, r2]
 8000b86:	2b01      	cmp	r3, #1
 8000b88:	d107      	bne.n	8000b9a <Protocol+0x5ae>
 8000b8a:	2380      	movs	r3, #128	; 0x80
 8000b8c:	0159      	lsls	r1, r3, #5
 8000b8e:	2390      	movs	r3, #144	; 0x90
 8000b90:	05db      	lsls	r3, r3, #23
 8000b92:	2201      	movs	r2, #1
 8000b94:	0018      	movs	r0, r3
 8000b96:	f002 ff56 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         		        	                if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 8000b9a:	4b73      	ldr	r3, [pc, #460]	; (8000d68 <Protocol+0x77c>)
 8000b9c:	2226      	movs	r2, #38	; 0x26
 8000b9e:	5c9b      	ldrb	r3, [r3, r2]
 8000ba0:	2b01      	cmp	r3, #1
 8000ba2:	d10c      	bne.n	8000bbe <Protocol+0x5d2>
 8000ba4:	4b70      	ldr	r3, [pc, #448]	; (8000d68 <Protocol+0x77c>)
 8000ba6:	222d      	movs	r2, #45	; 0x2d
 8000ba8:	5c9b      	ldrb	r3, [r3, r2]
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d107      	bne.n	8000bbe <Protocol+0x5d2>
 8000bae:	2380      	movs	r3, #128	; 0x80
 8000bb0:	0159      	lsls	r1, r3, #5
 8000bb2:	2390      	movs	r3, #144	; 0x90
 8000bb4:	05db      	lsls	r3, r3, #23
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	0018      	movs	r0, r3
 8000bba:	f002 ff44 	bl	8003a46 <HAL_GPIO_WritePin>

	        	         		        	         			        	         			   }

	        	         		        	           if (count==54)
 8000bbe:	4b69      	ldr	r3, [pc, #420]	; (8000d64 <Protocol+0x778>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	2b36      	cmp	r3, #54	; 0x36
 8000bc4:	d000      	beq.n	8000bc8 <Protocol+0x5dc>
 8000bc6:	e0c6      	b.n	8000d56 <Protocol+0x76a>
	        	         		        	                           	        	    {
	        	         		        	                           	        	      new_addres=0;
 8000bc8:	4b68      	ldr	r3, [pc, #416]	; (8000d6c <Protocol+0x780>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	701a      	strb	r2, [r3, #0]
	        	         		        	                           	        	      new_addres|= (rcvd[47]<<7)|(rcvd[48]<<6)|(rcvd[49]<<5)|(rcvd[50]<<4)|(rcvd[51]<<3)|(rcvd[52]<<2)|(rcvd[53]<<1)|(rcvd[54]);
 8000bce:	4b66      	ldr	r3, [pc, #408]	; (8000d68 <Protocol+0x77c>)
 8000bd0:	222f      	movs	r2, #47	; 0x2f
 8000bd2:	5c9b      	ldrb	r3, [r3, r2]
 8000bd4:	01db      	lsls	r3, r3, #7
 8000bd6:	b25a      	sxtb	r2, r3
 8000bd8:	4b63      	ldr	r3, [pc, #396]	; (8000d68 <Protocol+0x77c>)
 8000bda:	2130      	movs	r1, #48	; 0x30
 8000bdc:	5c5b      	ldrb	r3, [r3, r1]
 8000bde:	019b      	lsls	r3, r3, #6
 8000be0:	b25b      	sxtb	r3, r3
 8000be2:	4313      	orrs	r3, r2
 8000be4:	b25a      	sxtb	r2, r3
 8000be6:	4b60      	ldr	r3, [pc, #384]	; (8000d68 <Protocol+0x77c>)
 8000be8:	2131      	movs	r1, #49	; 0x31
 8000bea:	5c5b      	ldrb	r3, [r3, r1]
 8000bec:	015b      	lsls	r3, r3, #5
 8000bee:	b25b      	sxtb	r3, r3
 8000bf0:	4313      	orrs	r3, r2
 8000bf2:	b25a      	sxtb	r2, r3
 8000bf4:	4b5c      	ldr	r3, [pc, #368]	; (8000d68 <Protocol+0x77c>)
 8000bf6:	2132      	movs	r1, #50	; 0x32
 8000bf8:	5c5b      	ldrb	r3, [r3, r1]
 8000bfa:	011b      	lsls	r3, r3, #4
 8000bfc:	b25b      	sxtb	r3, r3
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	b25a      	sxtb	r2, r3
 8000c02:	4b59      	ldr	r3, [pc, #356]	; (8000d68 <Protocol+0x77c>)
 8000c04:	2133      	movs	r1, #51	; 0x33
 8000c06:	5c5b      	ldrb	r3, [r3, r1]
 8000c08:	00db      	lsls	r3, r3, #3
 8000c0a:	b25b      	sxtb	r3, r3
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	b25a      	sxtb	r2, r3
 8000c10:	4b55      	ldr	r3, [pc, #340]	; (8000d68 <Protocol+0x77c>)
 8000c12:	2134      	movs	r1, #52	; 0x34
 8000c14:	5c5b      	ldrb	r3, [r3, r1]
 8000c16:	009b      	lsls	r3, r3, #2
 8000c18:	b25b      	sxtb	r3, r3
 8000c1a:	4313      	orrs	r3, r2
 8000c1c:	b25a      	sxtb	r2, r3
 8000c1e:	4b52      	ldr	r3, [pc, #328]	; (8000d68 <Protocol+0x77c>)
 8000c20:	2135      	movs	r1, #53	; 0x35
 8000c22:	5c5b      	ldrb	r3, [r3, r1]
 8000c24:	005b      	lsls	r3, r3, #1
 8000c26:	b25b      	sxtb	r3, r3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	b25a      	sxtb	r2, r3
 8000c2c:	4b4e      	ldr	r3, [pc, #312]	; (8000d68 <Protocol+0x77c>)
 8000c2e:	2136      	movs	r1, #54	; 0x36
 8000c30:	5c5b      	ldrb	r3, [r3, r1]
 8000c32:	b25b      	sxtb	r3, r3
 8000c34:	4313      	orrs	r3, r2
 8000c36:	b25a      	sxtb	r2, r3
 8000c38:	4b4c      	ldr	r3, [pc, #304]	; (8000d6c <Protocol+0x780>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	b25b      	sxtb	r3, r3
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b25b      	sxtb	r3, r3
 8000c42:	b2da      	uxtb	r2, r3
 8000c44:	4b49      	ldr	r3, [pc, #292]	; (8000d6c <Protocol+0x780>)
 8000c46:	701a      	strb	r2, [r3, #0]
                                                                                          addres=new_addres;
 8000c48:	4b48      	ldr	r3, [pc, #288]	; (8000d6c <Protocol+0x780>)
 8000c4a:	781a      	ldrb	r2, [r3, #0]
 8000c4c:	4b48      	ldr	r3, [pc, #288]	; (8000d70 <Protocol+0x784>)
 8000c4e:	701a      	strb	r2, [r3, #0]
                                                                                          settings[0]=new_addres;
 8000c50:	4b46      	ldr	r3, [pc, #280]	; (8000d6c <Protocol+0x780>)
 8000c52:	781a      	ldrb	r2, [r3, #0]
 8000c54:	4b47      	ldr	r3, [pc, #284]	; (8000d74 <Protocol+0x788>)
 8000c56:	701a      	strb	r2, [r3, #0]
                                                                                          WriteConfig();
 8000c58:	f7ff faf6 	bl	8000248 <WriteConfig>
                                                                                          HAL_ResumeTick();
 8000c5c:	f001 faf6 	bl	800224c <HAL_ResumeTick>
	        	         		        	                           	        	    }




	        	         		        	         	 break;
 8000c60:	e079      	b.n	8000d56 <Protocol+0x76a>



	        	         	  case 14 :

	        	         			   if(count==30){OWR_ON;}
 8000c62:	4b40      	ldr	r3, [pc, #256]	; (8000d64 <Protocol+0x778>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	2b1e      	cmp	r3, #30
 8000c68:	d106      	bne.n	8000c78 <Protocol+0x68c>
 8000c6a:	2390      	movs	r3, #144	; 0x90
 8000c6c:	05db      	lsls	r3, r3, #23
 8000c6e:	2201      	movs	r2, #1
 8000c70:	2180      	movs	r1, #128	; 0x80
 8000c72:	0018      	movs	r0, r3
 8000c74:	f002 fee7 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         			   if(count==45){OWR_ON;}
 8000c78:	4b3a      	ldr	r3, [pc, #232]	; (8000d64 <Protocol+0x778>)
 8000c7a:	781b      	ldrb	r3, [r3, #0]
 8000c7c:	2b2d      	cmp	r3, #45	; 0x2d
 8000c7e:	d106      	bne.n	8000c8e <Protocol+0x6a2>
 8000c80:	2390      	movs	r3, #144	; 0x90
 8000c82:	05db      	lsls	r3, r3, #23
 8000c84:	2201      	movs	r2, #1
 8000c86:	2180      	movs	r1, #128	; 0x80
 8000c88:	0018      	movs	r0, r3
 8000c8a:	f002 fedc 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         			   if(count==54){OWR_ON;}
 8000c8e:	4b35      	ldr	r3, [pc, #212]	; (8000d64 <Protocol+0x778>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	2b36      	cmp	r3, #54	; 0x36
 8000c94:	d106      	bne.n	8000ca4 <Protocol+0x6b8>
 8000c96:	2390      	movs	r3, #144	; 0x90
 8000c98:	05db      	lsls	r3, r3, #23
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	2180      	movs	r1, #128	; 0x80
 8000c9e:	0018      	movs	r0, r3
 8000ca0:	f002 fed1 	bl	8003a46 <HAL_GPIO_WritePin>

	        	         			   if(count==46)
 8000ca4:	4b2f      	ldr	r3, [pc, #188]	; (8000d64 <Protocol+0x778>)
 8000ca6:	781b      	ldrb	r3, [r3, #0]
 8000ca8:	2b2e      	cmp	r3, #46	; 0x2e
 8000caa:	d156      	bne.n	8000d5a <Protocol+0x76e>
	        	         			   {

	        	         				   if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 8000cac:	4b2e      	ldr	r3, [pc, #184]	; (8000d68 <Protocol+0x77c>)
 8000cae:	2223      	movs	r2, #35	; 0x23
 8000cb0:	5c9b      	ldrb	r3, [r3, r2]
 8000cb2:	2b01      	cmp	r3, #1
 8000cb4:	d10c      	bne.n	8000cd0 <Protocol+0x6e4>
 8000cb6:	4b2c      	ldr	r3, [pc, #176]	; (8000d68 <Protocol+0x77c>)
 8000cb8:	222a      	movs	r2, #42	; 0x2a
 8000cba:	5c9b      	ldrb	r3, [r3, r2]
 8000cbc:	2b01      	cmp	r3, #1
 8000cbe:	d107      	bne.n	8000cd0 <Protocol+0x6e4>
 8000cc0:	2380      	movs	r3, #128	; 0x80
 8000cc2:	0119      	lsls	r1, r3, #4
 8000cc4:	2390      	movs	r3, #144	; 0x90
 8000cc6:	05db      	lsls	r3, r3, #23
 8000cc8:	2201      	movs	r2, #1
 8000cca:	0018      	movs	r0, r3
 8000ccc:	f002 febb 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 8000cd0:	4b25      	ldr	r3, [pc, #148]	; (8000d68 <Protocol+0x77c>)
 8000cd2:	2224      	movs	r2, #36	; 0x24
 8000cd4:	5c9b      	ldrb	r3, [r3, r2]
 8000cd6:	2b01      	cmp	r3, #1
 8000cd8:	d10c      	bne.n	8000cf4 <Protocol+0x708>
 8000cda:	4b23      	ldr	r3, [pc, #140]	; (8000d68 <Protocol+0x77c>)
 8000cdc:	222b      	movs	r2, #43	; 0x2b
 8000cde:	5c9b      	ldrb	r3, [r3, r2]
 8000ce0:	2b01      	cmp	r3, #1
 8000ce2:	d107      	bne.n	8000cf4 <Protocol+0x708>
 8000ce4:	2380      	movs	r3, #128	; 0x80
 8000ce6:	0119      	lsls	r1, r3, #4
 8000ce8:	2390      	movs	r3, #144	; 0x90
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	2200      	movs	r2, #0
 8000cee:	0018      	movs	r0, r3
 8000cf0:	f002 fea9 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 8000cf4:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <Protocol+0x77c>)
 8000cf6:	2225      	movs	r2, #37	; 0x25
 8000cf8:	5c9b      	ldrb	r3, [r3, r2]
 8000cfa:	2b01      	cmp	r3, #1
 8000cfc:	d10c      	bne.n	8000d18 <Protocol+0x72c>
 8000cfe:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <Protocol+0x77c>)
 8000d00:	222c      	movs	r2, #44	; 0x2c
 8000d02:	5c9b      	ldrb	r3, [r3, r2]
 8000d04:	2b01      	cmp	r3, #1
 8000d06:	d107      	bne.n	8000d18 <Protocol+0x72c>
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	0159      	lsls	r1, r3, #5
 8000d0c:	2390      	movs	r3, #144	; 0x90
 8000d0e:	05db      	lsls	r3, r3, #23
 8000d10:	2201      	movs	r2, #1
 8000d12:	0018      	movs	r0, r3
 8000d14:	f002 fe97 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 8000d18:	4b13      	ldr	r3, [pc, #76]	; (8000d68 <Protocol+0x77c>)
 8000d1a:	2226      	movs	r2, #38	; 0x26
 8000d1c:	5c9b      	ldrb	r3, [r3, r2]
 8000d1e:	2b01      	cmp	r3, #1
 8000d20:	d11b      	bne.n	8000d5a <Protocol+0x76e>
 8000d22:	4b11      	ldr	r3, [pc, #68]	; (8000d68 <Protocol+0x77c>)
 8000d24:	222d      	movs	r2, #45	; 0x2d
 8000d26:	5c9b      	ldrb	r3, [r3, r2]
 8000d28:	2b01      	cmp	r3, #1
 8000d2a:	d116      	bne.n	8000d5a <Protocol+0x76e>
 8000d2c:	2380      	movs	r3, #128	; 0x80
 8000d2e:	0159      	lsls	r1, r3, #5
 8000d30:	2390      	movs	r3, #144	; 0x90
 8000d32:	05db      	lsls	r3, r3, #23
 8000d34:	2200      	movs	r2, #0
 8000d36:	0018      	movs	r0, r3
 8000d38:	f002 fe85 	bl	8003a46 <HAL_GPIO_WritePin>
	        	         			   }
	        	         			   break;
 8000d3c:	e00d      	b.n	8000d5a <Protocol+0x76e>
	        	            break;
 8000d3e:	46c0      	nop			; (mov r8, r8)
 8000d40:	e00c      	b.n	8000d5c <Protocol+0x770>
	        	            break;
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	e00a      	b.n	8000d5c <Protocol+0x770>
	        	         	 break;
 8000d46:	46c0      	nop			; (mov r8, r8)
 8000d48:	e008      	b.n	8000d5c <Protocol+0x770>
	        	         		        	         	  break;
 8000d4a:	46c0      	nop			; (mov r8, r8)
 8000d4c:	e006      	b.n	8000d5c <Protocol+0x770>
	        	         	 break;
 8000d4e:	46c0      	nop			; (mov r8, r8)
 8000d50:	e004      	b.n	8000d5c <Protocol+0x770>
	        	         	 break;
 8000d52:	46c0      	nop			; (mov r8, r8)
 8000d54:	e002      	b.n	8000d5c <Protocol+0x770>
	        	         		        	         	 break;
 8000d56:	46c0      	nop			; (mov r8, r8)
 8000d58:	e000      	b.n	8000d5c <Protocol+0x770>
	        	         			   break;
 8000d5a:	46c0      	nop			; (mov r8, r8)



	        	         			   }
                                  }
 8000d5c:	46c0      	nop			; (mov r8, r8)
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	46c0      	nop			; (mov r8, r8)
 8000d64:	20000354 	.word	0x20000354
 8000d68:	2000025c 	.word	0x2000025c
 8000d6c:	20000358 	.word	0x20000358
 8000d70:	20000000 	.word	0x20000000
 8000d74:	2000035c 	.word	0x2000035c

08000d78 <ADC_reset_ch>:




void ADC_reset_ch(void){
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af00      	add	r7, sp, #0

	 ADC_ChannelConfTypeDef sConfig = {0};
 8000d7e:	1d3b      	adds	r3, r7, #4
 8000d80:	0018      	movs	r0, r3
 8000d82:	230c      	movs	r3, #12
 8000d84:	001a      	movs	r2, r3
 8000d86:	2100      	movs	r1, #0
 8000d88:	f005 fba0 	bl	80064cc <memset>

	              sConfig.Channel = ADC_CHANNEL_0;
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2200      	movs	r2, #0
 8000d90:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000d92:	1d3b      	adds	r3, r7, #4
 8000d94:	4a29      	ldr	r2, [pc, #164]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000d96:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000d98:	1d3a      	adds	r2, r7, #4
 8000d9a:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000d9c:	0011      	movs	r1, r2
 8000d9e:	0018      	movs	r0, r3
 8000da0:	f001 fd96 	bl	80028d0 <HAL_ADC_ConfigChannel>
	              sConfig.Channel = ADC_CHANNEL_1;
 8000da4:	1d3b      	adds	r3, r7, #4
 8000da6:	2201      	movs	r2, #1
 8000da8:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	4a23      	ldr	r2, [pc, #140]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000dae:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000db0:	1d3a      	adds	r2, r7, #4
 8000db2:	4b23      	ldr	r3, [pc, #140]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000db4:	0011      	movs	r1, r2
 8000db6:	0018      	movs	r0, r3
 8000db8:	f001 fd8a 	bl	80028d0 <HAL_ADC_ConfigChannel>
	              sConfig.Channel = ADC_CHANNEL_4;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2204      	movs	r2, #4
 8000dc0:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	4a1d      	ldr	r2, [pc, #116]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000dc6:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000dc8:	1d3a      	adds	r2, r7, #4
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000dcc:	0011      	movs	r1, r2
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f001 fd7e 	bl	80028d0 <HAL_ADC_ConfigChannel>
	              sConfig.Channel = ADC_CHANNEL_5;
 8000dd4:	1d3b      	adds	r3, r7, #4
 8000dd6:	2205      	movs	r2, #5
 8000dd8:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	4a17      	ldr	r2, [pc, #92]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000dde:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000de0:	1d3a      	adds	r2, r7, #4
 8000de2:	4b17      	ldr	r3, [pc, #92]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000de4:	0011      	movs	r1, r2
 8000de6:	0018      	movs	r0, r3
 8000de8:	f001 fd72 	bl	80028d0 <HAL_ADC_ConfigChannel>
	              sConfig.Channel = ADC_CHANNEL_8;
 8000dec:	1d3b      	adds	r3, r7, #4
 8000dee:	2208      	movs	r2, #8
 8000df0:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000df2:	1d3b      	adds	r3, r7, #4
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000df6:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000df8:	1d3a      	adds	r2, r7, #4
 8000dfa:	4b11      	ldr	r3, [pc, #68]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000dfc:	0011      	movs	r1, r2
 8000dfe:	0018      	movs	r0, r3
 8000e00:	f001 fd66 	bl	80028d0 <HAL_ADC_ConfigChannel>
	              sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000e04:	1d3b      	adds	r3, r7, #4
 8000e06:	2210      	movs	r2, #16
 8000e08:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4a0b      	ldr	r2, [pc, #44]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000e0e:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e10:	1d3a      	adds	r2, r7, #4
 8000e12:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000e14:	0011      	movs	r1, r2
 8000e16:	0018      	movs	r0, r3
 8000e18:	f001 fd5a 	bl	80028d0 <HAL_ADC_ConfigChannel>
	              sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2211      	movs	r2, #17
 8000e20:	601a      	str	r2, [r3, #0]
	              sConfig.Rank = ADC_RANK_NONE;
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	4a05      	ldr	r2, [pc, #20]	; (8000e3c <ADC_reset_ch+0xc4>)
 8000e26:	605a      	str	r2, [r3, #4]
	              HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e28:	1d3a      	adds	r2, r7, #4
 8000e2a:	4b05      	ldr	r3, [pc, #20]	; (8000e40 <ADC_reset_ch+0xc8>)
 8000e2c:	0011      	movs	r1, r2
 8000e2e:	0018      	movs	r0, r3
 8000e30:	f001 fd4e 	bl	80028d0 <HAL_ADC_ConfigChannel>



}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b004      	add	sp, #16
 8000e3a:	bd80      	pop	{r7, pc}
 8000e3c:	00001001 	.word	0x00001001
 8000e40:	2000007c 	.word	0x2000007c

08000e44 <ADC_Select_CH0>:
void ADC_Select_CH0 (void)
	  {
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b084      	sub	sp, #16
 8000e48:	af00      	add	r7, sp, #0
	      ADC_ChannelConfTypeDef sConfig = {0};
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	0018      	movs	r0, r3
 8000e4e:	230c      	movs	r3, #12
 8000e50:	001a      	movs	r2, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	f005 fb3a 	bl	80064cc <memset>

	  	  sConfig.Channel = ADC_CHANNEL_0;
 8000e58:	1d3b      	adds	r3, r7, #4
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
	  	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000e5e:	1d3b      	adds	r3, r7, #4
 8000e60:	2280      	movs	r2, #128	; 0x80
 8000e62:	0152      	lsls	r2, r2, #5
 8000e64:	605a      	str	r2, [r3, #4]
	  	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000e66:	1d3b      	adds	r3, r7, #4
 8000e68:	2203      	movs	r2, #3
 8000e6a:	609a      	str	r2, [r3, #8]
	  	 HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000e6c:	1d3a      	adds	r2, r7, #4
 8000e6e:	4b04      	ldr	r3, [pc, #16]	; (8000e80 <ADC_Select_CH0+0x3c>)
 8000e70:	0011      	movs	r1, r2
 8000e72:	0018      	movs	r0, r3
 8000e74:	f001 fd2c 	bl	80028d0 <HAL_ADC_ConfigChannel>

	  }
 8000e78:	46c0      	nop			; (mov r8, r8)
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	b004      	add	sp, #16
 8000e7e:	bd80      	pop	{r7, pc}
 8000e80:	2000007c 	.word	0x2000007c

08000e84 <ADC_Select_CH1>:

	  void ADC_Select_CH1 (void)
	    {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
	    	ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	0018      	movs	r0, r3
 8000e8e:	230c      	movs	r3, #12
 8000e90:	001a      	movs	r2, r3
 8000e92:	2100      	movs	r1, #0
 8000e94:	f005 fb1a 	bl	80064cc <memset>
	    	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	    	  */
	    	  sConfig.Channel = ADC_CHANNEL_1;
 8000e98:	1d3b      	adds	r3, r7, #4
 8000e9a:	2201      	movs	r2, #1
 8000e9c:	601a      	str	r2, [r3, #0]
	    	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;;
 8000e9e:	1d3b      	adds	r3, r7, #4
 8000ea0:	2280      	movs	r2, #128	; 0x80
 8000ea2:	0152      	lsls	r2, r2, #5
 8000ea4:	605a      	str	r2, [r3, #4]
	    	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000ea6:	1d3b      	adds	r3, r7, #4
 8000ea8:	2203      	movs	r2, #3
 8000eaa:	609a      	str	r2, [r3, #8]
	    	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000eac:	1d3a      	adds	r2, r7, #4
 8000eae:	4b04      	ldr	r3, [pc, #16]	; (8000ec0 <ADC_Select_CH1+0x3c>)
 8000eb0:	0011      	movs	r1, r2
 8000eb2:	0018      	movs	r0, r3
 8000eb4:	f001 fd0c 	bl	80028d0 <HAL_ADC_ConfigChannel>

	    }
 8000eb8:	46c0      	nop			; (mov r8, r8)
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	b004      	add	sp, #16
 8000ebe:	bd80      	pop	{r7, pc}
 8000ec0:	2000007c 	.word	0x2000007c

08000ec4 <ADC_Select_CH4>:


	  void ADC_Select_CH4 (void)
	     {
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b084      	sub	sp, #16
 8000ec8:	af00      	add	r7, sp, #0
	     	ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	1d3b      	adds	r3, r7, #4
 8000ecc:	0018      	movs	r0, r3
 8000ece:	230c      	movs	r3, #12
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f005 fafa 	bl	80064cc <memset>
	     	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	     	  */
	     	  sConfig.Channel = ADC_CHANNEL_4;
 8000ed8:	1d3b      	adds	r3, r7, #4
 8000eda:	2204      	movs	r2, #4
 8000edc:	601a      	str	r2, [r3, #0]
	     	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000ede:	1d3b      	adds	r3, r7, #4
 8000ee0:	2280      	movs	r2, #128	; 0x80
 8000ee2:	0152      	lsls	r2, r2, #5
 8000ee4:	605a      	str	r2, [r3, #4]
	     	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000ee6:	1d3b      	adds	r3, r7, #4
 8000ee8:	2202      	movs	r2, #2
 8000eea:	609a      	str	r2, [r3, #8]
	     	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000eec:	1d3a      	adds	r2, r7, #4
 8000eee:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <ADC_Select_CH4+0x3c>)
 8000ef0:	0011      	movs	r1, r2
 8000ef2:	0018      	movs	r0, r3
 8000ef4:	f001 fcec 	bl	80028d0 <HAL_ADC_ConfigChannel>
	     }
 8000ef8:	46c0      	nop			; (mov r8, r8)
 8000efa:	46bd      	mov	sp, r7
 8000efc:	b004      	add	sp, #16
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	2000007c 	.word	0x2000007c

08000f04 <ADC_Select_CH5>:


	  void ADC_Select_CH5 (void)
	       {
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b084      	sub	sp, #16
 8000f08:	af00      	add	r7, sp, #0
	       	ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	1d3b      	adds	r3, r7, #4
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	230c      	movs	r3, #12
 8000f10:	001a      	movs	r2, r3
 8000f12:	2100      	movs	r1, #0
 8000f14:	f005 fada 	bl	80064cc <memset>
	       	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	       	  */
	       	  sConfig.Channel = ADC_CHANNEL_5;
 8000f18:	1d3b      	adds	r3, r7, #4
 8000f1a:	2205      	movs	r2, #5
 8000f1c:	601a      	str	r2, [r3, #0]
	       	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f1e:	1d3b      	adds	r3, r7, #4
 8000f20:	2280      	movs	r2, #128	; 0x80
 8000f22:	0152      	lsls	r2, r2, #5
 8000f24:	605a      	str	r2, [r3, #4]
	       	  sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2202      	movs	r2, #2
 8000f2a:	609a      	str	r2, [r3, #8]
	       	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000f2c:	1d3a      	adds	r2, r7, #4
 8000f2e:	4b04      	ldr	r3, [pc, #16]	; (8000f40 <ADC_Select_CH5+0x3c>)
 8000f30:	0011      	movs	r1, r2
 8000f32:	0018      	movs	r0, r3
 8000f34:	f001 fccc 	bl	80028d0 <HAL_ADC_ConfigChannel>
	       }
 8000f38:	46c0      	nop			; (mov r8, r8)
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	b004      	add	sp, #16
 8000f3e:	bd80      	pop	{r7, pc}
 8000f40:	2000007c 	.word	0x2000007c

08000f44 <ADC_Select_CH8>:


	  void ADC_Select_CH8 (void)
	         {
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b084      	sub	sp, #16
 8000f48:	af00      	add	r7, sp, #0
	         	ADC_ChannelConfTypeDef sConfig = {0};
 8000f4a:	1d3b      	adds	r3, r7, #4
 8000f4c:	0018      	movs	r0, r3
 8000f4e:	230c      	movs	r3, #12
 8000f50:	001a      	movs	r2, r3
 8000f52:	2100      	movs	r1, #0
 8000f54:	f005 faba 	bl	80064cc <memset>
	         	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	         	  */
	         	  sConfig.Channel = ADC_CHANNEL_8;
 8000f58:	1d3b      	adds	r3, r7, #4
 8000f5a:	2208      	movs	r2, #8
 8000f5c:	601a      	str	r2, [r3, #0]
	         	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f5e:	1d3b      	adds	r3, r7, #4
 8000f60:	2280      	movs	r2, #128	; 0x80
 8000f62:	0152      	lsls	r2, r2, #5
 8000f64:	605a      	str	r2, [r3, #4]
	         	  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES_5;
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	2203      	movs	r2, #3
 8000f6a:	609a      	str	r2, [r3, #8]
	         	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000f6c:	1d3a      	adds	r2, r7, #4
 8000f6e:	4b04      	ldr	r3, [pc, #16]	; (8000f80 <ADC_Select_CH8+0x3c>)
 8000f70:	0011      	movs	r1, r2
 8000f72:	0018      	movs	r0, r3
 8000f74:	f001 fcac 	bl	80028d0 <HAL_ADC_ConfigChannel>
	         }
 8000f78:	46c0      	nop			; (mov r8, r8)
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	b004      	add	sp, #16
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	2000007c 	.word	0x2000007c

08000f84 <ADC_Select_CHTemp>:

	  void ADC_Select_CHTemp (void)
	  {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b084      	sub	sp, #16
 8000f88:	af00      	add	r7, sp, #0
	  	ADC_ChannelConfTypeDef sConfig = {0};
 8000f8a:	1d3b      	adds	r3, r7, #4
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	230c      	movs	r3, #12
 8000f90:	001a      	movs	r2, r3
 8000f92:	2100      	movs	r1, #0
 8000f94:	f005 fa9a 	bl	80064cc <memset>
	  	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  	  */
	  	  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000f98:	1d3b      	adds	r3, r7, #4
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	601a      	str	r2, [r3, #0]
	  	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000f9e:	1d3b      	adds	r3, r7, #4
 8000fa0:	2280      	movs	r2, #128	; 0x80
 8000fa2:	0152      	lsls	r2, r2, #5
 8000fa4:	605a      	str	r2, [r3, #4]
	  	  sConfig.SamplingTime =ADC_SAMPLETIME_28CYCLES_5;
 8000fa6:	1d3b      	adds	r3, r7, #4
 8000fa8:	2203      	movs	r2, #3
 8000faa:	609a      	str	r2, [r3, #8]
	      HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000fac:	1d3a      	adds	r2, r7, #4
 8000fae:	4b04      	ldr	r3, [pc, #16]	; (8000fc0 <ADC_Select_CHTemp+0x3c>)
 8000fb0:	0011      	movs	r1, r2
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	f001 fc8c 	bl	80028d0 <HAL_ADC_ConfigChannel>
	  }
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	46bd      	mov	sp, r7
 8000fbc:	b004      	add	sp, #16
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000007c 	.word	0x2000007c

08000fc4 <ADC_Select_CH_V_REF>:


	  void ADC_Select_CH_V_REF (void)
	    {
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b084      	sub	sp, #16
 8000fc8:	af00      	add	r7, sp, #0
	    	ADC_ChannelConfTypeDef sConfig = {0};
 8000fca:	1d3b      	adds	r3, r7, #4
 8000fcc:	0018      	movs	r0, r3
 8000fce:	230c      	movs	r3, #12
 8000fd0:	001a      	movs	r2, r3
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	f005 fa7a 	bl	80064cc <memset>
	    	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	    	  */
	    	  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	2211      	movs	r2, #17
 8000fdc:	601a      	str	r2, [r3, #0]
	    	  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000fde:	1d3b      	adds	r3, r7, #4
 8000fe0:	2280      	movs	r2, #128	; 0x80
 8000fe2:	0152      	lsls	r2, r2, #5
 8000fe4:	605a      	str	r2, [r3, #4]
	    	  sConfig.SamplingTime =ADC_SAMPLETIME_13CYCLES_5;
 8000fe6:	1d3b      	adds	r3, r7, #4
 8000fe8:	2202      	movs	r2, #2
 8000fea:	609a      	str	r2, [r3, #8]
	    	  HAL_ADC_ConfigChannel(&hadc, &sConfig);
 8000fec:	1d3a      	adds	r2, r7, #4
 8000fee:	4b04      	ldr	r3, [pc, #16]	; (8001000 <ADC_Select_CH_V_REF+0x3c>)
 8000ff0:	0011      	movs	r1, r2
 8000ff2:	0018      	movs	r0, r3
 8000ff4:	f001 fc6c 	bl	80028d0 <HAL_ADC_ConfigChannel>
	    }
 8000ff8:	46c0      	nop			; (mov r8, r8)
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	b004      	add	sp, #16
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000007c 	.word	0x2000007c

08001004 <ADC_read>:

	  uint16_t ADC_read(uint8_t n)

	  {
 8001004:	b580      	push	{r7, lr}
 8001006:	b082      	sub	sp, #8
 8001008:	af00      	add	r7, sp, #0
 800100a:	0002      	movs	r2, r0
 800100c:	1dfb      	adds	r3, r7, #7
 800100e:	701a      	strb	r2, [r3, #0]

		  switch (n){
 8001010:	1dfb      	adds	r3, r7, #7
 8001012:	781b      	ldrb	r3, [r3, #0]
 8001014:	2b06      	cmp	r3, #6
 8001016:	d827      	bhi.n	8001068 <ADC_read+0x64>
 8001018:	009a      	lsls	r2, r3, #2
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <ADC_read+0x9c>)
 800101c:	18d3      	adds	r3, r2, r3
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	469f      	mov	pc, r3

			  case 0:
		  ADC_reset_ch();
 8001022:	f7ff fea9 	bl	8000d78 <ADC_reset_ch>
          ADC_Select_CH0();
 8001026:	f7ff ff0d 	bl	8000e44 <ADC_Select_CH0>
          break;
 800102a:	e01d      	b.n	8001068 <ADC_read+0x64>
			  case 1:
				  ADC_reset_ch();
 800102c:	f7ff fea4 	bl	8000d78 <ADC_reset_ch>
		  ADC_Select_CH1();
 8001030:	f7ff ff28 	bl	8000e84 <ADC_Select_CH1>
          break;
 8001034:	e018      	b.n	8001068 <ADC_read+0x64>

			  case 2:
				  ADC_reset_ch();
 8001036:	f7ff fe9f 	bl	8000d78 <ADC_reset_ch>
		  ADC_Select_CH4();
 800103a:	f7ff ff43 	bl	8000ec4 <ADC_Select_CH4>
		  break;
 800103e:	e013      	b.n	8001068 <ADC_read+0x64>

			  case 3:
				  ADC_reset_ch();
 8001040:	f7ff fe9a 	bl	8000d78 <ADC_reset_ch>
		  ADC_Select_CH5();
 8001044:	f7ff ff5e 	bl	8000f04 <ADC_Select_CH5>
		  break;
 8001048:	e00e      	b.n	8001068 <ADC_read+0x64>

			  case 4:
				  ADC_reset_ch();
 800104a:	f7ff fe95 	bl	8000d78 <ADC_reset_ch>
		  ADC_Select_CH8();
 800104e:	f7ff ff79 	bl	8000f44 <ADC_Select_CH8>
		  break;
 8001052:	e009      	b.n	8001068 <ADC_read+0x64>

			  case 5:
				  ADC_reset_ch();
 8001054:	f7ff fe90 	bl	8000d78 <ADC_reset_ch>
		  ADC_Select_CHTemp();
 8001058:	f7ff ff94 	bl	8000f84 <ADC_Select_CHTemp>
		  break;
 800105c:	e004      	b.n	8001068 <ADC_read+0x64>

			  case 6:
				  ADC_reset_ch();
 800105e:	f7ff fe8b 	bl	8000d78 <ADC_reset_ch>
		  ADC_Select_CH_V_REF();
 8001062:	f7ff ffaf 	bl	8000fc4 <ADC_Select_CH_V_REF>
		  break;
 8001066:	46c0      	nop			; (mov r8, r8)

		  }
 		  HAL_ADC_Start(&hadc);
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <ADC_read+0xa0>)
 800106a:	0018      	movs	r0, r3
 800106c:	f001 fa3c 	bl	80024e8 <HAL_ADC_Start>
 		  HAL_ADC_PollForConversion(&hadc, 100);
 8001070:	4b0c      	ldr	r3, [pc, #48]	; (80010a4 <ADC_read+0xa0>)
 8001072:	2164      	movs	r1, #100	; 0x64
 8001074:	0018      	movs	r0, r3
 8001076:	f001 facb 	bl	8002610 <HAL_ADC_PollForConversion>
 		  adc_out = HAL_ADC_GetValue(&hadc);
 800107a:	4b0a      	ldr	r3, [pc, #40]	; (80010a4 <ADC_read+0xa0>)
 800107c:	0018      	movs	r0, r3
 800107e:	f001 fb5f 	bl	8002740 <HAL_ADC_GetValue>
 8001082:	0003      	movs	r3, r0
 8001084:	b29a      	uxth	r2, r3
 8001086:	4b08      	ldr	r3, [pc, #32]	; (80010a8 <ADC_read+0xa4>)
 8001088:	801a      	strh	r2, [r3, #0]
 		  HAL_ADC_Stop(&hadc);
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <ADC_read+0xa0>)
 800108c:	0018      	movs	r0, r3
 800108e:	f001 fa7f 	bl	8002590 <HAL_ADC_Stop>
 		// adc_val[n]=adc_out;
 		// return adc_val[n];

 		  return adc_out;
 8001092:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <ADC_read+0xa4>)
 8001094:	881b      	ldrh	r3, [r3, #0]
	  }
 8001096:	0018      	movs	r0, r3
 8001098:	46bd      	mov	sp, r7
 800109a:	b002      	add	sp, #8
 800109c:	bd80      	pop	{r7, pc}
 800109e:	46c0      	nop			; (mov r8, r8)
 80010a0:	08006e58 	.word	0x08006e58
 80010a4:	2000007c 	.word	0x2000007c
 80010a8:	20000228 	.word	0x20000228

080010ac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80010b0:	f001 f85a 	bl	8002168 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80010b4:	f000 f85a 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80010b8:	f000 fada 	bl	8001670 <MX_GPIO_Init>
  MX_DMA_Init();
 80010bc:	f000 faba 	bl	8001634 <MX_DMA_Init>
  MX_TIM1_Init();
 80010c0:	f000 f97c 	bl	80013bc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 80010c4:	f000 fa86 	bl	80015d4 <MX_USART1_UART_Init>
  MX_ADC_Init();
 80010c8:	f000 f8b0 	bl	800122c <MX_ADC_Init>
  MX_TIM3_Init();
 80010cc:	f000 fa2c 	bl	8001528 <MX_TIM3_Init>
  MX_IWDG_Init();
 80010d0:	f000 f954 	bl	800137c <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */

  ReadConfig();
 80010d4:	f7ff f8fe 	bl	80002d4 <ReadConfig>

      ISOL_ON;
 80010d8:	2390      	movs	r3, #144	; 0x90
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	2201      	movs	r2, #1
 80010de:	2140      	movs	r1, #64	; 0x40
 80010e0:	0018      	movs	r0, r3
 80010e2:	f002 fcb0 	bl	8003a46 <HAL_GPIO_WritePin>
      alarm=0;
 80010e6:	4b1d      	ldr	r3, [pc, #116]	; (800115c <main+0xb0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	701a      	strb	r2, [r3, #0]

     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 80010ec:	4b1c      	ldr	r3, [pc, #112]	; (8001160 <main+0xb4>)
 80010ee:	2100      	movs	r1, #0
 80010f0:	0018      	movs	r0, r3
 80010f2:	f003 fb25 	bl	8004740 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80010f6:	4b1a      	ldr	r3, [pc, #104]	; (8001160 <main+0xb4>)
 80010f8:	2104      	movs	r1, #4
 80010fa:	0018      	movs	r0, r3
 80010fc:	f003 fb20 	bl	8004740 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 8001100:	4b17      	ldr	r3, [pc, #92]	; (8001160 <main+0xb4>)
 8001102:	2108      	movs	r1, #8
 8001104:	0018      	movs	r0, r3
 8001106:	f003 fb1b 	bl	8004740 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 800110a:	4b15      	ldr	r3, [pc, #84]	; (8001160 <main+0xb4>)
 800110c:	210c      	movs	r1, #12
 800110e:	0018      	movs	r0, r3
 8001110:	f003 fb16 	bl	8004740 <HAL_TIM_IC_Start_IT>


     addres=settings[0];
 8001114:	4b13      	ldr	r3, [pc, #76]	; (8001164 <main+0xb8>)
 8001116:	781a      	ldrb	r2, [r3, #0]
 8001118:	4b13      	ldr	r3, [pc, #76]	; (8001168 <main+0xbc>)
 800111a:	701a      	strb	r2, [r3, #0]
     if(settings[0]==0xFF){addres=0;}
 800111c:	4b11      	ldr	r3, [pc, #68]	; (8001164 <main+0xb8>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2bff      	cmp	r3, #255	; 0xff
 8001122:	d102      	bne.n	800112a <main+0x7e>
 8001124:	4b10      	ldr	r3, [pc, #64]	; (8001168 <main+0xbc>)
 8001126:	2200      	movs	r2, #0
 8001128:	701a      	strb	r2, [r3, #0]
     LED1_OFF;
 800112a:	2380      	movs	r3, #128	; 0x80
 800112c:	0119      	lsls	r1, r3, #4
 800112e:	2390      	movs	r3, #144	; 0x90
 8001130:	05db      	lsls	r3, r3, #23
 8001132:	2200      	movs	r2, #0
 8001134:	0018      	movs	r0, r3
 8001136:	f002 fc86 	bl	8003a46 <HAL_GPIO_WritePin>
     LED2_OFF;
 800113a:	2380      	movs	r3, #128	; 0x80
 800113c:	0159      	lsls	r1, r3, #5
 800113e:	2390      	movs	r3, #144	; 0x90
 8001140:	05db      	lsls	r3, r3, #23
 8001142:	2200      	movs	r2, #0
 8001144:	0018      	movs	r0, r3
 8001146:	f002 fc7e 	bl	8003a46 <HAL_GPIO_WritePin>
     HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON, PWR_SLEEPENTRY_WFI);
 800114a:	2101      	movs	r1, #1
 800114c:	2000      	movs	r0, #0
 800114e:	f002 fcf9 	bl	8003b44 <HAL_PWR_EnterSLEEPMode>
    HAL_SuspendTick();
 8001152:	f001 f86d 	bl	8002230 <HAL_SuspendTick>
   HAL_PWR_EnableSleepOnExit ();
 8001156:	f002 fd11 	bl	8003b7c <HAL_PWR_EnableSleepOnExit>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800115a:	e7fe      	b.n	800115a <main+0xae>
 800115c:	20000232 	.word	0x20000232
 8001160:	200000cc 	.word	0x200000cc
 8001164:	2000035c 	.word	0x2000035c
 8001168:	20000000 	.word	0x20000000

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b590      	push	{r4, r7, lr}
 800116e:	b095      	sub	sp, #84	; 0x54
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	2420      	movs	r4, #32
 8001174:	193b      	adds	r3, r7, r4
 8001176:	0018      	movs	r0, r3
 8001178:	2330      	movs	r3, #48	; 0x30
 800117a:	001a      	movs	r2, r3
 800117c:	2100      	movs	r1, #0
 800117e:	f005 f9a5 	bl	80064cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001182:	2310      	movs	r3, #16
 8001184:	18fb      	adds	r3, r7, r3
 8001186:	0018      	movs	r0, r3
 8001188:	2310      	movs	r3, #16
 800118a:	001a      	movs	r2, r3
 800118c:	2100      	movs	r1, #0
 800118e:	f005 f99d 	bl	80064cc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001192:	003b      	movs	r3, r7
 8001194:	0018      	movs	r0, r3
 8001196:	2310      	movs	r3, #16
 8001198:	001a      	movs	r2, r3
 800119a:	2100      	movs	r1, #0
 800119c:	f005 f996 	bl	80064cc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 80011a0:	0021      	movs	r1, r4
 80011a2:	187b      	adds	r3, r7, r1
 80011a4:	221a      	movs	r2, #26
 80011a6:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011a8:	187b      	adds	r3, r7, r1
 80011aa:	2201      	movs	r2, #1
 80011ac:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 80011ae:	187b      	adds	r3, r7, r1
 80011b0:	2201      	movs	r2, #1
 80011b2:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b4:	187b      	adds	r3, r7, r1
 80011b6:	2210      	movs	r2, #16
 80011b8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 80011ba:	187b      	adds	r3, r7, r1
 80011bc:	2210      	movs	r2, #16
 80011be:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80011c0:	187b      	adds	r3, r7, r1
 80011c2:	2201      	movs	r2, #1
 80011c4:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80011c6:	187b      	adds	r3, r7, r1
 80011c8:	2200      	movs	r2, #0
 80011ca:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011cc:	187b      	adds	r3, r7, r1
 80011ce:	0018      	movs	r0, r3
 80011d0:	f002 fce2 	bl	8003b98 <HAL_RCC_OscConfig>
 80011d4:	1e03      	subs	r3, r0, #0
 80011d6:	d001      	beq.n	80011dc <SystemClock_Config+0x70>
  {
    Error_Handler();
 80011d8:	f000 fd66 	bl	8001ca8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011dc:	2110      	movs	r1, #16
 80011de:	187b      	adds	r3, r7, r1
 80011e0:	2207      	movs	r2, #7
 80011e2:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80011e4:	187b      	adds	r3, r7, r1
 80011e6:	2200      	movs	r2, #0
 80011e8:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011ea:	187b      	adds	r3, r7, r1
 80011ec:	2200      	movs	r2, #0
 80011ee:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f0:	187b      	adds	r3, r7, r1
 80011f2:	2200      	movs	r2, #0
 80011f4:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80011f6:	187b      	adds	r3, r7, r1
 80011f8:	2100      	movs	r1, #0
 80011fa:	0018      	movs	r0, r3
 80011fc:	f002 ffe6 	bl	80041cc <HAL_RCC_ClockConfig>
 8001200:	1e03      	subs	r3, r0, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8001204:	f000 fd50 	bl	8001ca8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001208:	003b      	movs	r3, r7
 800120a:	2201      	movs	r2, #1
 800120c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800120e:	003b      	movs	r3, r7
 8001210:	2203      	movs	r2, #3
 8001212:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001214:	003b      	movs	r3, r7
 8001216:	0018      	movs	r0, r3
 8001218:	f003 f91c 	bl	8004454 <HAL_RCCEx_PeriphCLKConfig>
 800121c:	1e03      	subs	r3, r0, #0
 800121e:	d001      	beq.n	8001224 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8001220:	f000 fd42 	bl	8001ca8 <Error_Handler>
  }
}
 8001224:	46c0      	nop			; (mov r8, r8)
 8001226:	46bd      	mov	sp, r7
 8001228:	b015      	add	sp, #84	; 0x54
 800122a:	bd90      	pop	{r4, r7, pc}

0800122c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	0018      	movs	r0, r3
 8001236:	230c      	movs	r3, #12
 8001238:	001a      	movs	r2, r3
 800123a:	2100      	movs	r1, #0
 800123c:	f005 f946 	bl	80064cc <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001240:	4b4c      	ldr	r3, [pc, #304]	; (8001374 <MX_ADC_Init+0x148>)
 8001242:	4a4d      	ldr	r2, [pc, #308]	; (8001378 <MX_ADC_Init+0x14c>)
 8001244:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8001246:	4b4b      	ldr	r3, [pc, #300]	; (8001374 <MX_ADC_Init+0x148>)
 8001248:	2200      	movs	r2, #0
 800124a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800124c:	4b49      	ldr	r3, [pc, #292]	; (8001374 <MX_ADC_Init+0x148>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001252:	4b48      	ldr	r3, [pc, #288]	; (8001374 <MX_ADC_Init+0x148>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8001258:	4b46      	ldr	r3, [pc, #280]	; (8001374 <MX_ADC_Init+0x148>)
 800125a:	2201      	movs	r2, #1
 800125c:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800125e:	4b45      	ldr	r3, [pc, #276]	; (8001374 <MX_ADC_Init+0x148>)
 8001260:	2204      	movs	r2, #4
 8001262:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8001264:	4b43      	ldr	r3, [pc, #268]	; (8001374 <MX_ADC_Init+0x148>)
 8001266:	2200      	movs	r2, #0
 8001268:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 800126a:	4b42      	ldr	r3, [pc, #264]	; (8001374 <MX_ADC_Init+0x148>)
 800126c:	2200      	movs	r2, #0
 800126e:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 8001270:	4b40      	ldr	r3, [pc, #256]	; (8001374 <MX_ADC_Init+0x148>)
 8001272:	2200      	movs	r2, #0
 8001274:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8001276:	4b3f      	ldr	r3, [pc, #252]	; (8001374 <MX_ADC_Init+0x148>)
 8001278:	2200      	movs	r2, #0
 800127a:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800127c:	4b3d      	ldr	r3, [pc, #244]	; (8001374 <MX_ADC_Init+0x148>)
 800127e:	22c2      	movs	r2, #194	; 0xc2
 8001280:	32ff      	adds	r2, #255	; 0xff
 8001282:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001284:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <MX_ADC_Init+0x148>)
 8001286:	2200      	movs	r2, #0
 8001288:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 800128a:	4b3a      	ldr	r3, [pc, #232]	; (8001374 <MX_ADC_Init+0x148>)
 800128c:	2224      	movs	r2, #36	; 0x24
 800128e:	2100      	movs	r1, #0
 8001290:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001292:	4b38      	ldr	r3, [pc, #224]	; (8001374 <MX_ADC_Init+0x148>)
 8001294:	2201      	movs	r2, #1
 8001296:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001298:	4b36      	ldr	r3, [pc, #216]	; (8001374 <MX_ADC_Init+0x148>)
 800129a:	0018      	movs	r0, r3
 800129c:	f000 ffe4 	bl	8002268 <HAL_ADC_Init>
 80012a0:	1e03      	subs	r3, r0, #0
 80012a2:	d001      	beq.n	80012a8 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 80012a4:	f000 fd00 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80012a8:	1d3b      	adds	r3, r7, #4
 80012aa:	2200      	movs	r2, #0
 80012ac:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80012ae:	1d3b      	adds	r3, r7, #4
 80012b0:	2280      	movs	r2, #128	; 0x80
 80012b2:	0152      	lsls	r2, r2, #5
 80012b4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 80012b6:	1d3b      	adds	r3, r7, #4
 80012b8:	2201      	movs	r2, #1
 80012ba:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012bc:	1d3a      	adds	r2, r7, #4
 80012be:	4b2d      	ldr	r3, [pc, #180]	; (8001374 <MX_ADC_Init+0x148>)
 80012c0:	0011      	movs	r1, r2
 80012c2:	0018      	movs	r0, r3
 80012c4:	f001 fb04 	bl	80028d0 <HAL_ADC_ConfigChannel>
 80012c8:	1e03      	subs	r3, r0, #0
 80012ca:	d001      	beq.n	80012d0 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 80012cc:	f000 fcec 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80012d0:	1d3b      	adds	r3, r7, #4
 80012d2:	2201      	movs	r2, #1
 80012d4:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012d6:	1d3a      	adds	r2, r7, #4
 80012d8:	4b26      	ldr	r3, [pc, #152]	; (8001374 <MX_ADC_Init+0x148>)
 80012da:	0011      	movs	r1, r2
 80012dc:	0018      	movs	r0, r3
 80012de:	f001 faf7 	bl	80028d0 <HAL_ADC_ConfigChannel>
 80012e2:	1e03      	subs	r3, r0, #0
 80012e4:	d001      	beq.n	80012ea <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 80012e6:	f000 fcdf 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2204      	movs	r2, #4
 80012ee:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80012f0:	1d3a      	adds	r2, r7, #4
 80012f2:	4b20      	ldr	r3, [pc, #128]	; (8001374 <MX_ADC_Init+0x148>)
 80012f4:	0011      	movs	r1, r2
 80012f6:	0018      	movs	r0, r3
 80012f8:	f001 faea 	bl	80028d0 <HAL_ADC_ConfigChannel>
 80012fc:	1e03      	subs	r3, r0, #0
 80012fe:	d001      	beq.n	8001304 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8001300:	f000 fcd2 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8001304:	1d3b      	adds	r3, r7, #4
 8001306:	2205      	movs	r2, #5
 8001308:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800130a:	1d3a      	adds	r2, r7, #4
 800130c:	4b19      	ldr	r3, [pc, #100]	; (8001374 <MX_ADC_Init+0x148>)
 800130e:	0011      	movs	r1, r2
 8001310:	0018      	movs	r0, r3
 8001312:	f001 fadd 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001316:	1e03      	subs	r3, r0, #0
 8001318:	d001      	beq.n	800131e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800131a:	f000 fcc5 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800131e:	1d3b      	adds	r3, r7, #4
 8001320:	2208      	movs	r2, #8
 8001322:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001324:	1d3a      	adds	r2, r7, #4
 8001326:	4b13      	ldr	r3, [pc, #76]	; (8001374 <MX_ADC_Init+0x148>)
 8001328:	0011      	movs	r1, r2
 800132a:	0018      	movs	r0, r3
 800132c:	f001 fad0 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001330:	1e03      	subs	r3, r0, #0
 8001332:	d001      	beq.n	8001338 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8001334:	f000 fcb8 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8001338:	1d3b      	adds	r3, r7, #4
 800133a:	2210      	movs	r2, #16
 800133c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800133e:	1d3a      	adds	r2, r7, #4
 8001340:	4b0c      	ldr	r3, [pc, #48]	; (8001374 <MX_ADC_Init+0x148>)
 8001342:	0011      	movs	r1, r2
 8001344:	0018      	movs	r0, r3
 8001346:	f001 fac3 	bl	80028d0 <HAL_ADC_ConfigChannel>
 800134a:	1e03      	subs	r3, r0, #0
 800134c:	d001      	beq.n	8001352 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 800134e:	f000 fcab 	bl	8001ca8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 8001352:	1d3b      	adds	r3, r7, #4
 8001354:	2211      	movs	r2, #17
 8001356:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001358:	1d3a      	adds	r2, r7, #4
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <MX_ADC_Init+0x148>)
 800135c:	0011      	movs	r1, r2
 800135e:	0018      	movs	r0, r3
 8001360:	f001 fab6 	bl	80028d0 <HAL_ADC_ConfigChannel>
 8001364:	1e03      	subs	r3, r0, #0
 8001366:	d001      	beq.n	800136c <MX_ADC_Init+0x140>
  {
    Error_Handler();
 8001368:	f000 fc9e 	bl	8001ca8 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 800136c:	46c0      	nop			; (mov r8, r8)
 800136e:	46bd      	mov	sp, r7
 8001370:	b004      	add	sp, #16
 8001372:	bd80      	pop	{r7, pc}
 8001374:	2000007c 	.word	0x2000007c
 8001378:	40012400 	.word	0x40012400

0800137c <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 8001380:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_IWDG_Init+0x34>)
 8001382:	4a0c      	ldr	r2, [pc, #48]	; (80013b4 <MX_IWDG_Init+0x38>)
 8001384:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 8001386:	4b0a      	ldr	r3, [pc, #40]	; (80013b0 <MX_IWDG_Init+0x34>)
 8001388:	2204      	movs	r2, #4
 800138a:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 800138c:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_IWDG_Init+0x34>)
 800138e:	4a0a      	ldr	r2, [pc, #40]	; (80013b8 <MX_IWDG_Init+0x3c>)
 8001390:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 8001392:	4b07      	ldr	r3, [pc, #28]	; (80013b0 <MX_IWDG_Init+0x34>)
 8001394:	4a08      	ldr	r2, [pc, #32]	; (80013b8 <MX_IWDG_Init+0x3c>)
 8001396:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 8001398:	4b05      	ldr	r3, [pc, #20]	; (80013b0 <MX_IWDG_Init+0x34>)
 800139a:	0018      	movs	r0, r3
 800139c:	f002 fb70 	bl	8003a80 <HAL_IWDG_Init>
 80013a0:	1e03      	subs	r3, r0, #0
 80013a2:	d001      	beq.n	80013a8 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 80013a4:	f000 fc80 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 80013a8:	46c0      	nop			; (mov r8, r8)
 80013aa:	46bd      	mov	sp, r7
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	46c0      	nop			; (mov r8, r8)
 80013b0:	200000bc 	.word	0x200000bc
 80013b4:	40003000 	.word	0x40003000
 80013b8:	00000fff 	.word	0x00000fff

080013bc <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013bc:	b580      	push	{r7, lr}
 80013be:	b08a      	sub	sp, #40	; 0x28
 80013c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c2:	2318      	movs	r3, #24
 80013c4:	18fb      	adds	r3, r7, r3
 80013c6:	0018      	movs	r0, r3
 80013c8:	2310      	movs	r3, #16
 80013ca:	001a      	movs	r2, r3
 80013cc:	2100      	movs	r1, #0
 80013ce:	f005 f87d 	bl	80064cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d2:	2310      	movs	r3, #16
 80013d4:	18fb      	adds	r3, r7, r3
 80013d6:	0018      	movs	r0, r3
 80013d8:	2308      	movs	r3, #8
 80013da:	001a      	movs	r2, r3
 80013dc:	2100      	movs	r1, #0
 80013de:	f005 f875 	bl	80064cc <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013e2:	003b      	movs	r3, r7
 80013e4:	0018      	movs	r0, r3
 80013e6:	2310      	movs	r3, #16
 80013e8:	001a      	movs	r2, r3
 80013ea:	2100      	movs	r1, #0
 80013ec:	f005 f86e 	bl	80064cc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013f0:	4b4a      	ldr	r3, [pc, #296]	; (800151c <MX_TIM1_Init+0x160>)
 80013f2:	4a4b      	ldr	r2, [pc, #300]	; (8001520 <MX_TIM1_Init+0x164>)
 80013f4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 499;
 80013f6:	4b49      	ldr	r3, [pc, #292]	; (800151c <MX_TIM1_Init+0x160>)
 80013f8:	22f4      	movs	r2, #244	; 0xf4
 80013fa:	32ff      	adds	r2, #255	; 0xff
 80013fc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013fe:	4b47      	ldr	r3, [pc, #284]	; (800151c <MX_TIM1_Init+0x160>)
 8001400:	2200      	movs	r2, #0
 8001402:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8001404:	4b45      	ldr	r3, [pc, #276]	; (800151c <MX_TIM1_Init+0x160>)
 8001406:	4a47      	ldr	r2, [pc, #284]	; (8001524 <MX_TIM1_Init+0x168>)
 8001408:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800140a:	4b44      	ldr	r3, [pc, #272]	; (800151c <MX_TIM1_Init+0x160>)
 800140c:	2200      	movs	r2, #0
 800140e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001410:	4b42      	ldr	r3, [pc, #264]	; (800151c <MX_TIM1_Init+0x160>)
 8001412:	2200      	movs	r2, #0
 8001414:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b41      	ldr	r3, [pc, #260]	; (800151c <MX_TIM1_Init+0x160>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800141c:	4b3f      	ldr	r3, [pc, #252]	; (800151c <MX_TIM1_Init+0x160>)
 800141e:	0018      	movs	r0, r3
 8001420:	f003 f8e6 	bl	80045f0 <HAL_TIM_Base_Init>
 8001424:	1e03      	subs	r3, r0, #0
 8001426:	d001      	beq.n	800142c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8001428:	f000 fc3e 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142c:	2118      	movs	r1, #24
 800142e:	187b      	adds	r3, r7, r1
 8001430:	2280      	movs	r2, #128	; 0x80
 8001432:	0152      	lsls	r2, r2, #5
 8001434:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001436:	187a      	adds	r2, r7, r1
 8001438:	4b38      	ldr	r3, [pc, #224]	; (800151c <MX_TIM1_Init+0x160>)
 800143a:	0011      	movs	r1, r2
 800143c:	0018      	movs	r0, r3
 800143e:	f003 fc3b 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 8001442:	1e03      	subs	r3, r0, #0
 8001444:	d001      	beq.n	800144a <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8001446:	f000 fc2f 	bl	8001ca8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 800144a:	4b34      	ldr	r3, [pc, #208]	; (800151c <MX_TIM1_Init+0x160>)
 800144c:	0018      	movs	r0, r3
 800144e:	f003 f91f 	bl	8004690 <HAL_TIM_IC_Init>
 8001452:	1e03      	subs	r3, r0, #0
 8001454:	d001      	beq.n	800145a <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001456:	f000 fc27 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2110      	movs	r1, #16
 800145c:	187b      	adds	r3, r7, r1
 800145e:	2200      	movs	r2, #0
 8001460:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001462:	187b      	adds	r3, r7, r1
 8001464:	2200      	movs	r2, #0
 8001466:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001468:	187a      	adds	r2, r7, r1
 800146a:	4b2c      	ldr	r3, [pc, #176]	; (800151c <MX_TIM1_Init+0x160>)
 800146c:	0011      	movs	r1, r2
 800146e:	0018      	movs	r0, r3
 8001470:	f003 ff8e 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 8001474:	1e03      	subs	r3, r0, #0
 8001476:	d001      	beq.n	800147c <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8001478:	f000 fc16 	bl	8001ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 800147c:	003b      	movs	r3, r7
 800147e:	2202      	movs	r2, #2
 8001480:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001482:	003b      	movs	r3, r7
 8001484:	2201      	movs	r2, #1
 8001486:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001488:	003b      	movs	r3, r7
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 800148e:	003b      	movs	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	0039      	movs	r1, r7
 8001496:	4b21      	ldr	r3, [pc, #132]	; (800151c <MX_TIM1_Init+0x160>)
 8001498:	2200      	movs	r2, #0
 800149a:	0018      	movs	r0, r3
 800149c:	f003 fb68 	bl	8004b70 <HAL_TIM_IC_ConfigChannel>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d001      	beq.n	80014a8 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 80014a4:	f000 fc00 	bl	8001ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014a8:	003b      	movs	r3, r7
 80014aa:	2200      	movs	r2, #0
 80014ac:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014ae:	003b      	movs	r3, r7
 80014b0:	2202      	movs	r2, #2
 80014b2:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80014b4:	0039      	movs	r1, r7
 80014b6:	4b19      	ldr	r3, [pc, #100]	; (800151c <MX_TIM1_Init+0x160>)
 80014b8:	2204      	movs	r2, #4
 80014ba:	0018      	movs	r0, r3
 80014bc:	f003 fb58 	bl	8004b70 <HAL_TIM_IC_ConfigChannel>
 80014c0:	1e03      	subs	r3, r0, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 80014c4:	f000 fbf0 	bl	8001ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 80014c8:	003b      	movs	r3, r7
 80014ca:	2202      	movs	r2, #2
 80014cc:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80014ce:	003b      	movs	r3, r7
 80014d0:	2201      	movs	r2, #1
 80014d2:	605a      	str	r2, [r3, #4]
  sConfigIC.ICFilter = 10;
 80014d4:	003b      	movs	r3, r7
 80014d6:	220a      	movs	r2, #10
 80014d8:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 80014da:	0039      	movs	r1, r7
 80014dc:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_TIM1_Init+0x160>)
 80014de:	2208      	movs	r2, #8
 80014e0:	0018      	movs	r0, r3
 80014e2:	f003 fb45 	bl	8004b70 <HAL_TIM_IC_ConfigChannel>
 80014e6:	1e03      	subs	r3, r0, #0
 80014e8:	d001      	beq.n	80014ee <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 80014ea:	f000 fbdd 	bl	8001ca8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80014ee:	003b      	movs	r3, r7
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 80014f4:	003b      	movs	r3, r7
 80014f6:	2202      	movs	r2, #2
 80014f8:	605a      	str	r2, [r3, #4]
  sConfigIC.ICFilter = 0;
 80014fa:	003b      	movs	r3, r7
 80014fc:	2200      	movs	r2, #0
 80014fe:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8001500:	0039      	movs	r1, r7
 8001502:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_TIM1_Init+0x160>)
 8001504:	220c      	movs	r2, #12
 8001506:	0018      	movs	r0, r3
 8001508:	f003 fb32 	bl	8004b70 <HAL_TIM_IC_ConfigChannel>
 800150c:	1e03      	subs	r3, r0, #0
 800150e:	d001      	beq.n	8001514 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8001510:	f000 fbca 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001514:	46c0      	nop			; (mov r8, r8)
 8001516:	46bd      	mov	sp, r7
 8001518:	b00a      	add	sp, #40	; 0x28
 800151a:	bd80      	pop	{r7, pc}
 800151c:	200000cc 	.word	0x200000cc
 8001520:	40012c00 	.word	0x40012c00
 8001524:	00009c40 	.word	0x00009c40

08001528 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b086      	sub	sp, #24
 800152c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800152e:	2308      	movs	r3, #8
 8001530:	18fb      	adds	r3, r7, r3
 8001532:	0018      	movs	r0, r3
 8001534:	2310      	movs	r3, #16
 8001536:	001a      	movs	r2, r3
 8001538:	2100      	movs	r1, #0
 800153a:	f004 ffc7 	bl	80064cc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	003b      	movs	r3, r7
 8001540:	0018      	movs	r0, r3
 8001542:	2308      	movs	r3, #8
 8001544:	001a      	movs	r2, r3
 8001546:	2100      	movs	r1, #0
 8001548:	f004 ffc0 	bl	80064cc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800154c:	4b1e      	ldr	r3, [pc, #120]	; (80015c8 <MX_TIM3_Init+0xa0>)
 800154e:	4a1f      	ldr	r2, [pc, #124]	; (80015cc <MX_TIM3_Init+0xa4>)
 8001550:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001552:	4b1d      	ldr	r3, [pc, #116]	; (80015c8 <MX_TIM3_Init+0xa0>)
 8001554:	2200      	movs	r2, #0
 8001556:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001558:	4b1b      	ldr	r3, [pc, #108]	; (80015c8 <MX_TIM3_Init+0xa0>)
 800155a:	2200      	movs	r2, #0
 800155c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800155e:	4b1a      	ldr	r3, [pc, #104]	; (80015c8 <MX_TIM3_Init+0xa0>)
 8001560:	4a1b      	ldr	r2, [pc, #108]	; (80015d0 <MX_TIM3_Init+0xa8>)
 8001562:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001564:	4b18      	ldr	r3, [pc, #96]	; (80015c8 <MX_TIM3_Init+0xa0>)
 8001566:	2200      	movs	r2, #0
 8001568:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800156a:	4b17      	ldr	r3, [pc, #92]	; (80015c8 <MX_TIM3_Init+0xa0>)
 800156c:	2200      	movs	r2, #0
 800156e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001570:	4b15      	ldr	r3, [pc, #84]	; (80015c8 <MX_TIM3_Init+0xa0>)
 8001572:	0018      	movs	r0, r3
 8001574:	f003 f83c 	bl	80045f0 <HAL_TIM_Base_Init>
 8001578:	1e03      	subs	r3, r0, #0
 800157a:	d001      	beq.n	8001580 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800157c:	f000 fb94 	bl	8001ca8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001580:	2108      	movs	r1, #8
 8001582:	187b      	adds	r3, r7, r1
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	0152      	lsls	r2, r2, #5
 8001588:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800158a:	187a      	adds	r2, r7, r1
 800158c:	4b0e      	ldr	r3, [pc, #56]	; (80015c8 <MX_TIM3_Init+0xa0>)
 800158e:	0011      	movs	r1, r2
 8001590:	0018      	movs	r0, r3
 8001592:	f003 fb91 	bl	8004cb8 <HAL_TIM_ConfigClockSource>
 8001596:	1e03      	subs	r3, r0, #0
 8001598:	d001      	beq.n	800159e <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 800159a:	f000 fb85 	bl	8001ca8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159e:	003b      	movs	r3, r7
 80015a0:	2200      	movs	r2, #0
 80015a2:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015a4:	003b      	movs	r3, r7
 80015a6:	2200      	movs	r2, #0
 80015a8:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015aa:	003a      	movs	r2, r7
 80015ac:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <MX_TIM3_Init+0xa0>)
 80015ae:	0011      	movs	r1, r2
 80015b0:	0018      	movs	r0, r3
 80015b2:	f003 feed 	bl	8005390 <HAL_TIMEx_MasterConfigSynchronization>
 80015b6:	1e03      	subs	r3, r0, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80015ba:	f000 fb75 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015be:	46c0      	nop			; (mov r8, r8)
 80015c0:	46bd      	mov	sp, r7
 80015c2:	b006      	add	sp, #24
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	46c0      	nop			; (mov r8, r8)
 80015c8:	20000114 	.word	0x20000114
 80015cc:	40000400 	.word	0x40000400
 80015d0:	0000ffff 	.word	0x0000ffff

080015d4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80015d8:	4b14      	ldr	r3, [pc, #80]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <MX_USART1_UART_Init+0x5c>)
 80015dc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 80015de:	4b13      	ldr	r3, [pc, #76]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015e0:	22fa      	movs	r2, #250	; 0xfa
 80015e2:	0292      	lsls	r2, r2, #10
 80015e4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80015e6:	4b11      	ldr	r3, [pc, #68]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80015ec:	4b0f      	ldr	r3, [pc, #60]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80015f2:	4b0e      	ldr	r3, [pc, #56]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80015f8:	4b0c      	ldr	r3, [pc, #48]	; (800162c <MX_USART1_UART_Init+0x58>)
 80015fa:	220c      	movs	r2, #12
 80015fc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fe:	4b0b      	ldr	r3, [pc, #44]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001600:	2200      	movs	r2, #0
 8001602:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001604:	4b09      	ldr	r3, [pc, #36]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001606:	2200      	movs	r2, #0
 8001608:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800160a:	4b08      	ldr	r3, [pc, #32]	; (800162c <MX_USART1_UART_Init+0x58>)
 800160c:	2200      	movs	r2, #0
 800160e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001612:	2200      	movs	r2, #0
 8001614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001616:	4b05      	ldr	r3, [pc, #20]	; (800162c <MX_USART1_UART_Init+0x58>)
 8001618:	0018      	movs	r0, r3
 800161a:	f003 ff1b 	bl	8005454 <HAL_UART_Init>
 800161e:	1e03      	subs	r3, r0, #0
 8001620:	d001      	beq.n	8001626 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001622:	f000 fb41 	bl	8001ca8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001626:	46c0      	nop			; (mov r8, r8)
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}
 800162c:	2000015c 	.word	0x2000015c
 8001630:	40013800 	.word	0x40013800

08001634 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001634:	b580      	push	{r7, lr}
 8001636:	b082      	sub	sp, #8
 8001638:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800163a:	4b0c      	ldr	r3, [pc, #48]	; (800166c <MX_DMA_Init+0x38>)
 800163c:	695a      	ldr	r2, [r3, #20]
 800163e:	4b0b      	ldr	r3, [pc, #44]	; (800166c <MX_DMA_Init+0x38>)
 8001640:	2101      	movs	r1, #1
 8001642:	430a      	orrs	r2, r1
 8001644:	615a      	str	r2, [r3, #20]
 8001646:	4b09      	ldr	r3, [pc, #36]	; (800166c <MX_DMA_Init+0x38>)
 8001648:	695b      	ldr	r3, [r3, #20]
 800164a:	2201      	movs	r2, #1
 800164c:	4013      	ands	r3, r2
 800164e:	607b      	str	r3, [r7, #4]
 8001650:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8001652:	2200      	movs	r2, #0
 8001654:	2100      	movs	r1, #0
 8001656:	200a      	movs	r0, #10
 8001658:	f001 fc1e 	bl	8002e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 800165c:	200a      	movs	r0, #10
 800165e:	f001 fc30 	bl	8002ec2 <HAL_NVIC_EnableIRQ>

}
 8001662:	46c0      	nop			; (mov r8, r8)
 8001664:	46bd      	mov	sp, r7
 8001666:	b002      	add	sp, #8
 8001668:	bd80      	pop	{r7, pc}
 800166a:	46c0      	nop			; (mov r8, r8)
 800166c:	40021000 	.word	0x40021000

08001670 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001670:	b590      	push	{r4, r7, lr}
 8001672:	b089      	sub	sp, #36	; 0x24
 8001674:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001676:	240c      	movs	r4, #12
 8001678:	193b      	adds	r3, r7, r4
 800167a:	0018      	movs	r0, r3
 800167c:	2314      	movs	r3, #20
 800167e:	001a      	movs	r2, r3
 8001680:	2100      	movs	r1, #0
 8001682:	f004 ff23 	bl	80064cc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001686:	4b4a      	ldr	r3, [pc, #296]	; (80017b0 <MX_GPIO_Init+0x140>)
 8001688:	695a      	ldr	r2, [r3, #20]
 800168a:	4b49      	ldr	r3, [pc, #292]	; (80017b0 <MX_GPIO_Init+0x140>)
 800168c:	2180      	movs	r1, #128	; 0x80
 800168e:	03c9      	lsls	r1, r1, #15
 8001690:	430a      	orrs	r2, r1
 8001692:	615a      	str	r2, [r3, #20]
 8001694:	4b46      	ldr	r3, [pc, #280]	; (80017b0 <MX_GPIO_Init+0x140>)
 8001696:	695a      	ldr	r2, [r3, #20]
 8001698:	2380      	movs	r3, #128	; 0x80
 800169a:	03db      	lsls	r3, r3, #15
 800169c:	4013      	ands	r3, r2
 800169e:	60bb      	str	r3, [r7, #8]
 80016a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80016a2:	4b43      	ldr	r3, [pc, #268]	; (80017b0 <MX_GPIO_Init+0x140>)
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	4b42      	ldr	r3, [pc, #264]	; (80017b0 <MX_GPIO_Init+0x140>)
 80016a8:	2180      	movs	r1, #128	; 0x80
 80016aa:	0289      	lsls	r1, r1, #10
 80016ac:	430a      	orrs	r2, r1
 80016ae:	615a      	str	r2, [r3, #20]
 80016b0:	4b3f      	ldr	r3, [pc, #252]	; (80017b0 <MX_GPIO_Init+0x140>)
 80016b2:	695a      	ldr	r2, [r3, #20]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	029b      	lsls	r3, r3, #10
 80016b8:	4013      	ands	r3, r2
 80016ba:	607b      	str	r3, [r7, #4]
 80016bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80016be:	4b3c      	ldr	r3, [pc, #240]	; (80017b0 <MX_GPIO_Init+0x140>)
 80016c0:	695a      	ldr	r2, [r3, #20]
 80016c2:	4b3b      	ldr	r3, [pc, #236]	; (80017b0 <MX_GPIO_Init+0x140>)
 80016c4:	2180      	movs	r1, #128	; 0x80
 80016c6:	02c9      	lsls	r1, r1, #11
 80016c8:	430a      	orrs	r2, r1
 80016ca:	615a      	str	r2, [r3, #20]
 80016cc:	4b38      	ldr	r3, [pc, #224]	; (80017b0 <MX_GPIO_Init+0x140>)
 80016ce:	695a      	ldr	r2, [r3, #20]
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	02db      	lsls	r3, r3, #11
 80016d4:	4013      	ands	r3, r2
 80016d6:	603b      	str	r3, [r7, #0]
 80016d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ISOL_Pin|OWR_Pin|LED_1_Pin|LED_2_Pin
 80016da:	4936      	ldr	r1, [pc, #216]	; (80017b4 <MX_GPIO_Init+0x144>)
 80016dc:	2390      	movs	r3, #144	; 0x90
 80016de:	05db      	lsls	r3, r3, #23
 80016e0:	2200      	movs	r2, #0
 80016e2:	0018      	movs	r0, r3
 80016e4:	f002 f9af 	bl	8003a46 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_1_Pin|OUT_1_2_Pin|REL_2_Pin|REL_3_Pin
 80016e8:	4b33      	ldr	r3, [pc, #204]	; (80017b8 <MX_GPIO_Init+0x148>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	21f8      	movs	r1, #248	; 0xf8
 80016ee:	0018      	movs	r0, r3
 80016f0:	f002 f9a9 	bl	8003a46 <HAL_GPIO_WritePin>
                          |REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ISOL_Pin LED_1_Pin LED_2_Pin PA15 */
  GPIO_InitStruct.Pin = ISOL_Pin|LED_1_Pin|LED_2_Pin|GPIO_PIN_15;
 80016f4:	193b      	adds	r3, r7, r4
 80016f6:	4a31      	ldr	r2, [pc, #196]	; (80017bc <MX_GPIO_Init+0x14c>)
 80016f8:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016fa:	193b      	adds	r3, r7, r4
 80016fc:	2201      	movs	r2, #1
 80016fe:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001700:	193b      	adds	r3, r7, r4
 8001702:	2200      	movs	r2, #0
 8001704:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	193b      	adds	r3, r7, r4
 8001708:	2200      	movs	r2, #0
 800170a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	193a      	adds	r2, r7, r4
 800170e:	2390      	movs	r3, #144	; 0x90
 8001710:	05db      	lsls	r3, r3, #23
 8001712:	0011      	movs	r1, r2
 8001714:	0018      	movs	r0, r3
 8001716:	f002 f809 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : OWR_Pin */
  GPIO_InitStruct.Pin = OWR_Pin;
 800171a:	193b      	adds	r3, r7, r4
 800171c:	2280      	movs	r2, #128	; 0x80
 800171e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001720:	193b      	adds	r3, r7, r4
 8001722:	2201      	movs	r2, #1
 8001724:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001726:	193b      	adds	r3, r7, r4
 8001728:	2200      	movs	r2, #0
 800172a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800172c:	193b      	adds	r3, r7, r4
 800172e:	2203      	movs	r2, #3
 8001730:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OWR_GPIO_Port, &GPIO_InitStruct);
 8001732:	193a      	adds	r2, r7, r4
 8001734:	2390      	movs	r3, #144	; 0x90
 8001736:	05db      	lsls	r3, r3, #23
 8001738:	0011      	movs	r1, r2
 800173a:	0018      	movs	r0, r3
 800173c:	f001 fff6 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8001740:	193b      	adds	r3, r7, r4
 8001742:	2202      	movs	r2, #2
 8001744:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001746:	193b      	adds	r3, r7, r4
 8001748:	2200      	movs	r2, #0
 800174a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800174c:	193b      	adds	r3, r7, r4
 800174e:	2200      	movs	r2, #0
 8001750:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8001752:	193b      	adds	r3, r7, r4
 8001754:	4a18      	ldr	r2, [pc, #96]	; (80017b8 <MX_GPIO_Init+0x148>)
 8001756:	0019      	movs	r1, r3
 8001758:	0010      	movs	r0, r2
 800175a:	f001 ffe7 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800175e:	193b      	adds	r3, r7, r4
 8001760:	2280      	movs	r2, #128	; 0x80
 8001762:	0092      	lsls	r2, r2, #2
 8001764:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001766:	193b      	adds	r3, r7, r4
 8001768:	2200      	movs	r2, #0
 800176a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800176c:	193b      	adds	r3, r7, r4
 800176e:	2200      	movs	r2, #0
 8001770:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001772:	193a      	adds	r2, r7, r4
 8001774:	2390      	movs	r3, #144	; 0x90
 8001776:	05db      	lsls	r3, r3, #23
 8001778:	0011      	movs	r1, r2
 800177a:	0018      	movs	r0, r3
 800177c:	f001 ffd6 	bl	800372c <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_1_Pin OUT_1_2_Pin REL_2_Pin REL_3_Pin
                           REL_4_Pin */
  GPIO_InitStruct.Pin = OUT_1_1_Pin|OUT_1_2_Pin|REL_2_Pin|REL_3_Pin
 8001780:	0021      	movs	r1, r4
 8001782:	187b      	adds	r3, r7, r1
 8001784:	22f8      	movs	r2, #248	; 0xf8
 8001786:	601a      	str	r2, [r3, #0]
                          |REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001788:	187b      	adds	r3, r7, r1
 800178a:	2201      	movs	r2, #1
 800178c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800178e:	187b      	adds	r3, r7, r1
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001794:	187b      	adds	r3, r7, r1
 8001796:	2200      	movs	r2, #0
 8001798:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800179a:	187b      	adds	r3, r7, r1
 800179c:	4a06      	ldr	r2, [pc, #24]	; (80017b8 <MX_GPIO_Init+0x148>)
 800179e:	0019      	movs	r1, r3
 80017a0:	0010      	movs	r0, r2
 80017a2:	f001 ffc3 	bl	800372c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80017a6:	46c0      	nop			; (mov r8, r8)
 80017a8:	46bd      	mov	sp, r7
 80017aa:	b009      	add	sp, #36	; 0x24
 80017ac:	bd90      	pop	{r4, r7, pc}
 80017ae:	46c0      	nop			; (mov r8, r8)
 80017b0:	40021000 	.word	0x40021000
 80017b4:	000098c0 	.word	0x000098c0
 80017b8:	48000400 	.word	0x48000400
 80017bc:	00009840 	.word	0x00009840

080017c0 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
     if (htim->Instance == TIM1)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4ad9      	ldr	r2, [pc, #868]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x374>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d000      	beq.n	80017d4 <HAL_TIM_IC_CaptureCallback+0x14>
 80017d2:	e092      	b.n	80018fa <HAL_TIM_IC_CaptureCallback+0x13a>
     {


         if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)&&(line_status==0))
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7f1b      	ldrb	r3, [r3, #28]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d140      	bne.n	800185e <HAL_TIM_IC_CaptureCallback+0x9e>
 80017dc:	4bd6      	ldr	r3, [pc, #856]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d13c      	bne.n	800185e <HAL_TIM_IC_CaptureCallback+0x9e>
         {

        	 period = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 80017e4:	4bd5      	ldr	r3, [pc, #852]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x37c>)
 80017e6:	2100      	movs	r1, #0
 80017e8:	0018      	movs	r0, r3
 80017ea:	f003 fb39 	bl	8004e60 <HAL_TIM_ReadCapturedValue>
 80017ee:	0003      	movs	r3, r0
 80017f0:	b29a      	uxth	r2, r3
 80017f2:	4bd3      	ldr	r3, [pc, #844]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x380>)
 80017f4:	801a      	strh	r2, [r3, #0]


        	 TIM1->CNT=0;
 80017f6:	4bcf      	ldr	r3, [pc, #828]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x374>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	625a      	str	r2, [r3, #36]	; 0x24
         if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)   {alarm=1;}
 80017fc:	4bd1      	ldr	r3, [pc, #836]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x384>)
 80017fe:	2102      	movs	r1, #2
 8001800:	0018      	movs	r0, r3
 8001802:	f002 f903 	bl	8003a0c <HAL_GPIO_ReadPin>
 8001806:	1e03      	subs	r3, r0, #0
 8001808:	d102      	bne.n	8001810 <HAL_TIM_IC_CaptureCallback+0x50>
 800180a:	4bcf      	ldr	r3, [pc, #828]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x388>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]
        	 OWR_OFF;LED1_OFF;LED2_OFF;
 8001810:	2390      	movs	r3, #144	; 0x90
 8001812:	05db      	lsls	r3, r3, #23
 8001814:	2200      	movs	r2, #0
 8001816:	2180      	movs	r1, #128	; 0x80
 8001818:	0018      	movs	r0, r3
 800181a:	f002 f914 	bl	8003a46 <HAL_GPIO_WritePin>
 800181e:	2380      	movs	r3, #128	; 0x80
 8001820:	0119      	lsls	r1, r3, #4
 8001822:	2390      	movs	r3, #144	; 0x90
 8001824:	05db      	lsls	r3, r3, #23
 8001826:	2200      	movs	r2, #0
 8001828:	0018      	movs	r0, r3
 800182a:	f002 f90c 	bl	8003a46 <HAL_GPIO_WritePin>
 800182e:	2380      	movs	r3, #128	; 0x80
 8001830:	0159      	lsls	r1, r3, #5
 8001832:	2390      	movs	r3, #144	; 0x90
 8001834:	05db      	lsls	r3, r3, #23
 8001836:	2200      	movs	r2, #0
 8001838:	0018      	movs	r0, r3
 800183a:	f002 f904 	bl	8003a46 <HAL_GPIO_WritePin>
        	 if((count==192)||(period>=100)){
 800183e:	4bc3      	ldr	r3, [pc, #780]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001840:	781b      	ldrb	r3, [r3, #0]
 8001842:	2bc0      	cmp	r3, #192	; 0xc0
 8001844:	d003      	beq.n	800184e <HAL_TIM_IC_CaptureCallback+0x8e>
 8001846:	4bbe      	ldr	r3, [pc, #760]	; (8001b40 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	2b63      	cmp	r3, #99	; 0x63
 800184c:	d904      	bls.n	8001858 <HAL_TIM_IC_CaptureCallback+0x98>
        		 Print_test();
 800184e:	f7fe fd75 	bl	800033c <Print_test>
        		 count=0;}
 8001852:	4bbe      	ldr	r3, [pc, #760]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

        	 line_status=1;
 8001858:	4bb7      	ldr	r3, [pc, #732]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 800185a:	2201      	movs	r2, #1
 800185c:	701a      	strb	r2, [r3, #0]
        	 }


         if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)&&(line_status==0))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	7f1b      	ldrb	r3, [r3, #28]
 8001862:	2b04      	cmp	r3, #4
 8001864:	d147      	bne.n	80018f6 <HAL_TIM_IC_CaptureCallback+0x136>
 8001866:	4bb4      	ldr	r3, [pc, #720]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	2b00      	cmp	r3, #0
 800186c:	d143      	bne.n	80018f6 <HAL_TIM_IC_CaptureCallback+0x136>
                  {
                 	 period_x = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 800186e:	4bb3      	ldr	r3, [pc, #716]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001870:	2108      	movs	r1, #8
 8001872:	0018      	movs	r0, r3
 8001874:	f003 faf4 	bl	8004e60 <HAL_TIM_ReadCapturedValue>
 8001878:	0003      	movs	r3, r0
 800187a:	b29a      	uxth	r2, r3
 800187c:	4bb4      	ldr	r3, [pc, #720]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x390>)
 800187e:	801a      	strh	r2, [r3, #0]

                 	 TIM1->CNT=0;
 8001880:	4bac      	ldr	r3, [pc, #688]	; (8001b34 <HAL_TIM_IC_CaptureCallback+0x374>)
 8001882:	2200      	movs	r2, #0
 8001884:	625a      	str	r2, [r3, #36]	; 0x24
                  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)   {alarm=1;}
 8001886:	4baf      	ldr	r3, [pc, #700]	; (8001b44 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001888:	2102      	movs	r1, #2
 800188a:	0018      	movs	r0, r3
 800188c:	f002 f8be 	bl	8003a0c <HAL_GPIO_ReadPin>
 8001890:	1e03      	subs	r3, r0, #0
 8001892:	d102      	bne.n	800189a <HAL_TIM_IC_CaptureCallback+0xda>
 8001894:	4bac      	ldr	r3, [pc, #688]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001896:	2201      	movs	r2, #1
 8001898:	701a      	strb	r2, [r3, #0]
                 	 OWR_OFF;LED1_OFF;LED2_OFF;
 800189a:	2390      	movs	r3, #144	; 0x90
 800189c:	05db      	lsls	r3, r3, #23
 800189e:	2200      	movs	r2, #0
 80018a0:	2180      	movs	r1, #128	; 0x80
 80018a2:	0018      	movs	r0, r3
 80018a4:	f002 f8cf 	bl	8003a46 <HAL_GPIO_WritePin>
 80018a8:	2380      	movs	r3, #128	; 0x80
 80018aa:	0119      	lsls	r1, r3, #4
 80018ac:	2390      	movs	r3, #144	; 0x90
 80018ae:	05db      	lsls	r3, r3, #23
 80018b0:	2200      	movs	r2, #0
 80018b2:	0018      	movs	r0, r3
 80018b4:	f002 f8c7 	bl	8003a46 <HAL_GPIO_WritePin>
 80018b8:	2380      	movs	r3, #128	; 0x80
 80018ba:	0159      	lsls	r1, r3, #5
 80018bc:	2390      	movs	r3, #144	; 0x90
 80018be:	05db      	lsls	r3, r3, #23
 80018c0:	2200      	movs	r2, #0
 80018c2:	0018      	movs	r0, r3
 80018c4:	f002 f8bf 	bl	8003a46 <HAL_GPIO_WritePin>
                 	 if((count==192)||(period_x>=100)){
 80018c8:	4ba0      	ldr	r3, [pc, #640]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2bc0      	cmp	r3, #192	; 0xc0
 80018ce:	d003      	beq.n	80018d8 <HAL_TIM_IC_CaptureCallback+0x118>
 80018d0:	4b9f      	ldr	r3, [pc, #636]	; (8001b50 <HAL_TIM_IC_CaptureCallback+0x390>)
 80018d2:	881b      	ldrh	r3, [r3, #0]
 80018d4:	2b63      	cmp	r3, #99	; 0x63
 80018d6:	d904      	bls.n	80018e2 <HAL_TIM_IC_CaptureCallback+0x122>
                 		Print_test();
 80018d8:	f7fe fd30 	bl	800033c <Print_test>
                 		 count=0;
 80018dc:	4b9b      	ldr	r3, [pc, #620]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]

                 	 }
                 	 ISOL_ON;
 80018e2:	2390      	movs	r3, #144	; 0x90
 80018e4:	05db      	lsls	r3, r3, #23
 80018e6:	2201      	movs	r2, #1
 80018e8:	2140      	movs	r1, #64	; 0x40
 80018ea:	0018      	movs	r0, r3
 80018ec:	f002 f8ab 	bl	8003a46 <HAL_GPIO_WritePin>
                 	 line_status=2;
 80018f0:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 80018f2:	2202      	movs	r2, #2
 80018f4:	701a      	strb	r2, [r3, #0]
                 	 }


         HAL_PWR_EnableSleepOnExit ();
 80018f6:	f002 f941 	bl	8003b7c <HAL_PWR_EnableSleepOnExit>
         }



          if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // FALLING с HIGH на LOW
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	7f1b      	ldrb	r3, [r3, #28]
 80018fe:	2b02      	cmp	r3, #2
 8001900:	d000      	beq.n	8001904 <HAL_TIM_IC_CaptureCallback+0x144>
 8001902:	e0c9      	b.n	8001a98 <HAL_TIM_IC_CaptureCallback+0x2d8>
                        { pulse = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8001904:	4b8d      	ldr	r3, [pc, #564]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001906:	2104      	movs	r1, #4
 8001908:	0018      	movs	r0, r3
 800190a:	f003 faa9 	bl	8004e60 <HAL_TIM_ReadCapturedValue>
 800190e:	0003      	movs	r3, r0
 8001910:	b29a      	uxth	r2, r3
 8001912:	4b90      	ldr	r3, [pc, #576]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001914:	801a      	strh	r2, [r3, #0]
                          HAL_IWDG_Refresh(&hiwdg);
 8001916:	4b90      	ldr	r3, [pc, #576]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x398>)
 8001918:	0018      	movs	r0, r3
 800191a:	f002 f903 	bl	8003b24 <HAL_IWDG_Refresh>

                          if(line_status==1){ISOL_OFF};
 800191e:	4b86      	ldr	r3, [pc, #536]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d106      	bne.n	8001934 <HAL_TIM_IC_CaptureCallback+0x174>
 8001926:	2390      	movs	r3, #144	; 0x90
 8001928:	05db      	lsls	r3, r3, #23
 800192a:	2200      	movs	r2, #0
 800192c:	2140      	movs	r1, #64	; 0x40
 800192e:	0018      	movs	r0, r3
 8001930:	f002 f889 	bl	8003a46 <HAL_GPIO_WritePin>
                          line_status=0;
 8001934:	4b80      	ldr	r3, [pc, #512]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001936:	2200      	movs	r2, #0
 8001938:	701a      	strb	r2, [r3, #0]
                          if((ADC_read(0))>=150){alarm=0;}
 800193a:	2000      	movs	r0, #0
 800193c:	f7ff fb62 	bl	8001004 <ADC_read>
 8001940:	0003      	movs	r3, r0
 8001942:	2b95      	cmp	r3, #149	; 0x95
 8001944:	d902      	bls.n	800194c <HAL_TIM_IC_CaptureCallback+0x18c>
 8001946:	4b80      	ldr	r3, [pc, #512]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001948:	2200      	movs	r2, #0
 800194a:	701a      	strb	r2, [r3, #0]
                          if((ADC_read(0))<150){alarm=1;}
 800194c:	2000      	movs	r0, #0
 800194e:	f7ff fb59 	bl	8001004 <ADC_read>
 8001952:	0003      	movs	r3, r0
 8001954:	2b95      	cmp	r3, #149	; 0x95
 8001956:	d802      	bhi.n	800195e <HAL_TIM_IC_CaptureCallback+0x19e>
 8001958:	4b7b      	ldr	r3, [pc, #492]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x388>)
 800195a:	2201      	movs	r2, #1
 800195c:	701a      	strb	r2, [r3, #0]

                        OWR_OFF;LED2_OFF;
 800195e:	2390      	movs	r3, #144	; 0x90
 8001960:	05db      	lsls	r3, r3, #23
 8001962:	2200      	movs	r2, #0
 8001964:	2180      	movs	r1, #128	; 0x80
 8001966:	0018      	movs	r0, r3
 8001968:	f002 f86d 	bl	8003a46 <HAL_GPIO_WritePin>
 800196c:	2380      	movs	r3, #128	; 0x80
 800196e:	0159      	lsls	r1, r3, #5
 8001970:	2390      	movs	r3, #144	; 0x90
 8001972:	05db      	lsls	r3, r3, #23
 8001974:	2200      	movs	r2, #0
 8001976:	0018      	movs	r0, r3
 8001978:	f002 f865 	bl	8003a46 <HAL_GPIO_WritePin>

             if((pulse>55)&&(pulse<60))  {count=0;rcvd[count]=2;rcv_addres=0;directive=0;}
 800197c:	4b75      	ldr	r3, [pc, #468]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 800197e:	881b      	ldrh	r3, [r3, #0]
 8001980:	2b37      	cmp	r3, #55	; 0x37
 8001982:	d912      	bls.n	80019aa <HAL_TIM_IC_CaptureCallback+0x1ea>
 8001984:	4b73      	ldr	r3, [pc, #460]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001986:	881b      	ldrh	r3, [r3, #0]
 8001988:	2b3b      	cmp	r3, #59	; 0x3b
 800198a:	d80e      	bhi.n	80019aa <HAL_TIM_IC_CaptureCallback+0x1ea>
 800198c:	4b6f      	ldr	r3, [pc, #444]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 800198e:	2200      	movs	r2, #0
 8001990:	701a      	strb	r2, [r3, #0]
 8001992:	4b6e      	ldr	r3, [pc, #440]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001994:	781b      	ldrb	r3, [r3, #0]
 8001996:	001a      	movs	r2, r3
 8001998:	4b70      	ldr	r3, [pc, #448]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 800199a:	2102      	movs	r1, #2
 800199c:	5499      	strb	r1, [r3, r2]
 800199e:	4b70      	ldr	r3, [pc, #448]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	701a      	strb	r2, [r3, #0]
 80019a4:	4b6f      	ldr	r3, [pc, #444]	; (8001b64 <HAL_TIM_IC_CaptureCallback+0x3a4>)
 80019a6:	2200      	movs	r2, #0
 80019a8:	701a      	strb	r2, [r3, #0]
        	 if((pulse>36)&&(pulse<40))  rcvd[count]=1;
 80019aa:	4b6a      	ldr	r3, [pc, #424]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 80019ac:	881b      	ldrh	r3, [r3, #0]
 80019ae:	2b24      	cmp	r3, #36	; 0x24
 80019b0:	d909      	bls.n	80019c6 <HAL_TIM_IC_CaptureCallback+0x206>
 80019b2:	4b68      	ldr	r3, [pc, #416]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	2b27      	cmp	r3, #39	; 0x27
 80019b8:	d805      	bhi.n	80019c6 <HAL_TIM_IC_CaptureCallback+0x206>
 80019ba:	4b64      	ldr	r3, [pc, #400]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	001a      	movs	r2, r3
 80019c0:	4b66      	ldr	r3, [pc, #408]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 80019c2:	2101      	movs	r1, #1
 80019c4:	5499      	strb	r1, [r3, r2]
        	 if((pulse>16)&&(pulse<21))  rcvd[count]=0;
 80019c6:	4b63      	ldr	r3, [pc, #396]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 80019c8:	881b      	ldrh	r3, [r3, #0]
 80019ca:	2b10      	cmp	r3, #16
 80019cc:	d909      	bls.n	80019e2 <HAL_TIM_IC_CaptureCallback+0x222>
 80019ce:	4b61      	ldr	r3, [pc, #388]	; (8001b54 <HAL_TIM_IC_CaptureCallback+0x394>)
 80019d0:	881b      	ldrh	r3, [r3, #0]
 80019d2:	2b14      	cmp	r3, #20
 80019d4:	d805      	bhi.n	80019e2 <HAL_TIM_IC_CaptureCallback+0x222>
 80019d6:	4b5d      	ldr	r3, [pc, #372]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 80019d8:	781b      	ldrb	r3, [r3, #0]
 80019da:	001a      	movs	r2, r3
 80019dc:	4b5f      	ldr	r3, [pc, #380]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 80019de:	2100      	movs	r1, #0
 80019e0:	5499      	strb	r1, [r3, r2]
        	 if (count<5){Quick_protocol();}
 80019e2:	4b5a      	ldr	r3, [pc, #360]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	d801      	bhi.n	80019ee <HAL_TIM_IC_CaptureCallback+0x22e>
 80019ea:	f7fe fdb3 	bl	8000554 <Quick_protocol>

        	 //if (count==14){Print_test();}
        	 if (count==8)
 80019ee:	4b57      	ldr	r3, [pc, #348]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 80019f0:	781b      	ldrb	r3, [r3, #0]
 80019f2:	2b08      	cmp	r3, #8
 80019f4:	d13e      	bne.n	8001a74 <HAL_TIM_IC_CaptureCallback+0x2b4>
        	        	    {
        	        	      rcv_addres=0;
 80019f6:	4b5a      	ldr	r3, [pc, #360]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	701a      	strb	r2, [r3, #0]
        	        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]);
 80019fc:	4b57      	ldr	r3, [pc, #348]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 80019fe:	785b      	ldrb	r3, [r3, #1]
 8001a00:	01db      	lsls	r3, r3, #7
 8001a02:	b25a      	sxtb	r2, r3
 8001a04:	4b55      	ldr	r3, [pc, #340]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a06:	789b      	ldrb	r3, [r3, #2]
 8001a08:	019b      	lsls	r3, r3, #6
 8001a0a:	b25b      	sxtb	r3, r3
 8001a0c:	4313      	orrs	r3, r2
 8001a0e:	b25a      	sxtb	r2, r3
 8001a10:	4b52      	ldr	r3, [pc, #328]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a12:	78db      	ldrb	r3, [r3, #3]
 8001a14:	015b      	lsls	r3, r3, #5
 8001a16:	b25b      	sxtb	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b25a      	sxtb	r2, r3
 8001a1c:	4b4f      	ldr	r3, [pc, #316]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a1e:	791b      	ldrb	r3, [r3, #4]
 8001a20:	011b      	lsls	r3, r3, #4
 8001a22:	b25b      	sxtb	r3, r3
 8001a24:	4313      	orrs	r3, r2
 8001a26:	b25a      	sxtb	r2, r3
 8001a28:	4b4c      	ldr	r3, [pc, #304]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a2a:	795b      	ldrb	r3, [r3, #5]
 8001a2c:	00db      	lsls	r3, r3, #3
 8001a2e:	b25b      	sxtb	r3, r3
 8001a30:	4313      	orrs	r3, r2
 8001a32:	b25a      	sxtb	r2, r3
 8001a34:	4b49      	ldr	r3, [pc, #292]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a36:	799b      	ldrb	r3, [r3, #6]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	b25b      	sxtb	r3, r3
 8001a3c:	4313      	orrs	r3, r2
 8001a3e:	b25a      	sxtb	r2, r3
 8001a40:	4b46      	ldr	r3, [pc, #280]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a42:	79db      	ldrb	r3, [r3, #7]
 8001a44:	005b      	lsls	r3, r3, #1
 8001a46:	b25b      	sxtb	r3, r3
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	b25a      	sxtb	r2, r3
 8001a4c:	4b43      	ldr	r3, [pc, #268]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001a4e:	7a1b      	ldrb	r3, [r3, #8]
 8001a50:	b25b      	sxtb	r3, r3
 8001a52:	4313      	orrs	r3, r2
 8001a54:	b25a      	sxtb	r2, r3
 8001a56:	4b42      	ldr	r3, [pc, #264]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	4313      	orrs	r3, r2
 8001a5e:	b25b      	sxtb	r3, r3
 8001a60:	b2da      	uxtb	r2, r3
 8001a62:	4b3f      	ldr	r3, [pc, #252]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001a64:	701a      	strb	r2, [r3, #0]
        	        	      if(rcv_addres==0){addres_call=0;}
 8001a66:	4b3e      	ldr	r3, [pc, #248]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001a68:	781b      	ldrb	r3, [r3, #0]
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d102      	bne.n	8001a74 <HAL_TIM_IC_CaptureCallback+0x2b4>
 8001a6e:	4b3e      	ldr	r3, [pc, #248]	; (8001b68 <HAL_TIM_IC_CaptureCallback+0x3a8>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	701a      	strb	r2, [r3, #0]

        	        	    }
        	 if((rcv_addres==addres)&&(count>8)){Protocol();}
 8001a74:	4b3a      	ldr	r3, [pc, #232]	; (8001b60 <HAL_TIM_IC_CaptureCallback+0x3a0>)
 8001a76:	781a      	ldrb	r2, [r3, #0]
 8001a78:	4b3c      	ldr	r3, [pc, #240]	; (8001b6c <HAL_TIM_IC_CaptureCallback+0x3ac>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d105      	bne.n	8001a8c <HAL_TIM_IC_CaptureCallback+0x2cc>
 8001a80:	4b32      	ldr	r3, [pc, #200]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001a82:	781b      	ldrb	r3, [r3, #0]
 8001a84:	2b08      	cmp	r3, #8
 8001a86:	d901      	bls.n	8001a8c <HAL_TIM_IC_CaptureCallback+0x2cc>
 8001a88:	f7fe fdb0 	bl	80005ec <Protocol>


        	  count++;
 8001a8c:	4b2f      	ldr	r3, [pc, #188]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	3301      	adds	r3, #1
 8001a92:	b2da      	uxtb	r2, r3
 8001a94:	4b2d      	ldr	r3, [pc, #180]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001a96:	701a      	strb	r2, [r3, #0]

                        }



          if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)&&(line_status!=0)) // FALLING с HIGH на LOW
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	7f1b      	ldrb	r3, [r3, #28]
 8001a9c:	2b08      	cmp	r3, #8
 8001a9e:	d000      	beq.n	8001aa2 <HAL_TIM_IC_CaptureCallback+0x2e2>
 8001aa0:	e0e5      	b.n	8001c6e <HAL_TIM_IC_CaptureCallback+0x4ae>
 8001aa2:	4b25      	ldr	r3, [pc, #148]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d100      	bne.n	8001aac <HAL_TIM_IC_CaptureCallback+0x2ec>
 8001aaa:	e0e0      	b.n	8001c6e <HAL_TIM_IC_CaptureCallback+0x4ae>
                                 {
                                   pulse_x = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 8001aac:	4b23      	ldr	r3, [pc, #140]	; (8001b3c <HAL_TIM_IC_CaptureCallback+0x37c>)
 8001aae:	210c      	movs	r1, #12
 8001ab0:	0018      	movs	r0, r3
 8001ab2:	f003 f9d5 	bl	8004e60 <HAL_TIM_ReadCapturedValue>
 8001ab6:	0003      	movs	r3, r0
 8001ab8:	b29a      	uxth	r2, r3
 8001aba:	4b2d      	ldr	r3, [pc, #180]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001abc:	801a      	strh	r2, [r3, #0]
                                   HAL_IWDG_Refresh(&hiwdg);
 8001abe:	4b26      	ldr	r3, [pc, #152]	; (8001b58 <HAL_TIM_IC_CaptureCallback+0x398>)
 8001ac0:	0018      	movs	r0, r3
 8001ac2:	f002 f82f 	bl	8003b24 <HAL_IWDG_Refresh>

                                   line_status=0;
 8001ac6:	4b1c      	ldr	r3, [pc, #112]	; (8001b38 <HAL_TIM_IC_CaptureCallback+0x378>)
 8001ac8:	2200      	movs	r2, #0
 8001aca:	701a      	strb	r2, [r3, #0]
                                 OWR_OFF;LED2_OFF;
 8001acc:	2390      	movs	r3, #144	; 0x90
 8001ace:	05db      	lsls	r3, r3, #23
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	2180      	movs	r1, #128	; 0x80
 8001ad4:	0018      	movs	r0, r3
 8001ad6:	f001 ffb6 	bl	8003a46 <HAL_GPIO_WritePin>
 8001ada:	2380      	movs	r3, #128	; 0x80
 8001adc:	0159      	lsls	r1, r3, #5
 8001ade:	2390      	movs	r3, #144	; 0x90
 8001ae0:	05db      	lsls	r3, r3, #23
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	0018      	movs	r0, r3
 8001ae6:	f001 ffae 	bl	8003a46 <HAL_GPIO_WritePin>
                             if((ADC_read(0))>=150){alarm=0;}
 8001aea:	2000      	movs	r0, #0
 8001aec:	f7ff fa8a 	bl	8001004 <ADC_read>
 8001af0:	0003      	movs	r3, r0
 8001af2:	2b95      	cmp	r3, #149	; 0x95
 8001af4:	d902      	bls.n	8001afc <HAL_TIM_IC_CaptureCallback+0x33c>
 8001af6:	4b14      	ldr	r3, [pc, #80]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	701a      	strb	r2, [r3, #0]
                             if((ADC_read(0))<150){alarm=1;}
 8001afc:	2000      	movs	r0, #0
 8001afe:	f7ff fa81 	bl	8001004 <ADC_read>
 8001b02:	0003      	movs	r3, r0
 8001b04:	2b95      	cmp	r3, #149	; 0x95
 8001b06:	d802      	bhi.n	8001b0e <HAL_TIM_IC_CaptureCallback+0x34e>
 8001b08:	4b0f      	ldr	r3, [pc, #60]	; (8001b48 <HAL_TIM_IC_CaptureCallback+0x388>)
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	701a      	strb	r2, [r3, #0]



                      if((pulse_x>55)&&(pulse_x<60))  {count=0;rcvd[count]=2;rcv_addres=0;directive=0;}
 8001b0e:	4b18      	ldr	r3, [pc, #96]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001b10:	881b      	ldrh	r3, [r3, #0]
 8001b12:	2b37      	cmp	r3, #55	; 0x37
 8001b14:	d934      	bls.n	8001b80 <HAL_TIM_IC_CaptureCallback+0x3c0>
 8001b16:	4b16      	ldr	r3, [pc, #88]	; (8001b70 <HAL_TIM_IC_CaptureCallback+0x3b0>)
 8001b18:	881b      	ldrh	r3, [r3, #0]
 8001b1a:	2b3b      	cmp	r3, #59	; 0x3b
 8001b1c:	d830      	bhi.n	8001b80 <HAL_TIM_IC_CaptureCallback+0x3c0>
 8001b1e:	4b0b      	ldr	r3, [pc, #44]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
 8001b24:	4b09      	ldr	r3, [pc, #36]	; (8001b4c <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001b26:	781b      	ldrb	r3, [r3, #0]
 8001b28:	001a      	movs	r2, r3
 8001b2a:	4b0c      	ldr	r3, [pc, #48]	; (8001b5c <HAL_TIM_IC_CaptureCallback+0x39c>)
 8001b2c:	2102      	movs	r1, #2
 8001b2e:	5499      	strb	r1, [r3, r2]
 8001b30:	e020      	b.n	8001b74 <HAL_TIM_IC_CaptureCallback+0x3b4>
 8001b32:	46c0      	nop			; (mov r8, r8)
 8001b34:	40012c00 	.word	0x40012c00
 8001b38:	20000360 	.word	0x20000360
 8001b3c:	200000cc 	.word	0x200000cc
 8001b40:	2000022a 	.word	0x2000022a
 8001b44:	48000400 	.word	0x48000400
 8001b48:	20000232 	.word	0x20000232
 8001b4c:	20000354 	.word	0x20000354
 8001b50:	2000022c 	.word	0x2000022c
 8001b54:	2000022e 	.word	0x2000022e
 8001b58:	200000bc 	.word	0x200000bc
 8001b5c:	2000025c 	.word	0x2000025c
 8001b60:	20000355 	.word	0x20000355
 8001b64:	20000357 	.word	0x20000357
 8001b68:	20000356 	.word	0x20000356
 8001b6c:	20000000 	.word	0x20000000
 8001b70:	20000230 	.word	0x20000230
 8001b74:	4b41      	ldr	r3, [pc, #260]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	701a      	strb	r2, [r3, #0]
 8001b7a:	4b41      	ldr	r3, [pc, #260]	; (8001c80 <HAL_TIM_IC_CaptureCallback+0x4c0>)
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	701a      	strb	r2, [r3, #0]
                 	 if((pulse_x>36)&&(pulse_x<40))  rcvd[count]=1;
 8001b80:	4b40      	ldr	r3, [pc, #256]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001b82:	881b      	ldrh	r3, [r3, #0]
 8001b84:	2b24      	cmp	r3, #36	; 0x24
 8001b86:	d909      	bls.n	8001b9c <HAL_TIM_IC_CaptureCallback+0x3dc>
 8001b88:	4b3e      	ldr	r3, [pc, #248]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001b8a:	881b      	ldrh	r3, [r3, #0]
 8001b8c:	2b27      	cmp	r3, #39	; 0x27
 8001b8e:	d805      	bhi.n	8001b9c <HAL_TIM_IC_CaptureCallback+0x3dc>
 8001b90:	4b3d      	ldr	r3, [pc, #244]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001b92:	781b      	ldrb	r3, [r3, #0]
 8001b94:	001a      	movs	r2, r3
 8001b96:	4b3d      	ldr	r3, [pc, #244]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001b98:	2101      	movs	r1, #1
 8001b9a:	5499      	strb	r1, [r3, r2]
                 	 if((pulse_x>16)&&(pulse_x<21))  rcvd[count]=0;
 8001b9c:	4b39      	ldr	r3, [pc, #228]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	2b10      	cmp	r3, #16
 8001ba2:	d909      	bls.n	8001bb8 <HAL_TIM_IC_CaptureCallback+0x3f8>
 8001ba4:	4b37      	ldr	r3, [pc, #220]	; (8001c84 <HAL_TIM_IC_CaptureCallback+0x4c4>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	2b14      	cmp	r3, #20
 8001baa:	d805      	bhi.n	8001bb8 <HAL_TIM_IC_CaptureCallback+0x3f8>
 8001bac:	4b36      	ldr	r3, [pc, #216]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	001a      	movs	r2, r3
 8001bb2:	4b36      	ldr	r3, [pc, #216]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	5499      	strb	r1, [r3, r2]
                 	 if (count<5){Quick_protocol();}
 8001bb8:	4b33      	ldr	r3, [pc, #204]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001bba:	781b      	ldrb	r3, [r3, #0]
 8001bbc:	2b04      	cmp	r3, #4
 8001bbe:	d801      	bhi.n	8001bc4 <HAL_TIM_IC_CaptureCallback+0x404>
 8001bc0:	f7fe fcc8 	bl	8000554 <Quick_protocol>



                 	 if (count==8)
 8001bc4:	4b30      	ldr	r3, [pc, #192]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	2b08      	cmp	r3, #8
 8001bca:	d13e      	bne.n	8001c4a <HAL_TIM_IC_CaptureCallback+0x48a>
                 	        	    {
                 	        	      rcv_addres=0;
 8001bcc:	4b2b      	ldr	r3, [pc, #172]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8001bce:	2200      	movs	r2, #0
 8001bd0:	701a      	strb	r2, [r3, #0]
                 	        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]);
 8001bd2:	4b2e      	ldr	r3, [pc, #184]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001bd4:	785b      	ldrb	r3, [r3, #1]
 8001bd6:	01db      	lsls	r3, r3, #7
 8001bd8:	b25a      	sxtb	r2, r3
 8001bda:	4b2c      	ldr	r3, [pc, #176]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001bdc:	789b      	ldrb	r3, [r3, #2]
 8001bde:	019b      	lsls	r3, r3, #6
 8001be0:	b25b      	sxtb	r3, r3
 8001be2:	4313      	orrs	r3, r2
 8001be4:	b25a      	sxtb	r2, r3
 8001be6:	4b29      	ldr	r3, [pc, #164]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001be8:	78db      	ldrb	r3, [r3, #3]
 8001bea:	015b      	lsls	r3, r3, #5
 8001bec:	b25b      	sxtb	r3, r3
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	4b26      	ldr	r3, [pc, #152]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001bf4:	791b      	ldrb	r3, [r3, #4]
 8001bf6:	011b      	lsls	r3, r3, #4
 8001bf8:	b25b      	sxtb	r3, r3
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	b25a      	sxtb	r2, r3
 8001bfe:	4b23      	ldr	r3, [pc, #140]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001c00:	795b      	ldrb	r3, [r3, #5]
 8001c02:	00db      	lsls	r3, r3, #3
 8001c04:	b25b      	sxtb	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b25a      	sxtb	r2, r3
 8001c0a:	4b20      	ldr	r3, [pc, #128]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001c0c:	799b      	ldrb	r3, [r3, #6]
 8001c0e:	009b      	lsls	r3, r3, #2
 8001c10:	b25b      	sxtb	r3, r3
 8001c12:	4313      	orrs	r3, r2
 8001c14:	b25a      	sxtb	r2, r3
 8001c16:	4b1d      	ldr	r3, [pc, #116]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001c18:	79db      	ldrb	r3, [r3, #7]
 8001c1a:	005b      	lsls	r3, r3, #1
 8001c1c:	b25b      	sxtb	r3, r3
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	b25a      	sxtb	r2, r3
 8001c22:	4b1a      	ldr	r3, [pc, #104]	; (8001c8c <HAL_TIM_IC_CaptureCallback+0x4cc>)
 8001c24:	7a1b      	ldrb	r3, [r3, #8]
 8001c26:	b25b      	sxtb	r3, r3
 8001c28:	4313      	orrs	r3, r2
 8001c2a:	b25a      	sxtb	r2, r3
 8001c2c:	4b13      	ldr	r3, [pc, #76]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8001c2e:	781b      	ldrb	r3, [r3, #0]
 8001c30:	b25b      	sxtb	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	b2da      	uxtb	r2, r3
 8001c38:	4b10      	ldr	r3, [pc, #64]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8001c3a:	701a      	strb	r2, [r3, #0]
                 	        	      if(rcv_addres==0){addres_call=0;}
 8001c3c:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <HAL_TIM_IC_CaptureCallback+0x48a>
 8001c44:	4b12      	ldr	r3, [pc, #72]	; (8001c90 <HAL_TIM_IC_CaptureCallback+0x4d0>)
 8001c46:	2200      	movs	r2, #0
 8001c48:	701a      	strb	r2, [r3, #0]

                 	        	    }
                 	 if((rcv_addres==addres)&&(count>8)){Protocol();}
 8001c4a:	4b0c      	ldr	r3, [pc, #48]	; (8001c7c <HAL_TIM_IC_CaptureCallback+0x4bc>)
 8001c4c:	781a      	ldrb	r2, [r3, #0]
 8001c4e:	4b11      	ldr	r3, [pc, #68]	; (8001c94 <HAL_TIM_IC_CaptureCallback+0x4d4>)
 8001c50:	781b      	ldrb	r3, [r3, #0]
 8001c52:	429a      	cmp	r2, r3
 8001c54:	d105      	bne.n	8001c62 <HAL_TIM_IC_CaptureCallback+0x4a2>
 8001c56:	4b0c      	ldr	r3, [pc, #48]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b08      	cmp	r3, #8
 8001c5c:	d901      	bls.n	8001c62 <HAL_TIM_IC_CaptureCallback+0x4a2>
 8001c5e:	f7fe fcc5 	bl	80005ec <Protocol>

                 //	if (count==14){Print_test();}
                 	  count++;
 8001c62:	4b09      	ldr	r3, [pc, #36]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b2da      	uxtb	r2, r3
 8001c6a:	4b07      	ldr	r3, [pc, #28]	; (8001c88 <HAL_TIM_IC_CaptureCallback+0x4c8>)
 8001c6c:	701a      	strb	r2, [r3, #0]
                                 }

          HAL_PWR_EnableSleepOnExit ();
 8001c6e:	f001 ff85 	bl	8003b7c <HAL_PWR_EnableSleepOnExit>
     }
 8001c72:	46c0      	nop			; (mov r8, r8)
 8001c74:	46bd      	mov	sp, r7
 8001c76:	b002      	add	sp, #8
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	46c0      	nop			; (mov r8, r8)
 8001c7c:	20000355 	.word	0x20000355
 8001c80:	20000357 	.word	0x20000357
 8001c84:	20000230 	.word	0x20000230
 8001c88:	20000354 	.word	0x20000354
 8001c8c:	2000025c 	.word	0x2000025c
 8001c90:	20000356 	.word	0x20000356
 8001c94:	20000000 	.word	0x20000000

08001c98 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b082      	sub	sp, #8
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 // LED2_OFF;
}
 8001ca0:	46c0      	nop			; (mov r8, r8)
 8001ca2:	46bd      	mov	sp, r7
 8001ca4:	b002      	add	sp, #8
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cac:	b672      	cpsid	i
}
 8001cae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cb0:	e7fe      	b.n	8001cb0 <Error_Handler+0x8>
	...

08001cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b082      	sub	sp, #8
 8001cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	4b13      	ldr	r3, [pc, #76]	; (8001d08 <HAL_MspInit+0x54>)
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	4b12      	ldr	r3, [pc, #72]	; (8001d08 <HAL_MspInit+0x54>)
 8001cc0:	2101      	movs	r1, #1
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	619a      	str	r2, [r3, #24]
 8001cc6:	4b10      	ldr	r3, [pc, #64]	; (8001d08 <HAL_MspInit+0x54>)
 8001cc8:	699b      	ldr	r3, [r3, #24]
 8001cca:	2201      	movs	r2, #1
 8001ccc:	4013      	ands	r3, r2
 8001cce:	607b      	str	r3, [r7, #4]
 8001cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cd2:	4b0d      	ldr	r3, [pc, #52]	; (8001d08 <HAL_MspInit+0x54>)
 8001cd4:	69da      	ldr	r2, [r3, #28]
 8001cd6:	4b0c      	ldr	r3, [pc, #48]	; (8001d08 <HAL_MspInit+0x54>)
 8001cd8:	2180      	movs	r1, #128	; 0x80
 8001cda:	0549      	lsls	r1, r1, #21
 8001cdc:	430a      	orrs	r2, r1
 8001cde:	61da      	str	r2, [r3, #28]
 8001ce0:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <HAL_MspInit+0x54>)
 8001ce2:	69da      	ldr	r2, [r3, #28]
 8001ce4:	2380      	movs	r3, #128	; 0x80
 8001ce6:	055b      	lsls	r3, r3, #21
 8001ce8:	4013      	ands	r3, r2
 8001cea:	603b      	str	r3, [r7, #0]
 8001cec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	2004      	movs	r0, #4
 8001cf4:	f001 f8d0 	bl	8002e98 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001cf8:	2004      	movs	r0, #4
 8001cfa:	f001 f8e2 	bl	8002ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cfe:	46c0      	nop			; (mov r8, r8)
 8001d00:	46bd      	mov	sp, r7
 8001d02:	b002      	add	sp, #8
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40021000 	.word	0x40021000

08001d0c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001d0c:	b590      	push	{r4, r7, lr}
 8001d0e:	b08b      	sub	sp, #44	; 0x2c
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d14:	2414      	movs	r4, #20
 8001d16:	193b      	adds	r3, r7, r4
 8001d18:	0018      	movs	r0, r3
 8001d1a:	2314      	movs	r3, #20
 8001d1c:	001a      	movs	r2, r3
 8001d1e:	2100      	movs	r1, #0
 8001d20:	f004 fbd4 	bl	80064cc <memset>
  if(hadc->Instance==ADC1)
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a2b      	ldr	r2, [pc, #172]	; (8001dd8 <HAL_ADC_MspInit+0xcc>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d150      	bne.n	8001dd0 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001d2e:	4b2b      	ldr	r3, [pc, #172]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d30:	699a      	ldr	r2, [r3, #24]
 8001d32:	4b2a      	ldr	r3, [pc, #168]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0089      	lsls	r1, r1, #2
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	619a      	str	r2, [r3, #24]
 8001d3c:	4b27      	ldr	r3, [pc, #156]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d3e:	699a      	ldr	r2, [r3, #24]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	4013      	ands	r3, r2
 8001d46:	613b      	str	r3, [r7, #16]
 8001d48:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d4a:	4b24      	ldr	r3, [pc, #144]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d4c:	695a      	ldr	r2, [r3, #20]
 8001d4e:	4b23      	ldr	r3, [pc, #140]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d50:	2180      	movs	r1, #128	; 0x80
 8001d52:	0289      	lsls	r1, r1, #10
 8001d54:	430a      	orrs	r2, r1
 8001d56:	615a      	str	r2, [r3, #20]
 8001d58:	4b20      	ldr	r3, [pc, #128]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d5a:	695a      	ldr	r2, [r3, #20]
 8001d5c:	2380      	movs	r3, #128	; 0x80
 8001d5e:	029b      	lsls	r3, r3, #10
 8001d60:	4013      	ands	r3, r2
 8001d62:	60fb      	str	r3, [r7, #12]
 8001d64:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d66:	4b1d      	ldr	r3, [pc, #116]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d68:	695a      	ldr	r2, [r3, #20]
 8001d6a:	4b1c      	ldr	r3, [pc, #112]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d6c:	2180      	movs	r1, #128	; 0x80
 8001d6e:	02c9      	lsls	r1, r1, #11
 8001d70:	430a      	orrs	r2, r1
 8001d72:	615a      	str	r2, [r3, #20]
 8001d74:	4b19      	ldr	r3, [pc, #100]	; (8001ddc <HAL_ADC_MspInit+0xd0>)
 8001d76:	695a      	ldr	r2, [r3, #20]
 8001d78:	2380      	movs	r3, #128	; 0x80
 8001d7a:	02db      	lsls	r3, r3, #11
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	60bb      	str	r3, [r7, #8]
 8001d80:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = INP_1_Pin|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8001d82:	193b      	adds	r3, r7, r4
 8001d84:	2233      	movs	r2, #51	; 0x33
 8001d86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001d88:	193b      	adds	r3, r7, r4
 8001d8a:	2203      	movs	r2, #3
 8001d8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	193b      	adds	r3, r7, r4
 8001d90:	2200      	movs	r2, #0
 8001d92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001d94:	193a      	adds	r2, r7, r4
 8001d96:	2390      	movs	r3, #144	; 0x90
 8001d98:	05db      	lsls	r3, r3, #23
 8001d9a:	0011      	movs	r1, r2
 8001d9c:	0018      	movs	r0, r3
 8001d9e:	f001 fcc5 	bl	800372c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_M_Pin;
 8001da2:	193b      	adds	r3, r7, r4
 8001da4:	2201      	movs	r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001da8:	193b      	adds	r3, r7, r4
 8001daa:	2203      	movs	r2, #3
 8001dac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dae:	193b      	adds	r3, r7, r4
 8001db0:	2200      	movs	r2, #0
 8001db2:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_M_GPIO_Port, &GPIO_InitStruct);
 8001db4:	193b      	adds	r3, r7, r4
 8001db6:	4a0a      	ldr	r2, [pc, #40]	; (8001de0 <HAL_ADC_MspInit+0xd4>)
 8001db8:	0019      	movs	r1, r3
 8001dba:	0010      	movs	r0, r2
 8001dbc:	f001 fcb6 	bl	800372c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	200c      	movs	r0, #12
 8001dc6:	f001 f867 	bl	8002e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001dca:	200c      	movs	r0, #12
 8001dcc:	f001 f879 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001dd0:	46c0      	nop			; (mov r8, r8)
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	b00b      	add	sp, #44	; 0x2c
 8001dd6:	bd90      	pop	{r4, r7, pc}
 8001dd8:	40012400 	.word	0x40012400
 8001ddc:	40021000 	.word	0x40021000
 8001de0:	48000400 	.word	0x48000400

08001de4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001de4:	b590      	push	{r4, r7, lr}
 8001de6:	b08b      	sub	sp, #44	; 0x2c
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dec:	2414      	movs	r4, #20
 8001dee:	193b      	adds	r3, r7, r4
 8001df0:	0018      	movs	r0, r3
 8001df2:	2314      	movs	r3, #20
 8001df4:	001a      	movs	r2, r3
 8001df6:	2100      	movs	r1, #0
 8001df8:	f004 fb68 	bl	80064cc <memset>
  if(htim_base->Instance==TIM1)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <HAL_TIM_Base_MspInit+0xe8>)
 8001e02:	4293      	cmp	r3, r2
 8001e04:	d144      	bne.n	8001e90 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001e06:	4b32      	ldr	r3, [pc, #200]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	4b31      	ldr	r3, [pc, #196]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0109      	lsls	r1, r1, #4
 8001e10:	430a      	orrs	r2, r1
 8001e12:	619a      	str	r2, [r3, #24]
 8001e14:	4b2e      	ldr	r3, [pc, #184]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e16:	699a      	ldr	r2, [r3, #24]
 8001e18:	2380      	movs	r3, #128	; 0x80
 8001e1a:	011b      	lsls	r3, r3, #4
 8001e1c:	4013      	ands	r3, r2
 8001e1e:	613b      	str	r3, [r7, #16]
 8001e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e22:	4b2b      	ldr	r3, [pc, #172]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e24:	695a      	ldr	r2, [r3, #20]
 8001e26:	4b2a      	ldr	r3, [pc, #168]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e28:	2180      	movs	r1, #128	; 0x80
 8001e2a:	0289      	lsls	r1, r1, #10
 8001e2c:	430a      	orrs	r2, r1
 8001e2e:	615a      	str	r2, [r3, #20]
 8001e30:	4b27      	ldr	r3, [pc, #156]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e32:	695a      	ldr	r2, [r3, #20]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	029b      	lsls	r3, r3, #10
 8001e38:	4013      	ands	r3, r2
 8001e3a:	60fb      	str	r3, [r7, #12]
 8001e3c:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L__Pin|L___Pin;
 8001e3e:	193b      	adds	r3, r7, r4
 8001e40:	22a0      	movs	r2, #160	; 0xa0
 8001e42:	00d2      	lsls	r2, r2, #3
 8001e44:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e46:	0021      	movs	r1, r4
 8001e48:	187b      	adds	r3, r7, r1
 8001e4a:	2202      	movs	r2, #2
 8001e4c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e4e:	187b      	adds	r3, r7, r1
 8001e50:	2200      	movs	r2, #0
 8001e52:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e54:	187b      	adds	r3, r7, r1
 8001e56:	2200      	movs	r2, #0
 8001e58:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8001e5a:	187b      	adds	r3, r7, r1
 8001e5c:	2202      	movs	r2, #2
 8001e5e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e60:	187a      	adds	r2, r7, r1
 8001e62:	2390      	movs	r3, #144	; 0x90
 8001e64:	05db      	lsls	r3, r3, #23
 8001e66:	0011      	movs	r1, r2
 8001e68:	0018      	movs	r0, r3
 8001e6a:	f001 fc5f 	bl	800372c <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 8001e6e:	2200      	movs	r2, #0
 8001e70:	2100      	movs	r1, #0
 8001e72:	200d      	movs	r0, #13
 8001e74:	f001 f810 	bl	8002e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 8001e78:	200d      	movs	r0, #13
 8001e7a:	f001 f822 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001e7e:	2200      	movs	r2, #0
 8001e80:	2100      	movs	r1, #0
 8001e82:	200e      	movs	r0, #14
 8001e84:	f001 f808 	bl	8002e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001e88:	200e      	movs	r0, #14
 8001e8a:	f001 f81a 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001e8e:	e018      	b.n	8001ec2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	4a0f      	ldr	r2, [pc, #60]	; (8001ed4 <HAL_TIM_Base_MspInit+0xf0>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d113      	bne.n	8001ec2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001e9a:	4b0d      	ldr	r3, [pc, #52]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001e9c:	69da      	ldr	r2, [r3, #28]
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001ea0:	2102      	movs	r1, #2
 8001ea2:	430a      	orrs	r2, r1
 8001ea4:	61da      	str	r2, [r3, #28]
 8001ea6:	4b0a      	ldr	r3, [pc, #40]	; (8001ed0 <HAL_TIM_Base_MspInit+0xec>)
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	2202      	movs	r2, #2
 8001eac:	4013      	ands	r3, r2
 8001eae:	60bb      	str	r3, [r7, #8]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	2010      	movs	r0, #16
 8001eb8:	f000 ffee 	bl	8002e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001ebc:	2010      	movs	r0, #16
 8001ebe:	f001 f800 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
}
 8001ec2:	46c0      	nop			; (mov r8, r8)
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	b00b      	add	sp, #44	; 0x2c
 8001ec8:	bd90      	pop	{r4, r7, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	40012c00 	.word	0x40012c00
 8001ed0:	40021000 	.word	0x40021000
 8001ed4:	40000400 	.word	0x40000400

08001ed8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ed8:	b590      	push	{r4, r7, lr}
 8001eda:	b08b      	sub	sp, #44	; 0x2c
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	2414      	movs	r4, #20
 8001ee2:	193b      	adds	r3, r7, r4
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	2314      	movs	r3, #20
 8001ee8:	001a      	movs	r2, r3
 8001eea:	2100      	movs	r1, #0
 8001eec:	f004 faee 	bl	80064cc <memset>
  if(huart->Instance==USART1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a33      	ldr	r2, [pc, #204]	; (8001fc4 <HAL_UART_MspInit+0xec>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d160      	bne.n	8001fbc <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001efa:	4b33      	ldr	r3, [pc, #204]	; (8001fc8 <HAL_UART_MspInit+0xf0>)
 8001efc:	699a      	ldr	r2, [r3, #24]
 8001efe:	4b32      	ldr	r3, [pc, #200]	; (8001fc8 <HAL_UART_MspInit+0xf0>)
 8001f00:	2180      	movs	r1, #128	; 0x80
 8001f02:	01c9      	lsls	r1, r1, #7
 8001f04:	430a      	orrs	r2, r1
 8001f06:	619a      	str	r2, [r3, #24]
 8001f08:	4b2f      	ldr	r3, [pc, #188]	; (8001fc8 <HAL_UART_MspInit+0xf0>)
 8001f0a:	699a      	ldr	r2, [r3, #24]
 8001f0c:	2380      	movs	r3, #128	; 0x80
 8001f0e:	01db      	lsls	r3, r3, #7
 8001f10:	4013      	ands	r3, r2
 8001f12:	613b      	str	r3, [r7, #16]
 8001f14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f16:	4b2c      	ldr	r3, [pc, #176]	; (8001fc8 <HAL_UART_MspInit+0xf0>)
 8001f18:	695a      	ldr	r2, [r3, #20]
 8001f1a:	4b2b      	ldr	r3, [pc, #172]	; (8001fc8 <HAL_UART_MspInit+0xf0>)
 8001f1c:	2180      	movs	r1, #128	; 0x80
 8001f1e:	0289      	lsls	r1, r1, #10
 8001f20:	430a      	orrs	r2, r1
 8001f22:	615a      	str	r2, [r3, #20]
 8001f24:	4b28      	ldr	r3, [pc, #160]	; (8001fc8 <HAL_UART_MspInit+0xf0>)
 8001f26:	695a      	ldr	r2, [r3, #20]
 8001f28:	2380      	movs	r3, #128	; 0x80
 8001f2a:	029b      	lsls	r3, r3, #10
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	60fb      	str	r3, [r7, #12]
 8001f30:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001f32:	0021      	movs	r1, r4
 8001f34:	187b      	adds	r3, r7, r1
 8001f36:	220c      	movs	r2, #12
 8001f38:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f3a:	187b      	adds	r3, r7, r1
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f40:	187b      	adds	r3, r7, r1
 8001f42:	2200      	movs	r2, #0
 8001f44:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f46:	187b      	adds	r3, r7, r1
 8001f48:	2203      	movs	r2, #3
 8001f4a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8001f4c:	187b      	adds	r3, r7, r1
 8001f4e:	2201      	movs	r2, #1
 8001f50:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f52:	187a      	adds	r2, r7, r1
 8001f54:	2390      	movs	r3, #144	; 0x90
 8001f56:	05db      	lsls	r3, r3, #23
 8001f58:	0011      	movs	r1, r2
 8001f5a:	0018      	movs	r0, r3
 8001f5c:	f001 fbe6 	bl	800372c <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 8001f60:	4b1a      	ldr	r3, [pc, #104]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f62:	4a1b      	ldr	r2, [pc, #108]	; (8001fd0 <HAL_UART_MspInit+0xf8>)
 8001f64:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001f66:	4b19      	ldr	r3, [pc, #100]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f68:	2210      	movs	r2, #16
 8001f6a:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001f6c:	4b17      	ldr	r3, [pc, #92]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f6e:	2200      	movs	r2, #0
 8001f70:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001f72:	4b16      	ldr	r3, [pc, #88]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f74:	2280      	movs	r2, #128	; 0x80
 8001f76:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001f78:	4b14      	ldr	r3, [pc, #80]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001f7e:	4b13      	ldr	r3, [pc, #76]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001f84:	4b11      	ldr	r3, [pc, #68]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f86:	2200      	movs	r2, #0
 8001f88:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001f8a:	4b10      	ldr	r3, [pc, #64]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f8c:	2200      	movs	r2, #0
 8001f8e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001f90:	4b0e      	ldr	r3, [pc, #56]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001f92:	0018      	movs	r0, r3
 8001f94:	f000 ffb2 	bl	8002efc <HAL_DMA_Init>
 8001f98:	1e03      	subs	r3, r0, #0
 8001f9a:	d001      	beq.n	8001fa0 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001f9c:	f7ff fe84 	bl	8001ca8 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	4a0a      	ldr	r2, [pc, #40]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001fa4:	671a      	str	r2, [r3, #112]	; 0x70
 8001fa6:	4b09      	ldr	r3, [pc, #36]	; (8001fcc <HAL_UART_MspInit+0xf4>)
 8001fa8:	687a      	ldr	r2, [r7, #4]
 8001faa:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001fac:	2200      	movs	r2, #0
 8001fae:	2100      	movs	r1, #0
 8001fb0:	201b      	movs	r0, #27
 8001fb2:	f000 ff71 	bl	8002e98 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001fb6:	201b      	movs	r0, #27
 8001fb8:	f000 ff83 	bl	8002ec2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001fbc:	46c0      	nop			; (mov r8, r8)
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	b00b      	add	sp, #44	; 0x2c
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	40013800 	.word	0x40013800
 8001fc8:	40021000 	.word	0x40021000
 8001fcc:	200001e4 	.word	0x200001e4
 8001fd0:	4002001c 	.word	0x4002001c

08001fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fd4:	b580      	push	{r7, lr}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fd8:	e7fe      	b.n	8001fd8 <NMI_Handler+0x4>

08001fda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fda:	b580      	push	{r7, lr}
 8001fdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fde:	e7fe      	b.n	8001fde <HardFault_Handler+0x4>

08001fe0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001fe4:	46c0      	nop			; (mov r8, r8)
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}

08001fea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001fea:	b580      	push	{r7, lr}
 8001fec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001fee:	46c0      	nop			; (mov r8, r8)
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff8:	f000 f8fe 	bl	80021f8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ffc:	46c0      	nop			; (mov r8, r8)
 8001ffe:	46bd      	mov	sp, r7
 8002000:	bd80      	pop	{r7, pc}

08002002 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8002002:	b580      	push	{r7, lr}
 8002004:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8002006:	46c0      	nop			; (mov r8, r8)
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}

0800200c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8002010:	4b03      	ldr	r3, [pc, #12]	; (8002020 <DMA1_Channel2_3_IRQHandler+0x14>)
 8002012:	0018      	movs	r0, r3
 8002014:	f001 f89d 	bl	8003152 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 8002018:	46c0      	nop			; (mov r8, r8)
 800201a:	46bd      	mov	sp, r7
 800201c:	bd80      	pop	{r7, pc}
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	200001e4 	.word	0x200001e4

08002024 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 8002028:	4b03      	ldr	r3, [pc, #12]	; (8002038 <ADC1_IRQHandler+0x14>)
 800202a:	0018      	movs	r0, r3
 800202c:	f000 fb94 	bl	8002758 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002030:	46c0      	nop			; (mov r8, r8)
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	46c0      	nop			; (mov r8, r8)
 8002038:	2000007c 	.word	0x2000007c

0800203c <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002040:	4b03      	ldr	r3, [pc, #12]	; (8002050 <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 8002042:	0018      	movs	r0, r3
 8002044:	f002 fc7e 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 8002048:	46c0      	nop			; (mov r8, r8)
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	46c0      	nop			; (mov r8, r8)
 8002050:	200000cc 	.word	0x200000cc

08002054 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002058:	4b03      	ldr	r3, [pc, #12]	; (8002068 <TIM1_CC_IRQHandler+0x14>)
 800205a:	0018      	movs	r0, r3
 800205c:	f002 fc72 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8002060:	46c0      	nop			; (mov r8, r8)
 8002062:	46bd      	mov	sp, r7
 8002064:	bd80      	pop	{r7, pc}
 8002066:	46c0      	nop			; (mov r8, r8)
 8002068:	200000cc 	.word	0x200000cc

0800206c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002070:	4b03      	ldr	r3, [pc, #12]	; (8002080 <TIM3_IRQHandler+0x14>)
 8002072:	0018      	movs	r0, r3
 8002074:	f002 fc66 	bl	8004944 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002078:	46c0      	nop			; (mov r8, r8)
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}
 800207e:	46c0      	nop			; (mov r8, r8)
 8002080:	20000114 	.word	0x20000114

08002084 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002084:	b580      	push	{r7, lr}
 8002086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002088:	4b03      	ldr	r3, [pc, #12]	; (8002098 <USART1_IRQHandler+0x14>)
 800208a:	0018      	movs	r0, r3
 800208c:	f003 fac6 	bl	800561c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002090:	46c0      	nop			; (mov r8, r8)
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	46c0      	nop			; (mov r8, r8)
 8002098:	2000015c 	.word	0x2000015c

0800209c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b086      	sub	sp, #24
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020a4:	4a14      	ldr	r2, [pc, #80]	; (80020f8 <_sbrk+0x5c>)
 80020a6:	4b15      	ldr	r3, [pc, #84]	; (80020fc <_sbrk+0x60>)
 80020a8:	1ad3      	subs	r3, r2, r3
 80020aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020b0:	4b13      	ldr	r3, [pc, #76]	; (8002100 <_sbrk+0x64>)
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d102      	bne.n	80020be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020b8:	4b11      	ldr	r3, [pc, #68]	; (8002100 <_sbrk+0x64>)
 80020ba:	4a12      	ldr	r2, [pc, #72]	; (8002104 <_sbrk+0x68>)
 80020bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020be:	4b10      	ldr	r3, [pc, #64]	; (8002100 <_sbrk+0x64>)
 80020c0:	681a      	ldr	r2, [r3, #0]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	18d3      	adds	r3, r2, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d207      	bcs.n	80020dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020cc:	f004 fa06 	bl	80064dc <__errno>
 80020d0:	0003      	movs	r3, r0
 80020d2:	220c      	movs	r2, #12
 80020d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	425b      	negs	r3, r3
 80020da:	e009      	b.n	80020f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020dc:	4b08      	ldr	r3, [pc, #32]	; (8002100 <_sbrk+0x64>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020e2:	4b07      	ldr	r3, [pc, #28]	; (8002100 <_sbrk+0x64>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	18d2      	adds	r2, r2, r3
 80020ea:	4b05      	ldr	r3, [pc, #20]	; (8002100 <_sbrk+0x64>)
 80020ec:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	0018      	movs	r0, r3
 80020f2:	46bd      	mov	sp, r7
 80020f4:	b006      	add	sp, #24
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	20001000 	.word	0x20001000
 80020fc:	00000400 	.word	0x00000400
 8002100:	20000364 	.word	0x20000364
 8002104:	200004d8 	.word	0x200004d8

08002108 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800210c:	46c0      	nop			; (mov r8, r8)
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
	...

08002114 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002114:	480d      	ldr	r0, [pc, #52]	; (800214c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002116:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002118:	480d      	ldr	r0, [pc, #52]	; (8002150 <LoopForever+0x6>)
  ldr r1, =_edata
 800211a:	490e      	ldr	r1, [pc, #56]	; (8002154 <LoopForever+0xa>)
  ldr r2, =_sidata
 800211c:	4a0e      	ldr	r2, [pc, #56]	; (8002158 <LoopForever+0xe>)
  movs r3, #0
 800211e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002120:	e002      	b.n	8002128 <LoopCopyDataInit>

08002122 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002122:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002124:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002126:	3304      	adds	r3, #4

08002128 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002128:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800212c:	d3f9      	bcc.n	8002122 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800212e:	4a0b      	ldr	r2, [pc, #44]	; (800215c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002130:	4c0b      	ldr	r4, [pc, #44]	; (8002160 <LoopForever+0x16>)
  movs r3, #0
 8002132:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002134:	e001      	b.n	800213a <LoopFillZerobss>

08002136 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002136:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002138:	3204      	adds	r2, #4

0800213a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800213c:	d3fb      	bcc.n	8002136 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800213e:	f7ff ffe3 	bl	8002108 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8002142:	f004 f9d1 	bl	80064e8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002146:	f7fe ffb1 	bl	80010ac <main>

0800214a <LoopForever>:

LoopForever:
    b LoopForever
 800214a:	e7fe      	b.n	800214a <LoopForever>
  ldr   r0, =_estack
 800214c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 8002158:	08006ee8 	.word	0x08006ee8
  ldr r2, =_sbss
 800215c:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002160:	200004d8 	.word	0x200004d8

08002164 <DMA1_Channel1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <DMA1_Channel1_IRQHandler>
	...

08002168 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800216c:	4b07      	ldr	r3, [pc, #28]	; (800218c <HAL_Init+0x24>)
 800216e:	681a      	ldr	r2, [r3, #0]
 8002170:	4b06      	ldr	r3, [pc, #24]	; (800218c <HAL_Init+0x24>)
 8002172:	2110      	movs	r1, #16
 8002174:	430a      	orrs	r2, r1
 8002176:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8002178:	2003      	movs	r0, #3
 800217a:	f000 f809 	bl	8002190 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800217e:	f7ff fd99 	bl	8001cb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	0018      	movs	r0, r3
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}
 800218a:	46c0      	nop			; (mov r8, r8)
 800218c:	40022000 	.word	0x40022000

08002190 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002190:	b590      	push	{r4, r7, lr}
 8002192:	b083      	sub	sp, #12
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002198:	4b14      	ldr	r3, [pc, #80]	; (80021ec <HAL_InitTick+0x5c>)
 800219a:	681c      	ldr	r4, [r3, #0]
 800219c:	4b14      	ldr	r3, [pc, #80]	; (80021f0 <HAL_InitTick+0x60>)
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	0019      	movs	r1, r3
 80021a2:	23fa      	movs	r3, #250	; 0xfa
 80021a4:	0098      	lsls	r0, r3, #2
 80021a6:	f7fd ffb9 	bl	800011c <__udivsi3>
 80021aa:	0003      	movs	r3, r0
 80021ac:	0019      	movs	r1, r3
 80021ae:	0020      	movs	r0, r4
 80021b0:	f7fd ffb4 	bl	800011c <__udivsi3>
 80021b4:	0003      	movs	r3, r0
 80021b6:	0018      	movs	r0, r3
 80021b8:	f000 fe93 	bl	8002ee2 <HAL_SYSTICK_Config>
 80021bc:	1e03      	subs	r3, r0, #0
 80021be:	d001      	beq.n	80021c4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80021c0:	2301      	movs	r3, #1
 80021c2:	e00f      	b.n	80021e4 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	2b03      	cmp	r3, #3
 80021c8:	d80b      	bhi.n	80021e2 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021ca:	6879      	ldr	r1, [r7, #4]
 80021cc:	2301      	movs	r3, #1
 80021ce:	425b      	negs	r3, r3
 80021d0:	2200      	movs	r2, #0
 80021d2:	0018      	movs	r0, r3
 80021d4:	f000 fe60 	bl	8002e98 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021d8:	4b06      	ldr	r3, [pc, #24]	; (80021f4 <HAL_InitTick+0x64>)
 80021da:	687a      	ldr	r2, [r7, #4]
 80021dc:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 80021de:	2300      	movs	r3, #0
 80021e0:	e000      	b.n	80021e4 <HAL_InitTick+0x54>
    return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
}
 80021e4:	0018      	movs	r0, r3
 80021e6:	46bd      	mov	sp, r7
 80021e8:	b003      	add	sp, #12
 80021ea:	bd90      	pop	{r4, r7, pc}
 80021ec:	20000004 	.word	0x20000004
 80021f0:	2000000c 	.word	0x2000000c
 80021f4:	20000008 	.word	0x20000008

080021f8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021fc:	4b05      	ldr	r3, [pc, #20]	; (8002214 <HAL_IncTick+0x1c>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	001a      	movs	r2, r3
 8002202:	4b05      	ldr	r3, [pc, #20]	; (8002218 <HAL_IncTick+0x20>)
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	18d2      	adds	r2, r2, r3
 8002208:	4b03      	ldr	r3, [pc, #12]	; (8002218 <HAL_IncTick+0x20>)
 800220a:	601a      	str	r2, [r3, #0]
}
 800220c:	46c0      	nop			; (mov r8, r8)
 800220e:	46bd      	mov	sp, r7
 8002210:	bd80      	pop	{r7, pc}
 8002212:	46c0      	nop			; (mov r8, r8)
 8002214:	2000000c 	.word	0x2000000c
 8002218:	20000368 	.word	0x20000368

0800221c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  return uwTick;
 8002220:	4b02      	ldr	r3, [pc, #8]	; (800222c <HAL_GetTick+0x10>)
 8002222:	681b      	ldr	r3, [r3, #0]
}
 8002224:	0018      	movs	r0, r3
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	46c0      	nop			; (mov r8, r8)
 800222c:	20000368 	.word	0x20000368

08002230 <HAL_SuspendTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_SuspendTick(void)

{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* Disable SysTick Interrupt */
  CLEAR_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <HAL_SuspendTick+0x18>)
 8002236:	681a      	ldr	r2, [r3, #0]
 8002238:	4b03      	ldr	r3, [pc, #12]	; (8002248 <HAL_SuspendTick+0x18>)
 800223a:	2102      	movs	r1, #2
 800223c:	438a      	bics	r2, r1
 800223e:	601a      	str	r2, [r3, #0]
}
 8002240:	46c0      	nop			; (mov r8, r8)
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	46c0      	nop			; (mov r8, r8)
 8002248:	e000e010 	.word	0xe000e010

0800224c <HAL_ResumeTick>:
  * @note This function is declared as __weak  to be overwritten  in case of other
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_ResumeTick(void)
{
 800224c:	b580      	push	{r7, lr}
 800224e:	af00      	add	r7, sp, #0
  /* Enable SysTick Interrupt */
  SET_BIT(SysTick->CTRL,SysTick_CTRL_TICKINT_Msk);
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <HAL_ResumeTick+0x18>)
 8002252:	681a      	ldr	r2, [r3, #0]
 8002254:	4b03      	ldr	r3, [pc, #12]	; (8002264 <HAL_ResumeTick+0x18>)
 8002256:	2102      	movs	r1, #2
 8002258:	430a      	orrs	r2, r1
 800225a:	601a      	str	r2, [r3, #0]
}
 800225c:	46c0      	nop			; (mov r8, r8)
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	46c0      	nop			; (mov r8, r8)
 8002264:	e000e010 	.word	0xe000e010

08002268 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002270:	230f      	movs	r3, #15
 8002272:	18fb      	adds	r3, r7, r3
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8002278:	2300      	movs	r3, #0
 800227a:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d101      	bne.n	8002286 <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e125      	b.n	80024d2 <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800228a:	2b00      	cmp	r3, #0
 800228c:	d10a      	bne.n	80022a4 <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	2234      	movs	r2, #52	; 0x34
 8002298:	2100      	movs	r1, #0
 800229a:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	0018      	movs	r0, r3
 80022a0:	f7ff fd34 	bl	8001d0c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022a8:	2210      	movs	r2, #16
 80022aa:	4013      	ands	r3, r2
 80022ac:	d000      	beq.n	80022b0 <HAL_ADC_Init+0x48>
 80022ae:	e103      	b.n	80024b8 <HAL_ADC_Init+0x250>
 80022b0:	230f      	movs	r3, #15
 80022b2:	18fb      	adds	r3, r7, r3
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d000      	beq.n	80022bc <HAL_ADC_Init+0x54>
 80022ba:	e0fd      	b.n	80024b8 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	689b      	ldr	r3, [r3, #8]
 80022c2:	2204      	movs	r2, #4
 80022c4:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80022c6:	d000      	beq.n	80022ca <HAL_ADC_Init+0x62>
 80022c8:	e0f6      	b.n	80024b8 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80022ce:	4a83      	ldr	r2, [pc, #524]	; (80024dc <HAL_ADC_Init+0x274>)
 80022d0:	4013      	ands	r3, r2
 80022d2:	2202      	movs	r2, #2
 80022d4:	431a      	orrs	r2, r3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	2203      	movs	r2, #3
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b01      	cmp	r3, #1
 80022e6:	d112      	bne.n	800230e <HAL_ADC_Init+0xa6>
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	2201      	movs	r2, #1
 80022f0:	4013      	ands	r3, r2
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d009      	beq.n	800230a <HAL_ADC_Init+0xa2>
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	68da      	ldr	r2, [r3, #12]
 80022fc:	2380      	movs	r3, #128	; 0x80
 80022fe:	021b      	lsls	r3, r3, #8
 8002300:	401a      	ands	r2, r3
 8002302:	2380      	movs	r3, #128	; 0x80
 8002304:	021b      	lsls	r3, r3, #8
 8002306:	429a      	cmp	r2, r3
 8002308:	d101      	bne.n	800230e <HAL_ADC_Init+0xa6>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_ADC_Init+0xa8>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d116      	bne.n	8002342 <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	68db      	ldr	r3, [r3, #12]
 800231a:	2218      	movs	r2, #24
 800231c:	4393      	bics	r3, r2
 800231e:	0019      	movs	r1, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	689a      	ldr	r2, [r3, #8]
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	430a      	orrs	r2, r1
 800232a:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	691b      	ldr	r3, [r3, #16]
 8002332:	009b      	lsls	r3, r3, #2
 8002334:	0899      	lsrs	r1, r3, #2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	685a      	ldr	r2, [r3, #4]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	430a      	orrs	r2, r1
 8002340:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68da      	ldr	r2, [r3, #12]
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	4964      	ldr	r1, [pc, #400]	; (80024e0 <HAL_ADC_Init+0x278>)
 800234e:	400a      	ands	r2, r1
 8002350:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	7e1b      	ldrb	r3, [r3, #24]
 8002356:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	7e5b      	ldrb	r3, [r3, #25]
 800235c:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800235e:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	7e9b      	ldrb	r3, [r3, #26]
 8002364:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002366:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800236c:	2b01      	cmp	r3, #1
 800236e:	d002      	beq.n	8002376 <HAL_ADC_Init+0x10e>
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	015b      	lsls	r3, r3, #5
 8002374:	e000      	b.n	8002378 <HAL_ADC_Init+0x110>
 8002376:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002378:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 800237e:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	691b      	ldr	r3, [r3, #16]
 8002384:	2b02      	cmp	r3, #2
 8002386:	d101      	bne.n	800238c <HAL_ADC_Init+0x124>
 8002388:	2304      	movs	r3, #4
 800238a:	e000      	b.n	800238e <HAL_ADC_Init+0x126>
 800238c:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 800238e:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	2124      	movs	r1, #36	; 0x24
 8002394:	5c5b      	ldrb	r3, [r3, r1]
 8002396:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002398:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800239a:	68ba      	ldr	r2, [r7, #8]
 800239c:	4313      	orrs	r3, r2
 800239e:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	7edb      	ldrb	r3, [r3, #27]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d115      	bne.n	80023d4 <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	7e9b      	ldrb	r3, [r3, #26]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d105      	bne.n	80023bc <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80023b0:	68bb      	ldr	r3, [r7, #8]
 80023b2:	2280      	movs	r2, #128	; 0x80
 80023b4:	0252      	lsls	r2, r2, #9
 80023b6:	4313      	orrs	r3, r2
 80023b8:	60bb      	str	r3, [r7, #8]
 80023ba:	e00b      	b.n	80023d4 <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023c0:	2220      	movs	r2, #32
 80023c2:	431a      	orrs	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023cc:	2201      	movs	r2, #1
 80023ce:	431a      	orrs	r2, r3
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	69da      	ldr	r2, [r3, #28]
 80023d8:	23c2      	movs	r3, #194	; 0xc2
 80023da:	33ff      	adds	r3, #255	; 0xff
 80023dc:	429a      	cmp	r2, r3
 80023de:	d007      	beq.n	80023f0 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80023e8:	4313      	orrs	r3, r2
 80023ea:	68ba      	ldr	r2, [r7, #8]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	68d9      	ldr	r1, [r3, #12]
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	68ba      	ldr	r2, [r7, #8]
 80023fc:	430a      	orrs	r2, r1
 80023fe:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002404:	2380      	movs	r3, #128	; 0x80
 8002406:	055b      	lsls	r3, r3, #21
 8002408:	429a      	cmp	r2, r3
 800240a:	d01b      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002410:	2b01      	cmp	r3, #1
 8002412:	d017      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002418:	2b02      	cmp	r3, #2
 800241a:	d013      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002420:	2b03      	cmp	r3, #3
 8002422:	d00f      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002428:	2b04      	cmp	r3, #4
 800242a:	d00b      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002430:	2b05      	cmp	r3, #5
 8002432:	d007      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002438:	2b06      	cmp	r3, #6
 800243a:	d003      	beq.n	8002444 <HAL_ADC_Init+0x1dc>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	2b07      	cmp	r3, #7
 8002442:	d112      	bne.n	800246a <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	695a      	ldr	r2, [r3, #20]
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	2107      	movs	r1, #7
 8002450:	438a      	bics	r2, r1
 8002452:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	6959      	ldr	r1, [r3, #20]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245e:	2207      	movs	r2, #7
 8002460:	401a      	ands	r2, r3
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	430a      	orrs	r2, r1
 8002468:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68db      	ldr	r3, [r3, #12]
 8002470:	4a1c      	ldr	r2, [pc, #112]	; (80024e4 <HAL_ADC_Init+0x27c>)
 8002472:	4013      	ands	r3, r2
 8002474:	68ba      	ldr	r2, [r7, #8]
 8002476:	429a      	cmp	r2, r3
 8002478:	d10b      	bne.n	8002492 <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2200      	movs	r2, #0
 800247e:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002484:	2203      	movs	r2, #3
 8002486:	4393      	bics	r3, r2
 8002488:	2201      	movs	r2, #1
 800248a:	431a      	orrs	r2, r3
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8002490:	e01c      	b.n	80024cc <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002496:	2212      	movs	r2, #18
 8002498:	4393      	bics	r3, r2
 800249a:	2210      	movs	r2, #16
 800249c:	431a      	orrs	r2, r3
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024a6:	2201      	movs	r2, #1
 80024a8:	431a      	orrs	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 80024ae:	230f      	movs	r3, #15
 80024b0:	18fb      	adds	r3, r7, r3
 80024b2:	2201      	movs	r2, #1
 80024b4:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80024b6:	e009      	b.n	80024cc <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024bc:	2210      	movs	r2, #16
 80024be:	431a      	orrs	r2, r3
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 80024c4:	230f      	movs	r3, #15
 80024c6:	18fb      	adds	r3, r7, r3
 80024c8:	2201      	movs	r2, #1
 80024ca:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80024cc:	230f      	movs	r3, #15
 80024ce:	18fb      	adds	r3, r7, r3
 80024d0:	781b      	ldrb	r3, [r3, #0]
}
 80024d2:	0018      	movs	r0, r3
 80024d4:	46bd      	mov	sp, r7
 80024d6:	b004      	add	sp, #16
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	fffffefd 	.word	0xfffffefd
 80024e0:	fffe0219 	.word	0xfffe0219
 80024e4:	833fffe7 	.word	0x833fffe7

080024e8 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80024e8:	b590      	push	{r4, r7, lr}
 80024ea:	b085      	sub	sp, #20
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80024f0:	230f      	movs	r3, #15
 80024f2:	18fb      	adds	r3, r7, r3
 80024f4:	2200      	movs	r2, #0
 80024f6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	689b      	ldr	r3, [r3, #8]
 80024fe:	2204      	movs	r2, #4
 8002500:	4013      	ands	r3, r2
 8002502:	d138      	bne.n	8002576 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	2234      	movs	r2, #52	; 0x34
 8002508:	5c9b      	ldrb	r3, [r3, r2]
 800250a:	2b01      	cmp	r3, #1
 800250c:	d101      	bne.n	8002512 <HAL_ADC_Start+0x2a>
 800250e:	2302      	movs	r3, #2
 8002510:	e038      	b.n	8002584 <HAL_ADC_Start+0x9c>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	2234      	movs	r2, #52	; 0x34
 8002516:	2101      	movs	r1, #1
 8002518:	5499      	strb	r1, [r3, r2]
      
    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	7e5b      	ldrb	r3, [r3, #25]
 800251e:	2b01      	cmp	r3, #1
 8002520:	d007      	beq.n	8002532 <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 8002522:	230f      	movs	r3, #15
 8002524:	18fc      	adds	r4, r7, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	0018      	movs	r0, r3
 800252a:	f000 fac7 	bl	8002abc <ADC_Enable>
 800252e:	0003      	movs	r3, r0
 8002530:	7023      	strb	r3, [r4, #0]
    }
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8002532:	230f      	movs	r3, #15
 8002534:	18fb      	adds	r3, r7, r3
 8002536:	781b      	ldrb	r3, [r3, #0]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d120      	bne.n	800257e <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	4a12      	ldr	r2, [pc, #72]	; (800258c <HAL_ADC_Start+0xa4>)
 8002542:	4013      	ands	r3, r2
 8002544:	2280      	movs	r2, #128	; 0x80
 8002546:	0052      	lsls	r2, r2, #1
 8002548:	431a      	orrs	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2234      	movs	r2, #52	; 0x34
 8002558:	2100      	movs	r1, #0
 800255a:	5499      	strb	r1, [r3, r2]
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	221c      	movs	r2, #28
 8002562:	601a      	str	r2, [r3, #0]
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	689a      	ldr	r2, [r3, #8]
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	2104      	movs	r1, #4
 8002570:	430a      	orrs	r2, r1
 8002572:	609a      	str	r2, [r3, #8]
 8002574:	e003      	b.n	800257e <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002576:	230f      	movs	r3, #15
 8002578:	18fb      	adds	r3, r7, r3
 800257a:	2202      	movs	r2, #2
 800257c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800257e:	230f      	movs	r3, #15
 8002580:	18fb      	adds	r3, r7, r3
 8002582:	781b      	ldrb	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	b005      	add	sp, #20
 800258a:	bd90      	pop	{r4, r7, pc}
 800258c:	fffff0fe 	.word	0xfffff0fe

08002590 <HAL_ADC_Stop>:
  * @brief  Stop ADC conversion of regular group, disable ADC peripheral.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{ 
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	b084      	sub	sp, #16
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002598:	230f      	movs	r3, #15
 800259a:	18fb      	adds	r3, r7, r3
 800259c:	2200      	movs	r2, #0
 800259e:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	2234      	movs	r2, #52	; 0x34
 80025a4:	5c9b      	ldrb	r3, [r3, r2]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d101      	bne.n	80025ae <HAL_ADC_Stop+0x1e>
 80025aa:	2302      	movs	r3, #2
 80025ac:	e029      	b.n	8002602 <HAL_ADC_Stop+0x72>
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2234      	movs	r2, #52	; 0x34
 80025b2:	2101      	movs	r1, #1
 80025b4:	5499      	strb	r1, [r3, r2]
  
  /* 1. Stop potential conversion on going, on regular group */
  tmp_hal_status = ADC_ConversionStop(hadc);
 80025b6:	250f      	movs	r5, #15
 80025b8:	197c      	adds	r4, r7, r5
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	0018      	movs	r0, r3
 80025be:	f000 fb72 	bl	8002ca6 <ADC_ConversionStop>
 80025c2:	0003      	movs	r3, r0
 80025c4:	7023      	strb	r3, [r4, #0]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80025c6:	197b      	adds	r3, r7, r5
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d112      	bne.n	80025f4 <HAL_ADC_Stop+0x64>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80025ce:	197c      	adds	r4, r7, r5
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	0018      	movs	r0, r3
 80025d4:	f000 faf6 	bl	8002bc4 <ADC_Disable>
 80025d8:	0003      	movs	r3, r0
 80025da:	7023      	strb	r3, [r4, #0]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 80025dc:	197b      	adds	r3, r7, r5
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d107      	bne.n	80025f4 <HAL_ADC_Stop+0x64>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80025e8:	4a08      	ldr	r2, [pc, #32]	; (800260c <HAL_ADC_Stop+0x7c>)
 80025ea:	4013      	ands	r3, r2
 80025ec:	2201      	movs	r2, #1
 80025ee:	431a      	orrs	r2, r3
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2234      	movs	r2, #52	; 0x34
 80025f8:	2100      	movs	r1, #0
 80025fa:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 80025fc:	230f      	movs	r3, #15
 80025fe:	18fb      	adds	r3, r7, r3
 8002600:	781b      	ldrb	r3, [r3, #0]
}
 8002602:	0018      	movs	r0, r3
 8002604:	46bd      	mov	sp, r7
 8002606:	b004      	add	sp, #16
 8002608:	bdb0      	pop	{r4, r5, r7, pc}
 800260a:	46c0      	nop			; (mov r8, r8)
 800260c:	fffffefe 	.word	0xfffffefe

08002610 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b084      	sub	sp, #16
 8002614:	af00      	add	r7, sp, #0
 8002616:	6078      	str	r0, [r7, #4]
 8002618:	6039      	str	r1, [r7, #0]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	695b      	ldr	r3, [r3, #20]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d102      	bne.n	8002628 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8002622:	2308      	movs	r3, #8
 8002624:	60fb      	str	r3, [r7, #12]
 8002626:	e014      	b.n	8002652 <HAL_ADC_PollForConversion+0x42>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68db      	ldr	r3, [r3, #12]
 800262e:	2201      	movs	r2, #1
 8002630:	4013      	ands	r3, r2
 8002632:	2b01      	cmp	r3, #1
 8002634:	d10b      	bne.n	800264e <HAL_ADC_PollForConversion+0x3e>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800263a:	2220      	movs	r2, #32
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	639a      	str	r2, [r3, #56]	; 0x38
      
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2234      	movs	r2, #52	; 0x34
 8002646:	2100      	movs	r1, #0
 8002648:	5499      	strb	r1, [r3, r2]
      
      return HAL_ERROR;
 800264a:	2301      	movs	r3, #1
 800264c:	e071      	b.n	8002732 <HAL_ADC_PollForConversion+0x122>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800264e:	230c      	movs	r3, #12
 8002650:	60fb      	str	r3, [r7, #12]
    }
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 8002652:	f7ff fde3 	bl	800221c <HAL_GetTick>
 8002656:	0003      	movs	r3, r0
 8002658:	60bb      	str	r3, [r7, #8]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800265a:	e01f      	b.n	800269c <HAL_ADC_PollForConversion+0x8c>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	3301      	adds	r3, #1
 8002660:	d01c      	beq.n	800269c <HAL_ADC_PollForConversion+0x8c>
    {
      if((Timeout == 0) || ((HAL_GetTick()-tickstart) > Timeout))
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d007      	beq.n	8002678 <HAL_ADC_PollForConversion+0x68>
 8002668:	f7ff fdd8 	bl	800221c <HAL_GetTick>
 800266c:	0002      	movs	r2, r0
 800266e:	68bb      	ldr	r3, [r7, #8]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	429a      	cmp	r2, r3
 8002676:	d211      	bcs.n	800269c <HAL_ADC_PollForConversion+0x8c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	68fa      	ldr	r2, [r7, #12]
 8002680:	4013      	ands	r3, r2
 8002682:	d10b      	bne.n	800269c <HAL_ADC_PollForConversion+0x8c>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002688:	2204      	movs	r2, #4
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	639a      	str	r2, [r3, #56]	; 0x38

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2234      	movs	r2, #52	; 0x34
 8002694:	2100      	movs	r1, #0
 8002696:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e04a      	b.n	8002732 <HAL_ADC_PollForConversion+0x122>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	68fa      	ldr	r2, [r7, #12]
 80026a4:	4013      	ands	r3, r2
 80026a6:	d0d9      	beq.n	800265c <HAL_ADC_PollForConversion+0x4c>
      }
    }
  }
    
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026ac:	2280      	movs	r2, #128	; 0x80
 80026ae:	0092      	lsls	r2, r2, #2
 80026b0:	431a      	orrs	r2, r3
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	639a      	str	r2, [r3, #56]	; 0x38
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	68da      	ldr	r2, [r3, #12]
 80026bc:	23c0      	movs	r3, #192	; 0xc0
 80026be:	011b      	lsls	r3, r3, #4
 80026c0:	4013      	ands	r3, r2
 80026c2:	d12d      	bne.n	8002720 <HAL_ADC_PollForConversion+0x110>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	7e9b      	ldrb	r3, [r3, #26]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d129      	bne.n	8002720 <HAL_ADC_PollForConversion+0x110>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	2208      	movs	r2, #8
 80026d4:	4013      	ands	r3, r2
 80026d6:	2b08      	cmp	r3, #8
 80026d8:	d122      	bne.n	8002720 <HAL_ADC_PollForConversion+0x110>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	689b      	ldr	r3, [r3, #8]
 80026e0:	2204      	movs	r2, #4
 80026e2:	4013      	ands	r3, r2
 80026e4:	d110      	bne.n	8002708 <HAL_ADC_PollForConversion+0xf8>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	685a      	ldr	r2, [r3, #4]
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	210c      	movs	r1, #12
 80026f2:	438a      	bics	r2, r1
 80026f4:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80026fa:	4a10      	ldr	r2, [pc, #64]	; (800273c <HAL_ADC_PollForConversion+0x12c>)
 80026fc:	4013      	ands	r3, r2
 80026fe:	2201      	movs	r2, #1
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	639a      	str	r2, [r3, #56]	; 0x38
 8002706:	e00b      	b.n	8002720 <HAL_ADC_PollForConversion+0x110>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800270c:	2220      	movs	r2, #32
 800270e:	431a      	orrs	r2, r3
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002718:	2201      	movs	r2, #1
 800271a:	431a      	orrs	r2, r3
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	7e1b      	ldrb	r3, [r3, #24]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d103      	bne.n	8002730 <HAL_ADC_PollForConversion+0x120>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	220c      	movs	r2, #12
 800272e:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	0018      	movs	r0, r3
 8002734:	46bd      	mov	sp, r7
 8002736:	b004      	add	sp, #16
 8002738:	bd80      	pop	{r7, pc}
 800273a:	46c0      	nop			; (mov r8, r8)
 800273c:	fffffefe 	.word	0xfffffefe

08002740 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b082      	sub	sp, #8
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800274e:	0018      	movs	r0, r3
 8002750:	46bd      	mov	sp, r7
 8002752:	b002      	add	sp, #8
 8002754:	bd80      	pop	{r7, pc}
	...

08002758 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	2204      	movs	r2, #4
 8002774:	4013      	ands	r3, r2
 8002776:	d003      	beq.n	8002780 <HAL_ADC_IRQHandler+0x28>
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	2204      	movs	r2, #4
 800277c:	4013      	ands	r3, r2
 800277e:	d107      	bne.n	8002790 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002780:	68fb      	ldr	r3, [r7, #12]
 8002782:	2208      	movs	r2, #8
 8002784:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002786:	d049      	beq.n	800281c <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8002788:	68bb      	ldr	r3, [r7, #8]
 800278a:	2208      	movs	r2, #8
 800278c:	4013      	ands	r3, r2
 800278e:	d045      	beq.n	800281c <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002794:	2210      	movs	r2, #16
 8002796:	4013      	ands	r3, r2
 8002798:	d106      	bne.n	80027a8 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800279e:	2280      	movs	r2, #128	; 0x80
 80027a0:	0092      	lsls	r2, r2, #2
 80027a2:	431a      	orrs	r2, r3
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	23c0      	movs	r3, #192	; 0xc0
 80027b0:	011b      	lsls	r3, r3, #4
 80027b2:	4013      	ands	r3, r2
 80027b4:	d12a      	bne.n	800280c <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d126      	bne.n	800280c <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	2208      	movs	r2, #8
 80027c2:	4013      	ands	r3, r2
 80027c4:	d022      	beq.n	800280c <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	689b      	ldr	r3, [r3, #8]
 80027cc:	2204      	movs	r2, #4
 80027ce:	4013      	ands	r3, r2
 80027d0:	d110      	bne.n	80027f4 <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	685a      	ldr	r2, [r3, #4]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	210c      	movs	r1, #12
 80027de:	438a      	bics	r2, r1
 80027e0:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027e6:	4a2d      	ldr	r2, [pc, #180]	; (800289c <HAL_ADC_IRQHandler+0x144>)
 80027e8:	4013      	ands	r3, r2
 80027ea:	2201      	movs	r2, #1
 80027ec:	431a      	orrs	r2, r3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	639a      	str	r2, [r3, #56]	; 0x38
 80027f2:	e00b      	b.n	800280c <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027f8:	2220      	movs	r2, #32
 80027fa:	431a      	orrs	r2, r3
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002804:	2201      	movs	r2, #1
 8002806:	431a      	orrs	r2, r3
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	0018      	movs	r0, r3
 8002810:	f000 f846 	bl	80028a0 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	220c      	movs	r2, #12
 800281a:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	2280      	movs	r2, #128	; 0x80
 8002820:	4013      	ands	r3, r2
 8002822:	d012      	beq.n	800284a <HAL_ADC_IRQHandler+0xf2>
 8002824:	68bb      	ldr	r3, [r7, #8]
 8002826:	2280      	movs	r2, #128	; 0x80
 8002828:	4013      	ands	r3, r2
 800282a:	d00e      	beq.n	800284a <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002830:	2280      	movs	r2, #128	; 0x80
 8002832:	0252      	lsls	r2, r2, #9
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	0018      	movs	r0, r3
 800283e:	f000 f837 	bl	80028b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	2280      	movs	r2, #128	; 0x80
 8002848:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	2210      	movs	r2, #16
 800284e:	4013      	ands	r3, r2
 8002850:	d020      	beq.n	8002894 <HAL_ADC_IRQHandler+0x13c>
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	2210      	movs	r2, #16
 8002856:	4013      	ands	r3, r2
 8002858:	d01c      	beq.n	8002894 <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800285e:	2b01      	cmp	r3, #1
 8002860:	d006      	beq.n	8002870 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	68db      	ldr	r3, [r3, #12]
 8002868:	2201      	movs	r2, #1
 800286a:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 800286c:	2b01      	cmp	r3, #1
 800286e:	d10d      	bne.n	800288c <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002874:	2202      	movs	r2, #2
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	2210      	movs	r2, #16
 8002882:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	0018      	movs	r0, r3
 8002888:	f000 f81a 	bl	80028c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	2210      	movs	r2, #16
 8002892:	601a      	str	r2, [r3, #0]
  }

}
 8002894:	46c0      	nop			; (mov r8, r8)
 8002896:	46bd      	mov	sp, r7
 8002898:	b004      	add	sp, #16
 800289a:	bd80      	pop	{r7, pc}
 800289c:	fffffefe 	.word	0xfffffefe

080028a0 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80028a0:	b580      	push	{r7, lr}
 80028a2:	b082      	sub	sp, #8
 80028a4:	af00      	add	r7, sp, #0
 80028a6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80028a8:	46c0      	nop			; (mov r8, r8)
 80028aa:	46bd      	mov	sp, r7
 80028ac:	b002      	add	sp, #8
 80028ae:	bd80      	pop	{r7, pc}

080028b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b082      	sub	sp, #8
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 80028b8:	46c0      	nop			; (mov r8, r8)
 80028ba:	46bd      	mov	sp, r7
 80028bc:	b002      	add	sp, #8
 80028be:	bd80      	pop	{r7, pc}

080028c0 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b082      	sub	sp, #8
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80028c8:	46c0      	nop			; (mov r8, r8)
 80028ca:	46bd      	mov	sp, r7
 80028cc:	b002      	add	sp, #8
 80028ce:	bd80      	pop	{r7, pc}

080028d0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
 80028d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028da:	230f      	movs	r3, #15
 80028dc:	18fb      	adds	r3, r7, r3
 80028de:	2200      	movs	r2, #0
 80028e0:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 80028e2:	2300      	movs	r3, #0
 80028e4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028ea:	2380      	movs	r3, #128	; 0x80
 80028ec:	055b      	lsls	r3, r3, #21
 80028ee:	429a      	cmp	r2, r3
 80028f0:	d011      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x46>
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f6:	2b01      	cmp	r3, #1
 80028f8:	d00d      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x46>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028fe:	2b02      	cmp	r3, #2
 8002900:	d009      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x46>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002906:	2b03      	cmp	r3, #3
 8002908:	d005      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x46>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800290e:	2b04      	cmp	r3, #4
 8002910:	d001      	beq.n	8002916 <HAL_ADC_ConfigChannel+0x46>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	2234      	movs	r2, #52	; 0x34
 800291a:	5c9b      	ldrb	r3, [r3, r2]
 800291c:	2b01      	cmp	r3, #1
 800291e:	d101      	bne.n	8002924 <HAL_ADC_ConfigChannel+0x54>
 8002920:	2302      	movs	r3, #2
 8002922:	e0bb      	b.n	8002a9c <HAL_ADC_ConfigChannel+0x1cc>
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2234      	movs	r2, #52	; 0x34
 8002928:	2101      	movs	r1, #1
 800292a:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	2204      	movs	r2, #4
 8002934:	4013      	ands	r3, r2
 8002936:	d000      	beq.n	800293a <HAL_ADC_ConfigChannel+0x6a>
 8002938:	e09f      	b.n	8002a7a <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	4a59      	ldr	r2, [pc, #356]	; (8002aa4 <HAL_ADC_ConfigChannel+0x1d4>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d100      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x76>
 8002944:	e077      	b.n	8002a36 <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6a99      	ldr	r1, [r3, #40]	; 0x28
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2201      	movs	r2, #1
 8002952:	409a      	lsls	r2, r3
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	430a      	orrs	r2, r1
 800295a:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	055b      	lsls	r3, r3, #21
 8002964:	429a      	cmp	r2, r3
 8002966:	d037      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800296c:	2b01      	cmp	r3, #1
 800296e:	d033      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002974:	2b02      	cmp	r3, #2
 8002976:	d02f      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800297c:	2b03      	cmp	r3, #3
 800297e:	d02b      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002984:	2b04      	cmp	r3, #4
 8002986:	d027      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800298c:	2b05      	cmp	r3, #5
 800298e:	d023      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002994:	2b06      	cmp	r3, #6
 8002996:	d01f      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800299c:	2b07      	cmp	r3, #7
 800299e:	d01b      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 80029a0:	683b      	ldr	r3, [r7, #0]
 80029a2:	689a      	ldr	r2, [r3, #8]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	2107      	movs	r1, #7
 80029ac:	400b      	ands	r3, r1
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d012      	beq.n	80029d8 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695a      	ldr	r2, [r3, #20]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2107      	movs	r1, #7
 80029be:	438a      	bics	r2, r1
 80029c0:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6959      	ldr	r1, [r3, #20]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	689b      	ldr	r3, [r3, #8]
 80029cc:	2207      	movs	r2, #7
 80029ce:	401a      	ands	r2, r3
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	430a      	orrs	r2, r1
 80029d6:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80029d8:	683b      	ldr	r3, [r7, #0]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	2b10      	cmp	r3, #16
 80029de:	d003      	beq.n	80029e8 <HAL_ADC_ConfigChannel+0x118>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b11      	cmp	r3, #17
 80029e6:	d152      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80029e8:	4b2f      	ldr	r3, [pc, #188]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1d8>)
 80029ea:	6819      	ldr	r1, [r3, #0]
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	2b10      	cmp	r3, #16
 80029f2:	d102      	bne.n	80029fa <HAL_ADC_ConfigChannel+0x12a>
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	041b      	lsls	r3, r3, #16
 80029f8:	e001      	b.n	80029fe <HAL_ADC_ConfigChannel+0x12e>
 80029fa:	2380      	movs	r3, #128	; 0x80
 80029fc:	03db      	lsls	r3, r3, #15
 80029fe:	4a2a      	ldr	r2, [pc, #168]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002a00:	430b      	orrs	r3, r1
 8002a02:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	2b10      	cmp	r3, #16
 8002a0a:	d140      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a0c:	4b27      	ldr	r3, [pc, #156]	; (8002aac <HAL_ADC_ConfigChannel+0x1dc>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	4927      	ldr	r1, [pc, #156]	; (8002ab0 <HAL_ADC_ConfigChannel+0x1e0>)
 8002a12:	0018      	movs	r0, r3
 8002a14:	f7fd fb82 	bl	800011c <__udivsi3>
 8002a18:	0003      	movs	r3, r0
 8002a1a:	001a      	movs	r2, r3
 8002a1c:	0013      	movs	r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	189b      	adds	r3, r3, r2
 8002a22:	005b      	lsls	r3, r3, #1
 8002a24:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a26:	e002      	b.n	8002a2e <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d1f9      	bne.n	8002a28 <HAL_ADC_ConfigChannel+0x158>
 8002a34:	e02b      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	2101      	movs	r1, #1
 8002a42:	4099      	lsls	r1, r3
 8002a44:	000b      	movs	r3, r1
 8002a46:	43d9      	mvns	r1, r3
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	400a      	ands	r2, r1
 8002a4e:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002a50:	683b      	ldr	r3, [r7, #0]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	2b10      	cmp	r3, #16
 8002a56:	d003      	beq.n	8002a60 <HAL_ADC_ConfigChannel+0x190>
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	2b11      	cmp	r3, #17
 8002a5e:	d116      	bne.n	8002a8e <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8002a60:	4b11      	ldr	r3, [pc, #68]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002a62:	6819      	ldr	r1, [r3, #0]
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	2b10      	cmp	r3, #16
 8002a6a:	d101      	bne.n	8002a70 <HAL_ADC_ConfigChannel+0x1a0>
 8002a6c:	4a11      	ldr	r2, [pc, #68]	; (8002ab4 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a6e:	e000      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x1a2>
 8002a70:	4a11      	ldr	r2, [pc, #68]	; (8002ab8 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a72:	4b0d      	ldr	r3, [pc, #52]	; (8002aa8 <HAL_ADC_ConfigChannel+0x1d8>)
 8002a74:	400a      	ands	r2, r1
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	e009      	b.n	8002a8e <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a7e:	2220      	movs	r2, #32
 8002a80:	431a      	orrs	r2, r3
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8002a86:	230f      	movs	r3, #15
 8002a88:	18fb      	adds	r3, r7, r3
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	2234      	movs	r2, #52	; 0x34
 8002a92:	2100      	movs	r1, #0
 8002a94:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8002a96:	230f      	movs	r3, #15
 8002a98:	18fb      	adds	r3, r7, r3
 8002a9a:	781b      	ldrb	r3, [r3, #0]
}
 8002a9c:	0018      	movs	r0, r3
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	b004      	add	sp, #16
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	00001001 	.word	0x00001001
 8002aa8:	40012708 	.word	0x40012708
 8002aac:	20000004 	.word	0x20000004
 8002ab0:	000f4240 	.word	0x000f4240
 8002ab4:	ff7fffff 	.word	0xff7fffff
 8002ab8:	ffbfffff 	.word	0xffbfffff

08002abc <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689b      	ldr	r3, [r3, #8]
 8002ad2:	2203      	movs	r2, #3
 8002ad4:	4013      	ands	r3, r2
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d112      	bne.n	8002b00 <ADC_Enable+0x44>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	2201      	movs	r2, #1
 8002ae2:	4013      	ands	r3, r2
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d009      	beq.n	8002afc <ADC_Enable+0x40>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	68da      	ldr	r2, [r3, #12]
 8002aee:	2380      	movs	r3, #128	; 0x80
 8002af0:	021b      	lsls	r3, r3, #8
 8002af2:	401a      	ands	r2, r3
 8002af4:	2380      	movs	r3, #128	; 0x80
 8002af6:	021b      	lsls	r3, r3, #8
 8002af8:	429a      	cmp	r2, r3
 8002afa:	d101      	bne.n	8002b00 <ADC_Enable+0x44>
 8002afc:	2301      	movs	r3, #1
 8002afe:	e000      	b.n	8002b02 <ADC_Enable+0x46>
 8002b00:	2300      	movs	r3, #0
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d152      	bne.n	8002bac <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	4a2a      	ldr	r2, [pc, #168]	; (8002bb8 <ADC_Enable+0xfc>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	d00d      	beq.n	8002b2e <ADC_Enable+0x72>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b16:	2210      	movs	r2, #16
 8002b18:	431a      	orrs	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	639a      	str	r2, [r3, #56]	; 0x38
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b22:	2201      	movs	r2, #1
 8002b24:	431a      	orrs	r2, r3
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	63da      	str	r2, [r3, #60]	; 0x3c
      
      return HAL_ERROR;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	e03f      	b.n	8002bae <ADC_Enable+0xf2>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689a      	ldr	r2, [r3, #8]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	2101      	movs	r1, #1
 8002b3a:	430a      	orrs	r2, r1
 8002b3c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b3e:	4b1f      	ldr	r3, [pc, #124]	; (8002bbc <ADC_Enable+0x100>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	491f      	ldr	r1, [pc, #124]	; (8002bc0 <ADC_Enable+0x104>)
 8002b44:	0018      	movs	r0, r3
 8002b46:	f7fd fae9 	bl	800011c <__udivsi3>
 8002b4a:	0003      	movs	r3, r0
 8002b4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b4e:	e002      	b.n	8002b56 <ADC_Enable+0x9a>
    {
      wait_loop_index--;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <ADC_Enable+0x94>
    }

    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b5c:	f7ff fb5e 	bl	800221c <HAL_GetTick>
 8002b60:	0003      	movs	r3, r0
 8002b62:	60fb      	str	r3, [r7, #12]
    
    /* Wait for ADC effectively enabled */
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b64:	e01b      	b.n	8002b9e <ADC_Enable+0xe2>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b66:	f7ff fb59 	bl	800221c <HAL_GetTick>
 8002b6a:	0002      	movs	r2, r0
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	1ad3      	subs	r3, r2, r3
 8002b70:	2b02      	cmp	r3, #2
 8002b72:	d914      	bls.n	8002b9e <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	4013      	ands	r3, r2
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d00d      	beq.n	8002b9e <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b86:	2210      	movs	r2, #16
 8002b88:	431a      	orrs	r2, r3
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b92:	2201      	movs	r2, #1
 8002b94:	431a      	orrs	r2, r3
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e007      	b.n	8002bae <ADC_Enable+0xf2>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2201      	movs	r2, #1
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d1dc      	bne.n	8002b66 <ADC_Enable+0xaa>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bac:	2300      	movs	r3, #0
}
 8002bae:	0018      	movs	r0, r3
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	b004      	add	sp, #16
 8002bb4:	bd80      	pop	{r7, pc}
 8002bb6:	46c0      	nop			; (mov r8, r8)
 8002bb8:	80000017 	.word	0x80000017
 8002bbc:	20000004 	.word	0x20000004
 8002bc0:	000f4240 	.word	0x000f4240

08002bc4 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b084      	sub	sp, #16
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bcc:	2300      	movs	r3, #0
 8002bce:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	689b      	ldr	r3, [r3, #8]
 8002bd6:	2203      	movs	r2, #3
 8002bd8:	4013      	ands	r3, r2
 8002bda:	2b01      	cmp	r3, #1
 8002bdc:	d112      	bne.n	8002c04 <ADC_Disable+0x40>
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	2201      	movs	r2, #1
 8002be6:	4013      	ands	r3, r2
 8002be8:	2b01      	cmp	r3, #1
 8002bea:	d009      	beq.n	8002c00 <ADC_Disable+0x3c>
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68da      	ldr	r2, [r3, #12]
 8002bf2:	2380      	movs	r3, #128	; 0x80
 8002bf4:	021b      	lsls	r3, r3, #8
 8002bf6:	401a      	ands	r2, r3
 8002bf8:	2380      	movs	r3, #128	; 0x80
 8002bfa:	021b      	lsls	r3, r3, #8
 8002bfc:	429a      	cmp	r2, r3
 8002bfe:	d101      	bne.n	8002c04 <ADC_Disable+0x40>
 8002c00:	2301      	movs	r3, #1
 8002c02:	e000      	b.n	8002c06 <ADC_Disable+0x42>
 8002c04:	2300      	movs	r3, #0
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d048      	beq.n	8002c9c <ADC_Disable+0xd8>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	2205      	movs	r2, #5
 8002c12:	4013      	ands	r3, r2
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d110      	bne.n	8002c3a <ADC_Disable+0x76>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	689a      	ldr	r2, [r3, #8]
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2102      	movs	r1, #2
 8002c24:	430a      	orrs	r2, r1
 8002c26:	609a      	str	r2, [r3, #8]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	2203      	movs	r2, #3
 8002c2e:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002c30:	f7ff faf4 	bl	800221c <HAL_GetTick>
 8002c34:	0003      	movs	r3, r0
 8002c36:	60fb      	str	r3, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c38:	e029      	b.n	8002c8e <ADC_Disable+0xca>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c3e:	2210      	movs	r2, #16
 8002c40:	431a      	orrs	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	639a      	str	r2, [r3, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c4a:	2201      	movs	r2, #1
 8002c4c:	431a      	orrs	r2, r3
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	63da      	str	r2, [r3, #60]	; 0x3c
      return HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	e023      	b.n	8002c9e <ADC_Disable+0xda>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002c56:	f7ff fae1 	bl	800221c <HAL_GetTick>
 8002c5a:	0002      	movs	r2, r0
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	2b02      	cmp	r3, #2
 8002c62:	d914      	bls.n	8002c8e <ADC_Disable+0xca>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	2201      	movs	r2, #1
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	2b01      	cmp	r3, #1
 8002c70:	d10d      	bne.n	8002c8e <ADC_Disable+0xca>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c76:	2210      	movs	r2, #16
 8002c78:	431a      	orrs	r2, r3
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c82:	2201      	movs	r2, #1
 8002c84:	431a      	orrs	r2, r3
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e007      	b.n	8002c9e <ADC_Disable+0xda>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	2201      	movs	r2, #1
 8002c96:	4013      	ands	r3, r2
 8002c98:	2b01      	cmp	r3, #1
 8002c9a:	d0dc      	beq.n	8002c56 <ADC_Disable+0x92>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c9c:	2300      	movs	r3, #0
}
 8002c9e:	0018      	movs	r0, r3
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	b004      	add	sp, #16
 8002ca4:	bd80      	pop	{r7, pc}

08002ca6 <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc)
{
 8002ca6:	b580      	push	{r7, lr}
 8002ca8:	b084      	sub	sp, #16
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
    
  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc))
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	689b      	ldr	r3, [r3, #8]
 8002cb8:	2204      	movs	r2, #4
 8002cba:	4013      	ands	r3, r2
 8002cbc:	d03a      	beq.n	8002d34 <ADC_ConversionStop+0x8e>
  {
    
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	2204      	movs	r2, #4
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	2b04      	cmp	r3, #4
 8002cca:	d10d      	bne.n	8002ce8 <ADC_ConversionStop+0x42>
        HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)                  )
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	689b      	ldr	r3, [r3, #8]
 8002cd2:	2202      	movs	r2, #2
 8002cd4:	4013      	ands	r3, r2
    if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8002cd6:	d107      	bne.n	8002ce8 <ADC_ConversionStop+0x42>
    {
      /* Stop conversions on regular group */
      hadc->Instance->CR |= ADC_CR_ADSTP;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	689a      	ldr	r2, [r3, #8]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2110      	movs	r1, #16
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	609a      	str	r2, [r3, #8]
    }
    
    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002ce8:	f7ff fa98 	bl	800221c <HAL_GetTick>
 8002cec:	0003      	movs	r3, r0
 8002cee:	60fb      	str	r3, [r7, #12]
      
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002cf0:	e01a      	b.n	8002d28 <ADC_ConversionStop+0x82>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8002cf2:	f7ff fa93 	bl	800221c <HAL_GetTick>
 8002cf6:	0002      	movs	r2, r0
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	1ad3      	subs	r3, r2, r3
 8002cfc:	2b02      	cmp	r3, #2
 8002cfe:	d913      	bls.n	8002d28 <ADC_ConversionStop+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	689b      	ldr	r3, [r3, #8]
 8002d06:	2204      	movs	r2, #4
 8002d08:	4013      	ands	r3, r2
 8002d0a:	d00d      	beq.n	8002d28 <ADC_ConversionStop+0x82>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d10:	2210      	movs	r2, #16
 8002d12:	431a      	orrs	r2, r3
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	639a      	str	r2, [r3, #56]	; 0x38

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	431a      	orrs	r2, r3
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	63da      	str	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e006      	b.n	8002d36 <ADC_ConversionStop+0x90>
    while((hadc->Instance->CR & ADC_CR_ADSTART) != RESET)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	2204      	movs	r2, #4
 8002d30:	4013      	ands	r3, r2
 8002d32:	d1de      	bne.n	8002cf2 <ADC_ConversionStop+0x4c>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002d34:	2300      	movs	r3, #0
}
 8002d36:	0018      	movs	r0, r3
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	b004      	add	sp, #16
 8002d3c:	bd80      	pop	{r7, pc}
	...

08002d40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b082      	sub	sp, #8
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	0002      	movs	r2, r0
 8002d48:	1dfb      	adds	r3, r7, #7
 8002d4a:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d4c:	1dfb      	adds	r3, r7, #7
 8002d4e:	781b      	ldrb	r3, [r3, #0]
 8002d50:	2b7f      	cmp	r3, #127	; 0x7f
 8002d52:	d809      	bhi.n	8002d68 <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d54:	1dfb      	adds	r3, r7, #7
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	001a      	movs	r2, r3
 8002d5a:	231f      	movs	r3, #31
 8002d5c:	401a      	ands	r2, r3
 8002d5e:	4b04      	ldr	r3, [pc, #16]	; (8002d70 <__NVIC_EnableIRQ+0x30>)
 8002d60:	2101      	movs	r1, #1
 8002d62:	4091      	lsls	r1, r2
 8002d64:	000a      	movs	r2, r1
 8002d66:	601a      	str	r2, [r3, #0]
  }
}
 8002d68:	46c0      	nop			; (mov r8, r8)
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	b002      	add	sp, #8
 8002d6e:	bd80      	pop	{r7, pc}
 8002d70:	e000e100 	.word	0xe000e100

08002d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b083      	sub	sp, #12
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	0002      	movs	r2, r0
 8002d7c:	6039      	str	r1, [r7, #0]
 8002d7e:	1dfb      	adds	r3, r7, #7
 8002d80:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002d82:	1dfb      	adds	r3, r7, #7
 8002d84:	781b      	ldrb	r3, [r3, #0]
 8002d86:	2b7f      	cmp	r3, #127	; 0x7f
 8002d88:	d828      	bhi.n	8002ddc <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002d8a:	4a2f      	ldr	r2, [pc, #188]	; (8002e48 <__NVIC_SetPriority+0xd4>)
 8002d8c:	1dfb      	adds	r3, r7, #7
 8002d8e:	781b      	ldrb	r3, [r3, #0]
 8002d90:	b25b      	sxtb	r3, r3
 8002d92:	089b      	lsrs	r3, r3, #2
 8002d94:	33c0      	adds	r3, #192	; 0xc0
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	589b      	ldr	r3, [r3, r2]
 8002d9a:	1dfa      	adds	r2, r7, #7
 8002d9c:	7812      	ldrb	r2, [r2, #0]
 8002d9e:	0011      	movs	r1, r2
 8002da0:	2203      	movs	r2, #3
 8002da2:	400a      	ands	r2, r1
 8002da4:	00d2      	lsls	r2, r2, #3
 8002da6:	21ff      	movs	r1, #255	; 0xff
 8002da8:	4091      	lsls	r1, r2
 8002daa:	000a      	movs	r2, r1
 8002dac:	43d2      	mvns	r2, r2
 8002dae:	401a      	ands	r2, r3
 8002db0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	019b      	lsls	r3, r3, #6
 8002db6:	22ff      	movs	r2, #255	; 0xff
 8002db8:	401a      	ands	r2, r3
 8002dba:	1dfb      	adds	r3, r7, #7
 8002dbc:	781b      	ldrb	r3, [r3, #0]
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	2303      	movs	r3, #3
 8002dc2:	4003      	ands	r3, r0
 8002dc4:	00db      	lsls	r3, r3, #3
 8002dc6:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002dc8:	481f      	ldr	r0, [pc, #124]	; (8002e48 <__NVIC_SetPriority+0xd4>)
 8002dca:	1dfb      	adds	r3, r7, #7
 8002dcc:	781b      	ldrb	r3, [r3, #0]
 8002dce:	b25b      	sxtb	r3, r3
 8002dd0:	089b      	lsrs	r3, r3, #2
 8002dd2:	430a      	orrs	r2, r1
 8002dd4:	33c0      	adds	r3, #192	; 0xc0
 8002dd6:	009b      	lsls	r3, r3, #2
 8002dd8:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8002dda:	e031      	b.n	8002e40 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002ddc:	4a1b      	ldr	r2, [pc, #108]	; (8002e4c <__NVIC_SetPriority+0xd8>)
 8002dde:	1dfb      	adds	r3, r7, #7
 8002de0:	781b      	ldrb	r3, [r3, #0]
 8002de2:	0019      	movs	r1, r3
 8002de4:	230f      	movs	r3, #15
 8002de6:	400b      	ands	r3, r1
 8002de8:	3b08      	subs	r3, #8
 8002dea:	089b      	lsrs	r3, r3, #2
 8002dec:	3306      	adds	r3, #6
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	18d3      	adds	r3, r2, r3
 8002df2:	3304      	adds	r3, #4
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	1dfa      	adds	r2, r7, #7
 8002df8:	7812      	ldrb	r2, [r2, #0]
 8002dfa:	0011      	movs	r1, r2
 8002dfc:	2203      	movs	r2, #3
 8002dfe:	400a      	ands	r2, r1
 8002e00:	00d2      	lsls	r2, r2, #3
 8002e02:	21ff      	movs	r1, #255	; 0xff
 8002e04:	4091      	lsls	r1, r2
 8002e06:	000a      	movs	r2, r1
 8002e08:	43d2      	mvns	r2, r2
 8002e0a:	401a      	ands	r2, r3
 8002e0c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	019b      	lsls	r3, r3, #6
 8002e12:	22ff      	movs	r2, #255	; 0xff
 8002e14:	401a      	ands	r2, r3
 8002e16:	1dfb      	adds	r3, r7, #7
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	0018      	movs	r0, r3
 8002e1c:	2303      	movs	r3, #3
 8002e1e:	4003      	ands	r3, r0
 8002e20:	00db      	lsls	r3, r3, #3
 8002e22:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002e24:	4809      	ldr	r0, [pc, #36]	; (8002e4c <__NVIC_SetPriority+0xd8>)
 8002e26:	1dfb      	adds	r3, r7, #7
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	001c      	movs	r4, r3
 8002e2c:	230f      	movs	r3, #15
 8002e2e:	4023      	ands	r3, r4
 8002e30:	3b08      	subs	r3, #8
 8002e32:	089b      	lsrs	r3, r3, #2
 8002e34:	430a      	orrs	r2, r1
 8002e36:	3306      	adds	r3, #6
 8002e38:	009b      	lsls	r3, r3, #2
 8002e3a:	18c3      	adds	r3, r0, r3
 8002e3c:	3304      	adds	r3, #4
 8002e3e:	601a      	str	r2, [r3, #0]
}
 8002e40:	46c0      	nop			; (mov r8, r8)
 8002e42:	46bd      	mov	sp, r7
 8002e44:	b003      	add	sp, #12
 8002e46:	bd90      	pop	{r4, r7, pc}
 8002e48:	e000e100 	.word	0xe000e100
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	1e5a      	subs	r2, r3, #1
 8002e5c:	2380      	movs	r3, #128	; 0x80
 8002e5e:	045b      	lsls	r3, r3, #17
 8002e60:	429a      	cmp	r2, r3
 8002e62:	d301      	bcc.n	8002e68 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e64:	2301      	movs	r3, #1
 8002e66:	e010      	b.n	8002e8a <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e68:	4b0a      	ldr	r3, [pc, #40]	; (8002e94 <SysTick_Config+0x44>)
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	3a01      	subs	r2, #1
 8002e6e:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e70:	2301      	movs	r3, #1
 8002e72:	425b      	negs	r3, r3
 8002e74:	2103      	movs	r1, #3
 8002e76:	0018      	movs	r0, r3
 8002e78:	f7ff ff7c 	bl	8002d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x44>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x44>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b002      	add	sp, #8
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b084      	sub	sp, #16
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	60b9      	str	r1, [r7, #8]
 8002ea0:	607a      	str	r2, [r7, #4]
 8002ea2:	210f      	movs	r1, #15
 8002ea4:	187b      	adds	r3, r7, r1
 8002ea6:	1c02      	adds	r2, r0, #0
 8002ea8:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8002eaa:	68ba      	ldr	r2, [r7, #8]
 8002eac:	187b      	adds	r3, r7, r1
 8002eae:	781b      	ldrb	r3, [r3, #0]
 8002eb0:	b25b      	sxtb	r3, r3
 8002eb2:	0011      	movs	r1, r2
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	f7ff ff5d 	bl	8002d74 <__NVIC_SetPriority>
}
 8002eba:	46c0      	nop			; (mov r8, r8)
 8002ebc:	46bd      	mov	sp, r7
 8002ebe:	b004      	add	sp, #16
 8002ec0:	bd80      	pop	{r7, pc}

08002ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ec2:	b580      	push	{r7, lr}
 8002ec4:	b082      	sub	sp, #8
 8002ec6:	af00      	add	r7, sp, #0
 8002ec8:	0002      	movs	r2, r0
 8002eca:	1dfb      	adds	r3, r7, #7
 8002ecc:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ece:	1dfb      	adds	r3, r7, #7
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	b25b      	sxtb	r3, r3
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	f7ff ff33 	bl	8002d40 <__NVIC_EnableIRQ>
}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	46bd      	mov	sp, r7
 8002ede:	b002      	add	sp, #8
 8002ee0:	bd80      	pop	{r7, pc}

08002ee2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ee2:	b580      	push	{r7, lr}
 8002ee4:	b082      	sub	sp, #8
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	0018      	movs	r0, r3
 8002eee:	f7ff ffaf 	bl	8002e50 <SysTick_Config>
 8002ef2:	0003      	movs	r3, r0
}
 8002ef4:	0018      	movs	r0, r3
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd80      	pop	{r7, pc}

08002efc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	b084      	sub	sp, #16
 8002f00:	af00      	add	r7, sp, #0
 8002f02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002f04:	2300      	movs	r3, #0
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e036      	b.n	8002f80 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	2221      	movs	r2, #33	; 0x21
 8002f16:	2102      	movs	r1, #2
 8002f18:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	4a18      	ldr	r2, [pc, #96]	; (8002f88 <HAL_DMA_Init+0x8c>)
 8002f26:	4013      	ands	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002f32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002f3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	695b      	ldr	r3, [r3, #20]
 8002f44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002f4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	69db      	ldr	r3, [r3, #28]
 8002f50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	68fa      	ldr	r2, [r7, #12]
 8002f5e:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	0018      	movs	r0, r3
 8002f64:	f000 f9c4 	bl	80032f0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	2200      	movs	r2, #0
 8002f6c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2221      	movs	r2, #33	; 0x21
 8002f72:	2101      	movs	r1, #1
 8002f74:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	2220      	movs	r2, #32
 8002f7a:	2100      	movs	r1, #0
 8002f7c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f7e:	2300      	movs	r3, #0
}
 8002f80:	0018      	movs	r0, r3
 8002f82:	46bd      	mov	sp, r7
 8002f84:	b004      	add	sp, #16
 8002f86:	bd80      	pop	{r7, pc}
 8002f88:	ffffc00f 	.word	0xffffc00f

08002f8c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b086      	sub	sp, #24
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	60f8      	str	r0, [r7, #12]
 8002f94:	60b9      	str	r1, [r7, #8]
 8002f96:	607a      	str	r2, [r7, #4]
 8002f98:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002f9a:	2317      	movs	r3, #23
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2220      	movs	r2, #32
 8002fa6:	5c9b      	ldrb	r3, [r3, r2]
 8002fa8:	2b01      	cmp	r3, #1
 8002faa:	d101      	bne.n	8002fb0 <HAL_DMA_Start_IT+0x24>
 8002fac:	2302      	movs	r3, #2
 8002fae:	e04f      	b.n	8003050 <HAL_DMA_Start_IT+0xc4>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2220      	movs	r2, #32
 8002fb4:	2101      	movs	r1, #1
 8002fb6:	5499      	strb	r1, [r3, r2]

  if (HAL_DMA_STATE_READY == hdma->State)
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	2221      	movs	r2, #33	; 0x21
 8002fbc:	5c9b      	ldrb	r3, [r3, r2]
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d13a      	bne.n	800303a <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2221      	movs	r2, #33	; 0x21
 8002fc8:	2102      	movs	r1, #2
 8002fca:	5499      	strb	r1, [r3, r2]

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	681a      	ldr	r2, [r3, #0]
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	2101      	movs	r1, #1
 8002fde:	438a      	bics	r2, r1
 8002fe0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	68b9      	ldr	r1, [r7, #8]
 8002fe8:	68f8      	ldr	r0, [r7, #12]
 8002fea:	f000 f954 	bl	8003296 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if (NULL != hdma->XferHalfCpltCallback)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d008      	beq.n	8003008 <HAL_DMA_Start_IT+0x7c>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	681a      	ldr	r2, [r3, #0]
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	210e      	movs	r1, #14
 8003002:	430a      	orrs	r2, r1
 8003004:	601a      	str	r2, [r3, #0]
 8003006:	e00f      	b.n	8003028 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	210a      	movs	r1, #10
 8003014:	430a      	orrs	r2, r1
 8003016:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	681a      	ldr	r2, [r3, #0]
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	2104      	movs	r1, #4
 8003024:	438a      	bics	r2, r1
 8003026:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2101      	movs	r1, #1
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
 8003038:	e007      	b.n	800304a <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2220      	movs	r2, #32
 800303e:	2100      	movs	r1, #0
 8003040:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003042:	2317      	movs	r3, #23
 8003044:	18fb      	adds	r3, r7, r3
 8003046:	2202      	movs	r2, #2
 8003048:	701a      	strb	r2, [r3, #0]
  }

  return status;
 800304a:	2317      	movs	r3, #23
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	781b      	ldrb	r3, [r3, #0]
}
 8003050:	0018      	movs	r0, r3
 8003052:	46bd      	mov	sp, r7
 8003054:	b006      	add	sp, #24
 8003056:	bd80      	pop	{r7, pc}

08003058 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b082      	sub	sp, #8
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2221      	movs	r2, #33	; 0x21
 8003064:	5c9b      	ldrb	r3, [r3, r2]
 8003066:	b2db      	uxtb	r3, r3
 8003068:	2b02      	cmp	r3, #2
 800306a:	d008      	beq.n	800307e <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2204      	movs	r2, #4
 8003070:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	2220      	movs	r2, #32
 8003076:	2100      	movs	r1, #0
 8003078:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800307a:	2301      	movs	r3, #1
 800307c:	e020      	b.n	80030c0 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	210e      	movs	r1, #14
 800308a:	438a      	bics	r2, r1
 800308c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	681a      	ldr	r2, [r3, #0]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	2101      	movs	r1, #1
 800309a:	438a      	bics	r2, r1
 800309c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80030a6:	2101      	movs	r1, #1
 80030a8:	4091      	lsls	r1, r2
 80030aa:	000a      	movs	r2, r1
 80030ac:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2221      	movs	r2, #33	; 0x21
 80030b2:	2101      	movs	r1, #1
 80030b4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	2220      	movs	r2, #32
 80030ba:	2100      	movs	r1, #0
 80030bc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80030be:	2300      	movs	r3, #0
}
 80030c0:	0018      	movs	r0, r3
 80030c2:	46bd      	mov	sp, r7
 80030c4:	b002      	add	sp, #8
 80030c6:	bd80      	pop	{r7, pc}

080030c8 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b084      	sub	sp, #16
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80030d0:	210f      	movs	r1, #15
 80030d2:	187b      	adds	r3, r7, r1
 80030d4:	2200      	movs	r2, #0
 80030d6:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2221      	movs	r2, #33	; 0x21
 80030dc:	5c9b      	ldrb	r3, [r3, r2]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d006      	beq.n	80030f2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2204      	movs	r2, #4
 80030e8:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 80030ea:	187b      	adds	r3, r7, r1
 80030ec:	2201      	movs	r2, #1
 80030ee:	701a      	strb	r2, [r3, #0]
 80030f0:	e028      	b.n	8003144 <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	210e      	movs	r1, #14
 80030fe:	438a      	bics	r2, r1
 8003100:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	2101      	movs	r1, #1
 800310e:	438a      	bics	r2, r1
 8003110:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800311a:	2101      	movs	r1, #1
 800311c:	4091      	lsls	r1, r2
 800311e:	000a      	movs	r2, r1
 8003120:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	2221      	movs	r2, #33	; 0x21
 8003126:	2101      	movs	r1, #1
 8003128:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2220      	movs	r2, #32
 800312e:	2100      	movs	r1, #0
 8003130:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003136:	2b00      	cmp	r3, #0
 8003138:	d004      	beq.n	8003144 <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800313e:	687a      	ldr	r2, [r7, #4]
 8003140:	0010      	movs	r0, r2
 8003142:	4798      	blx	r3
    }
  }
  return status;
 8003144:	230f      	movs	r3, #15
 8003146:	18fb      	adds	r3, r7, r3
 8003148:	781b      	ldrb	r3, [r3, #0]
}
 800314a:	0018      	movs	r0, r3
 800314c:	46bd      	mov	sp, r7
 800314e:	b004      	add	sp, #16
 8003150:	bd80      	pop	{r7, pc}

08003152 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003152:	b580      	push	{r7, lr}
 8003154:	b084      	sub	sp, #16
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800316e:	2204      	movs	r2, #4
 8003170:	409a      	lsls	r2, r3
 8003172:	0013      	movs	r3, r2
 8003174:	68fa      	ldr	r2, [r7, #12]
 8003176:	4013      	ands	r3, r2
 8003178:	d024      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x72>
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	2204      	movs	r2, #4
 800317e:	4013      	ands	r3, r2
 8003180:	d020      	beq.n	80031c4 <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2220      	movs	r2, #32
 800318a:	4013      	ands	r3, r2
 800318c:	d107      	bne.n	800319e <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	2104      	movs	r1, #4
 800319a:	438a      	bics	r2, r1
 800319c:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80031a6:	2104      	movs	r1, #4
 80031a8:	4091      	lsls	r1, r2
 80031aa:	000a      	movs	r2, r1
 80031ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d100      	bne.n	80031b8 <HAL_DMA_IRQHandler+0x66>
 80031b6:	e06a      	b.n	800328e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031bc:	687a      	ldr	r2, [r7, #4]
 80031be:	0010      	movs	r0, r2
 80031c0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80031c2:	e064      	b.n	800328e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031c8:	2202      	movs	r2, #2
 80031ca:	409a      	lsls	r2, r3
 80031cc:	0013      	movs	r3, r2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	4013      	ands	r3, r2
 80031d2:	d02b      	beq.n	800322c <HAL_DMA_IRQHandler+0xda>
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	2202      	movs	r2, #2
 80031d8:	4013      	ands	r3, r2
 80031da:	d027      	beq.n	800322c <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2220      	movs	r2, #32
 80031e4:	4013      	ands	r3, r2
 80031e6:	d10b      	bne.n	8003200 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	681a      	ldr	r2, [r3, #0]
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	210a      	movs	r1, #10
 80031f4:	438a      	bics	r2, r1
 80031f6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2221      	movs	r2, #33	; 0x21
 80031fc:	2101      	movs	r1, #1
 80031fe:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003208:	2102      	movs	r1, #2
 800320a:	4091      	lsls	r1, r2
 800320c:	000a      	movs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2220      	movs	r2, #32
 8003214:	2100      	movs	r1, #0
 8003216:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321c:	2b00      	cmp	r3, #0
 800321e:	d036      	beq.n	800328e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	0010      	movs	r0, r2
 8003228:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800322a:	e030      	b.n	800328e <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003230:	2208      	movs	r2, #8
 8003232:	409a      	lsls	r2, r3
 8003234:	0013      	movs	r3, r2
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4013      	ands	r3, r2
 800323a:	d028      	beq.n	800328e <HAL_DMA_IRQHandler+0x13c>
 800323c:	68bb      	ldr	r3, [r7, #8]
 800323e:	2208      	movs	r2, #8
 8003240:	4013      	ands	r3, r2
 8003242:	d024      	beq.n	800328e <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	681a      	ldr	r2, [r3, #0]
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	210e      	movs	r1, #14
 8003250:	438a      	bics	r2, r1
 8003252:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800325c:	2101      	movs	r1, #1
 800325e:	4091      	lsls	r1, r2
 8003260:	000a      	movs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	2221      	movs	r2, #33	; 0x21
 800326e:	2101      	movs	r1, #1
 8003270:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2220      	movs	r2, #32
 8003276:	2100      	movs	r1, #0
 8003278:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800327e:	2b00      	cmp	r3, #0
 8003280:	d005      	beq.n	800328e <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	0010      	movs	r0, r2
 800328a:	4798      	blx	r3
    }
  }
}
 800328c:	e7ff      	b.n	800328e <HAL_DMA_IRQHandler+0x13c>
 800328e:	46c0      	nop			; (mov r8, r8)
 8003290:	46bd      	mov	sp, r7
 8003292:	b004      	add	sp, #16
 8003294:	bd80      	pop	{r7, pc}

08003296 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	60f8      	str	r0, [r7, #12]
 800329e:	60b9      	str	r1, [r7, #8]
 80032a0:	607a      	str	r2, [r7, #4]
 80032a2:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	2101      	movs	r1, #1
 80032ae:	4091      	lsls	r1, r2
 80032b0:	000a      	movs	r2, r1
 80032b2:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	683a      	ldr	r2, [r7, #0]
 80032ba:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	685b      	ldr	r3, [r3, #4]
 80032c0:	2b10      	cmp	r3, #16
 80032c2:	d108      	bne.n	80032d6 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	687a      	ldr	r2, [r7, #4]
 80032ca:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	68ba      	ldr	r2, [r7, #8]
 80032d2:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80032d4:	e007      	b.n	80032e6 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68ba      	ldr	r2, [r7, #8]
 80032dc:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	687a      	ldr	r2, [r7, #4]
 80032e4:	60da      	str	r2, [r3, #12]
}
 80032e6:	46c0      	nop			; (mov r8, r8)
 80032e8:	46bd      	mov	sp, r7
 80032ea:	b004      	add	sp, #16
 80032ec:	bd80      	pop	{r7, pc}
	...

080032f0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b082      	sub	sp, #8
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a08      	ldr	r2, [pc, #32]	; (8003320 <DMA_CalcBaseAndBitshift+0x30>)
 80032fe:	4694      	mov	ip, r2
 8003300:	4463      	add	r3, ip
 8003302:	2114      	movs	r1, #20
 8003304:	0018      	movs	r0, r3
 8003306:	f7fc ff09 	bl	800011c <__udivsi3>
 800330a:	0003      	movs	r3, r0
 800330c:	009a      	lsls	r2, r3, #2
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	4a03      	ldr	r2, [pc, #12]	; (8003324 <DMA_CalcBaseAndBitshift+0x34>)
 8003316:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 8003318:	46c0      	nop			; (mov r8, r8)
 800331a:	46bd      	mov	sp, r7
 800331c:	b002      	add	sp, #8
 800331e:	bd80      	pop	{r7, pc}
 8003320:	bffdfff8 	.word	0xbffdfff8
 8003324:	40020000 	.word	0x40020000

08003328 <HAL_FLASH_Program>:
  * @param  Data          Specifie the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003328:	b5f0      	push	{r4, r5, r6, r7, lr}
 800332a:	b087      	sub	sp, #28
 800332c:	af00      	add	r7, sp, #0
 800332e:	60f8      	str	r0, [r7, #12]
 8003330:	60b9      	str	r1, [r7, #8]
 8003332:	603a      	str	r2, [r7, #0]
 8003334:	607b      	str	r3, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8003336:	2317      	movs	r3, #23
 8003338:	18fb      	adds	r3, r7, r3
 800333a:	2201      	movs	r2, #1
 800333c:	701a      	strb	r2, [r3, #0]
  uint8_t index = 0U;
 800333e:	2316      	movs	r3, #22
 8003340:	18fb      	adds	r3, r7, r3
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
  uint8_t nbiterations = 0U;
 8003346:	2315      	movs	r3, #21
 8003348:	18fb      	adds	r3, r7, r3
 800334a:	2200      	movs	r2, #0
 800334c:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800334e:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <HAL_FLASH_Program+0x120>)
 8003350:	7e1b      	ldrb	r3, [r3, #24]
 8003352:	2b01      	cmp	r3, #1
 8003354:	d101      	bne.n	800335a <HAL_FLASH_Program+0x32>
 8003356:	2302      	movs	r3, #2
 8003358:	e072      	b.n	8003440 <HAL_FLASH_Program+0x118>
 800335a:	4b3b      	ldr	r3, [pc, #236]	; (8003448 <HAL_FLASH_Program+0x120>)
 800335c:	2201      	movs	r2, #1
 800335e:	761a      	strb	r2, [r3, #24]
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8003360:	2317      	movs	r3, #23
 8003362:	18fe      	adds	r6, r7, r3
 8003364:	4b39      	ldr	r3, [pc, #228]	; (800344c <HAL_FLASH_Program+0x124>)
 8003366:	0018      	movs	r0, r3
 8003368:	f000 f8c4 	bl	80034f4 <FLASH_WaitForLastOperation>
 800336c:	0003      	movs	r3, r0
 800336e:	7033      	strb	r3, [r6, #0]
  
  if(status == HAL_OK)
 8003370:	2317      	movs	r3, #23
 8003372:	18fb      	adds	r3, r7, r3
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d15c      	bne.n	8003434 <HAL_FLASH_Program+0x10c>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d104      	bne.n	800338a <HAL_FLASH_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address. */
      nbiterations = 1U;
 8003380:	2315      	movs	r3, #21
 8003382:	18fb      	adds	r3, r7, r3
 8003384:	2201      	movs	r2, #1
 8003386:	701a      	strb	r2, [r3, #0]
 8003388:	e00b      	b.n	80033a2 <HAL_FLASH_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	2b02      	cmp	r3, #2
 800338e:	d104      	bne.n	800339a <HAL_FLASH_Program+0x72>
    {
      /* Program word (32-bit = 2*16-bit) at a specified address. */
      nbiterations = 2U;
 8003390:	2315      	movs	r3, #21
 8003392:	18fb      	adds	r3, r7, r3
 8003394:	2202      	movs	r2, #2
 8003396:	701a      	strb	r2, [r3, #0]
 8003398:	e003      	b.n	80033a2 <HAL_FLASH_Program+0x7a>
    }
    else
    {
      /* Program double word (64-bit = 4*16-bit) at a specified address. */
      nbiterations = 4U;
 800339a:	2315      	movs	r3, #21
 800339c:	18fb      	adds	r3, r7, r3
 800339e:	2204      	movs	r2, #4
 80033a0:	701a      	strb	r2, [r3, #0]
    }

    for (index = 0U; index < nbiterations; index++)
 80033a2:	2316      	movs	r3, #22
 80033a4:	18fb      	adds	r3, r7, r3
 80033a6:	2200      	movs	r2, #0
 80033a8:	701a      	strb	r2, [r3, #0]
 80033aa:	e039      	b.n	8003420 <HAL_FLASH_Program+0xf8>
    {
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80033ac:	2116      	movs	r1, #22
 80033ae:	187b      	adds	r3, r7, r1
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	005a      	lsls	r2, r3, #1
 80033b4:	68bb      	ldr	r3, [r7, #8]
 80033b6:	18d0      	adds	r0, r2, r3
 80033b8:	187b      	adds	r3, r7, r1
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	011b      	lsls	r3, r3, #4
 80033be:	001a      	movs	r2, r3
 80033c0:	3a20      	subs	r2, #32
 80033c2:	2a00      	cmp	r2, #0
 80033c4:	db03      	blt.n	80033ce <HAL_FLASH_Program+0xa6>
 80033c6:	6879      	ldr	r1, [r7, #4]
 80033c8:	40d1      	lsrs	r1, r2
 80033ca:	000c      	movs	r4, r1
 80033cc:	e008      	b.n	80033e0 <HAL_FLASH_Program+0xb8>
 80033ce:	2220      	movs	r2, #32
 80033d0:	1ad2      	subs	r2, r2, r3
 80033d2:	6879      	ldr	r1, [r7, #4]
 80033d4:	4091      	lsls	r1, r2
 80033d6:	000a      	movs	r2, r1
 80033d8:	6839      	ldr	r1, [r7, #0]
 80033da:	40d9      	lsrs	r1, r3
 80033dc:	000c      	movs	r4, r1
 80033de:	4314      	orrs	r4, r2
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	40da      	lsrs	r2, r3
 80033e4:	0015      	movs	r5, r2
 80033e6:	b2a3      	uxth	r3, r4
 80033e8:	0019      	movs	r1, r3
 80033ea:	f000 f867 	bl	80034bc <FLASH_Program_HalfWord>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80033ee:	2317      	movs	r3, #23
 80033f0:	18fe      	adds	r6, r7, r3
 80033f2:	4b16      	ldr	r3, [pc, #88]	; (800344c <HAL_FLASH_Program+0x124>)
 80033f4:	0018      	movs	r0, r3
 80033f6:	f000 f87d 	bl	80034f4 <FLASH_WaitForLastOperation>
 80033fa:	0003      	movs	r3, r0
 80033fc:	7033      	strb	r3, [r6, #0]
    
        /* If the program operation is completed, disable the PG Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80033fe:	4b14      	ldr	r3, [pc, #80]	; (8003450 <HAL_FLASH_Program+0x128>)
 8003400:	691a      	ldr	r2, [r3, #16]
 8003402:	4b13      	ldr	r3, [pc, #76]	; (8003450 <HAL_FLASH_Program+0x128>)
 8003404:	2101      	movs	r1, #1
 8003406:	438a      	bics	r2, r1
 8003408:	611a      	str	r2, [r3, #16]
      /* In case of error, stop programming procedure */
      if (status != HAL_OK)
 800340a:	2317      	movs	r3, #23
 800340c:	18fb      	adds	r3, r7, r3
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10e      	bne.n	8003432 <HAL_FLASH_Program+0x10a>
    for (index = 0U; index < nbiterations; index++)
 8003414:	2116      	movs	r1, #22
 8003416:	187b      	adds	r3, r7, r1
 8003418:	781a      	ldrb	r2, [r3, #0]
 800341a:	187b      	adds	r3, r7, r1
 800341c:	3201      	adds	r2, #1
 800341e:	701a      	strb	r2, [r3, #0]
 8003420:	2316      	movs	r3, #22
 8003422:	18fa      	adds	r2, r7, r3
 8003424:	2315      	movs	r3, #21
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	7812      	ldrb	r2, [r2, #0]
 800342a:	781b      	ldrb	r3, [r3, #0]
 800342c:	429a      	cmp	r2, r3
 800342e:	d3bd      	bcc.n	80033ac <HAL_FLASH_Program+0x84>
 8003430:	e000      	b.n	8003434 <HAL_FLASH_Program+0x10c>
      {
        break;
 8003432:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003434:	4b04      	ldr	r3, [pc, #16]	; (8003448 <HAL_FLASH_Program+0x120>)
 8003436:	2200      	movs	r2, #0
 8003438:	761a      	strb	r2, [r3, #24]

  return status;
 800343a:	2317      	movs	r3, #23
 800343c:	18fb      	adds	r3, r7, r3
 800343e:	781b      	ldrb	r3, [r3, #0]
}
 8003440:	0018      	movs	r0, r3
 8003442:	46bd      	mov	sp, r7
 8003444:	b007      	add	sp, #28
 8003446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003448:	20000370 	.word	0x20000370
 800344c:	0000c350 	.word	0x0000c350
 8003450:	40022000 	.word	0x40022000

08003454 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b082      	sub	sp, #8
 8003458:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 800345a:	1dfb      	adds	r3, r7, #7
 800345c:	2200      	movs	r2, #0
 800345e:	701a      	strb	r2, [r3, #0]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003460:	4b0c      	ldr	r3, [pc, #48]	; (8003494 <HAL_FLASH_Unlock+0x40>)
 8003462:	691b      	ldr	r3, [r3, #16]
 8003464:	2280      	movs	r2, #128	; 0x80
 8003466:	4013      	ands	r3, r2
 8003468:	d00d      	beq.n	8003486 <HAL_FLASH_Unlock+0x32>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800346a:	4b0a      	ldr	r3, [pc, #40]	; (8003494 <HAL_FLASH_Unlock+0x40>)
 800346c:	4a0a      	ldr	r2, [pc, #40]	; (8003498 <HAL_FLASH_Unlock+0x44>)
 800346e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003470:	4b08      	ldr	r3, [pc, #32]	; (8003494 <HAL_FLASH_Unlock+0x40>)
 8003472:	4a0a      	ldr	r2, [pc, #40]	; (800349c <HAL_FLASH_Unlock+0x48>)
 8003474:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003476:	4b07      	ldr	r3, [pc, #28]	; (8003494 <HAL_FLASH_Unlock+0x40>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2280      	movs	r2, #128	; 0x80
 800347c:	4013      	ands	r3, r2
 800347e:	d002      	beq.n	8003486 <HAL_FLASH_Unlock+0x32>
    {
      status = HAL_ERROR;
 8003480:	1dfb      	adds	r3, r7, #7
 8003482:	2201      	movs	r2, #1
 8003484:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8003486:	1dfb      	adds	r3, r7, #7
 8003488:	781b      	ldrb	r3, [r3, #0]
}
 800348a:	0018      	movs	r0, r3
 800348c:	46bd      	mov	sp, r7
 800348e:	b002      	add	sp, #8
 8003490:	bd80      	pop	{r7, pc}
 8003492:	46c0      	nop			; (mov r8, r8)
 8003494:	40022000 	.word	0x40022000
 8003498:	45670123 	.word	0x45670123
 800349c:	cdef89ab 	.word	0xcdef89ab

080034a0 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80034a4:	4b04      	ldr	r3, [pc, #16]	; (80034b8 <HAL_FLASH_Lock+0x18>)
 80034a6:	691a      	ldr	r2, [r3, #16]
 80034a8:	4b03      	ldr	r3, [pc, #12]	; (80034b8 <HAL_FLASH_Lock+0x18>)
 80034aa:	2180      	movs	r1, #128	; 0x80
 80034ac:	430a      	orrs	r2, r1
 80034ae:	611a      	str	r2, [r3, #16]
  
  return HAL_OK;  
 80034b0:	2300      	movs	r3, #0
}
 80034b2:	0018      	movs	r0, r3
 80034b4:	46bd      	mov	sp, r7
 80034b6:	bd80      	pop	{r7, pc}
 80034b8:	40022000 	.word	0x40022000

080034bc <FLASH_Program_HalfWord>:
  * @param  Address specify the address to be programmed.
  * @param  Data    specify the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b082      	sub	sp, #8
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
 80034c4:	000a      	movs	r2, r1
 80034c6:	1cbb      	adds	r3, r7, #2
 80034c8:	801a      	strh	r2, [r3, #0]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034ca:	4b08      	ldr	r3, [pc, #32]	; (80034ec <FLASH_Program_HalfWord+0x30>)
 80034cc:	2200      	movs	r2, #0
 80034ce:	61da      	str	r2, [r3, #28]
  
    /* Proceed to program the new data */
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80034d0:	4b07      	ldr	r3, [pc, #28]	; (80034f0 <FLASH_Program_HalfWord+0x34>)
 80034d2:	691a      	ldr	r2, [r3, #16]
 80034d4:	4b06      	ldr	r3, [pc, #24]	; (80034f0 <FLASH_Program_HalfWord+0x34>)
 80034d6:	2101      	movs	r1, #1
 80034d8:	430a      	orrs	r2, r1
 80034da:	611a      	str	r2, [r3, #16]

  /* Write data in the address */
  *(__IO uint16_t*)Address = Data;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	1cba      	adds	r2, r7, #2
 80034e0:	8812      	ldrh	r2, [r2, #0]
 80034e2:	801a      	strh	r2, [r3, #0]
}
 80034e4:	46c0      	nop			; (mov r8, r8)
 80034e6:	46bd      	mov	sp, r7
 80034e8:	b002      	add	sp, #8
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	20000370 	.word	0x20000370
 80034f0:	40022000 	.word	0x40022000

080034f4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b084      	sub	sp, #16
 80034f8:	af00      	add	r7, sp, #0
 80034fa:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7fe fe8e 	bl	800221c <HAL_GetTick>
 8003500:	0003      	movs	r3, r0
 8003502:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003504:	e00f      	b.n	8003526 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	3301      	adds	r3, #1
 800350a:	d00c      	beq.n	8003526 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d007      	beq.n	8003522 <FLASH_WaitForLastOperation+0x2e>
 8003512:	f7fe fe83 	bl	800221c <HAL_GetTick>
 8003516:	0002      	movs	r2, r0
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	1ad3      	subs	r3, r2, r3
 800351c:	687a      	ldr	r2, [r7, #4]
 800351e:	429a      	cmp	r2, r3
 8003520:	d201      	bcs.n	8003526 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e01f      	b.n	8003566 <FLASH_WaitForLastOperation+0x72>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8003526:	4b12      	ldr	r3, [pc, #72]	; (8003570 <FLASH_WaitForLastOperation+0x7c>)
 8003528:	68db      	ldr	r3, [r3, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	4013      	ands	r3, r2
 800352e:	2b01      	cmp	r3, #1
 8003530:	d0e9      	beq.n	8003506 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8003532:	4b0f      	ldr	r3, [pc, #60]	; (8003570 <FLASH_WaitForLastOperation+0x7c>)
 8003534:	68db      	ldr	r3, [r3, #12]
 8003536:	2220      	movs	r2, #32
 8003538:	4013      	ands	r3, r2
 800353a:	2b20      	cmp	r3, #32
 800353c:	d102      	bne.n	8003544 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800353e:	4b0c      	ldr	r3, [pc, #48]	; (8003570 <FLASH_WaitForLastOperation+0x7c>)
 8003540:	2220      	movs	r2, #32
 8003542:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <FLASH_WaitForLastOperation+0x7c>)
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2210      	movs	r2, #16
 800354a:	4013      	ands	r3, r2
 800354c:	2b10      	cmp	r3, #16
 800354e:	d005      	beq.n	800355c <FLASH_WaitForLastOperation+0x68>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8003550:	4b07      	ldr	r3, [pc, #28]	; (8003570 <FLASH_WaitForLastOperation+0x7c>)
 8003552:	68db      	ldr	r3, [r3, #12]
 8003554:	2204      	movs	r2, #4
 8003556:	4013      	ands	r3, r2
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8003558:	2b04      	cmp	r3, #4
 800355a:	d103      	bne.n	8003564 <FLASH_WaitForLastOperation+0x70>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800355c:	f000 f80a 	bl	8003574 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8003560:	2301      	movs	r3, #1
 8003562:	e000      	b.n	8003566 <FLASH_WaitForLastOperation+0x72>
  }

  /* There is no error flag set */
  return HAL_OK;
 8003564:	2300      	movs	r3, #0
}
 8003566:	0018      	movs	r0, r3
 8003568:	46bd      	mov	sp, r7
 800356a:	b004      	add	sp, #16
 800356c:	bd80      	pop	{r7, pc}
 800356e:	46c0      	nop			; (mov r8, r8)
 8003570:	40022000 	.word	0x40022000

08003574 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
  uint32_t flags = 0U;
 800357a:	2300      	movs	r3, #0
 800357c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800357e:	4b13      	ldr	r3, [pc, #76]	; (80035cc <FLASH_SetErrorCode+0x58>)
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2210      	movs	r2, #16
 8003584:	4013      	ands	r3, r2
 8003586:	2b10      	cmp	r3, #16
 8003588:	d109      	bne.n	800359e <FLASH_SetErrorCode+0x2a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800358a:	4b11      	ldr	r3, [pc, #68]	; (80035d0 <FLASH_SetErrorCode+0x5c>)
 800358c:	69db      	ldr	r3, [r3, #28]
 800358e:	2202      	movs	r2, #2
 8003590:	431a      	orrs	r2, r3
 8003592:	4b0f      	ldr	r3, [pc, #60]	; (80035d0 <FLASH_SetErrorCode+0x5c>)
 8003594:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_WRPERR;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	2210      	movs	r2, #16
 800359a:	4313      	orrs	r3, r2
 800359c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 800359e:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <FLASH_SetErrorCode+0x58>)
 80035a0:	68db      	ldr	r3, [r3, #12]
 80035a2:	2204      	movs	r2, #4
 80035a4:	4013      	ands	r3, r2
 80035a6:	2b04      	cmp	r3, #4
 80035a8:	d109      	bne.n	80035be <FLASH_SetErrorCode+0x4a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 80035aa:	4b09      	ldr	r3, [pc, #36]	; (80035d0 <FLASH_SetErrorCode+0x5c>)
 80035ac:	69db      	ldr	r3, [r3, #28]
 80035ae:	2201      	movs	r2, #1
 80035b0:	431a      	orrs	r2, r3
 80035b2:	4b07      	ldr	r3, [pc, #28]	; (80035d0 <FLASH_SetErrorCode+0x5c>)
 80035b4:	61da      	str	r2, [r3, #28]
    flags |= FLASH_FLAG_PGERR;
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2204      	movs	r2, #4
 80035ba:	4313      	orrs	r3, r2
 80035bc:	607b      	str	r3, [r7, #4]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 80035be:	4b03      	ldr	r3, [pc, #12]	; (80035cc <FLASH_SetErrorCode+0x58>)
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	60da      	str	r2, [r3, #12]
}  
 80035c4:	46c0      	nop			; (mov r8, r8)
 80035c6:	46bd      	mov	sp, r7
 80035c8:	b002      	add	sp, #8
 80035ca:	bd80      	pop	{r7, pc}
 80035cc:	40022000 	.word	0x40022000
 80035d0:	20000370 	.word	0x20000370

080035d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the pages have been correctly erased)
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80035d4:	b5b0      	push	{r4, r5, r7, lr}
 80035d6:	b084      	sub	sp, #16
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
 80035dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80035de:	230f      	movs	r3, #15
 80035e0:	18fb      	adds	r3, r7, r3
 80035e2:	2201      	movs	r2, #1
 80035e4:	701a      	strb	r2, [r3, #0]
  uint32_t address = 0U;
 80035e6:	2300      	movs	r3, #0
 80035e8:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80035ea:	4b32      	ldr	r3, [pc, #200]	; (80036b4 <HAL_FLASHEx_Erase+0xe0>)
 80035ec:	7e1b      	ldrb	r3, [r3, #24]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d101      	bne.n	80035f6 <HAL_FLASHEx_Erase+0x22>
 80035f2:	2302      	movs	r3, #2
 80035f4:	e05a      	b.n	80036ac <HAL_FLASHEx_Erase+0xd8>
 80035f6:	4b2f      	ldr	r3, [pc, #188]	; (80036b4 <HAL_FLASHEx_Erase+0xe0>)
 80035f8:	2201      	movs	r2, #1
 80035fa:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2b01      	cmp	r3, #1
 8003602:	d116      	bne.n	8003632 <HAL_FLASHEx_Erase+0x5e>
  {
      /* Mass Erase requested for Bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003604:	4b2c      	ldr	r3, [pc, #176]	; (80036b8 <HAL_FLASHEx_Erase+0xe4>)
 8003606:	0018      	movs	r0, r3
 8003608:	f7ff ff74 	bl	80034f4 <FLASH_WaitForLastOperation>
 800360c:	1e03      	subs	r3, r0, #0
 800360e:	d147      	bne.n	80036a0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Mass erase to be done*/
        FLASH_MassErase();
 8003610:	f000 f856 	bl	80036c0 <FLASH_MassErase>
        
        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003614:	230f      	movs	r3, #15
 8003616:	18fc      	adds	r4, r7, r3
 8003618:	4b27      	ldr	r3, [pc, #156]	; (80036b8 <HAL_FLASHEx_Erase+0xe4>)
 800361a:	0018      	movs	r0, r3
 800361c:	f7ff ff6a 	bl	80034f4 <FLASH_WaitForLastOperation>
 8003620:	0003      	movs	r3, r0
 8003622:	7023      	strb	r3, [r4, #0]
        
        /* If the erase operation is completed, disable the MER Bit */
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 8003624:	4b25      	ldr	r3, [pc, #148]	; (80036bc <HAL_FLASHEx_Erase+0xe8>)
 8003626:	691a      	ldr	r2, [r3, #16]
 8003628:	4b24      	ldr	r3, [pc, #144]	; (80036bc <HAL_FLASHEx_Erase+0xe8>)
 800362a:	2104      	movs	r1, #4
 800362c:	438a      	bics	r2, r1
 800362e:	611a      	str	r2, [r3, #16]
 8003630:	e036      	b.n	80036a0 <HAL_FLASHEx_Erase+0xcc>
    assert_param(IS_FLASH_PROGRAM_ADDRESS(pEraseInit->PageAddress));
    assert_param(IS_FLASH_NB_PAGES(pEraseInit->PageAddress, pEraseInit->NbPages));
    
      /* Page Erase requested on address located on bank1 */
      /* Wait for last operation to be completed */
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8003632:	4b21      	ldr	r3, [pc, #132]	; (80036b8 <HAL_FLASHEx_Erase+0xe4>)
 8003634:	0018      	movs	r0, r3
 8003636:	f7ff ff5d 	bl	80034f4 <FLASH_WaitForLastOperation>
 800363a:	1e03      	subs	r3, r0, #0
 800363c:	d130      	bne.n	80036a0 <HAL_FLASHEx_Erase+0xcc>
      {
        /*Initialization of PageError variable*/
        *PageError = 0xFFFFFFFFU;
 800363e:	683b      	ldr	r3, [r7, #0]
 8003640:	2201      	movs	r2, #1
 8003642:	4252      	negs	r2, r2
 8003644:	601a      	str	r2, [r3, #0]
        
        /* Erase page by page to be done*/
        for(address = pEraseInit->PageAddress;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	60bb      	str	r3, [r7, #8]
 800364c:	e01f      	b.n	800368e <HAL_FLASHEx_Erase+0xba>
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
            address += FLASH_PAGE_SIZE)
        {
          FLASH_PageErase(address);
 800364e:	68bb      	ldr	r3, [r7, #8]
 8003650:	0018      	movs	r0, r3
 8003652:	f000 f84d 	bl	80036f0 <FLASH_PageErase>
          
          /* Wait for last operation to be completed */
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003656:	250f      	movs	r5, #15
 8003658:	197c      	adds	r4, r7, r5
 800365a:	4b17      	ldr	r3, [pc, #92]	; (80036b8 <HAL_FLASHEx_Erase+0xe4>)
 800365c:	0018      	movs	r0, r3
 800365e:	f7ff ff49 	bl	80034f4 <FLASH_WaitForLastOperation>
 8003662:	0003      	movs	r3, r0
 8003664:	7023      	strb	r3, [r4, #0]
          
          /* If the erase operation is completed, disable the PER Bit */
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8003666:	4b15      	ldr	r3, [pc, #84]	; (80036bc <HAL_FLASHEx_Erase+0xe8>)
 8003668:	691a      	ldr	r2, [r3, #16]
 800366a:	4b14      	ldr	r3, [pc, #80]	; (80036bc <HAL_FLASHEx_Erase+0xe8>)
 800366c:	2102      	movs	r1, #2
 800366e:	438a      	bics	r2, r1
 8003670:	611a      	str	r2, [r3, #16]
          
          if (status != HAL_OK)
 8003672:	197b      	adds	r3, r7, r5
 8003674:	781b      	ldrb	r3, [r3, #0]
 8003676:	2b00      	cmp	r3, #0
 8003678:	d003      	beq.n	8003682 <HAL_FLASHEx_Erase+0xae>
          {
            /* In case of error, stop erase procedure and return the faulty address */
            *PageError = address;
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	601a      	str	r2, [r3, #0]
            break;
 8003680:	e00e      	b.n	80036a0 <HAL_FLASHEx_Erase+0xcc>
            address += FLASH_PAGE_SIZE)
 8003682:	68bb      	ldr	r3, [r7, #8]
 8003684:	2280      	movs	r2, #128	; 0x80
 8003686:	00d2      	lsls	r2, r2, #3
 8003688:	4694      	mov	ip, r2
 800368a:	4463      	add	r3, ip
 800368c:	60bb      	str	r3, [r7, #8]
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	029a      	lsls	r2, r3, #10
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	18d3      	adds	r3, r2, r3
 800369a:	68ba      	ldr	r2, [r7, #8]
 800369c:	429a      	cmp	r2, r3
 800369e:	d3d6      	bcc.n	800364e <HAL_FLASHEx_Erase+0x7a>
        }
      }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80036a0:	4b04      	ldr	r3, [pc, #16]	; (80036b4 <HAL_FLASHEx_Erase+0xe0>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	761a      	strb	r2, [r3, #24]

  return status;
 80036a6:	230f      	movs	r3, #15
 80036a8:	18fb      	adds	r3, r7, r3
 80036aa:	781b      	ldrb	r3, [r3, #0]
}
 80036ac:	0018      	movs	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	b004      	add	sp, #16
 80036b2:	bdb0      	pop	{r4, r5, r7, pc}
 80036b4:	20000370 	.word	0x20000370
 80036b8:	0000c350 	.word	0x0000c350
 80036bc:	40022000 	.word	0x40022000

080036c0 <FLASH_MassErase>:
  * @brief  Full erase of FLASH memory Bank 
  *
  * @retval None
  */
static void FLASH_MassErase(void)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036c4:	4b08      	ldr	r3, [pc, #32]	; (80036e8 <FLASH_MassErase+0x28>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 80036ca:	4b08      	ldr	r3, [pc, #32]	; (80036ec <FLASH_MassErase+0x2c>)
 80036cc:	691a      	ldr	r2, [r3, #16]
 80036ce:	4b07      	ldr	r3, [pc, #28]	; (80036ec <FLASH_MassErase+0x2c>)
 80036d0:	2104      	movs	r1, #4
 80036d2:	430a      	orrs	r2, r1
 80036d4:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80036d6:	4b05      	ldr	r3, [pc, #20]	; (80036ec <FLASH_MassErase+0x2c>)
 80036d8:	691a      	ldr	r2, [r3, #16]
 80036da:	4b04      	ldr	r3, [pc, #16]	; (80036ec <FLASH_MassErase+0x2c>)
 80036dc:	2140      	movs	r1, #64	; 0x40
 80036de:	430a      	orrs	r2, r1
 80036e0:	611a      	str	r2, [r3, #16]
}
 80036e2:	46c0      	nop			; (mov r8, r8)
 80036e4:	46bd      	mov	sp, r7
 80036e6:	bd80      	pop	{r7, pc}
 80036e8:	20000370 	.word	0x20000370
 80036ec:	40022000 	.word	0x40022000

080036f0 <FLASH_PageErase>:
  *         The value of this parameter depend on device used within the same series      
  * 
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b082      	sub	sp, #8
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80036f8:	4b0a      	ldr	r3, [pc, #40]	; (8003724 <FLASH_PageErase+0x34>)
 80036fa:	2200      	movs	r2, #0
 80036fc:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 80036fe:	4b0a      	ldr	r3, [pc, #40]	; (8003728 <FLASH_PageErase+0x38>)
 8003700:	691a      	ldr	r2, [r3, #16]
 8003702:	4b09      	ldr	r3, [pc, #36]	; (8003728 <FLASH_PageErase+0x38>)
 8003704:	2102      	movs	r1, #2
 8003706:	430a      	orrs	r2, r1
 8003708:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
 800370a:	4b07      	ldr	r3, [pc, #28]	; (8003728 <FLASH_PageErase+0x38>)
 800370c:	687a      	ldr	r2, [r7, #4]
 800370e:	615a      	str	r2, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003710:	4b05      	ldr	r3, [pc, #20]	; (8003728 <FLASH_PageErase+0x38>)
 8003712:	691a      	ldr	r2, [r3, #16]
 8003714:	4b04      	ldr	r3, [pc, #16]	; (8003728 <FLASH_PageErase+0x38>)
 8003716:	2140      	movs	r1, #64	; 0x40
 8003718:	430a      	orrs	r2, r1
 800371a:	611a      	str	r2, [r3, #16]
}
 800371c:	46c0      	nop			; (mov r8, r8)
 800371e:	46bd      	mov	sp, r7
 8003720:	b002      	add	sp, #8
 8003722:	bd80      	pop	{r7, pc}
 8003724:	20000370 	.word	0x20000370
 8003728:	40022000 	.word	0x40022000

0800372c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800372c:	b580      	push	{r7, lr}
 800372e:	b086      	sub	sp, #24
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003736:	2300      	movs	r3, #0
 8003738:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800373a:	e14f      	b.n	80039dc <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2101      	movs	r1, #1
 8003742:	697a      	ldr	r2, [r7, #20]
 8003744:	4091      	lsls	r1, r2
 8003746:	000a      	movs	r2, r1
 8003748:	4013      	ands	r3, r2
 800374a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2b00      	cmp	r3, #0
 8003750:	d100      	bne.n	8003754 <HAL_GPIO_Init+0x28>
 8003752:	e140      	b.n	80039d6 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2203      	movs	r2, #3
 800375a:	4013      	ands	r3, r2
 800375c:	2b01      	cmp	r3, #1
 800375e:	d005      	beq.n	800376c <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	2203      	movs	r2, #3
 8003766:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003768:	2b02      	cmp	r3, #2
 800376a:	d130      	bne.n	80037ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8003772:	697b      	ldr	r3, [r7, #20]
 8003774:	005b      	lsls	r3, r3, #1
 8003776:	2203      	movs	r2, #3
 8003778:	409a      	lsls	r2, r3
 800377a:	0013      	movs	r3, r2
 800377c:	43da      	mvns	r2, r3
 800377e:	693b      	ldr	r3, [r7, #16]
 8003780:	4013      	ands	r3, r2
 8003782:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003784:	683b      	ldr	r3, [r7, #0]
 8003786:	68da      	ldr	r2, [r3, #12]
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	005b      	lsls	r3, r3, #1
 800378c:	409a      	lsls	r2, r3
 800378e:	0013      	movs	r3, r2
 8003790:	693a      	ldr	r2, [r7, #16]
 8003792:	4313      	orrs	r3, r2
 8003794:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	693a      	ldr	r2, [r7, #16]
 800379a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037a2:	2201      	movs	r2, #1
 80037a4:	697b      	ldr	r3, [r7, #20]
 80037a6:	409a      	lsls	r2, r3
 80037a8:	0013      	movs	r3, r2
 80037aa:	43da      	mvns	r2, r3
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	4013      	ands	r3, r2
 80037b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037b2:	683b      	ldr	r3, [r7, #0]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	091b      	lsrs	r3, r3, #4
 80037b8:	2201      	movs	r2, #1
 80037ba:	401a      	ands	r2, r3
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	409a      	lsls	r2, r3
 80037c0:	0013      	movs	r3, r2
 80037c2:	693a      	ldr	r2, [r7, #16]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	693a      	ldr	r2, [r7, #16]
 80037cc:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	2203      	movs	r2, #3
 80037d4:	4013      	ands	r3, r2
 80037d6:	2b03      	cmp	r3, #3
 80037d8:	d017      	beq.n	800380a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	68db      	ldr	r3, [r3, #12]
 80037de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	005b      	lsls	r3, r3, #1
 80037e4:	2203      	movs	r2, #3
 80037e6:	409a      	lsls	r2, r3
 80037e8:	0013      	movs	r3, r2
 80037ea:	43da      	mvns	r2, r3
 80037ec:	693b      	ldr	r3, [r7, #16]
 80037ee:	4013      	ands	r3, r2
 80037f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	689a      	ldr	r2, [r3, #8]
 80037f6:	697b      	ldr	r3, [r7, #20]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	409a      	lsls	r2, r3
 80037fc:	0013      	movs	r3, r2
 80037fe:	693a      	ldr	r2, [r7, #16]
 8003800:	4313      	orrs	r3, r2
 8003802:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	693a      	ldr	r2, [r7, #16]
 8003808:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	2203      	movs	r2, #3
 8003810:	4013      	ands	r3, r2
 8003812:	2b02      	cmp	r3, #2
 8003814:	d123      	bne.n	800385e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	08da      	lsrs	r2, r3, #3
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	3208      	adds	r2, #8
 800381e:	0092      	lsls	r2, r2, #2
 8003820:	58d3      	ldr	r3, [r2, r3]
 8003822:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	2207      	movs	r2, #7
 8003828:	4013      	ands	r3, r2
 800382a:	009b      	lsls	r3, r3, #2
 800382c:	220f      	movs	r2, #15
 800382e:	409a      	lsls	r2, r3
 8003830:	0013      	movs	r3, r2
 8003832:	43da      	mvns	r2, r3
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	4013      	ands	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	691a      	ldr	r2, [r3, #16]
 800383e:	697b      	ldr	r3, [r7, #20]
 8003840:	2107      	movs	r1, #7
 8003842:	400b      	ands	r3, r1
 8003844:	009b      	lsls	r3, r3, #2
 8003846:	409a      	lsls	r2, r3
 8003848:	0013      	movs	r3, r2
 800384a:	693a      	ldr	r2, [r7, #16]
 800384c:	4313      	orrs	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	08da      	lsrs	r2, r3, #3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	3208      	adds	r2, #8
 8003858:	0092      	lsls	r2, r2, #2
 800385a:	6939      	ldr	r1, [r7, #16]
 800385c:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	2203      	movs	r2, #3
 800386a:	409a      	lsls	r2, r3
 800386c:	0013      	movs	r3, r2
 800386e:	43da      	mvns	r2, r3
 8003870:	693b      	ldr	r3, [r7, #16]
 8003872:	4013      	ands	r3, r2
 8003874:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2203      	movs	r2, #3
 800387c:	401a      	ands	r2, r3
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	005b      	lsls	r3, r3, #1
 8003882:	409a      	lsls	r2, r3
 8003884:	0013      	movs	r3, r2
 8003886:	693a      	ldr	r2, [r7, #16]
 8003888:	4313      	orrs	r3, r2
 800388a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	685a      	ldr	r2, [r3, #4]
 8003896:	23c0      	movs	r3, #192	; 0xc0
 8003898:	029b      	lsls	r3, r3, #10
 800389a:	4013      	ands	r3, r2
 800389c:	d100      	bne.n	80038a0 <HAL_GPIO_Init+0x174>
 800389e:	e09a      	b.n	80039d6 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038a0:	4b54      	ldr	r3, [pc, #336]	; (80039f4 <HAL_GPIO_Init+0x2c8>)
 80038a2:	699a      	ldr	r2, [r3, #24]
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_GPIO_Init+0x2c8>)
 80038a6:	2101      	movs	r1, #1
 80038a8:	430a      	orrs	r2, r1
 80038aa:	619a      	str	r2, [r3, #24]
 80038ac:	4b51      	ldr	r3, [pc, #324]	; (80039f4 <HAL_GPIO_Init+0x2c8>)
 80038ae:	699b      	ldr	r3, [r3, #24]
 80038b0:	2201      	movs	r2, #1
 80038b2:	4013      	ands	r3, r2
 80038b4:	60bb      	str	r3, [r7, #8]
 80038b6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80038b8:	4a4f      	ldr	r2, [pc, #316]	; (80039f8 <HAL_GPIO_Init+0x2cc>)
 80038ba:	697b      	ldr	r3, [r7, #20]
 80038bc:	089b      	lsrs	r3, r3, #2
 80038be:	3302      	adds	r3, #2
 80038c0:	009b      	lsls	r3, r3, #2
 80038c2:	589b      	ldr	r3, [r3, r2]
 80038c4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80038c6:	697b      	ldr	r3, [r7, #20]
 80038c8:	2203      	movs	r2, #3
 80038ca:	4013      	ands	r3, r2
 80038cc:	009b      	lsls	r3, r3, #2
 80038ce:	220f      	movs	r2, #15
 80038d0:	409a      	lsls	r2, r3
 80038d2:	0013      	movs	r3, r2
 80038d4:	43da      	mvns	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80038dc:	687a      	ldr	r2, [r7, #4]
 80038de:	2390      	movs	r3, #144	; 0x90
 80038e0:	05db      	lsls	r3, r3, #23
 80038e2:	429a      	cmp	r2, r3
 80038e4:	d013      	beq.n	800390e <HAL_GPIO_Init+0x1e2>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	4a44      	ldr	r2, [pc, #272]	; (80039fc <HAL_GPIO_Init+0x2d0>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d00d      	beq.n	800390a <HAL_GPIO_Init+0x1de>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <HAL_GPIO_Init+0x2d4>)
 80038f2:	4293      	cmp	r3, r2
 80038f4:	d007      	beq.n	8003906 <HAL_GPIO_Init+0x1da>
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a42      	ldr	r2, [pc, #264]	; (8003a04 <HAL_GPIO_Init+0x2d8>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d101      	bne.n	8003902 <HAL_GPIO_Init+0x1d6>
 80038fe:	2303      	movs	r3, #3
 8003900:	e006      	b.n	8003910 <HAL_GPIO_Init+0x1e4>
 8003902:	2305      	movs	r3, #5
 8003904:	e004      	b.n	8003910 <HAL_GPIO_Init+0x1e4>
 8003906:	2302      	movs	r3, #2
 8003908:	e002      	b.n	8003910 <HAL_GPIO_Init+0x1e4>
 800390a:	2301      	movs	r3, #1
 800390c:	e000      	b.n	8003910 <HAL_GPIO_Init+0x1e4>
 800390e:	2300      	movs	r3, #0
 8003910:	697a      	ldr	r2, [r7, #20]
 8003912:	2103      	movs	r1, #3
 8003914:	400a      	ands	r2, r1
 8003916:	0092      	lsls	r2, r2, #2
 8003918:	4093      	lsls	r3, r2
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003920:	4935      	ldr	r1, [pc, #212]	; (80039f8 <HAL_GPIO_Init+0x2cc>)
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	3302      	adds	r3, #2
 8003928:	009b      	lsls	r3, r3, #2
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800392e:	4b36      	ldr	r3, [pc, #216]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 8003930:	689b      	ldr	r3, [r3, #8]
 8003932:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	43da      	mvns	r2, r3
 8003938:	693b      	ldr	r3, [r7, #16]
 800393a:	4013      	ands	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	685a      	ldr	r2, [r3, #4]
 8003942:	2380      	movs	r3, #128	; 0x80
 8003944:	035b      	lsls	r3, r3, #13
 8003946:	4013      	ands	r3, r2
 8003948:	d003      	beq.n	8003952 <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 800394a:	693a      	ldr	r2, [r7, #16]
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003952:	4b2d      	ldr	r3, [pc, #180]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 8003954:	693a      	ldr	r2, [r7, #16]
 8003956:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8003958:	4b2b      	ldr	r3, [pc, #172]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 800395a:	68db      	ldr	r3, [r3, #12]
 800395c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	43da      	mvns	r2, r3
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	4013      	ands	r3, r2
 8003966:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	2380      	movs	r3, #128	; 0x80
 800396e:	039b      	lsls	r3, r3, #14
 8003970:	4013      	ands	r3, r2
 8003972:	d003      	beq.n	800397c <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8003974:	693a      	ldr	r2, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	4313      	orrs	r3, r2
 800397a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800397c:	4b22      	ldr	r3, [pc, #136]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 800397e:	693a      	ldr	r2, [r7, #16]
 8003980:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 8003982:	4b21      	ldr	r3, [pc, #132]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	43da      	mvns	r2, r3
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	685a      	ldr	r2, [r3, #4]
 8003996:	2380      	movs	r3, #128	; 0x80
 8003998:	029b      	lsls	r3, r3, #10
 800399a:	4013      	ands	r3, r2
 800399c:	d003      	beq.n	80039a6 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800399e:	693a      	ldr	r2, [r7, #16]
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80039a6:	4b18      	ldr	r3, [pc, #96]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 80039a8:	693a      	ldr	r2, [r7, #16]
 80039aa:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 80039ac:	4b16      	ldr	r3, [pc, #88]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	43da      	mvns	r2, r3
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	4013      	ands	r3, r2
 80039ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	685a      	ldr	r2, [r3, #4]
 80039c0:	2380      	movs	r3, #128	; 0x80
 80039c2:	025b      	lsls	r3, r3, #9
 80039c4:	4013      	ands	r3, r2
 80039c6:	d003      	beq.n	80039d0 <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80039d0:	4b0d      	ldr	r3, [pc, #52]	; (8003a08 <HAL_GPIO_Init+0x2dc>)
 80039d2:	693a      	ldr	r2, [r7, #16]
 80039d4:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3301      	adds	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	681a      	ldr	r2, [r3, #0]
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	40da      	lsrs	r2, r3
 80039e4:	1e13      	subs	r3, r2, #0
 80039e6:	d000      	beq.n	80039ea <HAL_GPIO_Init+0x2be>
 80039e8:	e6a8      	b.n	800373c <HAL_GPIO_Init+0x10>
  } 
}
 80039ea:	46c0      	nop			; (mov r8, r8)
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	46bd      	mov	sp, r7
 80039f0:	b006      	add	sp, #24
 80039f2:	bd80      	pop	{r7, pc}
 80039f4:	40021000 	.word	0x40021000
 80039f8:	40010000 	.word	0x40010000
 80039fc:	48000400 	.word	0x48000400
 8003a00:	48000800 	.word	0x48000800
 8003a04:	48000c00 	.word	0x48000c00
 8003a08:	40010400 	.word	0x40010400

08003a0c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b084      	sub	sp, #16
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	000a      	movs	r2, r1
 8003a16:	1cbb      	adds	r3, r7, #2
 8003a18:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	691b      	ldr	r3, [r3, #16]
 8003a1e:	1cba      	adds	r2, r7, #2
 8003a20:	8812      	ldrh	r2, [r2, #0]
 8003a22:	4013      	ands	r3, r2
 8003a24:	d004      	beq.n	8003a30 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8003a26:	230f      	movs	r3, #15
 8003a28:	18fb      	adds	r3, r7, r3
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	701a      	strb	r2, [r3, #0]
 8003a2e:	e003      	b.n	8003a38 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003a30:	230f      	movs	r3, #15
 8003a32:	18fb      	adds	r3, r7, r3
 8003a34:	2200      	movs	r2, #0
 8003a36:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8003a38:	230f      	movs	r3, #15
 8003a3a:	18fb      	adds	r3, r7, r3
 8003a3c:	781b      	ldrb	r3, [r3, #0]
  }
 8003a3e:	0018      	movs	r0, r3
 8003a40:	46bd      	mov	sp, r7
 8003a42:	b004      	add	sp, #16
 8003a44:	bd80      	pop	{r7, pc}

08003a46 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003a46:	b580      	push	{r7, lr}
 8003a48:	b082      	sub	sp, #8
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	0008      	movs	r0, r1
 8003a50:	0011      	movs	r1, r2
 8003a52:	1cbb      	adds	r3, r7, #2
 8003a54:	1c02      	adds	r2, r0, #0
 8003a56:	801a      	strh	r2, [r3, #0]
 8003a58:	1c7b      	adds	r3, r7, #1
 8003a5a:	1c0a      	adds	r2, r1, #0
 8003a5c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003a5e:	1c7b      	adds	r3, r7, #1
 8003a60:	781b      	ldrb	r3, [r3, #0]
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d004      	beq.n	8003a70 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003a66:	1cbb      	adds	r3, r7, #2
 8003a68:	881a      	ldrh	r2, [r3, #0]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003a6e:	e003      	b.n	8003a78 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003a70:	1cbb      	adds	r3, r7, #2
 8003a72:	881a      	ldrh	r2, [r3, #0]
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a78:	46c0      	nop			; (mov r8, r8)
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	b002      	add	sp, #8
 8003a7e:	bd80      	pop	{r7, pc}

08003a80 <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d101      	bne.n	8003a92 <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 8003a8e:	2301      	movs	r3, #1
 8003a90:	e03d      	b.n	8003b0e <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a20      	ldr	r2, [pc, #128]	; (8003b18 <HAL_IWDG_Init+0x98>)
 8003a98:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a1f      	ldr	r2, [pc, #124]	; (8003b1c <HAL_IWDG_Init+0x9c>)
 8003aa0:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	687a      	ldr	r2, [r7, #4]
 8003aa8:	6852      	ldr	r2, [r2, #4]
 8003aaa:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	687a      	ldr	r2, [r7, #4]
 8003ab2:	6892      	ldr	r2, [r2, #8]
 8003ab4:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8003ab6:	f7fe fbb1 	bl	800221c <HAL_GetTick>
 8003aba:	0003      	movs	r3, r0
 8003abc:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003abe:	e00e      	b.n	8003ade <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 8003ac0:	f7fe fbac 	bl	800221c <HAL_GetTick>
 8003ac4:	0002      	movs	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	1ad3      	subs	r3, r2, r3
 8003aca:	2b27      	cmp	r3, #39	; 0x27
 8003acc:	d907      	bls.n	8003ade <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	68db      	ldr	r3, [r3, #12]
 8003ad4:	2207      	movs	r2, #7
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	d001      	beq.n	8003ade <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e017      	b.n	8003b0e <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	68db      	ldr	r3, [r3, #12]
 8003ae4:	2207      	movs	r2, #7
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	d1ea      	bne.n	8003ac0 <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	691a      	ldr	r2, [r3, #16]
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d005      	beq.n	8003b04 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68d2      	ldr	r2, [r2, #12]
 8003b00:	611a      	str	r2, [r3, #16]
 8003b02:	e003      	b.n	8003b0c <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	4a05      	ldr	r2, [pc, #20]	; (8003b20 <HAL_IWDG_Init+0xa0>)
 8003b0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b0c:	2300      	movs	r3, #0
}
 8003b0e:	0018      	movs	r0, r3
 8003b10:	46bd      	mov	sp, r7
 8003b12:	b004      	add	sp, #16
 8003b14:	bd80      	pop	{r7, pc}
 8003b16:	46c0      	nop			; (mov r8, r8)
 8003b18:	0000cccc 	.word	0x0000cccc
 8003b1c:	00005555 	.word	0x00005555
 8003b20:	0000aaaa 	.word	0x0000aaaa

08003b24 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b082      	sub	sp, #8
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a03      	ldr	r2, [pc, #12]	; (8003b40 <HAL_IWDG_Refresh+0x1c>)
 8003b32:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003b34:	2300      	movs	r3, #0
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b002      	add	sp, #8
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	0000aaaa 	.word	0x0000aaaa

08003b44 <HAL_PWR_EnterSLEEPMode>:
  *            @arg PWR_SLEEPENTRY_WFI: enter SLEEP mode with WFI instruction
  *            @arg PWR_SLEEPENTRY_WFE: enter SLEEP mode with WFE instruction
  * @retval None
  */
void HAL_PWR_EnterSLEEPMode(uint32_t Regulator, uint8_t SLEEPEntry)
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b082      	sub	sp, #8
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	000a      	movs	r2, r1
 8003b4e:	1cfb      	adds	r3, r7, #3
 8003b50:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_PWR_REGULATOR(Regulator));
  assert_param(IS_PWR_SLEEP_ENTRY(SLEEPEntry));

  /* Clear SLEEPDEEP bit of Cortex System Control Register */
  SCB->SCR &= (uint32_t)~((uint32_t)SCB_SCR_SLEEPDEEP_Msk);
 8003b52:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003b54:	691a      	ldr	r2, [r3, #16]
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <HAL_PWR_EnterSLEEPMode+0x34>)
 8003b58:	2104      	movs	r1, #4
 8003b5a:	438a      	bics	r2, r1
 8003b5c:	611a      	str	r2, [r3, #16]

  /* Select SLEEP mode entry -------------------------------------------------*/
  if(SLEEPEntry == PWR_SLEEPENTRY_WFI)
 8003b5e:	1cfb      	adds	r3, r7, #3
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d101      	bne.n	8003b6a <HAL_PWR_EnterSLEEPMode+0x26>
  {
    /* Request Wait For Interrupt */
    __WFI();
 8003b66:	bf30      	wfi
    /* Request Wait For Event */
    __SEV();
    __WFE();
    __WFE();
  }
}
 8003b68:	e002      	b.n	8003b70 <HAL_PWR_EnterSLEEPMode+0x2c>
    __SEV();
 8003b6a:	bf40      	sev
    __WFE();
 8003b6c:	bf20      	wfe
    __WFE();
 8003b6e:	bf20      	wfe
}
 8003b70:	46c0      	nop			; (mov r8, r8)
 8003b72:	46bd      	mov	sp, r7
 8003b74:	b002      	add	sp, #8
 8003b76:	bd80      	pop	{r7, pc}
 8003b78:	e000ed00 	.word	0xe000ed00

08003b7c <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8003b80:	4b04      	ldr	r3, [pc, #16]	; (8003b94 <HAL_PWR_EnableSleepOnExit+0x18>)
 8003b82:	691a      	ldr	r2, [r3, #16]
 8003b84:	4b03      	ldr	r3, [pc, #12]	; (8003b94 <HAL_PWR_EnableSleepOnExit+0x18>)
 8003b86:	2102      	movs	r1, #2
 8003b88:	430a      	orrs	r2, r1
 8003b8a:	611a      	str	r2, [r3, #16]
}
 8003b8c:	46c0      	nop			; (mov r8, r8)
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	46c0      	nop			; (mov r8, r8)
 8003b94:	e000ed00 	.word	0xe000ed00

08003b98 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e301      	b.n	80041ae <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	4013      	ands	r3, r2
 8003bb2:	d100      	bne.n	8003bb6 <HAL_RCC_OscConfig+0x1e>
 8003bb4:	e08d      	b.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8003bb6:	4bc3      	ldr	r3, [pc, #780]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003bb8:	685b      	ldr	r3, [r3, #4]
 8003bba:	220c      	movs	r2, #12
 8003bbc:	4013      	ands	r3, r2
 8003bbe:	2b04      	cmp	r3, #4
 8003bc0:	d00e      	beq.n	8003be0 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003bc2:	4bc0      	ldr	r3, [pc, #768]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	220c      	movs	r2, #12
 8003bc8:	4013      	ands	r3, r2
 8003bca:	2b08      	cmp	r3, #8
 8003bcc:	d116      	bne.n	8003bfc <HAL_RCC_OscConfig+0x64>
 8003bce:	4bbd      	ldr	r3, [pc, #756]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	2380      	movs	r3, #128	; 0x80
 8003bd4:	025b      	lsls	r3, r3, #9
 8003bd6:	401a      	ands	r2, r3
 8003bd8:	2380      	movs	r3, #128	; 0x80
 8003bda:	025b      	lsls	r3, r3, #9
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d10d      	bne.n	8003bfc <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003be0:	4bb8      	ldr	r3, [pc, #736]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	2380      	movs	r3, #128	; 0x80
 8003be6:	029b      	lsls	r3, r3, #10
 8003be8:	4013      	ands	r3, r2
 8003bea:	d100      	bne.n	8003bee <HAL_RCC_OscConfig+0x56>
 8003bec:	e070      	b.n	8003cd0 <HAL_RCC_OscConfig+0x138>
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	685b      	ldr	r3, [r3, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d000      	beq.n	8003bf8 <HAL_RCC_OscConfig+0x60>
 8003bf6:	e06b      	b.n	8003cd0 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	e2d8      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	2b01      	cmp	r3, #1
 8003c02:	d107      	bne.n	8003c14 <HAL_RCC_OscConfig+0x7c>
 8003c04:	4baf      	ldr	r3, [pc, #700]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	4bae      	ldr	r3, [pc, #696]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c0a:	2180      	movs	r1, #128	; 0x80
 8003c0c:	0249      	lsls	r1, r1, #9
 8003c0e:	430a      	orrs	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
 8003c12:	e02f      	b.n	8003c74 <HAL_RCC_OscConfig+0xdc>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	685b      	ldr	r3, [r3, #4]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d10c      	bne.n	8003c36 <HAL_RCC_OscConfig+0x9e>
 8003c1c:	4ba9      	ldr	r3, [pc, #676]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c1e:	681a      	ldr	r2, [r3, #0]
 8003c20:	4ba8      	ldr	r3, [pc, #672]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c22:	49a9      	ldr	r1, [pc, #676]	; (8003ec8 <HAL_RCC_OscConfig+0x330>)
 8003c24:	400a      	ands	r2, r1
 8003c26:	601a      	str	r2, [r3, #0]
 8003c28:	4ba6      	ldr	r3, [pc, #664]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4ba5      	ldr	r3, [pc, #660]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c2e:	49a7      	ldr	r1, [pc, #668]	; (8003ecc <HAL_RCC_OscConfig+0x334>)
 8003c30:	400a      	ands	r2, r1
 8003c32:	601a      	str	r2, [r3, #0]
 8003c34:	e01e      	b.n	8003c74 <HAL_RCC_OscConfig+0xdc>
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	2b05      	cmp	r3, #5
 8003c3c:	d10e      	bne.n	8003c5c <HAL_RCC_OscConfig+0xc4>
 8003c3e:	4ba1      	ldr	r3, [pc, #644]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	4ba0      	ldr	r3, [pc, #640]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c44:	2180      	movs	r1, #128	; 0x80
 8003c46:	02c9      	lsls	r1, r1, #11
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	4b9d      	ldr	r3, [pc, #628]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	4b9c      	ldr	r3, [pc, #624]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c52:	2180      	movs	r1, #128	; 0x80
 8003c54:	0249      	lsls	r1, r1, #9
 8003c56:	430a      	orrs	r2, r1
 8003c58:	601a      	str	r2, [r3, #0]
 8003c5a:	e00b      	b.n	8003c74 <HAL_RCC_OscConfig+0xdc>
 8003c5c:	4b99      	ldr	r3, [pc, #612]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	4b98      	ldr	r3, [pc, #608]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c62:	4999      	ldr	r1, [pc, #612]	; (8003ec8 <HAL_RCC_OscConfig+0x330>)
 8003c64:	400a      	ands	r2, r1
 8003c66:	601a      	str	r2, [r3, #0]
 8003c68:	4b96      	ldr	r3, [pc, #600]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	4b95      	ldr	r3, [pc, #596]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c6e:	4997      	ldr	r1, [pc, #604]	; (8003ecc <HAL_RCC_OscConfig+0x334>)
 8003c70:	400a      	ands	r2, r1
 8003c72:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d014      	beq.n	8003ca6 <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c7c:	f7fe face 	bl	800221c <HAL_GetTick>
 8003c80:	0003      	movs	r3, r0
 8003c82:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c84:	e008      	b.n	8003c98 <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c86:	f7fe fac9 	bl	800221c <HAL_GetTick>
 8003c8a:	0002      	movs	r2, r0
 8003c8c:	69bb      	ldr	r3, [r7, #24]
 8003c8e:	1ad3      	subs	r3, r2, r3
 8003c90:	2b64      	cmp	r3, #100	; 0x64
 8003c92:	d901      	bls.n	8003c98 <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e28a      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c98:	4b8a      	ldr	r3, [pc, #552]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	2380      	movs	r3, #128	; 0x80
 8003c9e:	029b      	lsls	r3, r3, #10
 8003ca0:	4013      	ands	r3, r2
 8003ca2:	d0f0      	beq.n	8003c86 <HAL_RCC_OscConfig+0xee>
 8003ca4:	e015      	b.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ca6:	f7fe fab9 	bl	800221c <HAL_GetTick>
 8003caa:	0003      	movs	r3, r0
 8003cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cae:	e008      	b.n	8003cc2 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003cb0:	f7fe fab4 	bl	800221c <HAL_GetTick>
 8003cb4:	0002      	movs	r2, r0
 8003cb6:	69bb      	ldr	r3, [r7, #24]
 8003cb8:	1ad3      	subs	r3, r2, r3
 8003cba:	2b64      	cmp	r3, #100	; 0x64
 8003cbc:	d901      	bls.n	8003cc2 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003cbe:	2303      	movs	r3, #3
 8003cc0:	e275      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003cc2:	4b80      	ldr	r3, [pc, #512]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	2380      	movs	r3, #128	; 0x80
 8003cc8:	029b      	lsls	r3, r3, #10
 8003cca:	4013      	ands	r3, r2
 8003ccc:	d1f0      	bne.n	8003cb0 <HAL_RCC_OscConfig+0x118>
 8003cce:	e000      	b.n	8003cd2 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cd0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	2202      	movs	r2, #2
 8003cd8:	4013      	ands	r3, r2
 8003cda:	d100      	bne.n	8003cde <HAL_RCC_OscConfig+0x146>
 8003cdc:	e069      	b.n	8003db2 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003cde:	4b79      	ldr	r3, [pc, #484]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	220c      	movs	r2, #12
 8003ce4:	4013      	ands	r3, r2
 8003ce6:	d00b      	beq.n	8003d00 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8003ce8:	4b76      	ldr	r3, [pc, #472]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	220c      	movs	r2, #12
 8003cee:	4013      	ands	r3, r2
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	d11c      	bne.n	8003d2e <HAL_RCC_OscConfig+0x196>
 8003cf4:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	2380      	movs	r3, #128	; 0x80
 8003cfa:	025b      	lsls	r3, r3, #9
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	d116      	bne.n	8003d2e <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d00:	4b70      	ldr	r3, [pc, #448]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2202      	movs	r2, #2
 8003d06:	4013      	ands	r3, r2
 8003d08:	d005      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	68db      	ldr	r3, [r3, #12]
 8003d0e:	2b01      	cmp	r3, #1
 8003d10:	d001      	beq.n	8003d16 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	e24b      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d16:	4b6b      	ldr	r3, [pc, #428]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	22f8      	movs	r2, #248	; 0xf8
 8003d1c:	4393      	bics	r3, r2
 8003d1e:	0019      	movs	r1, r3
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	691b      	ldr	r3, [r3, #16]
 8003d24:	00da      	lsls	r2, r3, #3
 8003d26:	4b67      	ldr	r3, [pc, #412]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d28:	430a      	orrs	r2, r1
 8003d2a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d2c:	e041      	b.n	8003db2 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	68db      	ldr	r3, [r3, #12]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d024      	beq.n	8003d80 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d36:	4b63      	ldr	r3, [pc, #396]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d38:	681a      	ldr	r2, [r3, #0]
 8003d3a:	4b62      	ldr	r3, [pc, #392]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d3c:	2101      	movs	r1, #1
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d42:	f7fe fa6b 	bl	800221c <HAL_GetTick>
 8003d46:	0003      	movs	r3, r0
 8003d48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d4a:	e008      	b.n	8003d5e <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d4c:	f7fe fa66 	bl	800221c <HAL_GetTick>
 8003d50:	0002      	movs	r2, r0
 8003d52:	69bb      	ldr	r3, [r7, #24]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	2b02      	cmp	r3, #2
 8003d58:	d901      	bls.n	8003d5e <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 8003d5a:	2303      	movs	r3, #3
 8003d5c:	e227      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003d5e:	4b59      	ldr	r3, [pc, #356]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	2202      	movs	r2, #2
 8003d64:	4013      	ands	r3, r2
 8003d66:	d0f1      	beq.n	8003d4c <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d68:	4b56      	ldr	r3, [pc, #344]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	22f8      	movs	r2, #248	; 0xf8
 8003d6e:	4393      	bics	r3, r2
 8003d70:	0019      	movs	r1, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	691b      	ldr	r3, [r3, #16]
 8003d76:	00da      	lsls	r2, r3, #3
 8003d78:	4b52      	ldr	r3, [pc, #328]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	601a      	str	r2, [r3, #0]
 8003d7e:	e018      	b.n	8003db2 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003d80:	4b50      	ldr	r3, [pc, #320]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d82:	681a      	ldr	r2, [r3, #0]
 8003d84:	4b4f      	ldr	r3, [pc, #316]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003d86:	2101      	movs	r1, #1
 8003d88:	438a      	bics	r2, r1
 8003d8a:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fe fa46 	bl	800221c <HAL_GetTick>
 8003d90:	0003      	movs	r3, r0
 8003d92:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d94:	e008      	b.n	8003da8 <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003d96:	f7fe fa41 	bl	800221c <HAL_GetTick>
 8003d9a:	0002      	movs	r2, r0
 8003d9c:	69bb      	ldr	r3, [r7, #24]
 8003d9e:	1ad3      	subs	r3, r2, r3
 8003da0:	2b02      	cmp	r3, #2
 8003da2:	d901      	bls.n	8003da8 <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8003da4:	2303      	movs	r3, #3
 8003da6:	e202      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003da8:	4b46      	ldr	r3, [pc, #280]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	2202      	movs	r2, #2
 8003dae:	4013      	ands	r3, r2
 8003db0:	d1f1      	bne.n	8003d96 <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	2208      	movs	r2, #8
 8003db8:	4013      	ands	r3, r2
 8003dba:	d036      	beq.n	8003e2a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	69db      	ldr	r3, [r3, #28]
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d019      	beq.n	8003df8 <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003dc4:	4b3f      	ldr	r3, [pc, #252]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003dc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dc8:	4b3e      	ldr	r3, [pc, #248]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003dca:	2101      	movs	r1, #1
 8003dcc:	430a      	orrs	r2, r1
 8003dce:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003dd0:	f7fe fa24 	bl	800221c <HAL_GetTick>
 8003dd4:	0003      	movs	r3, r0
 8003dd6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dd8:	e008      	b.n	8003dec <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003dda:	f7fe fa1f 	bl	800221c <HAL_GetTick>
 8003dde:	0002      	movs	r2, r0
 8003de0:	69bb      	ldr	r3, [r7, #24]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	2b02      	cmp	r3, #2
 8003de6:	d901      	bls.n	8003dec <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 8003de8:	2303      	movs	r3, #3
 8003dea:	e1e0      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003dec:	4b35      	ldr	r3, [pc, #212]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	2202      	movs	r2, #2
 8003df2:	4013      	ands	r3, r2
 8003df4:	d0f1      	beq.n	8003dda <HAL_RCC_OscConfig+0x242>
 8003df6:	e018      	b.n	8003e2a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003df8:	4b32      	ldr	r3, [pc, #200]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003dfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dfc:	4b31      	ldr	r3, [pc, #196]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003dfe:	2101      	movs	r1, #1
 8003e00:	438a      	bics	r2, r1
 8003e02:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e04:	f7fe fa0a 	bl	800221c <HAL_GetTick>
 8003e08:	0003      	movs	r3, r0
 8003e0a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e0c:	e008      	b.n	8003e20 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003e0e:	f7fe fa05 	bl	800221c <HAL_GetTick>
 8003e12:	0002      	movs	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b02      	cmp	r3, #2
 8003e1a:	d901      	bls.n	8003e20 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 8003e1c:	2303      	movs	r3, #3
 8003e1e:	e1c6      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e24:	2202      	movs	r2, #2
 8003e26:	4013      	ands	r3, r2
 8003e28:	d1f1      	bne.n	8003e0e <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	2204      	movs	r2, #4
 8003e30:	4013      	ands	r3, r2
 8003e32:	d100      	bne.n	8003e36 <HAL_RCC_OscConfig+0x29e>
 8003e34:	e0b4      	b.n	8003fa0 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e36:	201f      	movs	r0, #31
 8003e38:	183b      	adds	r3, r7, r0
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e3e:	4b21      	ldr	r3, [pc, #132]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003e40:	69da      	ldr	r2, [r3, #28]
 8003e42:	2380      	movs	r3, #128	; 0x80
 8003e44:	055b      	lsls	r3, r3, #21
 8003e46:	4013      	ands	r3, r2
 8003e48:	d110      	bne.n	8003e6c <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e4a:	4b1e      	ldr	r3, [pc, #120]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	4b1d      	ldr	r3, [pc, #116]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003e50:	2180      	movs	r1, #128	; 0x80
 8003e52:	0549      	lsls	r1, r1, #21
 8003e54:	430a      	orrs	r2, r1
 8003e56:	61da      	str	r2, [r3, #28]
 8003e58:	4b1a      	ldr	r3, [pc, #104]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003e5a:	69da      	ldr	r2, [r3, #28]
 8003e5c:	2380      	movs	r3, #128	; 0x80
 8003e5e:	055b      	lsls	r3, r3, #21
 8003e60:	4013      	ands	r3, r2
 8003e62:	60fb      	str	r3, [r7, #12]
 8003e64:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003e66:	183b      	adds	r3, r7, r0
 8003e68:	2201      	movs	r2, #1
 8003e6a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e6c:	4b18      	ldr	r3, [pc, #96]	; (8003ed0 <HAL_RCC_OscConfig+0x338>)
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	2380      	movs	r3, #128	; 0x80
 8003e72:	005b      	lsls	r3, r3, #1
 8003e74:	4013      	ands	r3, r2
 8003e76:	d11a      	bne.n	8003eae <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e78:	4b15      	ldr	r3, [pc, #84]	; (8003ed0 <HAL_RCC_OscConfig+0x338>)
 8003e7a:	681a      	ldr	r2, [r3, #0]
 8003e7c:	4b14      	ldr	r3, [pc, #80]	; (8003ed0 <HAL_RCC_OscConfig+0x338>)
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	0049      	lsls	r1, r1, #1
 8003e82:	430a      	orrs	r2, r1
 8003e84:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e86:	f7fe f9c9 	bl	800221c <HAL_GetTick>
 8003e8a:	0003      	movs	r3, r0
 8003e8c:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e8e:	e008      	b.n	8003ea2 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e90:	f7fe f9c4 	bl	800221c <HAL_GetTick>
 8003e94:	0002      	movs	r2, r0
 8003e96:	69bb      	ldr	r3, [r7, #24]
 8003e98:	1ad3      	subs	r3, r2, r3
 8003e9a:	2b64      	cmp	r3, #100	; 0x64
 8003e9c:	d901      	bls.n	8003ea2 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e185      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ea2:	4b0b      	ldr	r3, [pc, #44]	; (8003ed0 <HAL_RCC_OscConfig+0x338>)
 8003ea4:	681a      	ldr	r2, [r3, #0]
 8003ea6:	2380      	movs	r3, #128	; 0x80
 8003ea8:	005b      	lsls	r3, r3, #1
 8003eaa:	4013      	ands	r3, r2
 8003eac:	d0f0      	beq.n	8003e90 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	2b01      	cmp	r3, #1
 8003eb4:	d10e      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x33c>
 8003eb6:	4b03      	ldr	r3, [pc, #12]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003eb8:	6a1a      	ldr	r2, [r3, #32]
 8003eba:	4b02      	ldr	r3, [pc, #8]	; (8003ec4 <HAL_RCC_OscConfig+0x32c>)
 8003ebc:	2101      	movs	r1, #1
 8003ebe:	430a      	orrs	r2, r1
 8003ec0:	621a      	str	r2, [r3, #32]
 8003ec2:	e035      	b.n	8003f30 <HAL_RCC_OscConfig+0x398>
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	fffeffff 	.word	0xfffeffff
 8003ecc:	fffbffff 	.word	0xfffbffff
 8003ed0:	40007000 	.word	0x40007000
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d10c      	bne.n	8003ef6 <HAL_RCC_OscConfig+0x35e>
 8003edc:	4bb6      	ldr	r3, [pc, #728]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003ede:	6a1a      	ldr	r2, [r3, #32]
 8003ee0:	4bb5      	ldr	r3, [pc, #724]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003ee2:	2101      	movs	r1, #1
 8003ee4:	438a      	bics	r2, r1
 8003ee6:	621a      	str	r2, [r3, #32]
 8003ee8:	4bb3      	ldr	r3, [pc, #716]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003eea:	6a1a      	ldr	r2, [r3, #32]
 8003eec:	4bb2      	ldr	r3, [pc, #712]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003eee:	2104      	movs	r1, #4
 8003ef0:	438a      	bics	r2, r1
 8003ef2:	621a      	str	r2, [r3, #32]
 8003ef4:	e01c      	b.n	8003f30 <HAL_RCC_OscConfig+0x398>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	689b      	ldr	r3, [r3, #8]
 8003efa:	2b05      	cmp	r3, #5
 8003efc:	d10c      	bne.n	8003f18 <HAL_RCC_OscConfig+0x380>
 8003efe:	4bae      	ldr	r3, [pc, #696]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f00:	6a1a      	ldr	r2, [r3, #32]
 8003f02:	4bad      	ldr	r3, [pc, #692]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f04:	2104      	movs	r1, #4
 8003f06:	430a      	orrs	r2, r1
 8003f08:	621a      	str	r2, [r3, #32]
 8003f0a:	4bab      	ldr	r3, [pc, #684]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f0c:	6a1a      	ldr	r2, [r3, #32]
 8003f0e:	4baa      	ldr	r3, [pc, #680]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f10:	2101      	movs	r1, #1
 8003f12:	430a      	orrs	r2, r1
 8003f14:	621a      	str	r2, [r3, #32]
 8003f16:	e00b      	b.n	8003f30 <HAL_RCC_OscConfig+0x398>
 8003f18:	4ba7      	ldr	r3, [pc, #668]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f1a:	6a1a      	ldr	r2, [r3, #32]
 8003f1c:	4ba6      	ldr	r3, [pc, #664]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f1e:	2101      	movs	r1, #1
 8003f20:	438a      	bics	r2, r1
 8003f22:	621a      	str	r2, [r3, #32]
 8003f24:	4ba4      	ldr	r3, [pc, #656]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f26:	6a1a      	ldr	r2, [r3, #32]
 8003f28:	4ba3      	ldr	r3, [pc, #652]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f2a:	2104      	movs	r1, #4
 8003f2c:	438a      	bics	r2, r1
 8003f2e:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d014      	beq.n	8003f62 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f38:	f7fe f970 	bl	800221c <HAL_GetTick>
 8003f3c:	0003      	movs	r3, r0
 8003f3e:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f40:	e009      	b.n	8003f56 <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f42:	f7fe f96b 	bl	800221c <HAL_GetTick>
 8003f46:	0002      	movs	r2, r0
 8003f48:	69bb      	ldr	r3, [r7, #24]
 8003f4a:	1ad3      	subs	r3, r2, r3
 8003f4c:	4a9b      	ldr	r2, [pc, #620]	; (80041bc <HAL_RCC_OscConfig+0x624>)
 8003f4e:	4293      	cmp	r3, r2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e12b      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f56:	4b98      	ldr	r3, [pc, #608]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d0f0      	beq.n	8003f42 <HAL_RCC_OscConfig+0x3aa>
 8003f60:	e013      	b.n	8003f8a <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f62:	f7fe f95b 	bl	800221c <HAL_GetTick>
 8003f66:	0003      	movs	r3, r0
 8003f68:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f6a:	e009      	b.n	8003f80 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f6c:	f7fe f956 	bl	800221c <HAL_GetTick>
 8003f70:	0002      	movs	r2, r0
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	1ad3      	subs	r3, r2, r3
 8003f76:	4a91      	ldr	r2, [pc, #580]	; (80041bc <HAL_RCC_OscConfig+0x624>)
 8003f78:	4293      	cmp	r3, r2
 8003f7a:	d901      	bls.n	8003f80 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e116      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003f80:	4b8d      	ldr	r3, [pc, #564]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f82:	6a1b      	ldr	r3, [r3, #32]
 8003f84:	2202      	movs	r2, #2
 8003f86:	4013      	ands	r3, r2
 8003f88:	d1f0      	bne.n	8003f6c <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003f8a:	231f      	movs	r3, #31
 8003f8c:	18fb      	adds	r3, r7, r3
 8003f8e:	781b      	ldrb	r3, [r3, #0]
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	d105      	bne.n	8003fa0 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f94:	4b88      	ldr	r3, [pc, #544]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	4b87      	ldr	r3, [pc, #540]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003f9a:	4989      	ldr	r1, [pc, #548]	; (80041c0 <HAL_RCC_OscConfig+0x628>)
 8003f9c:	400a      	ands	r2, r1
 8003f9e:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	2210      	movs	r2, #16
 8003fa6:	4013      	ands	r3, r2
 8003fa8:	d063      	beq.n	8004072 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	2b01      	cmp	r3, #1
 8003fb0:	d12a      	bne.n	8004008 <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8003fb2:	4b81      	ldr	r3, [pc, #516]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003fb4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fb6:	4b80      	ldr	r3, [pc, #512]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003fb8:	2104      	movs	r1, #4
 8003fba:	430a      	orrs	r2, r1
 8003fbc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8003fbe:	4b7e      	ldr	r3, [pc, #504]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003fc0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fc2:	4b7d      	ldr	r3, [pc, #500]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003fc4:	2101      	movs	r1, #1
 8003fc6:	430a      	orrs	r2, r1
 8003fc8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fca:	f7fe f927 	bl	800221c <HAL_GetTick>
 8003fce:	0003      	movs	r3, r0
 8003fd0:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fd2:	e008      	b.n	8003fe6 <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003fd4:	f7fe f922 	bl	800221c <HAL_GetTick>
 8003fd8:	0002      	movs	r2, r0
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d901      	bls.n	8003fe6 <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e0e3      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003fe6:	4b74      	ldr	r3, [pc, #464]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003fe8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fea:	2202      	movs	r2, #2
 8003fec:	4013      	ands	r3, r2
 8003fee:	d0f1      	beq.n	8003fd4 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8003ff0:	4b71      	ldr	r3, [pc, #452]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8003ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ff4:	22f8      	movs	r2, #248	; 0xf8
 8003ff6:	4393      	bics	r3, r2
 8003ff8:	0019      	movs	r1, r3
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	699b      	ldr	r3, [r3, #24]
 8003ffe:	00da      	lsls	r2, r3, #3
 8004000:	4b6d      	ldr	r3, [pc, #436]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004002:	430a      	orrs	r2, r1
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
 8004006:	e034      	b.n	8004072 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	695b      	ldr	r3, [r3, #20]
 800400c:	3305      	adds	r3, #5
 800400e:	d111      	bne.n	8004034 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8004010:	4b69      	ldr	r3, [pc, #420]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004012:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004014:	4b68      	ldr	r3, [pc, #416]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004016:	2104      	movs	r1, #4
 8004018:	438a      	bics	r2, r1
 800401a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800401c:	4b66      	ldr	r3, [pc, #408]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	22f8      	movs	r2, #248	; 0xf8
 8004022:	4393      	bics	r3, r2
 8004024:	0019      	movs	r1, r3
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	699b      	ldr	r3, [r3, #24]
 800402a:	00da      	lsls	r2, r3, #3
 800402c:	4b62      	ldr	r3, [pc, #392]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 800402e:	430a      	orrs	r2, r1
 8004030:	635a      	str	r2, [r3, #52]	; 0x34
 8004032:	e01e      	b.n	8004072 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8004034:	4b60      	ldr	r3, [pc, #384]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004036:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004038:	4b5f      	ldr	r3, [pc, #380]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 800403a:	2104      	movs	r1, #4
 800403c:	430a      	orrs	r2, r1
 800403e:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8004040:	4b5d      	ldr	r3, [pc, #372]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004042:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004044:	4b5c      	ldr	r3, [pc, #368]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004046:	2101      	movs	r1, #1
 8004048:	438a      	bics	r2, r1
 800404a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800404c:	f7fe f8e6 	bl	800221c <HAL_GetTick>
 8004050:	0003      	movs	r3, r0
 8004052:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004054:	e008      	b.n	8004068 <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8004056:	f7fe f8e1 	bl	800221c <HAL_GetTick>
 800405a:	0002      	movs	r2, r0
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	1ad3      	subs	r3, r2, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d901      	bls.n	8004068 <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8004064:	2303      	movs	r3, #3
 8004066:	e0a2      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8004068:	4b53      	ldr	r3, [pc, #332]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 800406a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800406c:	2202      	movs	r2, #2
 800406e:	4013      	ands	r3, r2
 8004070:	d1f1      	bne.n	8004056 <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a1b      	ldr	r3, [r3, #32]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d100      	bne.n	800407c <HAL_RCC_OscConfig+0x4e4>
 800407a:	e097      	b.n	80041ac <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800407c:	4b4e      	ldr	r3, [pc, #312]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	220c      	movs	r2, #12
 8004082:	4013      	ands	r3, r2
 8004084:	2b08      	cmp	r3, #8
 8004086:	d100      	bne.n	800408a <HAL_RCC_OscConfig+0x4f2>
 8004088:	e06b      	b.n	8004162 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6a1b      	ldr	r3, [r3, #32]
 800408e:	2b02      	cmp	r3, #2
 8004090:	d14c      	bne.n	800412c <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004092:	4b49      	ldr	r3, [pc, #292]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004094:	681a      	ldr	r2, [r3, #0]
 8004096:	4b48      	ldr	r3, [pc, #288]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004098:	494a      	ldr	r1, [pc, #296]	; (80041c4 <HAL_RCC_OscConfig+0x62c>)
 800409a:	400a      	ands	r2, r1
 800409c:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800409e:	f7fe f8bd 	bl	800221c <HAL_GetTick>
 80040a2:	0003      	movs	r3, r0
 80040a4:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040a6:	e008      	b.n	80040ba <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040a8:	f7fe f8b8 	bl	800221c <HAL_GetTick>
 80040ac:	0002      	movs	r2, r0
 80040ae:	69bb      	ldr	r3, [r7, #24]
 80040b0:	1ad3      	subs	r3, r2, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d901      	bls.n	80040ba <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 80040b6:	2303      	movs	r3, #3
 80040b8:	e079      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040ba:	4b3f      	ldr	r3, [pc, #252]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040bc:	681a      	ldr	r2, [r3, #0]
 80040be:	2380      	movs	r3, #128	; 0x80
 80040c0:	049b      	lsls	r3, r3, #18
 80040c2:	4013      	ands	r3, r2
 80040c4:	d1f0      	bne.n	80040a8 <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80040c6:	4b3c      	ldr	r3, [pc, #240]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ca:	220f      	movs	r2, #15
 80040cc:	4393      	bics	r3, r2
 80040ce:	0019      	movs	r1, r3
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040d4:	4b38      	ldr	r3, [pc, #224]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040d6:	430a      	orrs	r2, r1
 80040d8:	62da      	str	r2, [r3, #44]	; 0x2c
 80040da:	4b37      	ldr	r3, [pc, #220]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	4a3a      	ldr	r2, [pc, #232]	; (80041c8 <HAL_RCC_OscConfig+0x630>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	0019      	movs	r1, r3
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040ec:	431a      	orrs	r2, r3
 80040ee:	4b32      	ldr	r3, [pc, #200]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040f0:	430a      	orrs	r2, r1
 80040f2:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040f4:	4b30      	ldr	r3, [pc, #192]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040f6:	681a      	ldr	r2, [r3, #0]
 80040f8:	4b2f      	ldr	r3, [pc, #188]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 80040fa:	2180      	movs	r1, #128	; 0x80
 80040fc:	0449      	lsls	r1, r1, #17
 80040fe:	430a      	orrs	r2, r1
 8004100:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004102:	f7fe f88b 	bl	800221c <HAL_GetTick>
 8004106:	0003      	movs	r3, r0
 8004108:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800410a:	e008      	b.n	800411e <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800410c:	f7fe f886 	bl	800221c <HAL_GetTick>
 8004110:	0002      	movs	r2, r0
 8004112:	69bb      	ldr	r3, [r7, #24]
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	2b02      	cmp	r3, #2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e047      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800411e:	4b26      	ldr	r3, [pc, #152]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004120:	681a      	ldr	r2, [r3, #0]
 8004122:	2380      	movs	r3, #128	; 0x80
 8004124:	049b      	lsls	r3, r3, #18
 8004126:	4013      	ands	r3, r2
 8004128:	d0f0      	beq.n	800410c <HAL_RCC_OscConfig+0x574>
 800412a:	e03f      	b.n	80041ac <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800412c:	4b22      	ldr	r3, [pc, #136]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 800412e:	681a      	ldr	r2, [r3, #0]
 8004130:	4b21      	ldr	r3, [pc, #132]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004132:	4924      	ldr	r1, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x62c>)
 8004134:	400a      	ands	r2, r1
 8004136:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004138:	f7fe f870 	bl	800221c <HAL_GetTick>
 800413c:	0003      	movs	r3, r0
 800413e:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004140:	e008      	b.n	8004154 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004142:	f7fe f86b 	bl	800221c <HAL_GetTick>
 8004146:	0002      	movs	r2, r0
 8004148:	69bb      	ldr	r3, [r7, #24]
 800414a:	1ad3      	subs	r3, r2, r3
 800414c:	2b02      	cmp	r3, #2
 800414e:	d901      	bls.n	8004154 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8004150:	2303      	movs	r3, #3
 8004152:	e02c      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004154:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004156:	681a      	ldr	r2, [r3, #0]
 8004158:	2380      	movs	r3, #128	; 0x80
 800415a:	049b      	lsls	r3, r3, #18
 800415c:	4013      	ands	r3, r2
 800415e:	d1f0      	bne.n	8004142 <HAL_RCC_OscConfig+0x5aa>
 8004160:	e024      	b.n	80041ac <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	2b01      	cmp	r3, #1
 8004168:	d101      	bne.n	800416e <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 800416a:	2301      	movs	r3, #1
 800416c:	e01f      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 800416e:	4b12      	ldr	r3, [pc, #72]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004170:	685b      	ldr	r3, [r3, #4]
 8004172:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8004174:	4b10      	ldr	r3, [pc, #64]	; (80041b8 <HAL_RCC_OscConfig+0x620>)
 8004176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004178:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800417a:	697a      	ldr	r2, [r7, #20]
 800417c:	2380      	movs	r3, #128	; 0x80
 800417e:	025b      	lsls	r3, r3, #9
 8004180:	401a      	ands	r2, r3
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	429a      	cmp	r2, r3
 8004188:	d10e      	bne.n	80041a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800418a:	693b      	ldr	r3, [r7, #16]
 800418c:	220f      	movs	r2, #15
 800418e:	401a      	ands	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8004194:	429a      	cmp	r2, r3
 8004196:	d107      	bne.n	80041a8 <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	23f0      	movs	r3, #240	; 0xf0
 800419c:	039b      	lsls	r3, r3, #14
 800419e:	401a      	ands	r2, r3
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 80041a4:	429a      	cmp	r2, r3
 80041a6:	d001      	beq.n	80041ac <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	e000      	b.n	80041ae <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 80041ac:	2300      	movs	r3, #0
}
 80041ae:	0018      	movs	r0, r3
 80041b0:	46bd      	mov	sp, r7
 80041b2:	b008      	add	sp, #32
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	46c0      	nop			; (mov r8, r8)
 80041b8:	40021000 	.word	0x40021000
 80041bc:	00001388 	.word	0x00001388
 80041c0:	efffffff 	.word	0xefffffff
 80041c4:	feffffff 	.word	0xfeffffff
 80041c8:	ffc2ffff 	.word	0xffc2ffff

080041cc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d101      	bne.n	80041e0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e0b3      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041e0:	4b5b      	ldr	r3, [pc, #364]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	4013      	ands	r3, r2
 80041e8:	683a      	ldr	r2, [r7, #0]
 80041ea:	429a      	cmp	r2, r3
 80041ec:	d911      	bls.n	8004212 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041ee:	4b58      	ldr	r3, [pc, #352]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	2201      	movs	r2, #1
 80041f4:	4393      	bics	r3, r2
 80041f6:	0019      	movs	r1, r3
 80041f8:	4b55      	ldr	r3, [pc, #340]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80041fa:	683a      	ldr	r2, [r7, #0]
 80041fc:	430a      	orrs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004200:	4b53      	ldr	r3, [pc, #332]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	2201      	movs	r2, #1
 8004206:	4013      	ands	r3, r2
 8004208:	683a      	ldr	r2, [r7, #0]
 800420a:	429a      	cmp	r2, r3
 800420c:	d001      	beq.n	8004212 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 800420e:	2301      	movs	r3, #1
 8004210:	e09a      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2202      	movs	r2, #2
 8004218:	4013      	ands	r3, r2
 800421a:	d015      	beq.n	8004248 <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	2204      	movs	r2, #4
 8004222:	4013      	ands	r3, r2
 8004224:	d006      	beq.n	8004234 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004226:	4b4b      	ldr	r3, [pc, #300]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004228:	685a      	ldr	r2, [r3, #4]
 800422a:	4b4a      	ldr	r3, [pc, #296]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 800422c:	21e0      	movs	r1, #224	; 0xe0
 800422e:	00c9      	lsls	r1, r1, #3
 8004230:	430a      	orrs	r2, r1
 8004232:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004234:	4b47      	ldr	r3, [pc, #284]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004236:	685b      	ldr	r3, [r3, #4]
 8004238:	22f0      	movs	r2, #240	; 0xf0
 800423a:	4393      	bics	r3, r2
 800423c:	0019      	movs	r1, r3
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	689a      	ldr	r2, [r3, #8]
 8004242:	4b44      	ldr	r3, [pc, #272]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004244:	430a      	orrs	r2, r1
 8004246:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	2201      	movs	r2, #1
 800424e:	4013      	ands	r3, r2
 8004250:	d040      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	2b01      	cmp	r3, #1
 8004258:	d107      	bne.n	800426a <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800425a:	4b3e      	ldr	r3, [pc, #248]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	2380      	movs	r3, #128	; 0x80
 8004260:	029b      	lsls	r3, r3, #10
 8004262:	4013      	ands	r3, r2
 8004264:	d114      	bne.n	8004290 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e06e      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
 800426e:	2b02      	cmp	r3, #2
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b38      	ldr	r3, [pc, #224]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004274:	681a      	ldr	r2, [r3, #0]
 8004276:	2380      	movs	r3, #128	; 0x80
 8004278:	049b      	lsls	r3, r3, #18
 800427a:	4013      	ands	r3, r2
 800427c:	d108      	bne.n	8004290 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e062      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b34      	ldr	r3, [pc, #208]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	2202      	movs	r2, #2
 8004288:	4013      	ands	r3, r2
 800428a:	d101      	bne.n	8004290 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 800428c:	2301      	movs	r3, #1
 800428e:	e05b      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004290:	4b30      	ldr	r3, [pc, #192]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004292:	685b      	ldr	r3, [r3, #4]
 8004294:	2203      	movs	r2, #3
 8004296:	4393      	bics	r3, r2
 8004298:	0019      	movs	r1, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	4b2d      	ldr	r3, [pc, #180]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 80042a0:	430a      	orrs	r2, r1
 80042a2:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fd ffba 	bl	800221c <HAL_GetTick>
 80042a8:	0003      	movs	r3, r0
 80042aa:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042ac:	e009      	b.n	80042c2 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ae:	f7fd ffb5 	bl	800221c <HAL_GetTick>
 80042b2:	0002      	movs	r2, r0
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	1ad3      	subs	r3, r2, r3
 80042b8:	4a27      	ldr	r2, [pc, #156]	; (8004358 <HAL_RCC_ClockConfig+0x18c>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e042      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b24      	ldr	r3, [pc, #144]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	220c      	movs	r2, #12
 80042c8:	401a      	ands	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1ec      	bne.n	80042ae <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b1e      	ldr	r3, [pc, #120]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2201      	movs	r2, #1
 80042da:	4013      	ands	r3, r2
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d211      	bcs.n	8004306 <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b1b      	ldr	r3, [pc, #108]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2201      	movs	r2, #1
 80042e8:	4393      	bics	r3, r2
 80042ea:	0019      	movs	r1, r3
 80042ec:	4b18      	ldr	r3, [pc, #96]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80042ee:	683a      	ldr	r2, [r7, #0]
 80042f0:	430a      	orrs	r2, r1
 80042f2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042f4:	4b16      	ldr	r3, [pc, #88]	; (8004350 <HAL_RCC_ClockConfig+0x184>)
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	2201      	movs	r2, #1
 80042fa:	4013      	ands	r3, r2
 80042fc:	683a      	ldr	r2, [r7, #0]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d001      	beq.n	8004306 <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	e020      	b.n	8004348 <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	2204      	movs	r2, #4
 800430c:	4013      	ands	r3, r2
 800430e:	d009      	beq.n	8004324 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8004310:	4b10      	ldr	r3, [pc, #64]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004312:	685b      	ldr	r3, [r3, #4]
 8004314:	4a11      	ldr	r2, [pc, #68]	; (800435c <HAL_RCC_ClockConfig+0x190>)
 8004316:	4013      	ands	r3, r2
 8004318:	0019      	movs	r1, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68da      	ldr	r2, [r3, #12]
 800431e:	4b0d      	ldr	r3, [pc, #52]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 8004320:	430a      	orrs	r2, r1
 8004322:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8004324:	f000 f820 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8004328:	0001      	movs	r1, r0
 800432a:	4b0a      	ldr	r3, [pc, #40]	; (8004354 <HAL_RCC_ClockConfig+0x188>)
 800432c:	685b      	ldr	r3, [r3, #4]
 800432e:	091b      	lsrs	r3, r3, #4
 8004330:	220f      	movs	r2, #15
 8004332:	4013      	ands	r3, r2
 8004334:	4a0a      	ldr	r2, [pc, #40]	; (8004360 <HAL_RCC_ClockConfig+0x194>)
 8004336:	5cd3      	ldrb	r3, [r2, r3]
 8004338:	000a      	movs	r2, r1
 800433a:	40da      	lsrs	r2, r3
 800433c:	4b09      	ldr	r3, [pc, #36]	; (8004364 <HAL_RCC_ClockConfig+0x198>)
 800433e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8004340:	2003      	movs	r0, #3
 8004342:	f7fd ff25 	bl	8002190 <HAL_InitTick>
  
  return HAL_OK;
 8004346:	2300      	movs	r3, #0
}
 8004348:	0018      	movs	r0, r3
 800434a:	46bd      	mov	sp, r7
 800434c:	b004      	add	sp, #16
 800434e:	bd80      	pop	{r7, pc}
 8004350:	40022000 	.word	0x40022000
 8004354:	40021000 	.word	0x40021000
 8004358:	00001388 	.word	0x00001388
 800435c:	fffff8ff 	.word	0xfffff8ff
 8004360:	08006e74 	.word	0x08006e74
 8004364:	20000004 	.word	0x20000004

08004368 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b086      	sub	sp, #24
 800436c:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800436e:	2300      	movs	r3, #0
 8004370:	60fb      	str	r3, [r7, #12]
 8004372:	2300      	movs	r3, #0
 8004374:	60bb      	str	r3, [r7, #8]
 8004376:	2300      	movs	r3, #0
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	2300      	movs	r3, #0
 800437c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800437e:	2300      	movs	r3, #0
 8004380:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004382:	4b20      	ldr	r3, [pc, #128]	; (8004404 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004384:	685b      	ldr	r3, [r3, #4]
 8004386:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	220c      	movs	r2, #12
 800438c:	4013      	ands	r3, r2
 800438e:	2b04      	cmp	r3, #4
 8004390:	d002      	beq.n	8004398 <HAL_RCC_GetSysClockFreq+0x30>
 8004392:	2b08      	cmp	r3, #8
 8004394:	d003      	beq.n	800439e <HAL_RCC_GetSysClockFreq+0x36>
 8004396:	e02c      	b.n	80043f2 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004398:	4b1b      	ldr	r3, [pc, #108]	; (8004408 <HAL_RCC_GetSysClockFreq+0xa0>)
 800439a:	613b      	str	r3, [r7, #16]
      break;
 800439c:	e02c      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	0c9b      	lsrs	r3, r3, #18
 80043a2:	220f      	movs	r2, #15
 80043a4:	4013      	ands	r3, r2
 80043a6:	4a19      	ldr	r2, [pc, #100]	; (800440c <HAL_RCC_GetSysClockFreq+0xa4>)
 80043a8:	5cd3      	ldrb	r3, [r2, r3]
 80043aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80043ac:	4b15      	ldr	r3, [pc, #84]	; (8004404 <HAL_RCC_GetSysClockFreq+0x9c>)
 80043ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b0:	220f      	movs	r2, #15
 80043b2:	4013      	ands	r3, r2
 80043b4:	4a16      	ldr	r2, [pc, #88]	; (8004410 <HAL_RCC_GetSysClockFreq+0xa8>)
 80043b6:	5cd3      	ldrb	r3, [r2, r3]
 80043b8:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80043ba:	68fa      	ldr	r2, [r7, #12]
 80043bc:	2380      	movs	r3, #128	; 0x80
 80043be:	025b      	lsls	r3, r3, #9
 80043c0:	4013      	ands	r3, r2
 80043c2:	d009      	beq.n	80043d8 <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	4810      	ldr	r0, [pc, #64]	; (8004408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043c8:	f7fb fea8 	bl	800011c <__udivsi3>
 80043cc:	0003      	movs	r3, r0
 80043ce:	001a      	movs	r2, r3
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4353      	muls	r3, r2
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e009      	b.n	80043ec <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 80043d8:	6879      	ldr	r1, [r7, #4]
 80043da:	000a      	movs	r2, r1
 80043dc:	0152      	lsls	r2, r2, #5
 80043de:	1a52      	subs	r2, r2, r1
 80043e0:	0193      	lsls	r3, r2, #6
 80043e2:	1a9b      	subs	r3, r3, r2
 80043e4:	00db      	lsls	r3, r3, #3
 80043e6:	185b      	adds	r3, r3, r1
 80043e8:	021b      	lsls	r3, r3, #8
 80043ea:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 80043ec:	697b      	ldr	r3, [r7, #20]
 80043ee:	613b      	str	r3, [r7, #16]
      break;
 80043f0:	e002      	b.n	80043f8 <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043f2:	4b05      	ldr	r3, [pc, #20]	; (8004408 <HAL_RCC_GetSysClockFreq+0xa0>)
 80043f4:	613b      	str	r3, [r7, #16]
      break;
 80043f6:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 80043f8:	693b      	ldr	r3, [r7, #16]
}
 80043fa:	0018      	movs	r0, r3
 80043fc:	46bd      	mov	sp, r7
 80043fe:	b006      	add	sp, #24
 8004400:	bd80      	pop	{r7, pc}
 8004402:	46c0      	nop			; (mov r8, r8)
 8004404:	40021000 	.word	0x40021000
 8004408:	007a1200 	.word	0x007a1200
 800440c:	08006e8c 	.word	0x08006e8c
 8004410:	08006e9c 	.word	0x08006e9c

08004414 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004418:	4b02      	ldr	r3, [pc, #8]	; (8004424 <HAL_RCC_GetHCLKFreq+0x10>)
 800441a:	681b      	ldr	r3, [r3, #0]
}
 800441c:	0018      	movs	r0, r3
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	46c0      	nop			; (mov r8, r8)
 8004424:	20000004 	.word	0x20000004

08004428 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 800442c:	f7ff fff2 	bl	8004414 <HAL_RCC_GetHCLKFreq>
 8004430:	0001      	movs	r1, r0
 8004432:	4b06      	ldr	r3, [pc, #24]	; (800444c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004434:	685b      	ldr	r3, [r3, #4]
 8004436:	0a1b      	lsrs	r3, r3, #8
 8004438:	2207      	movs	r2, #7
 800443a:	4013      	ands	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	; (8004450 <HAL_RCC_GetPCLK1Freq+0x28>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	40d9      	lsrs	r1, r3
 8004442:	000b      	movs	r3, r1
}    
 8004444:	0018      	movs	r0, r3
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	46c0      	nop			; (mov r8, r8)
 800444c:	40021000 	.word	0x40021000
 8004450:	08006e84 	.word	0x08006e84

08004454 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b086      	sub	sp, #24
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800445c:	2300      	movs	r3, #0
 800445e:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8004460:	2300      	movs	r3, #0
 8004462:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681a      	ldr	r2, [r3, #0]
 8004468:	2380      	movs	r3, #128	; 0x80
 800446a:	025b      	lsls	r3, r3, #9
 800446c:	4013      	ands	r3, r2
 800446e:	d100      	bne.n	8004472 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8004470:	e08e      	b.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8004472:	2017      	movs	r0, #23
 8004474:	183b      	adds	r3, r7, r0
 8004476:	2200      	movs	r2, #0
 8004478:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800447a:	4b57      	ldr	r3, [pc, #348]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800447c:	69da      	ldr	r2, [r3, #28]
 800447e:	2380      	movs	r3, #128	; 0x80
 8004480:	055b      	lsls	r3, r3, #21
 8004482:	4013      	ands	r3, r2
 8004484:	d110      	bne.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8004486:	4b54      	ldr	r3, [pc, #336]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004488:	69da      	ldr	r2, [r3, #28]
 800448a:	4b53      	ldr	r3, [pc, #332]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800448c:	2180      	movs	r1, #128	; 0x80
 800448e:	0549      	lsls	r1, r1, #21
 8004490:	430a      	orrs	r2, r1
 8004492:	61da      	str	r2, [r3, #28]
 8004494:	4b50      	ldr	r3, [pc, #320]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004496:	69da      	ldr	r2, [r3, #28]
 8004498:	2380      	movs	r3, #128	; 0x80
 800449a:	055b      	lsls	r3, r3, #21
 800449c:	4013      	ands	r3, r2
 800449e:	60bb      	str	r3, [r7, #8]
 80044a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044a2:	183b      	adds	r3, r7, r0
 80044a4:	2201      	movs	r2, #1
 80044a6:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044a8:	4b4c      	ldr	r3, [pc, #304]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	2380      	movs	r3, #128	; 0x80
 80044ae:	005b      	lsls	r3, r3, #1
 80044b0:	4013      	ands	r3, r2
 80044b2:	d11a      	bne.n	80044ea <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044b4:	4b49      	ldr	r3, [pc, #292]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044b6:	681a      	ldr	r2, [r3, #0]
 80044b8:	4b48      	ldr	r3, [pc, #288]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044ba:	2180      	movs	r1, #128	; 0x80
 80044bc:	0049      	lsls	r1, r1, #1
 80044be:	430a      	orrs	r2, r1
 80044c0:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044c2:	f7fd feab 	bl	800221c <HAL_GetTick>
 80044c6:	0003      	movs	r3, r0
 80044c8:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ca:	e008      	b.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044cc:	f7fd fea6 	bl	800221c <HAL_GetTick>
 80044d0:	0002      	movs	r2, r0
 80044d2:	693b      	ldr	r3, [r7, #16]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	2b64      	cmp	r3, #100	; 0x64
 80044d8:	d901      	bls.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 80044da:	2303      	movs	r3, #3
 80044dc:	e077      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044de:	4b3f      	ldr	r3, [pc, #252]	; (80045dc <HAL_RCCEx_PeriphCLKConfig+0x188>)
 80044e0:	681a      	ldr	r2, [r3, #0]
 80044e2:	2380      	movs	r3, #128	; 0x80
 80044e4:	005b      	lsls	r3, r3, #1
 80044e6:	4013      	ands	r3, r2
 80044e8:	d0f0      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80044ea:	4b3b      	ldr	r3, [pc, #236]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80044ec:	6a1a      	ldr	r2, [r3, #32]
 80044ee:	23c0      	movs	r3, #192	; 0xc0
 80044f0:	009b      	lsls	r3, r3, #2
 80044f2:	4013      	ands	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d034      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x112>
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	685a      	ldr	r2, [r3, #4]
 8004500:	23c0      	movs	r3, #192	; 0xc0
 8004502:	009b      	lsls	r3, r3, #2
 8004504:	4013      	ands	r3, r2
 8004506:	68fa      	ldr	r2, [r7, #12]
 8004508:	429a      	cmp	r2, r3
 800450a:	d02c      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800450c:	4b32      	ldr	r3, [pc, #200]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	4a33      	ldr	r2, [pc, #204]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8004512:	4013      	ands	r3, r2
 8004514:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004516:	4b30      	ldr	r3, [pc, #192]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004518:	6a1a      	ldr	r2, [r3, #32]
 800451a:	4b2f      	ldr	r3, [pc, #188]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800451c:	2180      	movs	r1, #128	; 0x80
 800451e:	0249      	lsls	r1, r1, #9
 8004520:	430a      	orrs	r2, r1
 8004522:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004524:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004526:	6a1a      	ldr	r2, [r3, #32]
 8004528:	4b2b      	ldr	r3, [pc, #172]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800452a:	492e      	ldr	r1, [pc, #184]	; (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 800452c:	400a      	ands	r2, r1
 800452e:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004530:	4b29      	ldr	r3, [pc, #164]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004532:	68fa      	ldr	r2, [r7, #12]
 8004534:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	2201      	movs	r2, #1
 800453a:	4013      	ands	r3, r2
 800453c:	d013      	beq.n	8004566 <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800453e:	f7fd fe6d 	bl	800221c <HAL_GetTick>
 8004542:	0003      	movs	r3, r0
 8004544:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004546:	e009      	b.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004548:	f7fd fe68 	bl	800221c <HAL_GetTick>
 800454c:	0002      	movs	r2, r0
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	4a25      	ldr	r2, [pc, #148]	; (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x194>)
 8004554:	4293      	cmp	r3, r2
 8004556:	d901      	bls.n	800455c <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 8004558:	2303      	movs	r3, #3
 800455a:	e038      	b.n	80045ce <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800455c:	4b1e      	ldr	r3, [pc, #120]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800455e:	6a1b      	ldr	r3, [r3, #32]
 8004560:	2202      	movs	r2, #2
 8004562:	4013      	ands	r3, r2
 8004564:	d0f0      	beq.n	8004548 <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004566:	4b1c      	ldr	r3, [pc, #112]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004568:	6a1b      	ldr	r3, [r3, #32]
 800456a:	4a1d      	ldr	r2, [pc, #116]	; (80045e0 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 800456c:	4013      	ands	r3, r2
 800456e:	0019      	movs	r1, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685a      	ldr	r2, [r3, #4]
 8004574:	4b18      	ldr	r3, [pc, #96]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004576:	430a      	orrs	r2, r1
 8004578:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800457a:	2317      	movs	r3, #23
 800457c:	18fb      	adds	r3, r7, r3
 800457e:	781b      	ldrb	r3, [r3, #0]
 8004580:	2b01      	cmp	r3, #1
 8004582:	d105      	bne.n	8004590 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004584:	4b14      	ldr	r3, [pc, #80]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8004586:	69da      	ldr	r2, [r3, #28]
 8004588:	4b13      	ldr	r3, [pc, #76]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800458a:	4918      	ldr	r1, [pc, #96]	; (80045ec <HAL_RCCEx_PeriphCLKConfig+0x198>)
 800458c:	400a      	ands	r2, r1
 800458e:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	2201      	movs	r2, #1
 8004596:	4013      	ands	r3, r2
 8004598:	d009      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800459a:	4b0f      	ldr	r3, [pc, #60]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800459c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800459e:	2203      	movs	r2, #3
 80045a0:	4393      	bics	r3, r2
 80045a2:	0019      	movs	r1, r3
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	689a      	ldr	r2, [r3, #8]
 80045a8:	4b0b      	ldr	r3, [pc, #44]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045aa:	430a      	orrs	r2, r1
 80045ac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	2220      	movs	r2, #32
 80045b4:	4013      	ands	r3, r2
 80045b6:	d009      	beq.n	80045cc <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80045b8:	4b07      	ldr	r3, [pc, #28]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045bc:	2210      	movs	r2, #16
 80045be:	4393      	bics	r3, r2
 80045c0:	0019      	movs	r1, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68da      	ldr	r2, [r3, #12]
 80045c6:	4b04      	ldr	r3, [pc, #16]	; (80045d8 <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80045c8:	430a      	orrs	r2, r1
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 80045cc:	2300      	movs	r3, #0
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b006      	add	sp, #24
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	40021000 	.word	0x40021000
 80045dc:	40007000 	.word	0x40007000
 80045e0:	fffffcff 	.word	0xfffffcff
 80045e4:	fffeffff 	.word	0xfffeffff
 80045e8:	00001388 	.word	0x00001388
 80045ec:	efffffff 	.word	0xefffffff

080045f0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b082      	sub	sp, #8
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d101      	bne.n	8004602 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e042      	b.n	8004688 <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	223d      	movs	r2, #61	; 0x3d
 8004606:	5c9b      	ldrb	r3, [r3, r2]
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d107      	bne.n	800461e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	223c      	movs	r2, #60	; 0x3c
 8004612:	2100      	movs	r1, #0
 8004614:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	0018      	movs	r0, r3
 800461a:	f7fd fbe3 	bl	8001de4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	223d      	movs	r2, #61	; 0x3d
 8004622:	2102      	movs	r1, #2
 8004624:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681a      	ldr	r2, [r3, #0]
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	3304      	adds	r3, #4
 800462e:	0019      	movs	r1, r3
 8004630:	0010      	movs	r0, r2
 8004632:	f000 fc69 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2246      	movs	r2, #70	; 0x46
 800463a:	2101      	movs	r1, #1
 800463c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	223e      	movs	r2, #62	; 0x3e
 8004642:	2101      	movs	r1, #1
 8004644:	5499      	strb	r1, [r3, r2]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	223f      	movs	r2, #63	; 0x3f
 800464a:	2101      	movs	r1, #1
 800464c:	5499      	strb	r1, [r3, r2]
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2240      	movs	r2, #64	; 0x40
 8004652:	2101      	movs	r1, #1
 8004654:	5499      	strb	r1, [r3, r2]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2241      	movs	r2, #65	; 0x41
 800465a:	2101      	movs	r1, #1
 800465c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2242      	movs	r2, #66	; 0x42
 8004662:	2101      	movs	r1, #1
 8004664:	5499      	strb	r1, [r3, r2]
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2243      	movs	r2, #67	; 0x43
 800466a:	2101      	movs	r1, #1
 800466c:	5499      	strb	r1, [r3, r2]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2244      	movs	r2, #68	; 0x44
 8004672:	2101      	movs	r1, #1
 8004674:	5499      	strb	r1, [r3, r2]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2245      	movs	r2, #69	; 0x45
 800467a:	2101      	movs	r1, #1
 800467c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	223d      	movs	r2, #61	; 0x3d
 8004682:	2101      	movs	r1, #1
 8004684:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004686:	2300      	movs	r3, #0
}
 8004688:	0018      	movs	r0, r3
 800468a:	46bd      	mov	sp, r7
 800468c:	b002      	add	sp, #8
 800468e:	bd80      	pop	{r7, pc}

08004690 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b082      	sub	sp, #8
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	d101      	bne.n	80046a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e042      	b.n	8004728 <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	223d      	movs	r2, #61	; 0x3d
 80046a6:	5c9b      	ldrb	r3, [r3, r2]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d107      	bne.n	80046be <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	223c      	movs	r2, #60	; 0x3c
 80046b2:	2100      	movs	r1, #0
 80046b4:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	0018      	movs	r0, r3
 80046ba:	f000 f839 	bl	8004730 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	223d      	movs	r2, #61	; 0x3d
 80046c2:	2102      	movs	r1, #2
 80046c4:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	3304      	adds	r3, #4
 80046ce:	0019      	movs	r1, r3
 80046d0:	0010      	movs	r0, r2
 80046d2:	f000 fc19 	bl	8004f08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2246      	movs	r2, #70	; 0x46
 80046da:	2101      	movs	r1, #1
 80046dc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	223e      	movs	r2, #62	; 0x3e
 80046e2:	2101      	movs	r1, #1
 80046e4:	5499      	strb	r1, [r3, r2]
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	223f      	movs	r2, #63	; 0x3f
 80046ea:	2101      	movs	r1, #1
 80046ec:	5499      	strb	r1, [r3, r2]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	2240      	movs	r2, #64	; 0x40
 80046f2:	2101      	movs	r1, #1
 80046f4:	5499      	strb	r1, [r3, r2]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2241      	movs	r2, #65	; 0x41
 80046fa:	2101      	movs	r1, #1
 80046fc:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2242      	movs	r2, #66	; 0x42
 8004702:	2101      	movs	r1, #1
 8004704:	5499      	strb	r1, [r3, r2]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	2243      	movs	r2, #67	; 0x43
 800470a:	2101      	movs	r1, #1
 800470c:	5499      	strb	r1, [r3, r2]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	2244      	movs	r2, #68	; 0x44
 8004712:	2101      	movs	r1, #1
 8004714:	5499      	strb	r1, [r3, r2]
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2245      	movs	r2, #69	; 0x45
 800471a:	2101      	movs	r1, #1
 800471c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	223d      	movs	r2, #61	; 0x3d
 8004722:	2101      	movs	r1, #1
 8004724:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004726:	2300      	movs	r3, #0
}
 8004728:	0018      	movs	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	b002      	add	sp, #8
 800472e:	bd80      	pop	{r7, pc}

08004730 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004730:	b580      	push	{r7, lr}
 8004732:	b082      	sub	sp, #8
 8004734:	af00      	add	r7, sp, #0
 8004736:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004738:	46c0      	nop			; (mov r8, r8)
 800473a:	46bd      	mov	sp, r7
 800473c:	b002      	add	sp, #8
 800473e:	bd80      	pop	{r7, pc}

08004740 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004740:	b580      	push	{r7, lr}
 8004742:	b084      	sub	sp, #16
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
 8004748:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800474a:	230f      	movs	r3, #15
 800474c:	18fb      	adds	r3, r7, r3
 800474e:	2200      	movs	r2, #0
 8004750:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004752:	683b      	ldr	r3, [r7, #0]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d104      	bne.n	8004762 <HAL_TIM_IC_Start_IT+0x22>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	223e      	movs	r2, #62	; 0x3e
 800475c:	5c9b      	ldrb	r3, [r3, r2]
 800475e:	b2db      	uxtb	r3, r3
 8004760:	e013      	b.n	800478a <HAL_TIM_IC_Start_IT+0x4a>
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	2b04      	cmp	r3, #4
 8004766:	d104      	bne.n	8004772 <HAL_TIM_IC_Start_IT+0x32>
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	223f      	movs	r2, #63	; 0x3f
 800476c:	5c9b      	ldrb	r3, [r3, r2]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	e00b      	b.n	800478a <HAL_TIM_IC_Start_IT+0x4a>
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	2b08      	cmp	r3, #8
 8004776:	d104      	bne.n	8004782 <HAL_TIM_IC_Start_IT+0x42>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2240      	movs	r2, #64	; 0x40
 800477c:	5c9b      	ldrb	r3, [r3, r2]
 800477e:	b2db      	uxtb	r3, r3
 8004780:	e003      	b.n	800478a <HAL_TIM_IC_Start_IT+0x4a>
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2241      	movs	r2, #65	; 0x41
 8004786:	5c9b      	ldrb	r3, [r3, r2]
 8004788:	b2db      	uxtb	r3, r3
 800478a:	220e      	movs	r2, #14
 800478c:	18ba      	adds	r2, r7, r2
 800478e:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004790:	683b      	ldr	r3, [r7, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d104      	bne.n	80047a0 <HAL_TIM_IC_Start_IT+0x60>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	2242      	movs	r2, #66	; 0x42
 800479a:	5c9b      	ldrb	r3, [r3, r2]
 800479c:	b2db      	uxtb	r3, r3
 800479e:	e013      	b.n	80047c8 <HAL_TIM_IC_Start_IT+0x88>
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	2b04      	cmp	r3, #4
 80047a4:	d104      	bne.n	80047b0 <HAL_TIM_IC_Start_IT+0x70>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2243      	movs	r2, #67	; 0x43
 80047aa:	5c9b      	ldrb	r3, [r3, r2]
 80047ac:	b2db      	uxtb	r3, r3
 80047ae:	e00b      	b.n	80047c8 <HAL_TIM_IC_Start_IT+0x88>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	2b08      	cmp	r3, #8
 80047b4:	d104      	bne.n	80047c0 <HAL_TIM_IC_Start_IT+0x80>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2244      	movs	r2, #68	; 0x44
 80047ba:	5c9b      	ldrb	r3, [r3, r2]
 80047bc:	b2db      	uxtb	r3, r3
 80047be:	e003      	b.n	80047c8 <HAL_TIM_IC_Start_IT+0x88>
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2245      	movs	r2, #69	; 0x45
 80047c4:	5c9b      	ldrb	r3, [r3, r2]
 80047c6:	b2db      	uxtb	r3, r3
 80047c8:	210d      	movs	r1, #13
 80047ca:	187a      	adds	r2, r7, r1
 80047cc:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80047ce:	230e      	movs	r3, #14
 80047d0:	18fb      	adds	r3, r7, r3
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	d103      	bne.n	80047e0 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80047d8:	187b      	adds	r3, r7, r1
 80047da:	781b      	ldrb	r3, [r3, #0]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d001      	beq.n	80047e4 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 80047e0:	2301      	movs	r3, #1
 80047e2:	e0a6      	b.n	8004932 <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80047e4:	683b      	ldr	r3, [r7, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d104      	bne.n	80047f4 <HAL_TIM_IC_Start_IT+0xb4>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	223e      	movs	r2, #62	; 0x3e
 80047ee:	2102      	movs	r1, #2
 80047f0:	5499      	strb	r1, [r3, r2]
 80047f2:	e013      	b.n	800481c <HAL_TIM_IC_Start_IT+0xdc>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b04      	cmp	r3, #4
 80047f8:	d104      	bne.n	8004804 <HAL_TIM_IC_Start_IT+0xc4>
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	223f      	movs	r2, #63	; 0x3f
 80047fe:	2102      	movs	r1, #2
 8004800:	5499      	strb	r1, [r3, r2]
 8004802:	e00b      	b.n	800481c <HAL_TIM_IC_Start_IT+0xdc>
 8004804:	683b      	ldr	r3, [r7, #0]
 8004806:	2b08      	cmp	r3, #8
 8004808:	d104      	bne.n	8004814 <HAL_TIM_IC_Start_IT+0xd4>
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2240      	movs	r2, #64	; 0x40
 800480e:	2102      	movs	r1, #2
 8004810:	5499      	strb	r1, [r3, r2]
 8004812:	e003      	b.n	800481c <HAL_TIM_IC_Start_IT+0xdc>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2241      	movs	r2, #65	; 0x41
 8004818:	2102      	movs	r1, #2
 800481a:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	2b00      	cmp	r3, #0
 8004820:	d104      	bne.n	800482c <HAL_TIM_IC_Start_IT+0xec>
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	2242      	movs	r2, #66	; 0x42
 8004826:	2102      	movs	r1, #2
 8004828:	5499      	strb	r1, [r3, r2]
 800482a:	e013      	b.n	8004854 <HAL_TIM_IC_Start_IT+0x114>
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	2b04      	cmp	r3, #4
 8004830:	d104      	bne.n	800483c <HAL_TIM_IC_Start_IT+0xfc>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2243      	movs	r2, #67	; 0x43
 8004836:	2102      	movs	r1, #2
 8004838:	5499      	strb	r1, [r3, r2]
 800483a:	e00b      	b.n	8004854 <HAL_TIM_IC_Start_IT+0x114>
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	2b08      	cmp	r3, #8
 8004840:	d104      	bne.n	800484c <HAL_TIM_IC_Start_IT+0x10c>
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2244      	movs	r2, #68	; 0x44
 8004846:	2102      	movs	r1, #2
 8004848:	5499      	strb	r1, [r3, r2]
 800484a:	e003      	b.n	8004854 <HAL_TIM_IC_Start_IT+0x114>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2245      	movs	r2, #69	; 0x45
 8004850:	2102      	movs	r1, #2
 8004852:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	2b0c      	cmp	r3, #12
 8004858:	d02a      	beq.n	80048b0 <HAL_TIM_IC_Start_IT+0x170>
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	2b0c      	cmp	r3, #12
 800485e:	d830      	bhi.n	80048c2 <HAL_TIM_IC_Start_IT+0x182>
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	2b08      	cmp	r3, #8
 8004864:	d01b      	beq.n	800489e <HAL_TIM_IC_Start_IT+0x15e>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b08      	cmp	r3, #8
 800486a:	d82a      	bhi.n	80048c2 <HAL_TIM_IC_Start_IT+0x182>
 800486c:	683b      	ldr	r3, [r7, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d003      	beq.n	800487a <HAL_TIM_IC_Start_IT+0x13a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	2b04      	cmp	r3, #4
 8004876:	d009      	beq.n	800488c <HAL_TIM_IC_Start_IT+0x14c>
 8004878:	e023      	b.n	80048c2 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	68da      	ldr	r2, [r3, #12]
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	2102      	movs	r1, #2
 8004886:	430a      	orrs	r2, r1
 8004888:	60da      	str	r2, [r3, #12]
      break;
 800488a:	e01f      	b.n	80048cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	68da      	ldr	r2, [r3, #12]
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2104      	movs	r1, #4
 8004898:	430a      	orrs	r2, r1
 800489a:	60da      	str	r2, [r3, #12]
      break;
 800489c:	e016      	b.n	80048cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68da      	ldr	r2, [r3, #12]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	2108      	movs	r1, #8
 80048aa:	430a      	orrs	r2, r1
 80048ac:	60da      	str	r2, [r3, #12]
      break;
 80048ae:	e00d      	b.n	80048cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	68da      	ldr	r2, [r3, #12]
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	2110      	movs	r1, #16
 80048bc:	430a      	orrs	r2, r1
 80048be:	60da      	str	r2, [r3, #12]
      break;
 80048c0:	e004      	b.n	80048cc <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 80048c2:	230f      	movs	r3, #15
 80048c4:	18fb      	adds	r3, r7, r3
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
      break;
 80048ca:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 80048cc:	230f      	movs	r3, #15
 80048ce:	18fb      	adds	r3, r7, r3
 80048d0:	781b      	ldrb	r3, [r3, #0]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d12a      	bne.n	800492c <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6839      	ldr	r1, [r7, #0]
 80048dc:	2201      	movs	r2, #1
 80048de:	0018      	movs	r0, r3
 80048e0:	f000 fd32 	bl	8005348 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4a14      	ldr	r2, [pc, #80]	; (800493c <HAL_TIM_IC_Start_IT+0x1fc>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d004      	beq.n	80048f8 <HAL_TIM_IC_Start_IT+0x1b8>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	4a13      	ldr	r2, [pc, #76]	; (8004940 <HAL_TIM_IC_Start_IT+0x200>)
 80048f4:	4293      	cmp	r3, r2
 80048f6:	d111      	bne.n	800491c <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	2207      	movs	r2, #7
 8004900:	4013      	ands	r3, r2
 8004902:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	2b06      	cmp	r3, #6
 8004908:	d010      	beq.n	800492c <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	681a      	ldr	r2, [r3, #0]
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	2101      	movs	r1, #1
 8004916:	430a      	orrs	r2, r1
 8004918:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800491a:	e007      	b.n	800492c <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2101      	movs	r1, #1
 8004928:	430a      	orrs	r2, r1
 800492a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800492c:	230f      	movs	r3, #15
 800492e:	18fb      	adds	r3, r7, r3
 8004930:	781b      	ldrb	r3, [r3, #0]
}
 8004932:	0018      	movs	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	b004      	add	sp, #16
 8004938:	bd80      	pop	{r7, pc}
 800493a:	46c0      	nop			; (mov r8, r8)
 800493c:	40012c00 	.word	0x40012c00
 8004940:	40000400 	.word	0x40000400

08004944 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2202      	movs	r2, #2
 8004954:	4013      	ands	r3, r2
 8004956:	2b02      	cmp	r3, #2
 8004958:	d124      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	2202      	movs	r2, #2
 8004962:	4013      	ands	r3, r2
 8004964:	2b02      	cmp	r3, #2
 8004966:	d11d      	bne.n	80049a4 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2203      	movs	r2, #3
 800496e:	4252      	negs	r2, r2
 8004970:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2201      	movs	r2, #1
 8004976:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	699b      	ldr	r3, [r3, #24]
 800497e:	2203      	movs	r2, #3
 8004980:	4013      	ands	r3, r2
 8004982:	d004      	beq.n	800498e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	0018      	movs	r0, r3
 8004988:	f7fc ff1a 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 800498c:	e007      	b.n	800499e <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	0018      	movs	r0, r3
 8004992:	f000 faa1 	bl	8004ed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	0018      	movs	r0, r3
 800499a:	f000 faa5 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2200      	movs	r2, #0
 80049a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	2204      	movs	r2, #4
 80049ac:	4013      	ands	r3, r2
 80049ae:	2b04      	cmp	r3, #4
 80049b0:	d125      	bne.n	80049fe <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	68db      	ldr	r3, [r3, #12]
 80049b8:	2204      	movs	r2, #4
 80049ba:	4013      	ands	r3, r2
 80049bc:	2b04      	cmp	r3, #4
 80049be:	d11e      	bne.n	80049fe <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2205      	movs	r2, #5
 80049c6:	4252      	negs	r2, r2
 80049c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	699a      	ldr	r2, [r3, #24]
 80049d6:	23c0      	movs	r3, #192	; 0xc0
 80049d8:	009b      	lsls	r3, r3, #2
 80049da:	4013      	ands	r3, r2
 80049dc:	d004      	beq.n	80049e8 <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	0018      	movs	r0, r3
 80049e2:	f7fc feed 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 80049e6:	e007      	b.n	80049f8 <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 fa74 	bl	8004ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	0018      	movs	r0, r3
 80049f4:	f000 fa78 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2200      	movs	r2, #0
 80049fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	691b      	ldr	r3, [r3, #16]
 8004a04:	2208      	movs	r2, #8
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b08      	cmp	r3, #8
 8004a0a:	d124      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	68db      	ldr	r3, [r3, #12]
 8004a12:	2208      	movs	r2, #8
 8004a14:	4013      	ands	r3, r2
 8004a16:	2b08      	cmp	r3, #8
 8004a18:	d11d      	bne.n	8004a56 <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	2209      	movs	r2, #9
 8004a20:	4252      	negs	r2, r2
 8004a22:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2204      	movs	r2, #4
 8004a28:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	69db      	ldr	r3, [r3, #28]
 8004a30:	2203      	movs	r2, #3
 8004a32:	4013      	ands	r3, r2
 8004a34:	d004      	beq.n	8004a40 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	0018      	movs	r0, r3
 8004a3a:	f7fc fec1 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8004a3e:	e007      	b.n	8004a50 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	0018      	movs	r0, r3
 8004a44:	f000 fa48 	bl	8004ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	0018      	movs	r0, r3
 8004a4c:	f000 fa4c 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2200      	movs	r2, #0
 8004a54:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	2210      	movs	r2, #16
 8004a5e:	4013      	ands	r3, r2
 8004a60:	2b10      	cmp	r3, #16
 8004a62:	d125      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	2210      	movs	r2, #16
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	2b10      	cmp	r3, #16
 8004a70:	d11e      	bne.n	8004ab0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2211      	movs	r2, #17
 8004a78:	4252      	negs	r2, r2
 8004a7a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2208      	movs	r2, #8
 8004a80:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	69da      	ldr	r2, [r3, #28]
 8004a88:	23c0      	movs	r3, #192	; 0xc0
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4013      	ands	r3, r2
 8004a8e:	d004      	beq.n	8004a9a <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	0018      	movs	r0, r3
 8004a94:	f7fc fe94 	bl	80017c0 <HAL_TIM_IC_CaptureCallback>
 8004a98:	e007      	b.n	8004aaa <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	0018      	movs	r0, r3
 8004a9e:	f000 fa1b 	bl	8004ed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	0018      	movs	r0, r3
 8004aa6:	f000 fa1f 	bl	8004ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	691b      	ldr	r3, [r3, #16]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	4013      	ands	r3, r2
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d10f      	bne.n	8004ade <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	68db      	ldr	r3, [r3, #12]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d108      	bne.n	8004ade <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	2202      	movs	r2, #2
 8004ad2:	4252      	negs	r2, r2
 8004ad4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	0018      	movs	r0, r3
 8004ada:	f000 f9f5 	bl	8004ec8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	691b      	ldr	r3, [r3, #16]
 8004ae4:	2280      	movs	r2, #128	; 0x80
 8004ae6:	4013      	ands	r3, r2
 8004ae8:	2b80      	cmp	r3, #128	; 0x80
 8004aea:	d10f      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	68db      	ldr	r3, [r3, #12]
 8004af2:	2280      	movs	r2, #128	; 0x80
 8004af4:	4013      	ands	r3, r2
 8004af6:	2b80      	cmp	r3, #128	; 0x80
 8004af8:	d108      	bne.n	8004b0c <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	2281      	movs	r2, #129	; 0x81
 8004b00:	4252      	negs	r2, r2
 8004b02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	0018      	movs	r0, r3
 8004b08:	f000 fc9c 	bl	8005444 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	2240      	movs	r2, #64	; 0x40
 8004b14:	4013      	ands	r3, r2
 8004b16:	2b40      	cmp	r3, #64	; 0x40
 8004b18:	d10f      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68db      	ldr	r3, [r3, #12]
 8004b20:	2240      	movs	r2, #64	; 0x40
 8004b22:	4013      	ands	r3, r2
 8004b24:	2b40      	cmp	r3, #64	; 0x40
 8004b26:	d108      	bne.n	8004b3a <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	2241      	movs	r2, #65	; 0x41
 8004b2e:	4252      	negs	r2, r2
 8004b30:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	0018      	movs	r0, r3
 8004b36:	f000 f9df 	bl	8004ef8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691b      	ldr	r3, [r3, #16]
 8004b40:	2220      	movs	r2, #32
 8004b42:	4013      	ands	r3, r2
 8004b44:	2b20      	cmp	r3, #32
 8004b46:	d10f      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	68db      	ldr	r3, [r3, #12]
 8004b4e:	2220      	movs	r2, #32
 8004b50:	4013      	ands	r3, r2
 8004b52:	2b20      	cmp	r3, #32
 8004b54:	d108      	bne.n	8004b68 <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2221      	movs	r2, #33	; 0x21
 8004b5c:	4252      	negs	r2, r2
 8004b5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	0018      	movs	r0, r3
 8004b64:	f000 fc66 	bl	8005434 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b68:	46c0      	nop			; (mov r8, r8)
 8004b6a:	46bd      	mov	sp, r7
 8004b6c:	b002      	add	sp, #8
 8004b6e:	bd80      	pop	{r7, pc}

08004b70 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	b086      	sub	sp, #24
 8004b74:	af00      	add	r7, sp, #0
 8004b76:	60f8      	str	r0, [r7, #12]
 8004b78:	60b9      	str	r1, [r7, #8]
 8004b7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b7c:	2317      	movs	r3, #23
 8004b7e:	18fb      	adds	r3, r7, r3
 8004b80:	2200      	movs	r2, #0
 8004b82:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	223c      	movs	r2, #60	; 0x3c
 8004b88:	5c9b      	ldrb	r3, [r3, r2]
 8004b8a:	2b01      	cmp	r3, #1
 8004b8c:	d101      	bne.n	8004b92 <HAL_TIM_IC_ConfigChannel+0x22>
 8004b8e:	2302      	movs	r3, #2
 8004b90:	e08c      	b.n	8004cac <HAL_TIM_IC_ConfigChannel+0x13c>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	223c      	movs	r2, #60	; 0x3c
 8004b96:	2101      	movs	r1, #1
 8004b98:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d11b      	bne.n	8004bd8 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004ba4:	68bb      	ldr	r3, [r7, #8]
 8004ba6:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8004bb0:	f000 fa16 	bl	8004fe0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	699a      	ldr	r2, [r3, #24]
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	210c      	movs	r1, #12
 8004bc0:	438a      	bics	r2, r1
 8004bc2:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	6999      	ldr	r1, [r3, #24]
 8004bca:	68bb      	ldr	r3, [r7, #8]
 8004bcc:	689a      	ldr	r2, [r3, #8]
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	430a      	orrs	r2, r1
 8004bd4:	619a      	str	r2, [r3, #24]
 8004bd6:	e062      	b.n	8004c9e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d11c      	bne.n	8004c18 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004be2:	68bb      	ldr	r3, [r7, #8]
 8004be4:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004be6:	68bb      	ldr	r3, [r7, #8]
 8004be8:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004bea:	68bb      	ldr	r3, [r7, #8]
 8004bec:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8004bee:	f000 fa77 	bl	80050e0 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699a      	ldr	r2, [r3, #24]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	492d      	ldr	r1, [pc, #180]	; (8004cb4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004bfe:	400a      	ands	r2, r1
 8004c00:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	6999      	ldr	r1, [r3, #24]
 8004c08:	68bb      	ldr	r3, [r7, #8]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	021a      	lsls	r2, r3, #8
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	430a      	orrs	r2, r1
 8004c14:	619a      	str	r2, [r3, #24]
 8004c16:	e042      	b.n	8004c9e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2b08      	cmp	r3, #8
 8004c1c:	d11b      	bne.n	8004c56 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c22:	68bb      	ldr	r3, [r7, #8]
 8004c24:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c26:	68bb      	ldr	r3, [r7, #8]
 8004c28:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8004c2e:	f000 facb 	bl	80051c8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	210c      	movs	r1, #12
 8004c3e:	438a      	bics	r2, r1
 8004c40:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	69d9      	ldr	r1, [r3, #28]
 8004c48:	68bb      	ldr	r3, [r7, #8]
 8004c4a:	689a      	ldr	r2, [r3, #8]
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	61da      	str	r2, [r3, #28]
 8004c54:	e023      	b.n	8004c9e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	2b0c      	cmp	r3, #12
 8004c5a:	d11c      	bne.n	8004c96 <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8004c6c:	f000 faec 	bl	8005248 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69da      	ldr	r2, [r3, #28]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	490e      	ldr	r1, [pc, #56]	; (8004cb4 <HAL_TIM_IC_ConfigChannel+0x144>)
 8004c7c:	400a      	ands	r2, r1
 8004c7e:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	69d9      	ldr	r1, [r3, #28]
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	021a      	lsls	r2, r3, #8
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	430a      	orrs	r2, r1
 8004c92:	61da      	str	r2, [r3, #28]
 8004c94:	e003      	b.n	8004c9e <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 8004c96:	2317      	movs	r3, #23
 8004c98:	18fb      	adds	r3, r7, r3
 8004c9a:	2201      	movs	r2, #1
 8004c9c:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	223c      	movs	r2, #60	; 0x3c
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	5499      	strb	r1, [r3, r2]

  return status;
 8004ca6:	2317      	movs	r3, #23
 8004ca8:	18fb      	adds	r3, r7, r3
 8004caa:	781b      	ldrb	r3, [r3, #0]
}
 8004cac:	0018      	movs	r0, r3
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	b006      	add	sp, #24
 8004cb2:	bd80      	pop	{r7, pc}
 8004cb4:	fffff3ff 	.word	0xfffff3ff

08004cb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004cb8:	b580      	push	{r7, lr}
 8004cba:	b084      	sub	sp, #16
 8004cbc:	af00      	add	r7, sp, #0
 8004cbe:	6078      	str	r0, [r7, #4]
 8004cc0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004cc2:	230f      	movs	r3, #15
 8004cc4:	18fb      	adds	r3, r7, r3
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	223c      	movs	r2, #60	; 0x3c
 8004cce:	5c9b      	ldrb	r3, [r3, r2]
 8004cd0:	2b01      	cmp	r3, #1
 8004cd2:	d101      	bne.n	8004cd8 <HAL_TIM_ConfigClockSource+0x20>
 8004cd4:	2302      	movs	r3, #2
 8004cd6:	e0bc      	b.n	8004e52 <HAL_TIM_ConfigClockSource+0x19a>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	223c      	movs	r2, #60	; 0x3c
 8004cdc:	2101      	movs	r1, #1
 8004cde:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	223d      	movs	r2, #61	; 0x3d
 8004ce4:	2102      	movs	r1, #2
 8004ce6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	689b      	ldr	r3, [r3, #8]
 8004cee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	2277      	movs	r2, #119	; 0x77
 8004cf4:	4393      	bics	r3, r2
 8004cf6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004cf8:	68bb      	ldr	r3, [r7, #8]
 8004cfa:	4a58      	ldr	r2, [pc, #352]	; (8004e5c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004cfc:	4013      	ands	r3, r2
 8004cfe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	68ba      	ldr	r2, [r7, #8]
 8004d06:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2280      	movs	r2, #128	; 0x80
 8004d0e:	0192      	lsls	r2, r2, #6
 8004d10:	4293      	cmp	r3, r2
 8004d12:	d040      	beq.n	8004d96 <HAL_TIM_ConfigClockSource+0xde>
 8004d14:	2280      	movs	r2, #128	; 0x80
 8004d16:	0192      	lsls	r2, r2, #6
 8004d18:	4293      	cmp	r3, r2
 8004d1a:	d900      	bls.n	8004d1e <HAL_TIM_ConfigClockSource+0x66>
 8004d1c:	e088      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d1e:	2280      	movs	r2, #128	; 0x80
 8004d20:	0152      	lsls	r2, r2, #5
 8004d22:	4293      	cmp	r3, r2
 8004d24:	d100      	bne.n	8004d28 <HAL_TIM_ConfigClockSource+0x70>
 8004d26:	e088      	b.n	8004e3a <HAL_TIM_ConfigClockSource+0x182>
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	0152      	lsls	r2, r2, #5
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d900      	bls.n	8004d32 <HAL_TIM_ConfigClockSource+0x7a>
 8004d30:	e07e      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d32:	2b70      	cmp	r3, #112	; 0x70
 8004d34:	d018      	beq.n	8004d68 <HAL_TIM_ConfigClockSource+0xb0>
 8004d36:	d900      	bls.n	8004d3a <HAL_TIM_ConfigClockSource+0x82>
 8004d38:	e07a      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d3a:	2b60      	cmp	r3, #96	; 0x60
 8004d3c:	d04f      	beq.n	8004dde <HAL_TIM_ConfigClockSource+0x126>
 8004d3e:	d900      	bls.n	8004d42 <HAL_TIM_ConfigClockSource+0x8a>
 8004d40:	e076      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d42:	2b50      	cmp	r3, #80	; 0x50
 8004d44:	d03b      	beq.n	8004dbe <HAL_TIM_ConfigClockSource+0x106>
 8004d46:	d900      	bls.n	8004d4a <HAL_TIM_ConfigClockSource+0x92>
 8004d48:	e072      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d4a:	2b40      	cmp	r3, #64	; 0x40
 8004d4c:	d057      	beq.n	8004dfe <HAL_TIM_ConfigClockSource+0x146>
 8004d4e:	d900      	bls.n	8004d52 <HAL_TIM_ConfigClockSource+0x9a>
 8004d50:	e06e      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d52:	2b30      	cmp	r3, #48	; 0x30
 8004d54:	d063      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x166>
 8004d56:	d86b      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d58:	2b20      	cmp	r3, #32
 8004d5a:	d060      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x166>
 8004d5c:	d868      	bhi.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d05d      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x166>
 8004d62:	2b10      	cmp	r3, #16
 8004d64:	d05b      	beq.n	8004e1e <HAL_TIM_ConfigClockSource+0x166>
 8004d66:	e063      	b.n	8004e30 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d70:	683b      	ldr	r3, [r7, #0]
 8004d72:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004d78:	f000 fac6 	bl	8005308 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	689b      	ldr	r3, [r3, #8]
 8004d82:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	2277      	movs	r2, #119	; 0x77
 8004d88:	4313      	orrs	r3, r2
 8004d8a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	68ba      	ldr	r2, [r7, #8]
 8004d92:	609a      	str	r2, [r3, #8]
      break;
 8004d94:	e052      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004da2:	683b      	ldr	r3, [r7, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004da6:	f000 faaf 	bl	8005308 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689a      	ldr	r2, [r3, #8]
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2180      	movs	r1, #128	; 0x80
 8004db6:	01c9      	lsls	r1, r1, #7
 8004db8:	430a      	orrs	r2, r1
 8004dba:	609a      	str	r2, [r3, #8]
      break;
 8004dbc:	e03e      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004dc2:	683b      	ldr	r3, [r7, #0]
 8004dc4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dca:	001a      	movs	r2, r3
 8004dcc:	f000 f95a 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	2150      	movs	r1, #80	; 0x50
 8004dd6:	0018      	movs	r0, r3
 8004dd8:	f000 fa7c 	bl	80052d4 <TIM_ITRx_SetConfig>
      break;
 8004ddc:	e02e      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004de2:	683b      	ldr	r3, [r7, #0]
 8004de4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004de6:	683b      	ldr	r3, [r7, #0]
 8004de8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004dea:	001a      	movs	r2, r3
 8004dec:	f000 f9ba 	bl	8005164 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	2160      	movs	r1, #96	; 0x60
 8004df6:	0018      	movs	r0, r3
 8004df8:	f000 fa6c 	bl	80052d4 <TIM_ITRx_SetConfig>
      break;
 8004dfc:	e01e      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004e0a:	001a      	movs	r2, r3
 8004e0c:	f000 f93a 	bl	8005084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	2140      	movs	r1, #64	; 0x40
 8004e16:	0018      	movs	r0, r3
 8004e18:	f000 fa5c 	bl	80052d4 <TIM_ITRx_SetConfig>
      break;
 8004e1c:	e00e      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	681a      	ldr	r2, [r3, #0]
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	0019      	movs	r1, r3
 8004e28:	0010      	movs	r0, r2
 8004e2a:	f000 fa53 	bl	80052d4 <TIM_ITRx_SetConfig>
      break;
 8004e2e:	e005      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004e30:	230f      	movs	r3, #15
 8004e32:	18fb      	adds	r3, r7, r3
 8004e34:	2201      	movs	r2, #1
 8004e36:	701a      	strb	r2, [r3, #0]
      break;
 8004e38:	e000      	b.n	8004e3c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8004e3a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	223d      	movs	r2, #61	; 0x3d
 8004e40:	2101      	movs	r1, #1
 8004e42:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	223c      	movs	r2, #60	; 0x3c
 8004e48:	2100      	movs	r1, #0
 8004e4a:	5499      	strb	r1, [r3, r2]

  return status;
 8004e4c:	230f      	movs	r3, #15
 8004e4e:	18fb      	adds	r3, r7, r3
 8004e50:	781b      	ldrb	r3, [r3, #0]
}
 8004e52:	0018      	movs	r0, r3
 8004e54:	46bd      	mov	sp, r7
 8004e56:	b004      	add	sp, #16
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	46c0      	nop			; (mov r8, r8)
 8004e5c:	ffff00ff 	.word	0xffff00ff

08004e60 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e60:	b580      	push	{r7, lr}
 8004e62:	b084      	sub	sp, #16
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b0c      	cmp	r3, #12
 8004e72:	d01e      	beq.n	8004eb2 <HAL_TIM_ReadCapturedValue+0x52>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b0c      	cmp	r3, #12
 8004e78:	d820      	bhi.n	8004ebc <HAL_TIM_ReadCapturedValue+0x5c>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b08      	cmp	r3, #8
 8004e7e:	d013      	beq.n	8004ea8 <HAL_TIM_ReadCapturedValue+0x48>
 8004e80:	683b      	ldr	r3, [r7, #0]
 8004e82:	2b08      	cmp	r3, #8
 8004e84:	d81a      	bhi.n	8004ebc <HAL_TIM_ReadCapturedValue+0x5c>
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d003      	beq.n	8004e94 <HAL_TIM_ReadCapturedValue+0x34>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d005      	beq.n	8004e9e <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8004e92:	e013      	b.n	8004ebc <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e9a:	60fb      	str	r3, [r7, #12]
      break;
 8004e9c:	e00f      	b.n	8004ebe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea4:	60fb      	str	r3, [r7, #12]
      break;
 8004ea6:	e00a      	b.n	8004ebe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eae:	60fb      	str	r3, [r7, #12]
      break;
 8004eb0:	e005      	b.n	8004ebe <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004eb8:	60fb      	str	r3, [r7, #12]
      break;
 8004eba:	e000      	b.n	8004ebe <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8004ebc:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	0018      	movs	r0, r3
 8004ec2:	46bd      	mov	sp, r7
 8004ec4:	b004      	add	sp, #16
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ec8:	b580      	push	{r7, lr}
 8004eca:	b082      	sub	sp, #8
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004ed0:	46c0      	nop			; (mov r8, r8)
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b002      	add	sp, #8
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ee0:	46c0      	nop			; (mov r8, r8)
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	b002      	add	sp, #8
 8004ee6:	bd80      	pop	{r7, pc}

08004ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b082      	sub	sp, #8
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004ef0:	46c0      	nop			; (mov r8, r8)
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	b002      	add	sp, #8
 8004ef6:	bd80      	pop	{r7, pc}

08004ef8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004ef8:	b580      	push	{r7, lr}
 8004efa:	b082      	sub	sp, #8
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004f00:	46c0      	nop			; (mov r8, r8)
 8004f02:	46bd      	mov	sp, r7
 8004f04:	b002      	add	sp, #8
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b084      	sub	sp, #16
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
 8004f10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	4a2b      	ldr	r2, [pc, #172]	; (8004fc8 <TIM_Base_SetConfig+0xc0>)
 8004f1c:	4293      	cmp	r3, r2
 8004f1e:	d003      	beq.n	8004f28 <TIM_Base_SetConfig+0x20>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	4a2a      	ldr	r2, [pc, #168]	; (8004fcc <TIM_Base_SetConfig+0xc4>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d108      	bne.n	8004f3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	2270      	movs	r2, #112	; 0x70
 8004f2c:	4393      	bics	r3, r2
 8004f2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004f30:	683b      	ldr	r3, [r7, #0]
 8004f32:	685b      	ldr	r3, [r3, #4]
 8004f34:	68fa      	ldr	r2, [r7, #12]
 8004f36:	4313      	orrs	r3, r2
 8004f38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	4a22      	ldr	r2, [pc, #136]	; (8004fc8 <TIM_Base_SetConfig+0xc0>)
 8004f3e:	4293      	cmp	r3, r2
 8004f40:	d00f      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a21      	ldr	r2, [pc, #132]	; (8004fcc <TIM_Base_SetConfig+0xc4>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d00b      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a20      	ldr	r2, [pc, #128]	; (8004fd0 <TIM_Base_SetConfig+0xc8>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d007      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a1f      	ldr	r2, [pc, #124]	; (8004fd4 <TIM_Base_SetConfig+0xcc>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d003      	beq.n	8004f62 <TIM_Base_SetConfig+0x5a>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a1e      	ldr	r2, [pc, #120]	; (8004fd8 <TIM_Base_SetConfig+0xd0>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d108      	bne.n	8004f74 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	4a1d      	ldr	r2, [pc, #116]	; (8004fdc <TIM_Base_SetConfig+0xd4>)
 8004f66:	4013      	ands	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f6a:	683b      	ldr	r3, [r7, #0]
 8004f6c:	68db      	ldr	r3, [r3, #12]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	4313      	orrs	r3, r2
 8004f72:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2280      	movs	r2, #128	; 0x80
 8004f78:	4393      	bics	r3, r2
 8004f7a:	001a      	movs	r2, r3
 8004f7c:	683b      	ldr	r3, [r7, #0]
 8004f7e:	695b      	ldr	r3, [r3, #20]
 8004f80:	4313      	orrs	r3, r2
 8004f82:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	68fa      	ldr	r2, [r7, #12]
 8004f88:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	689a      	ldr	r2, [r3, #8]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	681a      	ldr	r2, [r3, #0]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	4a0a      	ldr	r2, [pc, #40]	; (8004fc8 <TIM_Base_SetConfig+0xc0>)
 8004f9e:	4293      	cmp	r3, r2
 8004fa0:	d007      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	4a0b      	ldr	r2, [pc, #44]	; (8004fd4 <TIM_Base_SetConfig+0xcc>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d003      	beq.n	8004fb2 <TIM_Base_SetConfig+0xaa>
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	4a0a      	ldr	r2, [pc, #40]	; (8004fd8 <TIM_Base_SetConfig+0xd0>)
 8004fae:	4293      	cmp	r3, r2
 8004fb0:	d103      	bne.n	8004fba <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004fb2:	683b      	ldr	r3, [r7, #0]
 8004fb4:	691a      	ldr	r2, [r3, #16]
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	615a      	str	r2, [r3, #20]
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	46bd      	mov	sp, r7
 8004fc4:	b004      	add	sp, #16
 8004fc6:	bd80      	pop	{r7, pc}
 8004fc8:	40012c00 	.word	0x40012c00
 8004fcc:	40000400 	.word	0x40000400
 8004fd0:	40002000 	.word	0x40002000
 8004fd4:	40014400 	.word	0x40014400
 8004fd8:	40014800 	.word	0x40014800
 8004fdc:	fffffcff 	.word	0xfffffcff

08004fe0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b086      	sub	sp, #24
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	60f8      	str	r0, [r7, #12]
 8004fe8:	60b9      	str	r1, [r7, #8]
 8004fea:	607a      	str	r2, [r7, #4]
 8004fec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	4393      	bics	r3, r2
 8004ff6:	001a      	movs	r2, r3
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	699b      	ldr	r3, [r3, #24]
 8005000:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	6a1b      	ldr	r3, [r3, #32]
 8005006:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	4a1c      	ldr	r2, [pc, #112]	; (800507c <TIM_TI1_SetConfig+0x9c>)
 800500c:	4293      	cmp	r3, r2
 800500e:	d003      	beq.n	8005018 <TIM_TI1_SetConfig+0x38>
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	4a1b      	ldr	r2, [pc, #108]	; (8005080 <TIM_TI1_SetConfig+0xa0>)
 8005014:	4293      	cmp	r3, r2
 8005016:	d101      	bne.n	800501c <TIM_TI1_SetConfig+0x3c>
 8005018:	2301      	movs	r3, #1
 800501a:	e000      	b.n	800501e <TIM_TI1_SetConfig+0x3e>
 800501c:	2300      	movs	r3, #0
 800501e:	2b00      	cmp	r3, #0
 8005020:	d008      	beq.n	8005034 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005022:	697b      	ldr	r3, [r7, #20]
 8005024:	2203      	movs	r2, #3
 8005026:	4393      	bics	r3, r2
 8005028:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4313      	orrs	r3, r2
 8005030:	617b      	str	r3, [r7, #20]
 8005032:	e003      	b.n	800503c <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	2201      	movs	r2, #1
 8005038:	4313      	orrs	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800503c:	697b      	ldr	r3, [r7, #20]
 800503e:	22f0      	movs	r2, #240	; 0xf0
 8005040:	4393      	bics	r3, r2
 8005042:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005044:	683b      	ldr	r3, [r7, #0]
 8005046:	011b      	lsls	r3, r3, #4
 8005048:	22ff      	movs	r2, #255	; 0xff
 800504a:	4013      	ands	r3, r2
 800504c:	697a      	ldr	r2, [r7, #20]
 800504e:	4313      	orrs	r3, r2
 8005050:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	220a      	movs	r2, #10
 8005056:	4393      	bics	r3, r2
 8005058:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	220a      	movs	r2, #10
 800505e:	4013      	ands	r3, r2
 8005060:	693a      	ldr	r2, [r7, #16]
 8005062:	4313      	orrs	r3, r2
 8005064:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	697a      	ldr	r2, [r7, #20]
 800506a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	621a      	str	r2, [r3, #32]
}
 8005072:	46c0      	nop			; (mov r8, r8)
 8005074:	46bd      	mov	sp, r7
 8005076:	b006      	add	sp, #24
 8005078:	bd80      	pop	{r7, pc}
 800507a:	46c0      	nop			; (mov r8, r8)
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40000400 	.word	0x40000400

08005084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b086      	sub	sp, #24
 8005088:	af00      	add	r7, sp, #0
 800508a:	60f8      	str	r0, [r7, #12]
 800508c:	60b9      	str	r1, [r7, #8]
 800508e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a1b      	ldr	r3, [r3, #32]
 8005094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	6a1b      	ldr	r3, [r3, #32]
 800509a:	2201      	movs	r2, #1
 800509c:	4393      	bics	r3, r2
 800509e:	001a      	movs	r2, r3
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	699b      	ldr	r3, [r3, #24]
 80050a8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	22f0      	movs	r2, #240	; 0xf0
 80050ae:	4393      	bics	r3, r2
 80050b0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	011b      	lsls	r3, r3, #4
 80050b6:	693a      	ldr	r2, [r7, #16]
 80050b8:	4313      	orrs	r3, r2
 80050ba:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050bc:	697b      	ldr	r3, [r7, #20]
 80050be:	220a      	movs	r2, #10
 80050c0:	4393      	bics	r3, r2
 80050c2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	68bb      	ldr	r3, [r7, #8]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	697a      	ldr	r2, [r7, #20]
 80050d6:	621a      	str	r2, [r3, #32]
}
 80050d8:	46c0      	nop			; (mov r8, r8)
 80050da:	46bd      	mov	sp, r7
 80050dc:	b006      	add	sp, #24
 80050de:	bd80      	pop	{r7, pc}

080050e0 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80050e0:	b580      	push	{r7, lr}
 80050e2:	b086      	sub	sp, #24
 80050e4:	af00      	add	r7, sp, #0
 80050e6:	60f8      	str	r0, [r7, #12]
 80050e8:	60b9      	str	r1, [r7, #8]
 80050ea:	607a      	str	r2, [r7, #4]
 80050ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	6a1b      	ldr	r3, [r3, #32]
 80050f2:	2210      	movs	r2, #16
 80050f4:	4393      	bics	r3, r2
 80050f6:	001a      	movs	r2, r3
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	699b      	ldr	r3, [r3, #24]
 8005100:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	6a1b      	ldr	r3, [r3, #32]
 8005106:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	4a14      	ldr	r2, [pc, #80]	; (800515c <TIM_TI2_SetConfig+0x7c>)
 800510c:	4013      	ands	r3, r2
 800510e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	4a10      	ldr	r2, [pc, #64]	; (8005160 <TIM_TI2_SetConfig+0x80>)
 800511e:	4013      	ands	r3, r2
 8005120:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005122:	683b      	ldr	r3, [r7, #0]
 8005124:	031b      	lsls	r3, r3, #12
 8005126:	041b      	lsls	r3, r3, #16
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	4313      	orrs	r3, r2
 800512e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005130:	693b      	ldr	r3, [r7, #16]
 8005132:	22a0      	movs	r2, #160	; 0xa0
 8005134:	4393      	bics	r3, r2
 8005136:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	011b      	lsls	r3, r3, #4
 800513c:	22a0      	movs	r2, #160	; 0xa0
 800513e:	4013      	ands	r3, r2
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	4313      	orrs	r3, r2
 8005144:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005146:	68fb      	ldr	r3, [r7, #12]
 8005148:	697a      	ldr	r2, [r7, #20]
 800514a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	693a      	ldr	r2, [r7, #16]
 8005150:	621a      	str	r2, [r3, #32]
}
 8005152:	46c0      	nop			; (mov r8, r8)
 8005154:	46bd      	mov	sp, r7
 8005156:	b006      	add	sp, #24
 8005158:	bd80      	pop	{r7, pc}
 800515a:	46c0      	nop			; (mov r8, r8)
 800515c:	fffffcff 	.word	0xfffffcff
 8005160:	ffff0fff 	.word	0xffff0fff

08005164 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b086      	sub	sp, #24
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	6a1b      	ldr	r3, [r3, #32]
 8005174:	2210      	movs	r2, #16
 8005176:	4393      	bics	r3, r2
 8005178:	001a      	movs	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	699b      	ldr	r3, [r3, #24]
 8005182:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a1b      	ldr	r3, [r3, #32]
 8005188:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	4a0d      	ldr	r2, [pc, #52]	; (80051c4 <TIM_TI2_ConfigInputStage+0x60>)
 800518e:	4013      	ands	r3, r2
 8005190:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	031b      	lsls	r3, r3, #12
 8005196:	697a      	ldr	r2, [r7, #20]
 8005198:	4313      	orrs	r3, r2
 800519a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800519c:	693b      	ldr	r3, [r7, #16]
 800519e:	22a0      	movs	r2, #160	; 0xa0
 80051a0:	4393      	bics	r3, r2
 80051a2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80051a4:	68bb      	ldr	r3, [r7, #8]
 80051a6:	011b      	lsls	r3, r3, #4
 80051a8:	693a      	ldr	r2, [r7, #16]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	697a      	ldr	r2, [r7, #20]
 80051b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	693a      	ldr	r2, [r7, #16]
 80051b8:	621a      	str	r2, [r3, #32]
}
 80051ba:	46c0      	nop			; (mov r8, r8)
 80051bc:	46bd      	mov	sp, r7
 80051be:	b006      	add	sp, #24
 80051c0:	bd80      	pop	{r7, pc}
 80051c2:	46c0      	nop			; (mov r8, r8)
 80051c4:	ffff0fff 	.word	0xffff0fff

080051c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b086      	sub	sp, #24
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	60f8      	str	r0, [r7, #12]
 80051d0:	60b9      	str	r1, [r7, #8]
 80051d2:	607a      	str	r2, [r7, #4]
 80051d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a1b      	ldr	r3, [r3, #32]
 80051da:	4a19      	ldr	r2, [pc, #100]	; (8005240 <TIM_TI3_SetConfig+0x78>)
 80051dc:	401a      	ands	r2, r3
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	69db      	ldr	r3, [r3, #28]
 80051e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80051ee:	697b      	ldr	r3, [r7, #20]
 80051f0:	2203      	movs	r2, #3
 80051f2:	4393      	bics	r3, r2
 80051f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80051f6:	697a      	ldr	r2, [r7, #20]
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4313      	orrs	r3, r2
 80051fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	22f0      	movs	r2, #240	; 0xf0
 8005202:	4393      	bics	r3, r2
 8005204:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005206:	683b      	ldr	r3, [r7, #0]
 8005208:	011b      	lsls	r3, r3, #4
 800520a:	22ff      	movs	r2, #255	; 0xff
 800520c:	4013      	ands	r3, r2
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	4a0b      	ldr	r2, [pc, #44]	; (8005244 <TIM_TI3_SetConfig+0x7c>)
 8005218:	4013      	ands	r3, r2
 800521a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	021a      	lsls	r2, r3, #8
 8005220:	23a0      	movs	r3, #160	; 0xa0
 8005222:	011b      	lsls	r3, r3, #4
 8005224:	4013      	ands	r3, r2
 8005226:	693a      	ldr	r2, [r7, #16]
 8005228:	4313      	orrs	r3, r2
 800522a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	693a      	ldr	r2, [r7, #16]
 8005236:	621a      	str	r2, [r3, #32]
}
 8005238:	46c0      	nop			; (mov r8, r8)
 800523a:	46bd      	mov	sp, r7
 800523c:	b006      	add	sp, #24
 800523e:	bd80      	pop	{r7, pc}
 8005240:	fffffeff 	.word	0xfffffeff
 8005244:	fffff5ff 	.word	0xfffff5ff

08005248 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b086      	sub	sp, #24
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
 8005254:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005256:	68fb      	ldr	r3, [r7, #12]
 8005258:	6a1b      	ldr	r3, [r3, #32]
 800525a:	4a1a      	ldr	r2, [pc, #104]	; (80052c4 <TIM_TI4_SetConfig+0x7c>)
 800525c:	401a      	ands	r2, r3
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	69db      	ldr	r3, [r3, #28]
 8005266:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	6a1b      	ldr	r3, [r3, #32]
 800526c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800526e:	697b      	ldr	r3, [r7, #20]
 8005270:	4a15      	ldr	r2, [pc, #84]	; (80052c8 <TIM_TI4_SetConfig+0x80>)
 8005272:	4013      	ands	r3, r2
 8005274:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	021b      	lsls	r3, r3, #8
 800527a:	697a      	ldr	r2, [r7, #20]
 800527c:	4313      	orrs	r3, r2
 800527e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005280:	697b      	ldr	r3, [r7, #20]
 8005282:	4a12      	ldr	r2, [pc, #72]	; (80052cc <TIM_TI4_SetConfig+0x84>)
 8005284:	4013      	ands	r3, r2
 8005286:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	031b      	lsls	r3, r3, #12
 800528c:	041b      	lsls	r3, r3, #16
 800528e:	0c1b      	lsrs	r3, r3, #16
 8005290:	697a      	ldr	r2, [r7, #20]
 8005292:	4313      	orrs	r3, r2
 8005294:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	4a0d      	ldr	r2, [pc, #52]	; (80052d0 <TIM_TI4_SetConfig+0x88>)
 800529a:	4013      	ands	r3, r2
 800529c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	031a      	lsls	r2, r3, #12
 80052a2:	23a0      	movs	r3, #160	; 0xa0
 80052a4:	021b      	lsls	r3, r3, #8
 80052a6:	4013      	ands	r3, r2
 80052a8:	693a      	ldr	r2, [r7, #16]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	697a      	ldr	r2, [r7, #20]
 80052b2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	693a      	ldr	r2, [r7, #16]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	46c0      	nop			; (mov r8, r8)
 80052bc:	46bd      	mov	sp, r7
 80052be:	b006      	add	sp, #24
 80052c0:	bd80      	pop	{r7, pc}
 80052c2:	46c0      	nop			; (mov r8, r8)
 80052c4:	ffffefff 	.word	0xffffefff
 80052c8:	fffffcff 	.word	0xfffffcff
 80052cc:	ffff0fff 	.word	0xffff0fff
 80052d0:	ffff5fff 	.word	0xffff5fff

080052d4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b084      	sub	sp, #16
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	689b      	ldr	r3, [r3, #8]
 80052e2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2270      	movs	r2, #112	; 0x70
 80052e8:	4393      	bics	r3, r2
 80052ea:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052ec:	683a      	ldr	r2, [r7, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	4313      	orrs	r3, r2
 80052f2:	2207      	movs	r2, #7
 80052f4:	4313      	orrs	r3, r2
 80052f6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	68fa      	ldr	r2, [r7, #12]
 80052fc:	609a      	str	r2, [r3, #8]
}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	46bd      	mov	sp, r7
 8005302:	b004      	add	sp, #16
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
 8005314:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800531c:	697b      	ldr	r3, [r7, #20]
 800531e:	4a09      	ldr	r2, [pc, #36]	; (8005344 <TIM_ETR_SetConfig+0x3c>)
 8005320:	4013      	ands	r3, r2
 8005322:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	021a      	lsls	r2, r3, #8
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	431a      	orrs	r2, r3
 800532c:	68bb      	ldr	r3, [r7, #8]
 800532e:	4313      	orrs	r3, r2
 8005330:	697a      	ldr	r2, [r7, #20]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	697a      	ldr	r2, [r7, #20]
 800533a:	609a      	str	r2, [r3, #8]
}
 800533c:	46c0      	nop			; (mov r8, r8)
 800533e:	46bd      	mov	sp, r7
 8005340:	b006      	add	sp, #24
 8005342:	bd80      	pop	{r7, pc}
 8005344:	ffff00ff 	.word	0xffff00ff

08005348 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b086      	sub	sp, #24
 800534c:	af00      	add	r7, sp, #0
 800534e:	60f8      	str	r0, [r7, #12]
 8005350:	60b9      	str	r1, [r7, #8]
 8005352:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005354:	68bb      	ldr	r3, [r7, #8]
 8005356:	221f      	movs	r2, #31
 8005358:	4013      	ands	r3, r2
 800535a:	2201      	movs	r2, #1
 800535c:	409a      	lsls	r2, r3
 800535e:	0013      	movs	r3, r2
 8005360:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	6a1b      	ldr	r3, [r3, #32]
 8005366:	697a      	ldr	r2, [r7, #20]
 8005368:	43d2      	mvns	r2, r2
 800536a:	401a      	ands	r2, r3
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	6a1a      	ldr	r2, [r3, #32]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	211f      	movs	r1, #31
 8005378:	400b      	ands	r3, r1
 800537a:	6879      	ldr	r1, [r7, #4]
 800537c:	4099      	lsls	r1, r3
 800537e:	000b      	movs	r3, r1
 8005380:	431a      	orrs	r2, r3
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	621a      	str	r2, [r3, #32]
}
 8005386:	46c0      	nop			; (mov r8, r8)
 8005388:	46bd      	mov	sp, r7
 800538a:	b006      	add	sp, #24
 800538c:	bd80      	pop	{r7, pc}
	...

08005390 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	223c      	movs	r2, #60	; 0x3c
 800539e:	5c9b      	ldrb	r3, [r3, r2]
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d101      	bne.n	80053a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80053a4:	2302      	movs	r3, #2
 80053a6:	e03c      	b.n	8005422 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	223c      	movs	r2, #60	; 0x3c
 80053ac:	2101      	movs	r1, #1
 80053ae:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	223d      	movs	r2, #61	; 0x3d
 80053b4:	2102      	movs	r1, #2
 80053b6:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	685b      	ldr	r3, [r3, #4]
 80053be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2270      	movs	r2, #112	; 0x70
 80053cc:	4393      	bics	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68fa      	ldr	r2, [r7, #12]
 80053d6:	4313      	orrs	r3, r2
 80053d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	681b      	ldr	r3, [r3, #0]
 80053de:	68fa      	ldr	r2, [r7, #12]
 80053e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	4a11      	ldr	r2, [pc, #68]	; (800542c <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d004      	beq.n	80053f6 <HAL_TIMEx_MasterConfigSynchronization+0x66>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	4a0f      	ldr	r2, [pc, #60]	; (8005430 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 80053f2:	4293      	cmp	r3, r2
 80053f4:	d10c      	bne.n	8005410 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	2280      	movs	r2, #128	; 0x80
 80053fa:	4393      	bics	r3, r2
 80053fc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80053fe:	683b      	ldr	r3, [r7, #0]
 8005400:	685b      	ldr	r3, [r3, #4]
 8005402:	68ba      	ldr	r2, [r7, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	68ba      	ldr	r2, [r7, #8]
 800540e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	223d      	movs	r2, #61	; 0x3d
 8005414:	2101      	movs	r1, #1
 8005416:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	223c      	movs	r2, #60	; 0x3c
 800541c:	2100      	movs	r1, #0
 800541e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005420:	2300      	movs	r3, #0
}
 8005422:	0018      	movs	r0, r3
 8005424:	46bd      	mov	sp, r7
 8005426:	b004      	add	sp, #16
 8005428:	bd80      	pop	{r7, pc}
 800542a:	46c0      	nop			; (mov r8, r8)
 800542c:	40012c00 	.word	0x40012c00
 8005430:	40000400 	.word	0x40000400

08005434 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b082      	sub	sp, #8
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800543c:	46c0      	nop			; (mov r8, r8)
 800543e:	46bd      	mov	sp, r7
 8005440:	b002      	add	sp, #8
 8005442:	bd80      	pop	{r7, pc}

08005444 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005444:	b580      	push	{r7, lr}
 8005446:	b082      	sub	sp, #8
 8005448:	af00      	add	r7, sp, #0
 800544a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800544c:	46c0      	nop			; (mov r8, r8)
 800544e:	46bd      	mov	sp, r7
 8005450:	b002      	add	sp, #8
 8005452:	bd80      	pop	{r7, pc}

08005454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	b082      	sub	sp, #8
 8005458:	af00      	add	r7, sp, #0
 800545a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2b00      	cmp	r3, #0
 8005460:	d101      	bne.n	8005466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e044      	b.n	80054f0 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800546a:	2b00      	cmp	r3, #0
 800546c:	d107      	bne.n	800547e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	2278      	movs	r2, #120	; 0x78
 8005472:	2100      	movs	r1, #0
 8005474:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	0018      	movs	r0, r3
 800547a:	f7fc fd2d 	bl	8001ed8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	2224      	movs	r2, #36	; 0x24
 8005482:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	2101      	movs	r1, #1
 8005490:	438a      	bics	r2, r1
 8005492:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	0018      	movs	r0, r3
 8005498:	f000 fba4 	bl	8005be4 <UART_SetConfig>
 800549c:	0003      	movs	r3, r0
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d101      	bne.n	80054a6 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80054a2:	2301      	movs	r3, #1
 80054a4:	e024      	b.n	80054f0 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d003      	beq.n	80054b6 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	0018      	movs	r0, r3
 80054b2:	f000 fcbf 	bl	8005e34 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	685a      	ldr	r2, [r3, #4]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	490d      	ldr	r1, [pc, #52]	; (80054f8 <HAL_UART_Init+0xa4>)
 80054c2:	400a      	ands	r2, r1
 80054c4:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	689a      	ldr	r2, [r3, #8]
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2108      	movs	r1, #8
 80054d2:	438a      	bics	r2, r1
 80054d4:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2101      	movs	r1, #1
 80054e2:	430a      	orrs	r2, r1
 80054e4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	0018      	movs	r0, r3
 80054ea:	f000 fd57 	bl	8005f9c <UART_CheckIdleState>
 80054ee:	0003      	movs	r3, r0
}
 80054f0:	0018      	movs	r0, r3
 80054f2:	46bd      	mov	sp, r7
 80054f4:	b002      	add	sp, #8
 80054f6:	bd80      	pop	{r7, pc}
 80054f8:	fffff7ff 	.word	0xfffff7ff

080054fc <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b088      	sub	sp, #32
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	1dbb      	adds	r3, r7, #6
 8005508:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800550e:	2b20      	cmp	r3, #32
 8005510:	d000      	beq.n	8005514 <HAL_UART_Transmit_DMA+0x18>
 8005512:	e077      	b.n	8005604 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005514:	68bb      	ldr	r3, [r7, #8]
 8005516:	2b00      	cmp	r3, #0
 8005518:	d003      	beq.n	8005522 <HAL_UART_Transmit_DMA+0x26>
 800551a:	1dbb      	adds	r3, r7, #6
 800551c:	881b      	ldrh	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d101      	bne.n	8005526 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8005522:	2301      	movs	r3, #1
 8005524:	e06f      	b.n	8005606 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	689a      	ldr	r2, [r3, #8]
 800552a:	2380      	movs	r3, #128	; 0x80
 800552c:	015b      	lsls	r3, r3, #5
 800552e:	429a      	cmp	r2, r3
 8005530:	d109      	bne.n	8005546 <HAL_UART_Transmit_DMA+0x4a>
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	691b      	ldr	r3, [r3, #16]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d105      	bne.n	8005546 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	2201      	movs	r2, #1
 800553e:	4013      	ands	r3, r2
 8005540:	d001      	beq.n	8005546 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 8005542:	2301      	movs	r3, #1
 8005544:	e05f      	b.n	8005606 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	68ba      	ldr	r2, [r7, #8]
 800554a:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	1dba      	adds	r2, r7, #6
 8005550:	2150      	movs	r1, #80	; 0x50
 8005552:	8812      	ldrh	r2, [r2, #0]
 8005554:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	1dba      	adds	r2, r7, #6
 800555a:	2152      	movs	r1, #82	; 0x52
 800555c:	8812      	ldrh	r2, [r2, #0]
 800555e:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	2284      	movs	r2, #132	; 0x84
 8005564:	2100      	movs	r1, #0
 8005566:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2221      	movs	r2, #33	; 0x21
 800556c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005572:	2b00      	cmp	r3, #0
 8005574:	d027      	beq.n	80055c6 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	4a25      	ldr	r2, [pc, #148]	; (8005610 <HAL_UART_Transmit_DMA+0x114>)
 800557c:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005582:	4a24      	ldr	r2, [pc, #144]	; (8005614 <HAL_UART_Transmit_DMA+0x118>)
 8005584:	62da      	str	r2, [r3, #44]	; 0x2c

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558a:	4a23      	ldr	r2, [pc, #140]	; (8005618 <HAL_UART_Transmit_DMA+0x11c>)
 800558c:	631a      	str	r2, [r3, #48]	; 0x30

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005592:	2200      	movs	r2, #0
 8005594:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800559e:	0019      	movs	r1, r3
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	3328      	adds	r3, #40	; 0x28
 80055a6:	001a      	movs	r2, r3
 80055a8:	1dbb      	adds	r3, r7, #6
 80055aa:	881b      	ldrh	r3, [r3, #0]
 80055ac:	f7fd fcee 	bl	8002f8c <HAL_DMA_Start_IT>
 80055b0:	1e03      	subs	r3, r0, #0
 80055b2:	d008      	beq.n	80055c6 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2284      	movs	r2, #132	; 0x84
 80055b8:	2110      	movs	r1, #16
 80055ba:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	2220      	movs	r2, #32
 80055c0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 80055c2:	2301      	movs	r3, #1
 80055c4:	e01f      	b.n	8005606 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2240      	movs	r2, #64	; 0x40
 80055cc:	621a      	str	r2, [r3, #32]
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80055ce:	f3ef 8310 	mrs	r3, PRIMASK
 80055d2:	613b      	str	r3, [r7, #16]
  return(result);
 80055d4:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80055d6:	61fb      	str	r3, [r7, #28]
 80055d8:	2301      	movs	r3, #1
 80055da:	617b      	str	r3, [r7, #20]
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055dc:	697b      	ldr	r3, [r7, #20]
 80055de:	f383 8810 	msr	PRIMASK, r3
}
 80055e2:	46c0      	nop			; (mov r8, r8)
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	689a      	ldr	r2, [r3, #8]
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2180      	movs	r1, #128	; 0x80
 80055f0:	430a      	orrs	r2, r1
 80055f2:	609a      	str	r2, [r3, #8]
 80055f4:	69fb      	ldr	r3, [r7, #28]
 80055f6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80055f8:	69bb      	ldr	r3, [r7, #24]
 80055fa:	f383 8810 	msr	PRIMASK, r3
}
 80055fe:	46c0      	nop			; (mov r8, r8)

    return HAL_OK;
 8005600:	2300      	movs	r3, #0
 8005602:	e000      	b.n	8005606 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005604:	2302      	movs	r3, #2
  }
}
 8005606:	0018      	movs	r0, r3
 8005608:	46bd      	mov	sp, r7
 800560a:	b008      	add	sp, #32
 800560c:	bd80      	pop	{r7, pc}
 800560e:	46c0      	nop			; (mov r8, r8)
 8005610:	080062d1 	.word	0x080062d1
 8005614:	08006365 	.word	0x08006365
 8005618:	08006383 	.word	0x08006383

0800561c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800561c:	b590      	push	{r4, r7, lr}
 800561e:	b0ab      	sub	sp, #172	; 0xac
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	69db      	ldr	r3, [r3, #28]
 800562a:	22a4      	movs	r2, #164	; 0xa4
 800562c:	18b9      	adds	r1, r7, r2
 800562e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	20a0      	movs	r0, #160	; 0xa0
 8005638:	1839      	adds	r1, r7, r0
 800563a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	689b      	ldr	r3, [r3, #8]
 8005642:	219c      	movs	r1, #156	; 0x9c
 8005644:	1879      	adds	r1, r7, r1
 8005646:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005648:	0011      	movs	r1, r2
 800564a:	18bb      	adds	r3, r7, r2
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	4a99      	ldr	r2, [pc, #612]	; (80058b4 <HAL_UART_IRQHandler+0x298>)
 8005650:	4013      	ands	r3, r2
 8005652:	2298      	movs	r2, #152	; 0x98
 8005654:	18bc      	adds	r4, r7, r2
 8005656:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8005658:	18bb      	adds	r3, r7, r2
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d114      	bne.n	800568a <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005660:	187b      	adds	r3, r7, r1
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	2220      	movs	r2, #32
 8005666:	4013      	ands	r3, r2
 8005668:	d00f      	beq.n	800568a <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800566a:	183b      	adds	r3, r7, r0
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	2220      	movs	r2, #32
 8005670:	4013      	ands	r3, r2
 8005672:	d00a      	beq.n	800568a <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005678:	2b00      	cmp	r3, #0
 800567a:	d100      	bne.n	800567e <HAL_UART_IRQHandler+0x62>
 800567c:	e286      	b.n	8005b8c <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005682:	687a      	ldr	r2, [r7, #4]
 8005684:	0010      	movs	r0, r2
 8005686:	4798      	blx	r3
      }
      return;
 8005688:	e280      	b.n	8005b8c <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800568a:	2398      	movs	r3, #152	; 0x98
 800568c:	18fb      	adds	r3, r7, r3
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d100      	bne.n	8005696 <HAL_UART_IRQHandler+0x7a>
 8005694:	e114      	b.n	80058c0 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005696:	239c      	movs	r3, #156	; 0x9c
 8005698:	18fb      	adds	r3, r7, r3
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2201      	movs	r2, #1
 800569e:	4013      	ands	r3, r2
 80056a0:	d106      	bne.n	80056b0 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80056a2:	23a0      	movs	r3, #160	; 0xa0
 80056a4:	18fb      	adds	r3, r7, r3
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	4a83      	ldr	r2, [pc, #524]	; (80058b8 <HAL_UART_IRQHandler+0x29c>)
 80056aa:	4013      	ands	r3, r2
 80056ac:	d100      	bne.n	80056b0 <HAL_UART_IRQHandler+0x94>
 80056ae:	e107      	b.n	80058c0 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80056b0:	23a4      	movs	r3, #164	; 0xa4
 80056b2:	18fb      	adds	r3, r7, r3
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	2201      	movs	r2, #1
 80056b8:	4013      	ands	r3, r2
 80056ba:	d012      	beq.n	80056e2 <HAL_UART_IRQHandler+0xc6>
 80056bc:	23a0      	movs	r3, #160	; 0xa0
 80056be:	18fb      	adds	r3, r7, r3
 80056c0:	681a      	ldr	r2, [r3, #0]
 80056c2:	2380      	movs	r3, #128	; 0x80
 80056c4:	005b      	lsls	r3, r3, #1
 80056c6:	4013      	ands	r3, r2
 80056c8:	d00b      	beq.n	80056e2 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	681b      	ldr	r3, [r3, #0]
 80056ce:	2201      	movs	r2, #1
 80056d0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	2284      	movs	r2, #132	; 0x84
 80056d6:	589b      	ldr	r3, [r3, r2]
 80056d8:	2201      	movs	r2, #1
 80056da:	431a      	orrs	r2, r3
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2184      	movs	r1, #132	; 0x84
 80056e0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80056e2:	23a4      	movs	r3, #164	; 0xa4
 80056e4:	18fb      	adds	r3, r7, r3
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	2202      	movs	r2, #2
 80056ea:	4013      	ands	r3, r2
 80056ec:	d011      	beq.n	8005712 <HAL_UART_IRQHandler+0xf6>
 80056ee:	239c      	movs	r3, #156	; 0x9c
 80056f0:	18fb      	adds	r3, r7, r3
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	2201      	movs	r2, #1
 80056f6:	4013      	ands	r3, r2
 80056f8:	d00b      	beq.n	8005712 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	2202      	movs	r2, #2
 8005700:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2284      	movs	r2, #132	; 0x84
 8005706:	589b      	ldr	r3, [r3, r2]
 8005708:	2204      	movs	r2, #4
 800570a:	431a      	orrs	r2, r3
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2184      	movs	r1, #132	; 0x84
 8005710:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005712:	23a4      	movs	r3, #164	; 0xa4
 8005714:	18fb      	adds	r3, r7, r3
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	2204      	movs	r2, #4
 800571a:	4013      	ands	r3, r2
 800571c:	d011      	beq.n	8005742 <HAL_UART_IRQHandler+0x126>
 800571e:	239c      	movs	r3, #156	; 0x9c
 8005720:	18fb      	adds	r3, r7, r3
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	2201      	movs	r2, #1
 8005726:	4013      	ands	r3, r2
 8005728:	d00b      	beq.n	8005742 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	2204      	movs	r2, #4
 8005730:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2284      	movs	r2, #132	; 0x84
 8005736:	589b      	ldr	r3, [r3, r2]
 8005738:	2202      	movs	r2, #2
 800573a:	431a      	orrs	r2, r3
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2184      	movs	r1, #132	; 0x84
 8005740:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005742:	23a4      	movs	r3, #164	; 0xa4
 8005744:	18fb      	adds	r3, r7, r3
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	2208      	movs	r2, #8
 800574a:	4013      	ands	r3, r2
 800574c:	d017      	beq.n	800577e <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800574e:	23a0      	movs	r3, #160	; 0xa0
 8005750:	18fb      	adds	r3, r7, r3
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	2220      	movs	r2, #32
 8005756:	4013      	ands	r3, r2
 8005758:	d105      	bne.n	8005766 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800575a:	239c      	movs	r3, #156	; 0x9c
 800575c:	18fb      	adds	r3, r7, r3
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	2201      	movs	r2, #1
 8005762:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005764:	d00b      	beq.n	800577e <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2208      	movs	r2, #8
 800576c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	2284      	movs	r2, #132	; 0x84
 8005772:	589b      	ldr	r3, [r3, r2]
 8005774:	2208      	movs	r2, #8
 8005776:	431a      	orrs	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2184      	movs	r1, #132	; 0x84
 800577c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800577e:	23a4      	movs	r3, #164	; 0xa4
 8005780:	18fb      	adds	r3, r7, r3
 8005782:	681a      	ldr	r2, [r3, #0]
 8005784:	2380      	movs	r3, #128	; 0x80
 8005786:	011b      	lsls	r3, r3, #4
 8005788:	4013      	ands	r3, r2
 800578a:	d013      	beq.n	80057b4 <HAL_UART_IRQHandler+0x198>
 800578c:	23a0      	movs	r3, #160	; 0xa0
 800578e:	18fb      	adds	r3, r7, r3
 8005790:	681a      	ldr	r2, [r3, #0]
 8005792:	2380      	movs	r3, #128	; 0x80
 8005794:	04db      	lsls	r3, r3, #19
 8005796:	4013      	ands	r3, r2
 8005798:	d00c      	beq.n	80057b4 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	2280      	movs	r2, #128	; 0x80
 80057a0:	0112      	lsls	r2, r2, #4
 80057a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2284      	movs	r2, #132	; 0x84
 80057a8:	589b      	ldr	r3, [r3, r2]
 80057aa:	2220      	movs	r2, #32
 80057ac:	431a      	orrs	r2, r3
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	2184      	movs	r1, #132	; 0x84
 80057b2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2284      	movs	r2, #132	; 0x84
 80057b8:	589b      	ldr	r3, [r3, r2]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d100      	bne.n	80057c0 <HAL_UART_IRQHandler+0x1a4>
 80057be:	e1e7      	b.n	8005b90 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80057c0:	23a4      	movs	r3, #164	; 0xa4
 80057c2:	18fb      	adds	r3, r7, r3
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2220      	movs	r2, #32
 80057c8:	4013      	ands	r3, r2
 80057ca:	d00e      	beq.n	80057ea <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80057cc:	23a0      	movs	r3, #160	; 0xa0
 80057ce:	18fb      	adds	r3, r7, r3
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2220      	movs	r2, #32
 80057d4:	4013      	ands	r3, r2
 80057d6:	d008      	beq.n	80057ea <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057dc:	2b00      	cmp	r3, #0
 80057de:	d004      	beq.n	80057ea <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80057e4:	687a      	ldr	r2, [r7, #4]
 80057e6:	0010      	movs	r0, r2
 80057e8:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2284      	movs	r2, #132	; 0x84
 80057ee:	589b      	ldr	r3, [r3, r2]
 80057f0:	2194      	movs	r1, #148	; 0x94
 80057f2:	187a      	adds	r2, r7, r1
 80057f4:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2240      	movs	r2, #64	; 0x40
 80057fe:	4013      	ands	r3, r2
 8005800:	2b40      	cmp	r3, #64	; 0x40
 8005802:	d004      	beq.n	800580e <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005804:	187b      	adds	r3, r7, r1
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2228      	movs	r2, #40	; 0x28
 800580a:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800580c:	d047      	beq.n	800589e <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	0018      	movs	r0, r3
 8005812:	f000 fcf9 	bl	8006208 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	689b      	ldr	r3, [r3, #8]
 800581c:	2240      	movs	r2, #64	; 0x40
 800581e:	4013      	ands	r3, r2
 8005820:	2b40      	cmp	r3, #64	; 0x40
 8005822:	d137      	bne.n	8005894 <HAL_UART_IRQHandler+0x278>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005824:	f3ef 8310 	mrs	r3, PRIMASK
 8005828:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 800582a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800582c:	2090      	movs	r0, #144	; 0x90
 800582e:	183a      	adds	r2, r7, r0
 8005830:	6013      	str	r3, [r2, #0]
 8005832:	2301      	movs	r3, #1
 8005834:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005836:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005838:	f383 8810 	msr	PRIMASK, r3
}
 800583c:	46c0      	nop			; (mov r8, r8)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	689a      	ldr	r2, [r3, #8]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	2140      	movs	r1, #64	; 0x40
 800584a:	438a      	bics	r2, r1
 800584c:	609a      	str	r2, [r3, #8]
 800584e:	183b      	adds	r3, r7, r0
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005854:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005856:	f383 8810 	msr	PRIMASK, r3
}
 800585a:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005860:	2b00      	cmp	r3, #0
 8005862:	d012      	beq.n	800588a <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005868:	4a14      	ldr	r2, [pc, #80]	; (80058bc <HAL_UART_IRQHandler+0x2a0>)
 800586a:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	0018      	movs	r0, r3
 8005872:	f7fd fc29 	bl	80030c8 <HAL_DMA_Abort_IT>
 8005876:	1e03      	subs	r3, r0, #0
 8005878:	d01a      	beq.n	80058b0 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800587e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005884:	0018      	movs	r0, r3
 8005886:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005888:	e012      	b.n	80058b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	0018      	movs	r0, r3
 800588e:	f000 f995 	bl	8005bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005892:	e00d      	b.n	80058b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	0018      	movs	r0, r3
 8005898:	f000 f990 	bl	8005bbc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800589c:	e008      	b.n	80058b0 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	0018      	movs	r0, r3
 80058a2:	f000 f98b 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	2284      	movs	r2, #132	; 0x84
 80058aa:	2100      	movs	r1, #0
 80058ac:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 80058ae:	e16f      	b.n	8005b90 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058b0:	46c0      	nop			; (mov r8, r8)
    return;
 80058b2:	e16d      	b.n	8005b90 <HAL_UART_IRQHandler+0x574>
 80058b4:	0000080f 	.word	0x0000080f
 80058b8:	04000120 	.word	0x04000120
 80058bc:	08006407 	.word	0x08006407

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058c4:	2b01      	cmp	r3, #1
 80058c6:	d000      	beq.n	80058ca <HAL_UART_IRQHandler+0x2ae>
 80058c8:	e139      	b.n	8005b3e <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80058ca:	23a4      	movs	r3, #164	; 0xa4
 80058cc:	18fb      	adds	r3, r7, r3
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	2210      	movs	r2, #16
 80058d2:	4013      	ands	r3, r2
 80058d4:	d100      	bne.n	80058d8 <HAL_UART_IRQHandler+0x2bc>
 80058d6:	e132      	b.n	8005b3e <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80058d8:	23a0      	movs	r3, #160	; 0xa0
 80058da:	18fb      	adds	r3, r7, r3
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	2210      	movs	r2, #16
 80058e0:	4013      	ands	r3, r2
 80058e2:	d100      	bne.n	80058e6 <HAL_UART_IRQHandler+0x2ca>
 80058e4:	e12b      	b.n	8005b3e <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	2210      	movs	r2, #16
 80058ec:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	2240      	movs	r2, #64	; 0x40
 80058f6:	4013      	ands	r3, r2
 80058f8:	2b40      	cmp	r3, #64	; 0x40
 80058fa:	d000      	beq.n	80058fe <HAL_UART_IRQHandler+0x2e2>
 80058fc:	e09f      	b.n	8005a3e <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	217e      	movs	r1, #126	; 0x7e
 8005908:	187b      	adds	r3, r7, r1
 800590a:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 800590c:	187b      	adds	r3, r7, r1
 800590e:	881b      	ldrh	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d100      	bne.n	8005916 <HAL_UART_IRQHandler+0x2fa>
 8005914:	e13e      	b.n	8005b94 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2258      	movs	r2, #88	; 0x58
 800591a:	5a9b      	ldrh	r3, [r3, r2]
 800591c:	187a      	adds	r2, r7, r1
 800591e:	8812      	ldrh	r2, [r2, #0]
 8005920:	429a      	cmp	r2, r3
 8005922:	d300      	bcc.n	8005926 <HAL_UART_IRQHandler+0x30a>
 8005924:	e136      	b.n	8005b94 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	187a      	adds	r2, r7, r1
 800592a:	215a      	movs	r1, #90	; 0x5a
 800592c:	8812      	ldrh	r2, [r2, #0]
 800592e:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005934:	699b      	ldr	r3, [r3, #24]
 8005936:	2b20      	cmp	r3, #32
 8005938:	d06f      	beq.n	8005a1a <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800593a:	f3ef 8310 	mrs	r3, PRIMASK
 800593e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8005940:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005942:	67bb      	str	r3, [r7, #120]	; 0x78
 8005944:	2301      	movs	r3, #1
 8005946:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800594a:	f383 8810 	msr	PRIMASK, r3
}
 800594e:	46c0      	nop			; (mov r8, r8)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4992      	ldr	r1, [pc, #584]	; (8005ba4 <HAL_UART_IRQHandler+0x588>)
 800595c:	400a      	ands	r2, r1
 800595e:	601a      	str	r2, [r3, #0]
 8005960:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005962:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005966:	f383 8810 	msr	PRIMASK, r3
}
 800596a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800596c:	f3ef 8310 	mrs	r3, PRIMASK
 8005970:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8005972:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005974:	677b      	str	r3, [r7, #116]	; 0x74
 8005976:	2301      	movs	r3, #1
 8005978:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800597a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800597c:	f383 8810 	msr	PRIMASK, r3
}
 8005980:	46c0      	nop			; (mov r8, r8)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	689a      	ldr	r2, [r3, #8]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	2101      	movs	r1, #1
 800598e:	438a      	bics	r2, r1
 8005990:	609a      	str	r2, [r3, #8]
 8005992:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005994:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005996:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005998:	f383 8810 	msr	PRIMASK, r3
}
 800599c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800599e:	f3ef 8310 	mrs	r3, PRIMASK
 80059a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80059a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059a6:	673b      	str	r3, [r7, #112]	; 0x70
 80059a8:	2301      	movs	r3, #1
 80059aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80059ae:	f383 8810 	msr	PRIMASK, r3
}
 80059b2:	46c0      	nop			; (mov r8, r8)
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	689a      	ldr	r2, [r3, #8]
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	2140      	movs	r1, #64	; 0x40
 80059c0:	438a      	bics	r2, r1
 80059c2:	609a      	str	r2, [r3, #8]
 80059c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80059ca:	f383 8810 	msr	PRIMASK, r3
}
 80059ce:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2280      	movs	r2, #128	; 0x80
 80059d4:	2120      	movs	r1, #32
 80059d6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059de:	f3ef 8310 	mrs	r3, PRIMASK
 80059e2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80059e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80059e6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80059e8:	2301      	movs	r3, #1
 80059ea:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80059ee:	f383 8810 	msr	PRIMASK, r3
}
 80059f2:	46c0      	nop			; (mov r8, r8)
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	681a      	ldr	r2, [r3, #0]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	2110      	movs	r1, #16
 8005a00:	438a      	bics	r2, r1
 8005a02:	601a      	str	r2, [r3, #0]
 8005a04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a06:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a08:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a0a:	f383 8810 	msr	PRIMASK, r3
}
 8005a0e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005a14:	0018      	movs	r0, r3
 8005a16:	f7fd fb1f 	bl	8003058 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	2202      	movs	r2, #2
 8005a1e:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	2258      	movs	r2, #88	; 0x58
 8005a24:	5a9a      	ldrh	r2, [r3, r2]
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	215a      	movs	r1, #90	; 0x5a
 8005a2a:	5a5b      	ldrh	r3, [r3, r1]
 8005a2c:	b29b      	uxth	r3, r3
 8005a2e:	1ad3      	subs	r3, r2, r3
 8005a30:	b29a      	uxth	r2, r3
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	0011      	movs	r1, r2
 8005a36:	0018      	movs	r0, r3
 8005a38:	f000 f8c8 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005a3c:	e0aa      	b.n	8005b94 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2258      	movs	r2, #88	; 0x58
 8005a42:	5a99      	ldrh	r1, [r3, r2]
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	225a      	movs	r2, #90	; 0x5a
 8005a48:	5a9b      	ldrh	r3, [r3, r2]
 8005a4a:	b29a      	uxth	r2, r3
 8005a4c:	208e      	movs	r0, #142	; 0x8e
 8005a4e:	183b      	adds	r3, r7, r0
 8005a50:	1a8a      	subs	r2, r1, r2
 8005a52:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	225a      	movs	r2, #90	; 0x5a
 8005a58:	5a9b      	ldrh	r3, [r3, r2]
 8005a5a:	b29b      	uxth	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d100      	bne.n	8005a62 <HAL_UART_IRQHandler+0x446>
 8005a60:	e09a      	b.n	8005b98 <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 8005a62:	183b      	adds	r3, r7, r0
 8005a64:	881b      	ldrh	r3, [r3, #0]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d100      	bne.n	8005a6c <HAL_UART_IRQHandler+0x450>
 8005a6a:	e095      	b.n	8005b98 <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005a6c:	f3ef 8310 	mrs	r3, PRIMASK
 8005a70:	60fb      	str	r3, [r7, #12]
  return(result);
 8005a72:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005a74:	2488      	movs	r4, #136	; 0x88
 8005a76:	193a      	adds	r2, r7, r4
 8005a78:	6013      	str	r3, [r2, #0]
 8005a7a:	2301      	movs	r3, #1
 8005a7c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a7e:	693b      	ldr	r3, [r7, #16]
 8005a80:	f383 8810 	msr	PRIMASK, r3
}
 8005a84:	46c0      	nop			; (mov r8, r8)
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	681a      	ldr	r2, [r3, #0]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	4945      	ldr	r1, [pc, #276]	; (8005ba8 <HAL_UART_IRQHandler+0x58c>)
 8005a92:	400a      	ands	r2, r1
 8005a94:	601a      	str	r2, [r3, #0]
 8005a96:	193b      	adds	r3, r7, r4
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f383 8810 	msr	PRIMASK, r3
}
 8005aa2:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005aa4:	f3ef 8310 	mrs	r3, PRIMASK
 8005aa8:	61bb      	str	r3, [r7, #24]
  return(result);
 8005aaa:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005aac:	2484      	movs	r4, #132	; 0x84
 8005aae:	193a      	adds	r2, r7, r4
 8005ab0:	6013      	str	r3, [r2, #0]
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ab6:	69fb      	ldr	r3, [r7, #28]
 8005ab8:	f383 8810 	msr	PRIMASK, r3
}
 8005abc:	46c0      	nop			; (mov r8, r8)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	689a      	ldr	r2, [r3, #8]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2101      	movs	r1, #1
 8005aca:	438a      	bics	r2, r1
 8005acc:	609a      	str	r2, [r3, #8]
 8005ace:	193b      	adds	r3, r7, r4
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005ad4:	6a3b      	ldr	r3, [r7, #32]
 8005ad6:	f383 8810 	msr	PRIMASK, r3
}
 8005ada:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2280      	movs	r2, #128	; 0x80
 8005ae0:	2120      	movs	r1, #32
 8005ae2:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	2200      	movs	r2, #0
 8005aee:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005af0:	f3ef 8310 	mrs	r3, PRIMASK
 8005af4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005af8:	2480      	movs	r4, #128	; 0x80
 8005afa:	193a      	adds	r2, r7, r4
 8005afc:	6013      	str	r3, [r2, #0]
 8005afe:	2301      	movs	r3, #1
 8005b00:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b04:	f383 8810 	msr	PRIMASK, r3
}
 8005b08:	46c0      	nop			; (mov r8, r8)
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2110      	movs	r1, #16
 8005b16:	438a      	bics	r2, r1
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	193b      	adds	r3, r7, r4
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b22:	f383 8810 	msr	PRIMASK, r3
}
 8005b26:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2202      	movs	r2, #2
 8005b2c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b2e:	183b      	adds	r3, r7, r0
 8005b30:	881a      	ldrh	r2, [r3, #0]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	0011      	movs	r1, r2
 8005b36:	0018      	movs	r0, r3
 8005b38:	f000 f848 	bl	8005bcc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005b3c:	e02c      	b.n	8005b98 <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8005b3e:	23a4      	movs	r3, #164	; 0xa4
 8005b40:	18fb      	adds	r3, r7, r3
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	2280      	movs	r2, #128	; 0x80
 8005b46:	4013      	ands	r3, r2
 8005b48:	d00f      	beq.n	8005b6a <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8005b4a:	23a0      	movs	r3, #160	; 0xa0
 8005b4c:	18fb      	adds	r3, r7, r3
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	2280      	movs	r2, #128	; 0x80
 8005b52:	4013      	ands	r3, r2
 8005b54:	d009      	beq.n	8005b6a <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d01e      	beq.n	8005b9c <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005b62:	687a      	ldr	r2, [r7, #4]
 8005b64:	0010      	movs	r0, r2
 8005b66:	4798      	blx	r3
    }
    return;
 8005b68:	e018      	b.n	8005b9c <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005b6a:	23a4      	movs	r3, #164	; 0xa4
 8005b6c:	18fb      	adds	r3, r7, r3
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	2240      	movs	r2, #64	; 0x40
 8005b72:	4013      	ands	r3, r2
 8005b74:	d013      	beq.n	8005b9e <HAL_UART_IRQHandler+0x582>
 8005b76:	23a0      	movs	r3, #160	; 0xa0
 8005b78:	18fb      	adds	r3, r7, r3
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	2240      	movs	r2, #64	; 0x40
 8005b7e:	4013      	ands	r3, r2
 8005b80:	d00d      	beq.n	8005b9e <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	0018      	movs	r0, r3
 8005b86:	f000 fc55 	bl	8006434 <UART_EndTransmit_IT>
    return;
 8005b8a:	e008      	b.n	8005b9e <HAL_UART_IRQHandler+0x582>
      return;
 8005b8c:	46c0      	nop			; (mov r8, r8)
 8005b8e:	e006      	b.n	8005b9e <HAL_UART_IRQHandler+0x582>
    return;
 8005b90:	46c0      	nop			; (mov r8, r8)
 8005b92:	e004      	b.n	8005b9e <HAL_UART_IRQHandler+0x582>
      return;
 8005b94:	46c0      	nop			; (mov r8, r8)
 8005b96:	e002      	b.n	8005b9e <HAL_UART_IRQHandler+0x582>
      return;
 8005b98:	46c0      	nop			; (mov r8, r8)
 8005b9a:	e000      	b.n	8005b9e <HAL_UART_IRQHandler+0x582>
    return;
 8005b9c:	46c0      	nop			; (mov r8, r8)
  }

}
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	b02b      	add	sp, #172	; 0xac
 8005ba2:	bd90      	pop	{r4, r7, pc}
 8005ba4:	fffffeff 	.word	0xfffffeff
 8005ba8:	fffffedf 	.word	0xfffffedf

08005bac <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005bac:	b580      	push	{r7, lr}
 8005bae:	b082      	sub	sp, #8
 8005bb0:	af00      	add	r7, sp, #0
 8005bb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8005bb4:	46c0      	nop			; (mov r8, r8)
 8005bb6:	46bd      	mov	sp, r7
 8005bb8:	b002      	add	sp, #8
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005bc4:	46c0      	nop			; (mov r8, r8)
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	b002      	add	sp, #8
 8005bca:	bd80      	pop	{r7, pc}

08005bcc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b082      	sub	sp, #8
 8005bd0:	af00      	add	r7, sp, #0
 8005bd2:	6078      	str	r0, [r7, #4]
 8005bd4:	000a      	movs	r2, r1
 8005bd6:	1cbb      	adds	r3, r7, #2
 8005bd8:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005bda:	46c0      	nop			; (mov r8, r8)
 8005bdc:	46bd      	mov	sp, r7
 8005bde:	b002      	add	sp, #8
 8005be0:	bd80      	pop	{r7, pc}
	...

08005be4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b088      	sub	sp, #32
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005bec:	231e      	movs	r3, #30
 8005bee:	18fb      	adds	r3, r7, r3
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	689a      	ldr	r2, [r3, #8]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	691b      	ldr	r3, [r3, #16]
 8005bfc:	431a      	orrs	r2, r3
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	695b      	ldr	r3, [r3, #20]
 8005c02:	431a      	orrs	r2, r3
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	69db      	ldr	r3, [r3, #28]
 8005c08:	4313      	orrs	r3, r2
 8005c0a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4a83      	ldr	r2, [pc, #524]	; (8005e20 <UART_SetConfig+0x23c>)
 8005c14:	4013      	ands	r3, r2
 8005c16:	0019      	movs	r1, r3
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	697a      	ldr	r2, [r7, #20]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	4a7e      	ldr	r2, [pc, #504]	; (8005e24 <UART_SetConfig+0x240>)
 8005c2a:	4013      	ands	r3, r2
 8005c2c:	0019      	movs	r1, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	68da      	ldr	r2, [r3, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	430a      	orrs	r2, r1
 8005c38:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	699b      	ldr	r3, [r3, #24]
 8005c3e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6a1b      	ldr	r3, [r3, #32]
 8005c44:	697a      	ldr	r2, [r7, #20]
 8005c46:	4313      	orrs	r3, r2
 8005c48:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	689b      	ldr	r3, [r3, #8]
 8005c50:	4a75      	ldr	r2, [pc, #468]	; (8005e28 <UART_SetConfig+0x244>)
 8005c52:	4013      	ands	r3, r2
 8005c54:	0019      	movs	r1, r3
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	697a      	ldr	r2, [r7, #20]
 8005c5c:	430a      	orrs	r2, r1
 8005c5e:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005c60:	4b72      	ldr	r3, [pc, #456]	; (8005e2c <UART_SetConfig+0x248>)
 8005c62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c64:	2203      	movs	r2, #3
 8005c66:	4013      	ands	r3, r2
 8005c68:	2b03      	cmp	r3, #3
 8005c6a:	d00d      	beq.n	8005c88 <UART_SetConfig+0xa4>
 8005c6c:	d81b      	bhi.n	8005ca6 <UART_SetConfig+0xc2>
 8005c6e:	2b02      	cmp	r3, #2
 8005c70:	d014      	beq.n	8005c9c <UART_SetConfig+0xb8>
 8005c72:	d818      	bhi.n	8005ca6 <UART_SetConfig+0xc2>
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d002      	beq.n	8005c7e <UART_SetConfig+0x9a>
 8005c78:	2b01      	cmp	r3, #1
 8005c7a:	d00a      	beq.n	8005c92 <UART_SetConfig+0xae>
 8005c7c:	e013      	b.n	8005ca6 <UART_SetConfig+0xc2>
 8005c7e:	231f      	movs	r3, #31
 8005c80:	18fb      	adds	r3, r7, r3
 8005c82:	2200      	movs	r2, #0
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	e012      	b.n	8005cae <UART_SetConfig+0xca>
 8005c88:	231f      	movs	r3, #31
 8005c8a:	18fb      	adds	r3, r7, r3
 8005c8c:	2202      	movs	r2, #2
 8005c8e:	701a      	strb	r2, [r3, #0]
 8005c90:	e00d      	b.n	8005cae <UART_SetConfig+0xca>
 8005c92:	231f      	movs	r3, #31
 8005c94:	18fb      	adds	r3, r7, r3
 8005c96:	2204      	movs	r2, #4
 8005c98:	701a      	strb	r2, [r3, #0]
 8005c9a:	e008      	b.n	8005cae <UART_SetConfig+0xca>
 8005c9c:	231f      	movs	r3, #31
 8005c9e:	18fb      	adds	r3, r7, r3
 8005ca0:	2208      	movs	r2, #8
 8005ca2:	701a      	strb	r2, [r3, #0]
 8005ca4:	e003      	b.n	8005cae <UART_SetConfig+0xca>
 8005ca6:	231f      	movs	r3, #31
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	2210      	movs	r2, #16
 8005cac:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	69da      	ldr	r2, [r3, #28]
 8005cb2:	2380      	movs	r3, #128	; 0x80
 8005cb4:	021b      	lsls	r3, r3, #8
 8005cb6:	429a      	cmp	r2, r3
 8005cb8:	d15c      	bne.n	8005d74 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 8005cba:	231f      	movs	r3, #31
 8005cbc:	18fb      	adds	r3, r7, r3
 8005cbe:	781b      	ldrb	r3, [r3, #0]
 8005cc0:	2b08      	cmp	r3, #8
 8005cc2:	d015      	beq.n	8005cf0 <UART_SetConfig+0x10c>
 8005cc4:	dc18      	bgt.n	8005cf8 <UART_SetConfig+0x114>
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d00d      	beq.n	8005ce6 <UART_SetConfig+0x102>
 8005cca:	dc15      	bgt.n	8005cf8 <UART_SetConfig+0x114>
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d002      	beq.n	8005cd6 <UART_SetConfig+0xf2>
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d005      	beq.n	8005ce0 <UART_SetConfig+0xfc>
 8005cd4:	e010      	b.n	8005cf8 <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005cd6:	f7fe fba7 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8005cda:	0003      	movs	r3, r0
 8005cdc:	61bb      	str	r3, [r7, #24]
        break;
 8005cde:	e012      	b.n	8005d06 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005ce0:	4b53      	ldr	r3, [pc, #332]	; (8005e30 <UART_SetConfig+0x24c>)
 8005ce2:	61bb      	str	r3, [r7, #24]
        break;
 8005ce4:	e00f      	b.n	8005d06 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005ce6:	f7fe fb3f 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8005cea:	0003      	movs	r3, r0
 8005cec:	61bb      	str	r3, [r7, #24]
        break;
 8005cee:	e00a      	b.n	8005d06 <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005cf0:	2380      	movs	r3, #128	; 0x80
 8005cf2:	021b      	lsls	r3, r3, #8
 8005cf4:	61bb      	str	r3, [r7, #24]
        break;
 8005cf6:	e006      	b.n	8005d06 <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005cfc:	231e      	movs	r3, #30
 8005cfe:	18fb      	adds	r3, r7, r3
 8005d00:	2201      	movs	r2, #1
 8005d02:	701a      	strb	r2, [r3, #0]
        break;
 8005d04:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8005d06:	69bb      	ldr	r3, [r7, #24]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d100      	bne.n	8005d0e <UART_SetConfig+0x12a>
 8005d0c:	e07a      	b.n	8005e04 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8005d0e:	69bb      	ldr	r3, [r7, #24]
 8005d10:	005a      	lsls	r2, r3, #1
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	685b      	ldr	r3, [r3, #4]
 8005d16:	085b      	lsrs	r3, r3, #1
 8005d18:	18d2      	adds	r2, r2, r3
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	685b      	ldr	r3, [r3, #4]
 8005d1e:	0019      	movs	r1, r3
 8005d20:	0010      	movs	r0, r2
 8005d22:	f7fa f9fb 	bl	800011c <__udivsi3>
 8005d26:	0003      	movs	r3, r0
 8005d28:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005d2a:	693b      	ldr	r3, [r7, #16]
 8005d2c:	2b0f      	cmp	r3, #15
 8005d2e:	d91c      	bls.n	8005d6a <UART_SetConfig+0x186>
 8005d30:	693a      	ldr	r2, [r7, #16]
 8005d32:	2380      	movs	r3, #128	; 0x80
 8005d34:	025b      	lsls	r3, r3, #9
 8005d36:	429a      	cmp	r2, r3
 8005d38:	d217      	bcs.n	8005d6a <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8005d3a:	693b      	ldr	r3, [r7, #16]
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	200e      	movs	r0, #14
 8005d40:	183b      	adds	r3, r7, r0
 8005d42:	210f      	movs	r1, #15
 8005d44:	438a      	bics	r2, r1
 8005d46:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8005d48:	693b      	ldr	r3, [r7, #16]
 8005d4a:	085b      	lsrs	r3, r3, #1
 8005d4c:	b29b      	uxth	r3, r3
 8005d4e:	2207      	movs	r2, #7
 8005d50:	4013      	ands	r3, r2
 8005d52:	b299      	uxth	r1, r3
 8005d54:	183b      	adds	r3, r7, r0
 8005d56:	183a      	adds	r2, r7, r0
 8005d58:	8812      	ldrh	r2, [r2, #0]
 8005d5a:	430a      	orrs	r2, r1
 8005d5c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	183a      	adds	r2, r7, r0
 8005d64:	8812      	ldrh	r2, [r2, #0]
 8005d66:	60da      	str	r2, [r3, #12]
 8005d68:	e04c      	b.n	8005e04 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005d6a:	231e      	movs	r3, #30
 8005d6c:	18fb      	adds	r3, r7, r3
 8005d6e:	2201      	movs	r2, #1
 8005d70:	701a      	strb	r2, [r3, #0]
 8005d72:	e047      	b.n	8005e04 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 8005d74:	231f      	movs	r3, #31
 8005d76:	18fb      	adds	r3, r7, r3
 8005d78:	781b      	ldrb	r3, [r3, #0]
 8005d7a:	2b08      	cmp	r3, #8
 8005d7c:	d015      	beq.n	8005daa <UART_SetConfig+0x1c6>
 8005d7e:	dc18      	bgt.n	8005db2 <UART_SetConfig+0x1ce>
 8005d80:	2b04      	cmp	r3, #4
 8005d82:	d00d      	beq.n	8005da0 <UART_SetConfig+0x1bc>
 8005d84:	dc15      	bgt.n	8005db2 <UART_SetConfig+0x1ce>
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d002      	beq.n	8005d90 <UART_SetConfig+0x1ac>
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d005      	beq.n	8005d9a <UART_SetConfig+0x1b6>
 8005d8e:	e010      	b.n	8005db2 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8005d90:	f7fe fb4a 	bl	8004428 <HAL_RCC_GetPCLK1Freq>
 8005d94:	0003      	movs	r3, r0
 8005d96:	61bb      	str	r3, [r7, #24]
        break;
 8005d98:	e012      	b.n	8005dc0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8005d9a:	4b25      	ldr	r3, [pc, #148]	; (8005e30 <UART_SetConfig+0x24c>)
 8005d9c:	61bb      	str	r3, [r7, #24]
        break;
 8005d9e:	e00f      	b.n	8005dc0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8005da0:	f7fe fae2 	bl	8004368 <HAL_RCC_GetSysClockFreq>
 8005da4:	0003      	movs	r3, r0
 8005da6:	61bb      	str	r3, [r7, #24]
        break;
 8005da8:	e00a      	b.n	8005dc0 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8005daa:	2380      	movs	r3, #128	; 0x80
 8005dac:	021b      	lsls	r3, r3, #8
 8005dae:	61bb      	str	r3, [r7, #24]
        break;
 8005db0:	e006      	b.n	8005dc0 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8005db2:	2300      	movs	r3, #0
 8005db4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8005db6:	231e      	movs	r3, #30
 8005db8:	18fb      	adds	r3, r7, r3
 8005dba:	2201      	movs	r2, #1
 8005dbc:	701a      	strb	r2, [r3, #0]
        break;
 8005dbe:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01e      	beq.n	8005e04 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	685b      	ldr	r3, [r3, #4]
 8005dca:	085a      	lsrs	r2, r3, #1
 8005dcc:	69bb      	ldr	r3, [r7, #24]
 8005dce:	18d2      	adds	r2, r2, r3
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	0019      	movs	r1, r3
 8005dd6:	0010      	movs	r0, r2
 8005dd8:	f7fa f9a0 	bl	800011c <__udivsi3>
 8005ddc:	0003      	movs	r3, r0
 8005dde:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	2b0f      	cmp	r3, #15
 8005de4:	d90a      	bls.n	8005dfc <UART_SetConfig+0x218>
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	2380      	movs	r3, #128	; 0x80
 8005dea:	025b      	lsls	r3, r3, #9
 8005dec:	429a      	cmp	r2, r3
 8005dee:	d205      	bcs.n	8005dfc <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8005df0:	693b      	ldr	r3, [r7, #16]
 8005df2:	b29a      	uxth	r2, r3
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	60da      	str	r2, [r3, #12]
 8005dfa:	e003      	b.n	8005e04 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8005dfc:	231e      	movs	r3, #30
 8005dfe:	18fb      	adds	r3, r7, r3
 8005e00:	2201      	movs	r2, #1
 8005e02:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	2200      	movs	r2, #0
 8005e08:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8005e10:	231e      	movs	r3, #30
 8005e12:	18fb      	adds	r3, r7, r3
 8005e14:	781b      	ldrb	r3, [r3, #0]
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b008      	add	sp, #32
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	46c0      	nop			; (mov r8, r8)
 8005e20:	ffff69f3 	.word	0xffff69f3
 8005e24:	ffffcfff 	.word	0xffffcfff
 8005e28:	fffff4ff 	.word	0xfffff4ff
 8005e2c:	40021000 	.word	0x40021000
 8005e30:	007a1200 	.word	0x007a1200

08005e34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b082      	sub	sp, #8
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e40:	2201      	movs	r2, #1
 8005e42:	4013      	ands	r3, r2
 8005e44:	d00b      	beq.n	8005e5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	685b      	ldr	r3, [r3, #4]
 8005e4c:	4a4a      	ldr	r2, [pc, #296]	; (8005f78 <UART_AdvFeatureConfig+0x144>)
 8005e4e:	4013      	ands	r3, r2
 8005e50:	0019      	movs	r1, r3
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	430a      	orrs	r2, r1
 8005e5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e62:	2202      	movs	r2, #2
 8005e64:	4013      	ands	r3, r2
 8005e66:	d00b      	beq.n	8005e80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	685b      	ldr	r3, [r3, #4]
 8005e6e:	4a43      	ldr	r2, [pc, #268]	; (8005f7c <UART_AdvFeatureConfig+0x148>)
 8005e70:	4013      	ands	r3, r2
 8005e72:	0019      	movs	r1, r3
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	430a      	orrs	r2, r1
 8005e7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e84:	2204      	movs	r2, #4
 8005e86:	4013      	ands	r3, r2
 8005e88:	d00b      	beq.n	8005ea2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	685b      	ldr	r3, [r3, #4]
 8005e90:	4a3b      	ldr	r2, [pc, #236]	; (8005f80 <UART_AdvFeatureConfig+0x14c>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	0019      	movs	r1, r3
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	430a      	orrs	r2, r1
 8005ea0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ea6:	2208      	movs	r2, #8
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	d00b      	beq.n	8005ec4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	685b      	ldr	r3, [r3, #4]
 8005eb2:	4a34      	ldr	r2, [pc, #208]	; (8005f84 <UART_AdvFeatureConfig+0x150>)
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	0019      	movs	r1, r3
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	430a      	orrs	r2, r1
 8005ec2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ec8:	2210      	movs	r2, #16
 8005eca:	4013      	ands	r3, r2
 8005ecc:	d00b      	beq.n	8005ee6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	689b      	ldr	r3, [r3, #8]
 8005ed4:	4a2c      	ldr	r2, [pc, #176]	; (8005f88 <UART_AdvFeatureConfig+0x154>)
 8005ed6:	4013      	ands	r3, r2
 8005ed8:	0019      	movs	r1, r3
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	430a      	orrs	r2, r1
 8005ee4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005eea:	2220      	movs	r2, #32
 8005eec:	4013      	ands	r3, r2
 8005eee:	d00b      	beq.n	8005f08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	4a25      	ldr	r2, [pc, #148]	; (8005f8c <UART_AdvFeatureConfig+0x158>)
 8005ef8:	4013      	ands	r3, r2
 8005efa:	0019      	movs	r1, r3
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	430a      	orrs	r2, r1
 8005f06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f0c:	2240      	movs	r2, #64	; 0x40
 8005f0e:	4013      	ands	r3, r2
 8005f10:	d01d      	beq.n	8005f4e <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	685b      	ldr	r3, [r3, #4]
 8005f18:	4a1d      	ldr	r2, [pc, #116]	; (8005f90 <UART_AdvFeatureConfig+0x15c>)
 8005f1a:	4013      	ands	r3, r2
 8005f1c:	0019      	movs	r1, r3
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	430a      	orrs	r2, r1
 8005f28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005f2e:	2380      	movs	r3, #128	; 0x80
 8005f30:	035b      	lsls	r3, r3, #13
 8005f32:	429a      	cmp	r2, r3
 8005f34:	d10b      	bne.n	8005f4e <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	685b      	ldr	r3, [r3, #4]
 8005f3c:	4a15      	ldr	r2, [pc, #84]	; (8005f94 <UART_AdvFeatureConfig+0x160>)
 8005f3e:	4013      	ands	r3, r2
 8005f40:	0019      	movs	r1, r3
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	430a      	orrs	r2, r1
 8005f4c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	2280      	movs	r2, #128	; 0x80
 8005f54:	4013      	ands	r3, r2
 8005f56:	d00b      	beq.n	8005f70 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	685b      	ldr	r3, [r3, #4]
 8005f5e:	4a0e      	ldr	r2, [pc, #56]	; (8005f98 <UART_AdvFeatureConfig+0x164>)
 8005f60:	4013      	ands	r3, r2
 8005f62:	0019      	movs	r1, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	430a      	orrs	r2, r1
 8005f6e:	605a      	str	r2, [r3, #4]
  }
}
 8005f70:	46c0      	nop			; (mov r8, r8)
 8005f72:	46bd      	mov	sp, r7
 8005f74:	b002      	add	sp, #8
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	fffdffff 	.word	0xfffdffff
 8005f7c:	fffeffff 	.word	0xfffeffff
 8005f80:	fffbffff 	.word	0xfffbffff
 8005f84:	ffff7fff 	.word	0xffff7fff
 8005f88:	ffffefff 	.word	0xffffefff
 8005f8c:	ffffdfff 	.word	0xffffdfff
 8005f90:	ffefffff 	.word	0xffefffff
 8005f94:	ff9fffff 	.word	0xff9fffff
 8005f98:	fff7ffff 	.word	0xfff7ffff

08005f9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b092      	sub	sp, #72	; 0x48
 8005fa0:	af02      	add	r7, sp, #8
 8005fa2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2284      	movs	r2, #132	; 0x84
 8005fa8:	2100      	movs	r1, #0
 8005faa:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005fac:	f7fc f936 	bl	800221c <HAL_GetTick>
 8005fb0:	0003      	movs	r3, r0
 8005fb2:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2208      	movs	r2, #8
 8005fbc:	4013      	ands	r3, r2
 8005fbe:	2b08      	cmp	r3, #8
 8005fc0:	d12c      	bne.n	800601c <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005fc2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005fc4:	2280      	movs	r2, #128	; 0x80
 8005fc6:	0391      	lsls	r1, r2, #14
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	4a46      	ldr	r2, [pc, #280]	; (80060e4 <UART_CheckIdleState+0x148>)
 8005fcc:	9200      	str	r2, [sp, #0]
 8005fce:	2200      	movs	r2, #0
 8005fd0:	f000 f88c 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 8005fd4:	1e03      	subs	r3, r0, #0
 8005fd6:	d021      	beq.n	800601c <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005fd8:	f3ef 8310 	mrs	r3, PRIMASK
 8005fdc:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8005fde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8005fe0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe8:	f383 8810 	msr	PRIMASK, r3
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	2180      	movs	r1, #128	; 0x80
 8005ffa:	438a      	bics	r2, r1
 8005ffc:	601a      	str	r2, [r3, #0]
 8005ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006000:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006002:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006004:	f383 8810 	msr	PRIMASK, r3
}
 8006008:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	2220      	movs	r2, #32
 800600e:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2278      	movs	r2, #120	; 0x78
 8006014:	2100      	movs	r1, #0
 8006016:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006018:	2303      	movs	r3, #3
 800601a:	e05f      	b.n	80060dc <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2204      	movs	r2, #4
 8006024:	4013      	ands	r3, r2
 8006026:	2b04      	cmp	r3, #4
 8006028:	d146      	bne.n	80060b8 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800602a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800602c:	2280      	movs	r2, #128	; 0x80
 800602e:	03d1      	lsls	r1, r2, #15
 8006030:	6878      	ldr	r0, [r7, #4]
 8006032:	4a2c      	ldr	r2, [pc, #176]	; (80060e4 <UART_CheckIdleState+0x148>)
 8006034:	9200      	str	r2, [sp, #0]
 8006036:	2200      	movs	r2, #0
 8006038:	f000 f858 	bl	80060ec <UART_WaitOnFlagUntilTimeout>
 800603c:	1e03      	subs	r3, r0, #0
 800603e:	d03b      	beq.n	80060b8 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006040:	f3ef 8310 	mrs	r3, PRIMASK
 8006044:	60fb      	str	r3, [r7, #12]
  return(result);
 8006046:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006048:	637b      	str	r3, [r7, #52]	; 0x34
 800604a:	2301      	movs	r3, #1
 800604c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800604e:	693b      	ldr	r3, [r7, #16]
 8006050:	f383 8810 	msr	PRIMASK, r3
}
 8006054:	46c0      	nop			; (mov r8, r8)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	681a      	ldr	r2, [r3, #0]
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	4921      	ldr	r1, [pc, #132]	; (80060e8 <UART_CheckIdleState+0x14c>)
 8006062:	400a      	ands	r2, r1
 8006064:	601a      	str	r2, [r3, #0]
 8006066:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006068:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	f383 8810 	msr	PRIMASK, r3
}
 8006070:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006072:	f3ef 8310 	mrs	r3, PRIMASK
 8006076:	61bb      	str	r3, [r7, #24]
  return(result);
 8006078:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800607a:	633b      	str	r3, [r7, #48]	; 0x30
 800607c:	2301      	movs	r3, #1
 800607e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006080:	69fb      	ldr	r3, [r7, #28]
 8006082:	f383 8810 	msr	PRIMASK, r3
}
 8006086:	46c0      	nop			; (mov r8, r8)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	689a      	ldr	r2, [r3, #8]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	2101      	movs	r1, #1
 8006094:	438a      	bics	r2, r1
 8006096:	609a      	str	r2, [r3, #8]
 8006098:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800609a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800609c:	6a3b      	ldr	r3, [r7, #32]
 800609e:	f383 8810 	msr	PRIMASK, r3
}
 80060a2:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2280      	movs	r2, #128	; 0x80
 80060a8:	2120      	movs	r1, #32
 80060aa:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2278      	movs	r2, #120	; 0x78
 80060b0:	2100      	movs	r1, #0
 80060b2:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80060b4:	2303      	movs	r3, #3
 80060b6:	e011      	b.n	80060dc <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2220      	movs	r2, #32
 80060bc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2280      	movs	r2, #128	; 0x80
 80060c2:	2120      	movs	r1, #32
 80060c4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2200      	movs	r2, #0
 80060ca:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2200      	movs	r2, #0
 80060d0:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2278      	movs	r2, #120	; 0x78
 80060d6:	2100      	movs	r1, #0
 80060d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80060da:	2300      	movs	r3, #0
}
 80060dc:	0018      	movs	r0, r3
 80060de:	46bd      	mov	sp, r7
 80060e0:	b010      	add	sp, #64	; 0x40
 80060e2:	bd80      	pop	{r7, pc}
 80060e4:	01ffffff 	.word	0x01ffffff
 80060e8:	fffffedf 	.word	0xfffffedf

080060ec <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80060ec:	b580      	push	{r7, lr}
 80060ee:	b084      	sub	sp, #16
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	60f8      	str	r0, [r7, #12]
 80060f4:	60b9      	str	r1, [r7, #8]
 80060f6:	603b      	str	r3, [r7, #0]
 80060f8:	1dfb      	adds	r3, r7, #7
 80060fa:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80060fc:	e04b      	b.n	8006196 <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80060fe:	69bb      	ldr	r3, [r7, #24]
 8006100:	3301      	adds	r3, #1
 8006102:	d048      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006104:	f7fc f88a 	bl	800221c <HAL_GetTick>
 8006108:	0002      	movs	r2, r0
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	1ad3      	subs	r3, r2, r3
 800610e:	69ba      	ldr	r2, [r7, #24]
 8006110:	429a      	cmp	r2, r3
 8006112:	d302      	bcc.n	800611a <UART_WaitOnFlagUntilTimeout+0x2e>
 8006114:	69bb      	ldr	r3, [r7, #24]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 800611a:	2303      	movs	r3, #3
 800611c:	e04b      	b.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	2204      	movs	r2, #4
 8006126:	4013      	ands	r3, r2
 8006128:	d035      	beq.n	8006196 <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	69db      	ldr	r3, [r3, #28]
 8006130:	2208      	movs	r2, #8
 8006132:	4013      	ands	r3, r2
 8006134:	2b08      	cmp	r3, #8
 8006136:	d111      	bne.n	800615c <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2208      	movs	r2, #8
 800613e:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	0018      	movs	r0, r3
 8006144:	f000 f860 	bl	8006208 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	2284      	movs	r2, #132	; 0x84
 800614c:	2108      	movs	r1, #8
 800614e:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	2278      	movs	r2, #120	; 0x78
 8006154:	2100      	movs	r1, #0
 8006156:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8006158:	2301      	movs	r3, #1
 800615a:	e02c      	b.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	69da      	ldr	r2, [r3, #28]
 8006162:	2380      	movs	r3, #128	; 0x80
 8006164:	011b      	lsls	r3, r3, #4
 8006166:	401a      	ands	r2, r3
 8006168:	2380      	movs	r3, #128	; 0x80
 800616a:	011b      	lsls	r3, r3, #4
 800616c:	429a      	cmp	r2, r3
 800616e:	d112      	bne.n	8006196 <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	2280      	movs	r2, #128	; 0x80
 8006176:	0112      	lsls	r2, r2, #4
 8006178:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	0018      	movs	r0, r3
 800617e:	f000 f843 	bl	8006208 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2284      	movs	r2, #132	; 0x84
 8006186:	2120      	movs	r1, #32
 8006188:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2278      	movs	r2, #120	; 0x78
 800618e:	2100      	movs	r1, #0
 8006190:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006192:	2303      	movs	r3, #3
 8006194:	e00f      	b.n	80061b6 <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	681b      	ldr	r3, [r3, #0]
 800619a:	69db      	ldr	r3, [r3, #28]
 800619c:	68ba      	ldr	r2, [r7, #8]
 800619e:	4013      	ands	r3, r2
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	1ad3      	subs	r3, r2, r3
 80061a4:	425a      	negs	r2, r3
 80061a6:	4153      	adcs	r3, r2
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	001a      	movs	r2, r3
 80061ac:	1dfb      	adds	r3, r7, #7
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d0a4      	beq.n	80060fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	0018      	movs	r0, r3
 80061b8:	46bd      	mov	sp, r7
 80061ba:	b004      	add	sp, #16
 80061bc:	bd80      	pop	{r7, pc}

080061be <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061be:	b580      	push	{r7, lr}
 80061c0:	b086      	sub	sp, #24
 80061c2:	af00      	add	r7, sp, #0
 80061c4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061c6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ca:	60bb      	str	r3, [r7, #8]
  return(result);
 80061cc:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061ce:	617b      	str	r3, [r7, #20]
 80061d0:	2301      	movs	r3, #1
 80061d2:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	f383 8810 	msr	PRIMASK, r3
}
 80061da:	46c0      	nop			; (mov r8, r8)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	21c0      	movs	r1, #192	; 0xc0
 80061e8:	438a      	bics	r2, r1
 80061ea:	601a      	str	r2, [r3, #0]
 80061ec:	697b      	ldr	r3, [r7, #20]
 80061ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	f383 8810 	msr	PRIMASK, r3
}
 80061f6:	46c0      	nop			; (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	2220      	movs	r2, #32
 80061fc:	67da      	str	r2, [r3, #124]	; 0x7c
}
 80061fe:	46c0      	nop			; (mov r8, r8)
 8006200:	46bd      	mov	sp, r7
 8006202:	b006      	add	sp, #24
 8006204:	bd80      	pop	{r7, pc}
	...

08006208 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b08e      	sub	sp, #56	; 0x38
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006210:	f3ef 8310 	mrs	r3, PRIMASK
 8006214:	617b      	str	r3, [r7, #20]
  return(result);
 8006216:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006218:	637b      	str	r3, [r7, #52]	; 0x34
 800621a:	2301      	movs	r3, #1
 800621c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800621e:	69bb      	ldr	r3, [r7, #24]
 8006220:	f383 8810 	msr	PRIMASK, r3
}
 8006224:	46c0      	nop			; (mov r8, r8)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681a      	ldr	r2, [r3, #0]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	4926      	ldr	r1, [pc, #152]	; (80062cc <UART_EndRxTransfer+0xc4>)
 8006232:	400a      	ands	r2, r1
 8006234:	601a      	str	r2, [r3, #0]
 8006236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006238:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800623a:	69fb      	ldr	r3, [r7, #28]
 800623c:	f383 8810 	msr	PRIMASK, r3
}
 8006240:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006242:	f3ef 8310 	mrs	r3, PRIMASK
 8006246:	623b      	str	r3, [r7, #32]
  return(result);
 8006248:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800624a:	633b      	str	r3, [r7, #48]	; 0x30
 800624c:	2301      	movs	r3, #1
 800624e:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006252:	f383 8810 	msr	PRIMASK, r3
}
 8006256:	46c0      	nop			; (mov r8, r8)
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	689a      	ldr	r2, [r3, #8]
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2101      	movs	r1, #1
 8006264:	438a      	bics	r2, r1
 8006266:	609a      	str	r2, [r3, #8]
 8006268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800626c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800626e:	f383 8810 	msr	PRIMASK, r3
}
 8006272:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006278:	2b01      	cmp	r3, #1
 800627a:	d118      	bne.n	80062ae <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800627c:	f3ef 8310 	mrs	r3, PRIMASK
 8006280:	60bb      	str	r3, [r7, #8]
  return(result);
 8006282:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006284:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006286:	2301      	movs	r3, #1
 8006288:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	f383 8810 	msr	PRIMASK, r3
}
 8006290:	46c0      	nop			; (mov r8, r8)
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2110      	movs	r1, #16
 800629e:	438a      	bics	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]
 80062a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062a4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	f383 8810 	msr	PRIMASK, r3
}
 80062ac:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2280      	movs	r2, #128	; 0x80
 80062b2:	2120      	movs	r1, #32
 80062b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2200      	movs	r2, #0
 80062ba:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2200      	movs	r2, #0
 80062c0:	669a      	str	r2, [r3, #104]	; 0x68
}
 80062c2:	46c0      	nop			; (mov r8, r8)
 80062c4:	46bd      	mov	sp, r7
 80062c6:	b00e      	add	sp, #56	; 0x38
 80062c8:	bd80      	pop	{r7, pc}
 80062ca:	46c0      	nop			; (mov r8, r8)
 80062cc:	fffffedf 	.word	0xfffffedf

080062d0 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b08c      	sub	sp, #48	; 0x30
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062dc:	62fb      	str	r3, [r7, #44]	; 0x2c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	699b      	ldr	r3, [r3, #24]
 80062e2:	2b20      	cmp	r3, #32
 80062e4:	d035      	beq.n	8006352 <UART_DMATransmitCplt+0x82>
  {
    huart->TxXferCount = 0U;
 80062e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062e8:	2252      	movs	r2, #82	; 0x52
 80062ea:	2100      	movs	r1, #0
 80062ec:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062ee:	f3ef 8310 	mrs	r3, PRIMASK
 80062f2:	60fb      	str	r3, [r7, #12]
  return(result);
 80062f4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80062f6:	62bb      	str	r3, [r7, #40]	; 0x28
 80062f8:	2301      	movs	r3, #1
 80062fa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fc:	693b      	ldr	r3, [r7, #16]
 80062fe:	f383 8810 	msr	PRIMASK, r3
}
 8006302:	46c0      	nop			; (mov r8, r8)
 8006304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	689a      	ldr	r2, [r3, #8]
 800630a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	2180      	movs	r1, #128	; 0x80
 8006310:	438a      	bics	r2, r1
 8006312:	609a      	str	r2, [r3, #8]
 8006314:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006316:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006318:	697b      	ldr	r3, [r7, #20]
 800631a:	f383 8810 	msr	PRIMASK, r3
}
 800631e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006320:	f3ef 8310 	mrs	r3, PRIMASK
 8006324:	61bb      	str	r3, [r7, #24]
  return(result);
 8006326:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006328:	627b      	str	r3, [r7, #36]	; 0x24
 800632a:	2301      	movs	r3, #1
 800632c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800632e:	69fb      	ldr	r3, [r7, #28]
 8006330:	f383 8810 	msr	PRIMASK, r3
}
 8006334:	46c0      	nop			; (mov r8, r8)
 8006336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	681a      	ldr	r2, [r3, #0]
 800633c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	2140      	movs	r1, #64	; 0x40
 8006342:	430a      	orrs	r2, r1
 8006344:	601a      	str	r2, [r3, #0]
 8006346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006348:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800634a:	6a3b      	ldr	r3, [r7, #32]
 800634c:	f383 8810 	msr	PRIMASK, r3
}
 8006350:	e004      	b.n	800635c <UART_DMATransmitCplt+0x8c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
 8006352:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006354:	0018      	movs	r0, r3
 8006356:	f7fb fc9f 	bl	8001c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800635a:	46c0      	nop			; (mov r8, r8)
 800635c:	46c0      	nop			; (mov r8, r8)
 800635e:	46bd      	mov	sp, r7
 8006360:	b00c      	add	sp, #48	; 0x30
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8006364:	b580      	push	{r7, lr}
 8006366:	b084      	sub	sp, #16
 8006368:	af00      	add	r7, sp, #0
 800636a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006370:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	0018      	movs	r0, r3
 8006376:	f7ff fc19 	bl	8005bac <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800637a:	46c0      	nop			; (mov r8, r8)
 800637c:	46bd      	mov	sp, r7
 800637e:	b004      	add	sp, #16
 8006380:	bd80      	pop	{r7, pc}

08006382 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8006382:	b580      	push	{r7, lr}
 8006384:	b086      	sub	sp, #24
 8006386:	af00      	add	r7, sp, #0
 8006388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638e:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006394:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8006396:	697b      	ldr	r3, [r7, #20]
 8006398:	2280      	movs	r2, #128	; 0x80
 800639a:	589b      	ldr	r3, [r3, r2]
 800639c:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	689b      	ldr	r3, [r3, #8]
 80063a4:	2280      	movs	r2, #128	; 0x80
 80063a6:	4013      	ands	r3, r2
 80063a8:	2b80      	cmp	r3, #128	; 0x80
 80063aa:	d10a      	bne.n	80063c2 <UART_DMAError+0x40>
 80063ac:	693b      	ldr	r3, [r7, #16]
 80063ae:	2b21      	cmp	r3, #33	; 0x21
 80063b0:	d107      	bne.n	80063c2 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80063b2:	697b      	ldr	r3, [r7, #20]
 80063b4:	2252      	movs	r2, #82	; 0x52
 80063b6:	2100      	movs	r1, #0
 80063b8:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 80063ba:	697b      	ldr	r3, [r7, #20]
 80063bc:	0018      	movs	r0, r3
 80063be:	f7ff fefe 	bl	80061be <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80063c2:	697b      	ldr	r3, [r7, #20]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	689b      	ldr	r3, [r3, #8]
 80063c8:	2240      	movs	r2, #64	; 0x40
 80063ca:	4013      	ands	r3, r2
 80063cc:	2b40      	cmp	r3, #64	; 0x40
 80063ce:	d10a      	bne.n	80063e6 <UART_DMAError+0x64>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b22      	cmp	r3, #34	; 0x22
 80063d4:	d107      	bne.n	80063e6 <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	225a      	movs	r2, #90	; 0x5a
 80063da:	2100      	movs	r1, #0
 80063dc:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 80063de:	697b      	ldr	r3, [r7, #20]
 80063e0:	0018      	movs	r0, r3
 80063e2:	f7ff ff11 	bl	8006208 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	2284      	movs	r2, #132	; 0x84
 80063ea:	589b      	ldr	r3, [r3, r2]
 80063ec:	2210      	movs	r2, #16
 80063ee:	431a      	orrs	r2, r3
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	2184      	movs	r1, #132	; 0x84
 80063f4:	505a      	str	r2, [r3, r1]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	0018      	movs	r0, r3
 80063fa:	f7ff fbdf 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80063fe:	46c0      	nop			; (mov r8, r8)
 8006400:	46bd      	mov	sp, r7
 8006402:	b006      	add	sp, #24
 8006404:	bd80      	pop	{r7, pc}

08006406 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006406:	b580      	push	{r7, lr}
 8006408:	b084      	sub	sp, #16
 800640a:	af00      	add	r7, sp, #0
 800640c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006412:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	225a      	movs	r2, #90	; 0x5a
 8006418:	2100      	movs	r1, #0
 800641a:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 800641c:	68fb      	ldr	r3, [r7, #12]
 800641e:	2252      	movs	r2, #82	; 0x52
 8006420:	2100      	movs	r1, #0
 8006422:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	0018      	movs	r0, r3
 8006428:	f7ff fbc8 	bl	8005bbc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800642c:	46c0      	nop			; (mov r8, r8)
 800642e:	46bd      	mov	sp, r7
 8006430:	b004      	add	sp, #16
 8006432:	bd80      	pop	{r7, pc}

08006434 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006434:	b580      	push	{r7, lr}
 8006436:	b086      	sub	sp, #24
 8006438:	af00      	add	r7, sp, #0
 800643a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800643c:	f3ef 8310 	mrs	r3, PRIMASK
 8006440:	60bb      	str	r3, [r7, #8]
  return(result);
 8006442:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006444:	617b      	str	r3, [r7, #20]
 8006446:	2301      	movs	r3, #1
 8006448:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	f383 8810 	msr	PRIMASK, r3
}
 8006450:	46c0      	nop			; (mov r8, r8)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	681a      	ldr	r2, [r3, #0]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	681b      	ldr	r3, [r3, #0]
 800645c:	2140      	movs	r1, #64	; 0x40
 800645e:	438a      	bics	r2, r1
 8006460:	601a      	str	r2, [r3, #0]
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006466:	693b      	ldr	r3, [r7, #16]
 8006468:	f383 8810 	msr	PRIMASK, r3
}
 800646c:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2220      	movs	r2, #32
 8006472:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	2200      	movs	r2, #0
 8006478:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	0018      	movs	r0, r3
 800647e:	f7fb fc0b 	bl	8001c98 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006482:	46c0      	nop			; (mov r8, r8)
 8006484:	46bd      	mov	sp, r7
 8006486:	b006      	add	sp, #24
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <siprintf>:
 800648c:	b40e      	push	{r1, r2, r3}
 800648e:	b500      	push	{lr}
 8006490:	490b      	ldr	r1, [pc, #44]	; (80064c0 <siprintf+0x34>)
 8006492:	b09c      	sub	sp, #112	; 0x70
 8006494:	ab1d      	add	r3, sp, #116	; 0x74
 8006496:	9002      	str	r0, [sp, #8]
 8006498:	9006      	str	r0, [sp, #24]
 800649a:	9107      	str	r1, [sp, #28]
 800649c:	9104      	str	r1, [sp, #16]
 800649e:	4809      	ldr	r0, [pc, #36]	; (80064c4 <siprintf+0x38>)
 80064a0:	4909      	ldr	r1, [pc, #36]	; (80064c8 <siprintf+0x3c>)
 80064a2:	cb04      	ldmia	r3!, {r2}
 80064a4:	9105      	str	r1, [sp, #20]
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	a902      	add	r1, sp, #8
 80064aa:	9301      	str	r3, [sp, #4]
 80064ac:	f000 f9a2 	bl	80067f4 <_svfiprintf_r>
 80064b0:	2200      	movs	r2, #0
 80064b2:	9b02      	ldr	r3, [sp, #8]
 80064b4:	701a      	strb	r2, [r3, #0]
 80064b6:	b01c      	add	sp, #112	; 0x70
 80064b8:	bc08      	pop	{r3}
 80064ba:	b003      	add	sp, #12
 80064bc:	4718      	bx	r3
 80064be:	46c0      	nop			; (mov r8, r8)
 80064c0:	7fffffff 	.word	0x7fffffff
 80064c4:	2000005c 	.word	0x2000005c
 80064c8:	ffff0208 	.word	0xffff0208

080064cc <memset>:
 80064cc:	0003      	movs	r3, r0
 80064ce:	1882      	adds	r2, r0, r2
 80064d0:	4293      	cmp	r3, r2
 80064d2:	d100      	bne.n	80064d6 <memset+0xa>
 80064d4:	4770      	bx	lr
 80064d6:	7019      	strb	r1, [r3, #0]
 80064d8:	3301      	adds	r3, #1
 80064da:	e7f9      	b.n	80064d0 <memset+0x4>

080064dc <__errno>:
 80064dc:	4b01      	ldr	r3, [pc, #4]	; (80064e4 <__errno+0x8>)
 80064de:	6818      	ldr	r0, [r3, #0]
 80064e0:	4770      	bx	lr
 80064e2:	46c0      	nop			; (mov r8, r8)
 80064e4:	2000005c 	.word	0x2000005c

080064e8 <__libc_init_array>:
 80064e8:	b570      	push	{r4, r5, r6, lr}
 80064ea:	2600      	movs	r6, #0
 80064ec:	4c0c      	ldr	r4, [pc, #48]	; (8006520 <__libc_init_array+0x38>)
 80064ee:	4d0d      	ldr	r5, [pc, #52]	; (8006524 <__libc_init_array+0x3c>)
 80064f0:	1b64      	subs	r4, r4, r5
 80064f2:	10a4      	asrs	r4, r4, #2
 80064f4:	42a6      	cmp	r6, r4
 80064f6:	d109      	bne.n	800650c <__libc_init_array+0x24>
 80064f8:	2600      	movs	r6, #0
 80064fa:	f000 fc6d 	bl	8006dd8 <_init>
 80064fe:	4c0a      	ldr	r4, [pc, #40]	; (8006528 <__libc_init_array+0x40>)
 8006500:	4d0a      	ldr	r5, [pc, #40]	; (800652c <__libc_init_array+0x44>)
 8006502:	1b64      	subs	r4, r4, r5
 8006504:	10a4      	asrs	r4, r4, #2
 8006506:	42a6      	cmp	r6, r4
 8006508:	d105      	bne.n	8006516 <__libc_init_array+0x2e>
 800650a:	bd70      	pop	{r4, r5, r6, pc}
 800650c:	00b3      	lsls	r3, r6, #2
 800650e:	58eb      	ldr	r3, [r5, r3]
 8006510:	4798      	blx	r3
 8006512:	3601      	adds	r6, #1
 8006514:	e7ee      	b.n	80064f4 <__libc_init_array+0xc>
 8006516:	00b3      	lsls	r3, r6, #2
 8006518:	58eb      	ldr	r3, [r5, r3]
 800651a:	4798      	blx	r3
 800651c:	3601      	adds	r6, #1
 800651e:	e7f2      	b.n	8006506 <__libc_init_array+0x1e>
 8006520:	08006ee0 	.word	0x08006ee0
 8006524:	08006ee0 	.word	0x08006ee0
 8006528:	08006ee4 	.word	0x08006ee4
 800652c:	08006ee0 	.word	0x08006ee0

08006530 <__retarget_lock_acquire_recursive>:
 8006530:	4770      	bx	lr

08006532 <__retarget_lock_release_recursive>:
 8006532:	4770      	bx	lr

08006534 <_free_r>:
 8006534:	b570      	push	{r4, r5, r6, lr}
 8006536:	0005      	movs	r5, r0
 8006538:	2900      	cmp	r1, #0
 800653a:	d010      	beq.n	800655e <_free_r+0x2a>
 800653c:	1f0c      	subs	r4, r1, #4
 800653e:	6823      	ldr	r3, [r4, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	da00      	bge.n	8006546 <_free_r+0x12>
 8006544:	18e4      	adds	r4, r4, r3
 8006546:	0028      	movs	r0, r5
 8006548:	f000 f8e2 	bl	8006710 <__malloc_lock>
 800654c:	4a1d      	ldr	r2, [pc, #116]	; (80065c4 <_free_r+0x90>)
 800654e:	6813      	ldr	r3, [r2, #0]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d105      	bne.n	8006560 <_free_r+0x2c>
 8006554:	6063      	str	r3, [r4, #4]
 8006556:	6014      	str	r4, [r2, #0]
 8006558:	0028      	movs	r0, r5
 800655a:	f000 f8e1 	bl	8006720 <__malloc_unlock>
 800655e:	bd70      	pop	{r4, r5, r6, pc}
 8006560:	42a3      	cmp	r3, r4
 8006562:	d908      	bls.n	8006576 <_free_r+0x42>
 8006564:	6820      	ldr	r0, [r4, #0]
 8006566:	1821      	adds	r1, r4, r0
 8006568:	428b      	cmp	r3, r1
 800656a:	d1f3      	bne.n	8006554 <_free_r+0x20>
 800656c:	6819      	ldr	r1, [r3, #0]
 800656e:	685b      	ldr	r3, [r3, #4]
 8006570:	1809      	adds	r1, r1, r0
 8006572:	6021      	str	r1, [r4, #0]
 8006574:	e7ee      	b.n	8006554 <_free_r+0x20>
 8006576:	001a      	movs	r2, r3
 8006578:	685b      	ldr	r3, [r3, #4]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d001      	beq.n	8006582 <_free_r+0x4e>
 800657e:	42a3      	cmp	r3, r4
 8006580:	d9f9      	bls.n	8006576 <_free_r+0x42>
 8006582:	6811      	ldr	r1, [r2, #0]
 8006584:	1850      	adds	r0, r2, r1
 8006586:	42a0      	cmp	r0, r4
 8006588:	d10b      	bne.n	80065a2 <_free_r+0x6e>
 800658a:	6820      	ldr	r0, [r4, #0]
 800658c:	1809      	adds	r1, r1, r0
 800658e:	1850      	adds	r0, r2, r1
 8006590:	6011      	str	r1, [r2, #0]
 8006592:	4283      	cmp	r3, r0
 8006594:	d1e0      	bne.n	8006558 <_free_r+0x24>
 8006596:	6818      	ldr	r0, [r3, #0]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	1841      	adds	r1, r0, r1
 800659c:	6011      	str	r1, [r2, #0]
 800659e:	6053      	str	r3, [r2, #4]
 80065a0:	e7da      	b.n	8006558 <_free_r+0x24>
 80065a2:	42a0      	cmp	r0, r4
 80065a4:	d902      	bls.n	80065ac <_free_r+0x78>
 80065a6:	230c      	movs	r3, #12
 80065a8:	602b      	str	r3, [r5, #0]
 80065aa:	e7d5      	b.n	8006558 <_free_r+0x24>
 80065ac:	6820      	ldr	r0, [r4, #0]
 80065ae:	1821      	adds	r1, r4, r0
 80065b0:	428b      	cmp	r3, r1
 80065b2:	d103      	bne.n	80065bc <_free_r+0x88>
 80065b4:	6819      	ldr	r1, [r3, #0]
 80065b6:	685b      	ldr	r3, [r3, #4]
 80065b8:	1809      	adds	r1, r1, r0
 80065ba:	6021      	str	r1, [r4, #0]
 80065bc:	6063      	str	r3, [r4, #4]
 80065be:	6054      	str	r4, [r2, #4]
 80065c0:	e7ca      	b.n	8006558 <_free_r+0x24>
 80065c2:	46c0      	nop			; (mov r8, r8)
 80065c4:	200004d0 	.word	0x200004d0

080065c8 <sbrk_aligned>:
 80065c8:	b570      	push	{r4, r5, r6, lr}
 80065ca:	4e0f      	ldr	r6, [pc, #60]	; (8006608 <sbrk_aligned+0x40>)
 80065cc:	000d      	movs	r5, r1
 80065ce:	6831      	ldr	r1, [r6, #0]
 80065d0:	0004      	movs	r4, r0
 80065d2:	2900      	cmp	r1, #0
 80065d4:	d102      	bne.n	80065dc <sbrk_aligned+0x14>
 80065d6:	f000 fba1 	bl	8006d1c <_sbrk_r>
 80065da:	6030      	str	r0, [r6, #0]
 80065dc:	0029      	movs	r1, r5
 80065de:	0020      	movs	r0, r4
 80065e0:	f000 fb9c 	bl	8006d1c <_sbrk_r>
 80065e4:	1c43      	adds	r3, r0, #1
 80065e6:	d00a      	beq.n	80065fe <sbrk_aligned+0x36>
 80065e8:	2303      	movs	r3, #3
 80065ea:	1cc5      	adds	r5, r0, #3
 80065ec:	439d      	bics	r5, r3
 80065ee:	42a8      	cmp	r0, r5
 80065f0:	d007      	beq.n	8006602 <sbrk_aligned+0x3a>
 80065f2:	1a29      	subs	r1, r5, r0
 80065f4:	0020      	movs	r0, r4
 80065f6:	f000 fb91 	bl	8006d1c <_sbrk_r>
 80065fa:	3001      	adds	r0, #1
 80065fc:	d101      	bne.n	8006602 <sbrk_aligned+0x3a>
 80065fe:	2501      	movs	r5, #1
 8006600:	426d      	negs	r5, r5
 8006602:	0028      	movs	r0, r5
 8006604:	bd70      	pop	{r4, r5, r6, pc}
 8006606:	46c0      	nop			; (mov r8, r8)
 8006608:	200004d4 	.word	0x200004d4

0800660c <_malloc_r>:
 800660c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660e:	2203      	movs	r2, #3
 8006610:	1ccb      	adds	r3, r1, #3
 8006612:	4393      	bics	r3, r2
 8006614:	3308      	adds	r3, #8
 8006616:	0006      	movs	r6, r0
 8006618:	001f      	movs	r7, r3
 800661a:	2b0c      	cmp	r3, #12
 800661c:	d238      	bcs.n	8006690 <_malloc_r+0x84>
 800661e:	270c      	movs	r7, #12
 8006620:	42b9      	cmp	r1, r7
 8006622:	d837      	bhi.n	8006694 <_malloc_r+0x88>
 8006624:	0030      	movs	r0, r6
 8006626:	f000 f873 	bl	8006710 <__malloc_lock>
 800662a:	4b38      	ldr	r3, [pc, #224]	; (800670c <_malloc_r+0x100>)
 800662c:	9300      	str	r3, [sp, #0]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	001c      	movs	r4, r3
 8006632:	2c00      	cmp	r4, #0
 8006634:	d133      	bne.n	800669e <_malloc_r+0x92>
 8006636:	0039      	movs	r1, r7
 8006638:	0030      	movs	r0, r6
 800663a:	f7ff ffc5 	bl	80065c8 <sbrk_aligned>
 800663e:	0004      	movs	r4, r0
 8006640:	1c43      	adds	r3, r0, #1
 8006642:	d15e      	bne.n	8006702 <_malloc_r+0xf6>
 8006644:	9b00      	ldr	r3, [sp, #0]
 8006646:	681c      	ldr	r4, [r3, #0]
 8006648:	0025      	movs	r5, r4
 800664a:	2d00      	cmp	r5, #0
 800664c:	d14e      	bne.n	80066ec <_malloc_r+0xe0>
 800664e:	2c00      	cmp	r4, #0
 8006650:	d051      	beq.n	80066f6 <_malloc_r+0xea>
 8006652:	6823      	ldr	r3, [r4, #0]
 8006654:	0029      	movs	r1, r5
 8006656:	18e3      	adds	r3, r4, r3
 8006658:	0030      	movs	r0, r6
 800665a:	9301      	str	r3, [sp, #4]
 800665c:	f000 fb5e 	bl	8006d1c <_sbrk_r>
 8006660:	9b01      	ldr	r3, [sp, #4]
 8006662:	4283      	cmp	r3, r0
 8006664:	d147      	bne.n	80066f6 <_malloc_r+0xea>
 8006666:	6823      	ldr	r3, [r4, #0]
 8006668:	0030      	movs	r0, r6
 800666a:	1aff      	subs	r7, r7, r3
 800666c:	0039      	movs	r1, r7
 800666e:	f7ff ffab 	bl	80065c8 <sbrk_aligned>
 8006672:	3001      	adds	r0, #1
 8006674:	d03f      	beq.n	80066f6 <_malloc_r+0xea>
 8006676:	6823      	ldr	r3, [r4, #0]
 8006678:	19db      	adds	r3, r3, r7
 800667a:	6023      	str	r3, [r4, #0]
 800667c:	9b00      	ldr	r3, [sp, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d040      	beq.n	8006706 <_malloc_r+0xfa>
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	42a2      	cmp	r2, r4
 8006688:	d133      	bne.n	80066f2 <_malloc_r+0xe6>
 800668a:	2200      	movs	r2, #0
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	e014      	b.n	80066ba <_malloc_r+0xae>
 8006690:	2b00      	cmp	r3, #0
 8006692:	dac5      	bge.n	8006620 <_malloc_r+0x14>
 8006694:	230c      	movs	r3, #12
 8006696:	2500      	movs	r5, #0
 8006698:	6033      	str	r3, [r6, #0]
 800669a:	0028      	movs	r0, r5
 800669c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800669e:	6821      	ldr	r1, [r4, #0]
 80066a0:	1bc9      	subs	r1, r1, r7
 80066a2:	d420      	bmi.n	80066e6 <_malloc_r+0xda>
 80066a4:	290b      	cmp	r1, #11
 80066a6:	d918      	bls.n	80066da <_malloc_r+0xce>
 80066a8:	19e2      	adds	r2, r4, r7
 80066aa:	6027      	str	r7, [r4, #0]
 80066ac:	42a3      	cmp	r3, r4
 80066ae:	d112      	bne.n	80066d6 <_malloc_r+0xca>
 80066b0:	9b00      	ldr	r3, [sp, #0]
 80066b2:	601a      	str	r2, [r3, #0]
 80066b4:	6863      	ldr	r3, [r4, #4]
 80066b6:	6011      	str	r1, [r2, #0]
 80066b8:	6053      	str	r3, [r2, #4]
 80066ba:	0030      	movs	r0, r6
 80066bc:	0025      	movs	r5, r4
 80066be:	f000 f82f 	bl	8006720 <__malloc_unlock>
 80066c2:	2207      	movs	r2, #7
 80066c4:	350b      	adds	r5, #11
 80066c6:	1d23      	adds	r3, r4, #4
 80066c8:	4395      	bics	r5, r2
 80066ca:	1aea      	subs	r2, r5, r3
 80066cc:	429d      	cmp	r5, r3
 80066ce:	d0e4      	beq.n	800669a <_malloc_r+0x8e>
 80066d0:	1b5b      	subs	r3, r3, r5
 80066d2:	50a3      	str	r3, [r4, r2]
 80066d4:	e7e1      	b.n	800669a <_malloc_r+0x8e>
 80066d6:	605a      	str	r2, [r3, #4]
 80066d8:	e7ec      	b.n	80066b4 <_malloc_r+0xa8>
 80066da:	6862      	ldr	r2, [r4, #4]
 80066dc:	42a3      	cmp	r3, r4
 80066de:	d1d5      	bne.n	800668c <_malloc_r+0x80>
 80066e0:	9b00      	ldr	r3, [sp, #0]
 80066e2:	601a      	str	r2, [r3, #0]
 80066e4:	e7e9      	b.n	80066ba <_malloc_r+0xae>
 80066e6:	0023      	movs	r3, r4
 80066e8:	6864      	ldr	r4, [r4, #4]
 80066ea:	e7a2      	b.n	8006632 <_malloc_r+0x26>
 80066ec:	002c      	movs	r4, r5
 80066ee:	686d      	ldr	r5, [r5, #4]
 80066f0:	e7ab      	b.n	800664a <_malloc_r+0x3e>
 80066f2:	0013      	movs	r3, r2
 80066f4:	e7c4      	b.n	8006680 <_malloc_r+0x74>
 80066f6:	230c      	movs	r3, #12
 80066f8:	0030      	movs	r0, r6
 80066fa:	6033      	str	r3, [r6, #0]
 80066fc:	f000 f810 	bl	8006720 <__malloc_unlock>
 8006700:	e7cb      	b.n	800669a <_malloc_r+0x8e>
 8006702:	6027      	str	r7, [r4, #0]
 8006704:	e7d9      	b.n	80066ba <_malloc_r+0xae>
 8006706:	605b      	str	r3, [r3, #4]
 8006708:	deff      	udf	#255	; 0xff
 800670a:	46c0      	nop			; (mov r8, r8)
 800670c:	200004d0 	.word	0x200004d0

08006710 <__malloc_lock>:
 8006710:	b510      	push	{r4, lr}
 8006712:	4802      	ldr	r0, [pc, #8]	; (800671c <__malloc_lock+0xc>)
 8006714:	f7ff ff0c 	bl	8006530 <__retarget_lock_acquire_recursive>
 8006718:	bd10      	pop	{r4, pc}
 800671a:	46c0      	nop			; (mov r8, r8)
 800671c:	200004cc 	.word	0x200004cc

08006720 <__malloc_unlock>:
 8006720:	b510      	push	{r4, lr}
 8006722:	4802      	ldr	r0, [pc, #8]	; (800672c <__malloc_unlock+0xc>)
 8006724:	f7ff ff05 	bl	8006532 <__retarget_lock_release_recursive>
 8006728:	bd10      	pop	{r4, pc}
 800672a:	46c0      	nop			; (mov r8, r8)
 800672c:	200004cc 	.word	0x200004cc

08006730 <__ssputs_r>:
 8006730:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006732:	b085      	sub	sp, #20
 8006734:	9301      	str	r3, [sp, #4]
 8006736:	9203      	str	r2, [sp, #12]
 8006738:	688e      	ldr	r6, [r1, #8]
 800673a:	9a01      	ldr	r2, [sp, #4]
 800673c:	0007      	movs	r7, r0
 800673e:	000c      	movs	r4, r1
 8006740:	680b      	ldr	r3, [r1, #0]
 8006742:	4296      	cmp	r6, r2
 8006744:	d831      	bhi.n	80067aa <__ssputs_r+0x7a>
 8006746:	898a      	ldrh	r2, [r1, #12]
 8006748:	2190      	movs	r1, #144	; 0x90
 800674a:	00c9      	lsls	r1, r1, #3
 800674c:	420a      	tst	r2, r1
 800674e:	d029      	beq.n	80067a4 <__ssputs_r+0x74>
 8006750:	2003      	movs	r0, #3
 8006752:	6921      	ldr	r1, [r4, #16]
 8006754:	1a5b      	subs	r3, r3, r1
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	6963      	ldr	r3, [r4, #20]
 800675a:	4343      	muls	r3, r0
 800675c:	0fdd      	lsrs	r5, r3, #31
 800675e:	18ed      	adds	r5, r5, r3
 8006760:	9b01      	ldr	r3, [sp, #4]
 8006762:	9802      	ldr	r0, [sp, #8]
 8006764:	3301      	adds	r3, #1
 8006766:	181b      	adds	r3, r3, r0
 8006768:	106d      	asrs	r5, r5, #1
 800676a:	42ab      	cmp	r3, r5
 800676c:	d900      	bls.n	8006770 <__ssputs_r+0x40>
 800676e:	001d      	movs	r5, r3
 8006770:	0552      	lsls	r2, r2, #21
 8006772:	d529      	bpl.n	80067c8 <__ssputs_r+0x98>
 8006774:	0029      	movs	r1, r5
 8006776:	0038      	movs	r0, r7
 8006778:	f7ff ff48 	bl	800660c <_malloc_r>
 800677c:	1e06      	subs	r6, r0, #0
 800677e:	d02d      	beq.n	80067dc <__ssputs_r+0xac>
 8006780:	9a02      	ldr	r2, [sp, #8]
 8006782:	6921      	ldr	r1, [r4, #16]
 8006784:	f000 fae7 	bl	8006d56 <memcpy>
 8006788:	89a2      	ldrh	r2, [r4, #12]
 800678a:	4b19      	ldr	r3, [pc, #100]	; (80067f0 <__ssputs_r+0xc0>)
 800678c:	401a      	ands	r2, r3
 800678e:	2380      	movs	r3, #128	; 0x80
 8006790:	4313      	orrs	r3, r2
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	9b02      	ldr	r3, [sp, #8]
 8006796:	6126      	str	r6, [r4, #16]
 8006798:	18f6      	adds	r6, r6, r3
 800679a:	6026      	str	r6, [r4, #0]
 800679c:	6165      	str	r5, [r4, #20]
 800679e:	9e01      	ldr	r6, [sp, #4]
 80067a0:	1aed      	subs	r5, r5, r3
 80067a2:	60a5      	str	r5, [r4, #8]
 80067a4:	9b01      	ldr	r3, [sp, #4]
 80067a6:	429e      	cmp	r6, r3
 80067a8:	d900      	bls.n	80067ac <__ssputs_r+0x7c>
 80067aa:	9e01      	ldr	r6, [sp, #4]
 80067ac:	0032      	movs	r2, r6
 80067ae:	9903      	ldr	r1, [sp, #12]
 80067b0:	6820      	ldr	r0, [r4, #0]
 80067b2:	f000 fa9f 	bl	8006cf4 <memmove>
 80067b6:	2000      	movs	r0, #0
 80067b8:	68a3      	ldr	r3, [r4, #8]
 80067ba:	1b9b      	subs	r3, r3, r6
 80067bc:	60a3      	str	r3, [r4, #8]
 80067be:	6823      	ldr	r3, [r4, #0]
 80067c0:	199b      	adds	r3, r3, r6
 80067c2:	6023      	str	r3, [r4, #0]
 80067c4:	b005      	add	sp, #20
 80067c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80067c8:	002a      	movs	r2, r5
 80067ca:	0038      	movs	r0, r7
 80067cc:	f000 facc 	bl	8006d68 <_realloc_r>
 80067d0:	1e06      	subs	r6, r0, #0
 80067d2:	d1df      	bne.n	8006794 <__ssputs_r+0x64>
 80067d4:	0038      	movs	r0, r7
 80067d6:	6921      	ldr	r1, [r4, #16]
 80067d8:	f7ff feac 	bl	8006534 <_free_r>
 80067dc:	230c      	movs	r3, #12
 80067de:	2001      	movs	r0, #1
 80067e0:	603b      	str	r3, [r7, #0]
 80067e2:	89a2      	ldrh	r2, [r4, #12]
 80067e4:	3334      	adds	r3, #52	; 0x34
 80067e6:	4313      	orrs	r3, r2
 80067e8:	81a3      	strh	r3, [r4, #12]
 80067ea:	4240      	negs	r0, r0
 80067ec:	e7ea      	b.n	80067c4 <__ssputs_r+0x94>
 80067ee:	46c0      	nop			; (mov r8, r8)
 80067f0:	fffffb7f 	.word	0xfffffb7f

080067f4 <_svfiprintf_r>:
 80067f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80067f6:	b0a1      	sub	sp, #132	; 0x84
 80067f8:	9003      	str	r0, [sp, #12]
 80067fa:	001d      	movs	r5, r3
 80067fc:	898b      	ldrh	r3, [r1, #12]
 80067fe:	000f      	movs	r7, r1
 8006800:	0016      	movs	r6, r2
 8006802:	061b      	lsls	r3, r3, #24
 8006804:	d511      	bpl.n	800682a <_svfiprintf_r+0x36>
 8006806:	690b      	ldr	r3, [r1, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d10e      	bne.n	800682a <_svfiprintf_r+0x36>
 800680c:	2140      	movs	r1, #64	; 0x40
 800680e:	f7ff fefd 	bl	800660c <_malloc_r>
 8006812:	6038      	str	r0, [r7, #0]
 8006814:	6138      	str	r0, [r7, #16]
 8006816:	2800      	cmp	r0, #0
 8006818:	d105      	bne.n	8006826 <_svfiprintf_r+0x32>
 800681a:	230c      	movs	r3, #12
 800681c:	9a03      	ldr	r2, [sp, #12]
 800681e:	3801      	subs	r0, #1
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	b021      	add	sp, #132	; 0x84
 8006824:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006826:	2340      	movs	r3, #64	; 0x40
 8006828:	617b      	str	r3, [r7, #20]
 800682a:	2300      	movs	r3, #0
 800682c:	ac08      	add	r4, sp, #32
 800682e:	6163      	str	r3, [r4, #20]
 8006830:	3320      	adds	r3, #32
 8006832:	7663      	strb	r3, [r4, #25]
 8006834:	3310      	adds	r3, #16
 8006836:	76a3      	strb	r3, [r4, #26]
 8006838:	9507      	str	r5, [sp, #28]
 800683a:	0035      	movs	r5, r6
 800683c:	782b      	ldrb	r3, [r5, #0]
 800683e:	2b00      	cmp	r3, #0
 8006840:	d001      	beq.n	8006846 <_svfiprintf_r+0x52>
 8006842:	2b25      	cmp	r3, #37	; 0x25
 8006844:	d148      	bne.n	80068d8 <_svfiprintf_r+0xe4>
 8006846:	1bab      	subs	r3, r5, r6
 8006848:	9305      	str	r3, [sp, #20]
 800684a:	42b5      	cmp	r5, r6
 800684c:	d00b      	beq.n	8006866 <_svfiprintf_r+0x72>
 800684e:	0032      	movs	r2, r6
 8006850:	0039      	movs	r1, r7
 8006852:	9803      	ldr	r0, [sp, #12]
 8006854:	f7ff ff6c 	bl	8006730 <__ssputs_r>
 8006858:	3001      	adds	r0, #1
 800685a:	d100      	bne.n	800685e <_svfiprintf_r+0x6a>
 800685c:	e0af      	b.n	80069be <_svfiprintf_r+0x1ca>
 800685e:	6963      	ldr	r3, [r4, #20]
 8006860:	9a05      	ldr	r2, [sp, #20]
 8006862:	189b      	adds	r3, r3, r2
 8006864:	6163      	str	r3, [r4, #20]
 8006866:	782b      	ldrb	r3, [r5, #0]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d100      	bne.n	800686e <_svfiprintf_r+0x7a>
 800686c:	e0a7      	b.n	80069be <_svfiprintf_r+0x1ca>
 800686e:	2201      	movs	r2, #1
 8006870:	2300      	movs	r3, #0
 8006872:	4252      	negs	r2, r2
 8006874:	6062      	str	r2, [r4, #4]
 8006876:	a904      	add	r1, sp, #16
 8006878:	3254      	adds	r2, #84	; 0x54
 800687a:	1852      	adds	r2, r2, r1
 800687c:	1c6e      	adds	r6, r5, #1
 800687e:	6023      	str	r3, [r4, #0]
 8006880:	60e3      	str	r3, [r4, #12]
 8006882:	60a3      	str	r3, [r4, #8]
 8006884:	7013      	strb	r3, [r2, #0]
 8006886:	65a3      	str	r3, [r4, #88]	; 0x58
 8006888:	4b55      	ldr	r3, [pc, #340]	; (80069e0 <_svfiprintf_r+0x1ec>)
 800688a:	2205      	movs	r2, #5
 800688c:	0018      	movs	r0, r3
 800688e:	7831      	ldrb	r1, [r6, #0]
 8006890:	9305      	str	r3, [sp, #20]
 8006892:	f000 fa55 	bl	8006d40 <memchr>
 8006896:	1c75      	adds	r5, r6, #1
 8006898:	2800      	cmp	r0, #0
 800689a:	d11f      	bne.n	80068dc <_svfiprintf_r+0xe8>
 800689c:	6822      	ldr	r2, [r4, #0]
 800689e:	06d3      	lsls	r3, r2, #27
 80068a0:	d504      	bpl.n	80068ac <_svfiprintf_r+0xb8>
 80068a2:	2353      	movs	r3, #83	; 0x53
 80068a4:	a904      	add	r1, sp, #16
 80068a6:	185b      	adds	r3, r3, r1
 80068a8:	2120      	movs	r1, #32
 80068aa:	7019      	strb	r1, [r3, #0]
 80068ac:	0713      	lsls	r3, r2, #28
 80068ae:	d504      	bpl.n	80068ba <_svfiprintf_r+0xc6>
 80068b0:	2353      	movs	r3, #83	; 0x53
 80068b2:	a904      	add	r1, sp, #16
 80068b4:	185b      	adds	r3, r3, r1
 80068b6:	212b      	movs	r1, #43	; 0x2b
 80068b8:	7019      	strb	r1, [r3, #0]
 80068ba:	7833      	ldrb	r3, [r6, #0]
 80068bc:	2b2a      	cmp	r3, #42	; 0x2a
 80068be:	d016      	beq.n	80068ee <_svfiprintf_r+0xfa>
 80068c0:	0035      	movs	r5, r6
 80068c2:	2100      	movs	r1, #0
 80068c4:	200a      	movs	r0, #10
 80068c6:	68e3      	ldr	r3, [r4, #12]
 80068c8:	782a      	ldrb	r2, [r5, #0]
 80068ca:	1c6e      	adds	r6, r5, #1
 80068cc:	3a30      	subs	r2, #48	; 0x30
 80068ce:	2a09      	cmp	r2, #9
 80068d0:	d94e      	bls.n	8006970 <_svfiprintf_r+0x17c>
 80068d2:	2900      	cmp	r1, #0
 80068d4:	d111      	bne.n	80068fa <_svfiprintf_r+0x106>
 80068d6:	e017      	b.n	8006908 <_svfiprintf_r+0x114>
 80068d8:	3501      	adds	r5, #1
 80068da:	e7af      	b.n	800683c <_svfiprintf_r+0x48>
 80068dc:	9b05      	ldr	r3, [sp, #20]
 80068de:	6822      	ldr	r2, [r4, #0]
 80068e0:	1ac0      	subs	r0, r0, r3
 80068e2:	2301      	movs	r3, #1
 80068e4:	4083      	lsls	r3, r0
 80068e6:	4313      	orrs	r3, r2
 80068e8:	002e      	movs	r6, r5
 80068ea:	6023      	str	r3, [r4, #0]
 80068ec:	e7cc      	b.n	8006888 <_svfiprintf_r+0x94>
 80068ee:	9b07      	ldr	r3, [sp, #28]
 80068f0:	1d19      	adds	r1, r3, #4
 80068f2:	681b      	ldr	r3, [r3, #0]
 80068f4:	9107      	str	r1, [sp, #28]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	db01      	blt.n	80068fe <_svfiprintf_r+0x10a>
 80068fa:	930b      	str	r3, [sp, #44]	; 0x2c
 80068fc:	e004      	b.n	8006908 <_svfiprintf_r+0x114>
 80068fe:	425b      	negs	r3, r3
 8006900:	60e3      	str	r3, [r4, #12]
 8006902:	2302      	movs	r3, #2
 8006904:	4313      	orrs	r3, r2
 8006906:	6023      	str	r3, [r4, #0]
 8006908:	782b      	ldrb	r3, [r5, #0]
 800690a:	2b2e      	cmp	r3, #46	; 0x2e
 800690c:	d10a      	bne.n	8006924 <_svfiprintf_r+0x130>
 800690e:	786b      	ldrb	r3, [r5, #1]
 8006910:	2b2a      	cmp	r3, #42	; 0x2a
 8006912:	d135      	bne.n	8006980 <_svfiprintf_r+0x18c>
 8006914:	9b07      	ldr	r3, [sp, #28]
 8006916:	3502      	adds	r5, #2
 8006918:	1d1a      	adds	r2, r3, #4
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	9207      	str	r2, [sp, #28]
 800691e:	2b00      	cmp	r3, #0
 8006920:	db2b      	blt.n	800697a <_svfiprintf_r+0x186>
 8006922:	9309      	str	r3, [sp, #36]	; 0x24
 8006924:	4e2f      	ldr	r6, [pc, #188]	; (80069e4 <_svfiprintf_r+0x1f0>)
 8006926:	2203      	movs	r2, #3
 8006928:	0030      	movs	r0, r6
 800692a:	7829      	ldrb	r1, [r5, #0]
 800692c:	f000 fa08 	bl	8006d40 <memchr>
 8006930:	2800      	cmp	r0, #0
 8006932:	d006      	beq.n	8006942 <_svfiprintf_r+0x14e>
 8006934:	2340      	movs	r3, #64	; 0x40
 8006936:	1b80      	subs	r0, r0, r6
 8006938:	4083      	lsls	r3, r0
 800693a:	6822      	ldr	r2, [r4, #0]
 800693c:	3501      	adds	r5, #1
 800693e:	4313      	orrs	r3, r2
 8006940:	6023      	str	r3, [r4, #0]
 8006942:	7829      	ldrb	r1, [r5, #0]
 8006944:	2206      	movs	r2, #6
 8006946:	4828      	ldr	r0, [pc, #160]	; (80069e8 <_svfiprintf_r+0x1f4>)
 8006948:	1c6e      	adds	r6, r5, #1
 800694a:	7621      	strb	r1, [r4, #24]
 800694c:	f000 f9f8 	bl	8006d40 <memchr>
 8006950:	2800      	cmp	r0, #0
 8006952:	d03c      	beq.n	80069ce <_svfiprintf_r+0x1da>
 8006954:	4b25      	ldr	r3, [pc, #148]	; (80069ec <_svfiprintf_r+0x1f8>)
 8006956:	2b00      	cmp	r3, #0
 8006958:	d125      	bne.n	80069a6 <_svfiprintf_r+0x1b2>
 800695a:	2207      	movs	r2, #7
 800695c:	9b07      	ldr	r3, [sp, #28]
 800695e:	3307      	adds	r3, #7
 8006960:	4393      	bics	r3, r2
 8006962:	3308      	adds	r3, #8
 8006964:	9307      	str	r3, [sp, #28]
 8006966:	6963      	ldr	r3, [r4, #20]
 8006968:	9a04      	ldr	r2, [sp, #16]
 800696a:	189b      	adds	r3, r3, r2
 800696c:	6163      	str	r3, [r4, #20]
 800696e:	e764      	b.n	800683a <_svfiprintf_r+0x46>
 8006970:	4343      	muls	r3, r0
 8006972:	0035      	movs	r5, r6
 8006974:	2101      	movs	r1, #1
 8006976:	189b      	adds	r3, r3, r2
 8006978:	e7a6      	b.n	80068c8 <_svfiprintf_r+0xd4>
 800697a:	2301      	movs	r3, #1
 800697c:	425b      	negs	r3, r3
 800697e:	e7d0      	b.n	8006922 <_svfiprintf_r+0x12e>
 8006980:	2300      	movs	r3, #0
 8006982:	200a      	movs	r0, #10
 8006984:	001a      	movs	r2, r3
 8006986:	3501      	adds	r5, #1
 8006988:	6063      	str	r3, [r4, #4]
 800698a:	7829      	ldrb	r1, [r5, #0]
 800698c:	1c6e      	adds	r6, r5, #1
 800698e:	3930      	subs	r1, #48	; 0x30
 8006990:	2909      	cmp	r1, #9
 8006992:	d903      	bls.n	800699c <_svfiprintf_r+0x1a8>
 8006994:	2b00      	cmp	r3, #0
 8006996:	d0c5      	beq.n	8006924 <_svfiprintf_r+0x130>
 8006998:	9209      	str	r2, [sp, #36]	; 0x24
 800699a:	e7c3      	b.n	8006924 <_svfiprintf_r+0x130>
 800699c:	4342      	muls	r2, r0
 800699e:	0035      	movs	r5, r6
 80069a0:	2301      	movs	r3, #1
 80069a2:	1852      	adds	r2, r2, r1
 80069a4:	e7f1      	b.n	800698a <_svfiprintf_r+0x196>
 80069a6:	aa07      	add	r2, sp, #28
 80069a8:	9200      	str	r2, [sp, #0]
 80069aa:	0021      	movs	r1, r4
 80069ac:	003a      	movs	r2, r7
 80069ae:	4b10      	ldr	r3, [pc, #64]	; (80069f0 <_svfiprintf_r+0x1fc>)
 80069b0:	9803      	ldr	r0, [sp, #12]
 80069b2:	e000      	b.n	80069b6 <_svfiprintf_r+0x1c2>
 80069b4:	bf00      	nop
 80069b6:	9004      	str	r0, [sp, #16]
 80069b8:	9b04      	ldr	r3, [sp, #16]
 80069ba:	3301      	adds	r3, #1
 80069bc:	d1d3      	bne.n	8006966 <_svfiprintf_r+0x172>
 80069be:	89bb      	ldrh	r3, [r7, #12]
 80069c0:	980d      	ldr	r0, [sp, #52]	; 0x34
 80069c2:	065b      	lsls	r3, r3, #25
 80069c4:	d400      	bmi.n	80069c8 <_svfiprintf_r+0x1d4>
 80069c6:	e72c      	b.n	8006822 <_svfiprintf_r+0x2e>
 80069c8:	2001      	movs	r0, #1
 80069ca:	4240      	negs	r0, r0
 80069cc:	e729      	b.n	8006822 <_svfiprintf_r+0x2e>
 80069ce:	aa07      	add	r2, sp, #28
 80069d0:	9200      	str	r2, [sp, #0]
 80069d2:	0021      	movs	r1, r4
 80069d4:	003a      	movs	r2, r7
 80069d6:	4b06      	ldr	r3, [pc, #24]	; (80069f0 <_svfiprintf_r+0x1fc>)
 80069d8:	9803      	ldr	r0, [sp, #12]
 80069da:	f000 f87b 	bl	8006ad4 <_printf_i>
 80069de:	e7ea      	b.n	80069b6 <_svfiprintf_r+0x1c2>
 80069e0:	08006eac 	.word	0x08006eac
 80069e4:	08006eb2 	.word	0x08006eb2
 80069e8:	08006eb6 	.word	0x08006eb6
 80069ec:	00000000 	.word	0x00000000
 80069f0:	08006731 	.word	0x08006731

080069f4 <_printf_common>:
 80069f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80069f6:	0016      	movs	r6, r2
 80069f8:	9301      	str	r3, [sp, #4]
 80069fa:	688a      	ldr	r2, [r1, #8]
 80069fc:	690b      	ldr	r3, [r1, #16]
 80069fe:	000c      	movs	r4, r1
 8006a00:	9000      	str	r0, [sp, #0]
 8006a02:	4293      	cmp	r3, r2
 8006a04:	da00      	bge.n	8006a08 <_printf_common+0x14>
 8006a06:	0013      	movs	r3, r2
 8006a08:	0022      	movs	r2, r4
 8006a0a:	6033      	str	r3, [r6, #0]
 8006a0c:	3243      	adds	r2, #67	; 0x43
 8006a0e:	7812      	ldrb	r2, [r2, #0]
 8006a10:	2a00      	cmp	r2, #0
 8006a12:	d001      	beq.n	8006a18 <_printf_common+0x24>
 8006a14:	3301      	adds	r3, #1
 8006a16:	6033      	str	r3, [r6, #0]
 8006a18:	6823      	ldr	r3, [r4, #0]
 8006a1a:	069b      	lsls	r3, r3, #26
 8006a1c:	d502      	bpl.n	8006a24 <_printf_common+0x30>
 8006a1e:	6833      	ldr	r3, [r6, #0]
 8006a20:	3302      	adds	r3, #2
 8006a22:	6033      	str	r3, [r6, #0]
 8006a24:	6822      	ldr	r2, [r4, #0]
 8006a26:	2306      	movs	r3, #6
 8006a28:	0015      	movs	r5, r2
 8006a2a:	401d      	ands	r5, r3
 8006a2c:	421a      	tst	r2, r3
 8006a2e:	d027      	beq.n	8006a80 <_printf_common+0x8c>
 8006a30:	0023      	movs	r3, r4
 8006a32:	3343      	adds	r3, #67	; 0x43
 8006a34:	781b      	ldrb	r3, [r3, #0]
 8006a36:	1e5a      	subs	r2, r3, #1
 8006a38:	4193      	sbcs	r3, r2
 8006a3a:	6822      	ldr	r2, [r4, #0]
 8006a3c:	0692      	lsls	r2, r2, #26
 8006a3e:	d430      	bmi.n	8006aa2 <_printf_common+0xae>
 8006a40:	0022      	movs	r2, r4
 8006a42:	9901      	ldr	r1, [sp, #4]
 8006a44:	9800      	ldr	r0, [sp, #0]
 8006a46:	9d08      	ldr	r5, [sp, #32]
 8006a48:	3243      	adds	r2, #67	; 0x43
 8006a4a:	47a8      	blx	r5
 8006a4c:	3001      	adds	r0, #1
 8006a4e:	d025      	beq.n	8006a9c <_printf_common+0xa8>
 8006a50:	2206      	movs	r2, #6
 8006a52:	6823      	ldr	r3, [r4, #0]
 8006a54:	2500      	movs	r5, #0
 8006a56:	4013      	ands	r3, r2
 8006a58:	2b04      	cmp	r3, #4
 8006a5a:	d105      	bne.n	8006a68 <_printf_common+0x74>
 8006a5c:	6833      	ldr	r3, [r6, #0]
 8006a5e:	68e5      	ldr	r5, [r4, #12]
 8006a60:	1aed      	subs	r5, r5, r3
 8006a62:	43eb      	mvns	r3, r5
 8006a64:	17db      	asrs	r3, r3, #31
 8006a66:	401d      	ands	r5, r3
 8006a68:	68a3      	ldr	r3, [r4, #8]
 8006a6a:	6922      	ldr	r2, [r4, #16]
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	dd01      	ble.n	8006a74 <_printf_common+0x80>
 8006a70:	1a9b      	subs	r3, r3, r2
 8006a72:	18ed      	adds	r5, r5, r3
 8006a74:	2600      	movs	r6, #0
 8006a76:	42b5      	cmp	r5, r6
 8006a78:	d120      	bne.n	8006abc <_printf_common+0xc8>
 8006a7a:	2000      	movs	r0, #0
 8006a7c:	e010      	b.n	8006aa0 <_printf_common+0xac>
 8006a7e:	3501      	adds	r5, #1
 8006a80:	68e3      	ldr	r3, [r4, #12]
 8006a82:	6832      	ldr	r2, [r6, #0]
 8006a84:	1a9b      	subs	r3, r3, r2
 8006a86:	42ab      	cmp	r3, r5
 8006a88:	ddd2      	ble.n	8006a30 <_printf_common+0x3c>
 8006a8a:	0022      	movs	r2, r4
 8006a8c:	2301      	movs	r3, #1
 8006a8e:	9901      	ldr	r1, [sp, #4]
 8006a90:	9800      	ldr	r0, [sp, #0]
 8006a92:	9f08      	ldr	r7, [sp, #32]
 8006a94:	3219      	adds	r2, #25
 8006a96:	47b8      	blx	r7
 8006a98:	3001      	adds	r0, #1
 8006a9a:	d1f0      	bne.n	8006a7e <_printf_common+0x8a>
 8006a9c:	2001      	movs	r0, #1
 8006a9e:	4240      	negs	r0, r0
 8006aa0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006aa2:	2030      	movs	r0, #48	; 0x30
 8006aa4:	18e1      	adds	r1, r4, r3
 8006aa6:	3143      	adds	r1, #67	; 0x43
 8006aa8:	7008      	strb	r0, [r1, #0]
 8006aaa:	0021      	movs	r1, r4
 8006aac:	1c5a      	adds	r2, r3, #1
 8006aae:	3145      	adds	r1, #69	; 0x45
 8006ab0:	7809      	ldrb	r1, [r1, #0]
 8006ab2:	18a2      	adds	r2, r4, r2
 8006ab4:	3243      	adds	r2, #67	; 0x43
 8006ab6:	3302      	adds	r3, #2
 8006ab8:	7011      	strb	r1, [r2, #0]
 8006aba:	e7c1      	b.n	8006a40 <_printf_common+0x4c>
 8006abc:	0022      	movs	r2, r4
 8006abe:	2301      	movs	r3, #1
 8006ac0:	9901      	ldr	r1, [sp, #4]
 8006ac2:	9800      	ldr	r0, [sp, #0]
 8006ac4:	9f08      	ldr	r7, [sp, #32]
 8006ac6:	321a      	adds	r2, #26
 8006ac8:	47b8      	blx	r7
 8006aca:	3001      	adds	r0, #1
 8006acc:	d0e6      	beq.n	8006a9c <_printf_common+0xa8>
 8006ace:	3601      	adds	r6, #1
 8006ad0:	e7d1      	b.n	8006a76 <_printf_common+0x82>
	...

08006ad4 <_printf_i>:
 8006ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006ad6:	b08b      	sub	sp, #44	; 0x2c
 8006ad8:	9206      	str	r2, [sp, #24]
 8006ada:	000a      	movs	r2, r1
 8006adc:	3243      	adds	r2, #67	; 0x43
 8006ade:	9307      	str	r3, [sp, #28]
 8006ae0:	9005      	str	r0, [sp, #20]
 8006ae2:	9204      	str	r2, [sp, #16]
 8006ae4:	7e0a      	ldrb	r2, [r1, #24]
 8006ae6:	000c      	movs	r4, r1
 8006ae8:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006aea:	2a78      	cmp	r2, #120	; 0x78
 8006aec:	d809      	bhi.n	8006b02 <_printf_i+0x2e>
 8006aee:	2a62      	cmp	r2, #98	; 0x62
 8006af0:	d80b      	bhi.n	8006b0a <_printf_i+0x36>
 8006af2:	2a00      	cmp	r2, #0
 8006af4:	d100      	bne.n	8006af8 <_printf_i+0x24>
 8006af6:	e0be      	b.n	8006c76 <_printf_i+0x1a2>
 8006af8:	497c      	ldr	r1, [pc, #496]	; (8006cec <_printf_i+0x218>)
 8006afa:	9103      	str	r1, [sp, #12]
 8006afc:	2a58      	cmp	r2, #88	; 0x58
 8006afe:	d100      	bne.n	8006b02 <_printf_i+0x2e>
 8006b00:	e093      	b.n	8006c2a <_printf_i+0x156>
 8006b02:	0026      	movs	r6, r4
 8006b04:	3642      	adds	r6, #66	; 0x42
 8006b06:	7032      	strb	r2, [r6, #0]
 8006b08:	e022      	b.n	8006b50 <_printf_i+0x7c>
 8006b0a:	0010      	movs	r0, r2
 8006b0c:	3863      	subs	r0, #99	; 0x63
 8006b0e:	2815      	cmp	r0, #21
 8006b10:	d8f7      	bhi.n	8006b02 <_printf_i+0x2e>
 8006b12:	f7f9 faf9 	bl	8000108 <__gnu_thumb1_case_shi>
 8006b16:	0016      	.short	0x0016
 8006b18:	fff6001f 	.word	0xfff6001f
 8006b1c:	fff6fff6 	.word	0xfff6fff6
 8006b20:	001ffff6 	.word	0x001ffff6
 8006b24:	fff6fff6 	.word	0xfff6fff6
 8006b28:	fff6fff6 	.word	0xfff6fff6
 8006b2c:	003600a3 	.word	0x003600a3
 8006b30:	fff60083 	.word	0xfff60083
 8006b34:	00b4fff6 	.word	0x00b4fff6
 8006b38:	0036fff6 	.word	0x0036fff6
 8006b3c:	fff6fff6 	.word	0xfff6fff6
 8006b40:	0087      	.short	0x0087
 8006b42:	0026      	movs	r6, r4
 8006b44:	681a      	ldr	r2, [r3, #0]
 8006b46:	3642      	adds	r6, #66	; 0x42
 8006b48:	1d11      	adds	r1, r2, #4
 8006b4a:	6019      	str	r1, [r3, #0]
 8006b4c:	6813      	ldr	r3, [r2, #0]
 8006b4e:	7033      	strb	r3, [r6, #0]
 8006b50:	2301      	movs	r3, #1
 8006b52:	e0a2      	b.n	8006c9a <_printf_i+0x1c6>
 8006b54:	6818      	ldr	r0, [r3, #0]
 8006b56:	6809      	ldr	r1, [r1, #0]
 8006b58:	1d02      	adds	r2, r0, #4
 8006b5a:	060d      	lsls	r5, r1, #24
 8006b5c:	d50b      	bpl.n	8006b76 <_printf_i+0xa2>
 8006b5e:	6805      	ldr	r5, [r0, #0]
 8006b60:	601a      	str	r2, [r3, #0]
 8006b62:	2d00      	cmp	r5, #0
 8006b64:	da03      	bge.n	8006b6e <_printf_i+0x9a>
 8006b66:	232d      	movs	r3, #45	; 0x2d
 8006b68:	9a04      	ldr	r2, [sp, #16]
 8006b6a:	426d      	negs	r5, r5
 8006b6c:	7013      	strb	r3, [r2, #0]
 8006b6e:	4b5f      	ldr	r3, [pc, #380]	; (8006cec <_printf_i+0x218>)
 8006b70:	270a      	movs	r7, #10
 8006b72:	9303      	str	r3, [sp, #12]
 8006b74:	e01b      	b.n	8006bae <_printf_i+0xda>
 8006b76:	6805      	ldr	r5, [r0, #0]
 8006b78:	601a      	str	r2, [r3, #0]
 8006b7a:	0649      	lsls	r1, r1, #25
 8006b7c:	d5f1      	bpl.n	8006b62 <_printf_i+0x8e>
 8006b7e:	b22d      	sxth	r5, r5
 8006b80:	e7ef      	b.n	8006b62 <_printf_i+0x8e>
 8006b82:	680d      	ldr	r5, [r1, #0]
 8006b84:	6819      	ldr	r1, [r3, #0]
 8006b86:	1d08      	adds	r0, r1, #4
 8006b88:	6018      	str	r0, [r3, #0]
 8006b8a:	062e      	lsls	r6, r5, #24
 8006b8c:	d501      	bpl.n	8006b92 <_printf_i+0xbe>
 8006b8e:	680d      	ldr	r5, [r1, #0]
 8006b90:	e003      	b.n	8006b9a <_printf_i+0xc6>
 8006b92:	066d      	lsls	r5, r5, #25
 8006b94:	d5fb      	bpl.n	8006b8e <_printf_i+0xba>
 8006b96:	680d      	ldr	r5, [r1, #0]
 8006b98:	b2ad      	uxth	r5, r5
 8006b9a:	4b54      	ldr	r3, [pc, #336]	; (8006cec <_printf_i+0x218>)
 8006b9c:	2708      	movs	r7, #8
 8006b9e:	9303      	str	r3, [sp, #12]
 8006ba0:	2a6f      	cmp	r2, #111	; 0x6f
 8006ba2:	d000      	beq.n	8006ba6 <_printf_i+0xd2>
 8006ba4:	3702      	adds	r7, #2
 8006ba6:	0023      	movs	r3, r4
 8006ba8:	2200      	movs	r2, #0
 8006baa:	3343      	adds	r3, #67	; 0x43
 8006bac:	701a      	strb	r2, [r3, #0]
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	60a3      	str	r3, [r4, #8]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	db03      	blt.n	8006bbe <_printf_i+0xea>
 8006bb6:	2104      	movs	r1, #4
 8006bb8:	6822      	ldr	r2, [r4, #0]
 8006bba:	438a      	bics	r2, r1
 8006bbc:	6022      	str	r2, [r4, #0]
 8006bbe:	2d00      	cmp	r5, #0
 8006bc0:	d102      	bne.n	8006bc8 <_printf_i+0xf4>
 8006bc2:	9e04      	ldr	r6, [sp, #16]
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d00c      	beq.n	8006be2 <_printf_i+0x10e>
 8006bc8:	9e04      	ldr	r6, [sp, #16]
 8006bca:	0028      	movs	r0, r5
 8006bcc:	0039      	movs	r1, r7
 8006bce:	f7f9 fb2b 	bl	8000228 <__aeabi_uidivmod>
 8006bd2:	9b03      	ldr	r3, [sp, #12]
 8006bd4:	3e01      	subs	r6, #1
 8006bd6:	5c5b      	ldrb	r3, [r3, r1]
 8006bd8:	7033      	strb	r3, [r6, #0]
 8006bda:	002b      	movs	r3, r5
 8006bdc:	0005      	movs	r5, r0
 8006bde:	429f      	cmp	r7, r3
 8006be0:	d9f3      	bls.n	8006bca <_printf_i+0xf6>
 8006be2:	2f08      	cmp	r7, #8
 8006be4:	d109      	bne.n	8006bfa <_printf_i+0x126>
 8006be6:	6823      	ldr	r3, [r4, #0]
 8006be8:	07db      	lsls	r3, r3, #31
 8006bea:	d506      	bpl.n	8006bfa <_printf_i+0x126>
 8006bec:	6862      	ldr	r2, [r4, #4]
 8006bee:	6923      	ldr	r3, [r4, #16]
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	dc02      	bgt.n	8006bfa <_printf_i+0x126>
 8006bf4:	2330      	movs	r3, #48	; 0x30
 8006bf6:	3e01      	subs	r6, #1
 8006bf8:	7033      	strb	r3, [r6, #0]
 8006bfa:	9b04      	ldr	r3, [sp, #16]
 8006bfc:	1b9b      	subs	r3, r3, r6
 8006bfe:	6123      	str	r3, [r4, #16]
 8006c00:	9b07      	ldr	r3, [sp, #28]
 8006c02:	0021      	movs	r1, r4
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	9805      	ldr	r0, [sp, #20]
 8006c08:	9b06      	ldr	r3, [sp, #24]
 8006c0a:	aa09      	add	r2, sp, #36	; 0x24
 8006c0c:	f7ff fef2 	bl	80069f4 <_printf_common>
 8006c10:	3001      	adds	r0, #1
 8006c12:	d147      	bne.n	8006ca4 <_printf_i+0x1d0>
 8006c14:	2001      	movs	r0, #1
 8006c16:	4240      	negs	r0, r0
 8006c18:	b00b      	add	sp, #44	; 0x2c
 8006c1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006c1c:	2220      	movs	r2, #32
 8006c1e:	6809      	ldr	r1, [r1, #0]
 8006c20:	430a      	orrs	r2, r1
 8006c22:	6022      	str	r2, [r4, #0]
 8006c24:	2278      	movs	r2, #120	; 0x78
 8006c26:	4932      	ldr	r1, [pc, #200]	; (8006cf0 <_printf_i+0x21c>)
 8006c28:	9103      	str	r1, [sp, #12]
 8006c2a:	0021      	movs	r1, r4
 8006c2c:	3145      	adds	r1, #69	; 0x45
 8006c2e:	700a      	strb	r2, [r1, #0]
 8006c30:	6819      	ldr	r1, [r3, #0]
 8006c32:	6822      	ldr	r2, [r4, #0]
 8006c34:	c920      	ldmia	r1!, {r5}
 8006c36:	0610      	lsls	r0, r2, #24
 8006c38:	d402      	bmi.n	8006c40 <_printf_i+0x16c>
 8006c3a:	0650      	lsls	r0, r2, #25
 8006c3c:	d500      	bpl.n	8006c40 <_printf_i+0x16c>
 8006c3e:	b2ad      	uxth	r5, r5
 8006c40:	6019      	str	r1, [r3, #0]
 8006c42:	07d3      	lsls	r3, r2, #31
 8006c44:	d502      	bpl.n	8006c4c <_printf_i+0x178>
 8006c46:	2320      	movs	r3, #32
 8006c48:	4313      	orrs	r3, r2
 8006c4a:	6023      	str	r3, [r4, #0]
 8006c4c:	2710      	movs	r7, #16
 8006c4e:	2d00      	cmp	r5, #0
 8006c50:	d1a9      	bne.n	8006ba6 <_printf_i+0xd2>
 8006c52:	2220      	movs	r2, #32
 8006c54:	6823      	ldr	r3, [r4, #0]
 8006c56:	4393      	bics	r3, r2
 8006c58:	6023      	str	r3, [r4, #0]
 8006c5a:	e7a4      	b.n	8006ba6 <_printf_i+0xd2>
 8006c5c:	681a      	ldr	r2, [r3, #0]
 8006c5e:	680d      	ldr	r5, [r1, #0]
 8006c60:	1d10      	adds	r0, r2, #4
 8006c62:	6949      	ldr	r1, [r1, #20]
 8006c64:	6018      	str	r0, [r3, #0]
 8006c66:	6813      	ldr	r3, [r2, #0]
 8006c68:	062e      	lsls	r6, r5, #24
 8006c6a:	d501      	bpl.n	8006c70 <_printf_i+0x19c>
 8006c6c:	6019      	str	r1, [r3, #0]
 8006c6e:	e002      	b.n	8006c76 <_printf_i+0x1a2>
 8006c70:	066d      	lsls	r5, r5, #25
 8006c72:	d5fb      	bpl.n	8006c6c <_printf_i+0x198>
 8006c74:	8019      	strh	r1, [r3, #0]
 8006c76:	2300      	movs	r3, #0
 8006c78:	9e04      	ldr	r6, [sp, #16]
 8006c7a:	6123      	str	r3, [r4, #16]
 8006c7c:	e7c0      	b.n	8006c00 <_printf_i+0x12c>
 8006c7e:	681a      	ldr	r2, [r3, #0]
 8006c80:	1d11      	adds	r1, r2, #4
 8006c82:	6019      	str	r1, [r3, #0]
 8006c84:	6816      	ldr	r6, [r2, #0]
 8006c86:	2100      	movs	r1, #0
 8006c88:	0030      	movs	r0, r6
 8006c8a:	6862      	ldr	r2, [r4, #4]
 8006c8c:	f000 f858 	bl	8006d40 <memchr>
 8006c90:	2800      	cmp	r0, #0
 8006c92:	d001      	beq.n	8006c98 <_printf_i+0x1c4>
 8006c94:	1b80      	subs	r0, r0, r6
 8006c96:	6060      	str	r0, [r4, #4]
 8006c98:	6863      	ldr	r3, [r4, #4]
 8006c9a:	6123      	str	r3, [r4, #16]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	9a04      	ldr	r2, [sp, #16]
 8006ca0:	7013      	strb	r3, [r2, #0]
 8006ca2:	e7ad      	b.n	8006c00 <_printf_i+0x12c>
 8006ca4:	0032      	movs	r2, r6
 8006ca6:	6923      	ldr	r3, [r4, #16]
 8006ca8:	9906      	ldr	r1, [sp, #24]
 8006caa:	9805      	ldr	r0, [sp, #20]
 8006cac:	9d07      	ldr	r5, [sp, #28]
 8006cae:	47a8      	blx	r5
 8006cb0:	3001      	adds	r0, #1
 8006cb2:	d0af      	beq.n	8006c14 <_printf_i+0x140>
 8006cb4:	6823      	ldr	r3, [r4, #0]
 8006cb6:	079b      	lsls	r3, r3, #30
 8006cb8:	d415      	bmi.n	8006ce6 <_printf_i+0x212>
 8006cba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cbc:	68e0      	ldr	r0, [r4, #12]
 8006cbe:	4298      	cmp	r0, r3
 8006cc0:	daaa      	bge.n	8006c18 <_printf_i+0x144>
 8006cc2:	0018      	movs	r0, r3
 8006cc4:	e7a8      	b.n	8006c18 <_printf_i+0x144>
 8006cc6:	0022      	movs	r2, r4
 8006cc8:	2301      	movs	r3, #1
 8006cca:	9906      	ldr	r1, [sp, #24]
 8006ccc:	9805      	ldr	r0, [sp, #20]
 8006cce:	9e07      	ldr	r6, [sp, #28]
 8006cd0:	3219      	adds	r2, #25
 8006cd2:	47b0      	blx	r6
 8006cd4:	3001      	adds	r0, #1
 8006cd6:	d09d      	beq.n	8006c14 <_printf_i+0x140>
 8006cd8:	3501      	adds	r5, #1
 8006cda:	68e3      	ldr	r3, [r4, #12]
 8006cdc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006cde:	1a9b      	subs	r3, r3, r2
 8006ce0:	42ab      	cmp	r3, r5
 8006ce2:	dcf0      	bgt.n	8006cc6 <_printf_i+0x1f2>
 8006ce4:	e7e9      	b.n	8006cba <_printf_i+0x1e6>
 8006ce6:	2500      	movs	r5, #0
 8006ce8:	e7f7      	b.n	8006cda <_printf_i+0x206>
 8006cea:	46c0      	nop			; (mov r8, r8)
 8006cec:	08006ebd 	.word	0x08006ebd
 8006cf0:	08006ece 	.word	0x08006ece

08006cf4 <memmove>:
 8006cf4:	b510      	push	{r4, lr}
 8006cf6:	4288      	cmp	r0, r1
 8006cf8:	d902      	bls.n	8006d00 <memmove+0xc>
 8006cfa:	188b      	adds	r3, r1, r2
 8006cfc:	4298      	cmp	r0, r3
 8006cfe:	d303      	bcc.n	8006d08 <memmove+0x14>
 8006d00:	2300      	movs	r3, #0
 8006d02:	e007      	b.n	8006d14 <memmove+0x20>
 8006d04:	5c8b      	ldrb	r3, [r1, r2]
 8006d06:	5483      	strb	r3, [r0, r2]
 8006d08:	3a01      	subs	r2, #1
 8006d0a:	d2fb      	bcs.n	8006d04 <memmove+0x10>
 8006d0c:	bd10      	pop	{r4, pc}
 8006d0e:	5ccc      	ldrb	r4, [r1, r3]
 8006d10:	54c4      	strb	r4, [r0, r3]
 8006d12:	3301      	adds	r3, #1
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d1fa      	bne.n	8006d0e <memmove+0x1a>
 8006d18:	e7f8      	b.n	8006d0c <memmove+0x18>
	...

08006d1c <_sbrk_r>:
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	b570      	push	{r4, r5, r6, lr}
 8006d20:	4d06      	ldr	r5, [pc, #24]	; (8006d3c <_sbrk_r+0x20>)
 8006d22:	0004      	movs	r4, r0
 8006d24:	0008      	movs	r0, r1
 8006d26:	602b      	str	r3, [r5, #0]
 8006d28:	f7fb f9b8 	bl	800209c <_sbrk>
 8006d2c:	1c43      	adds	r3, r0, #1
 8006d2e:	d103      	bne.n	8006d38 <_sbrk_r+0x1c>
 8006d30:	682b      	ldr	r3, [r5, #0]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d000      	beq.n	8006d38 <_sbrk_r+0x1c>
 8006d36:	6023      	str	r3, [r4, #0]
 8006d38:	bd70      	pop	{r4, r5, r6, pc}
 8006d3a:	46c0      	nop			; (mov r8, r8)
 8006d3c:	200004c8 	.word	0x200004c8

08006d40 <memchr>:
 8006d40:	b2c9      	uxtb	r1, r1
 8006d42:	1882      	adds	r2, r0, r2
 8006d44:	4290      	cmp	r0, r2
 8006d46:	d101      	bne.n	8006d4c <memchr+0xc>
 8006d48:	2000      	movs	r0, #0
 8006d4a:	4770      	bx	lr
 8006d4c:	7803      	ldrb	r3, [r0, #0]
 8006d4e:	428b      	cmp	r3, r1
 8006d50:	d0fb      	beq.n	8006d4a <memchr+0xa>
 8006d52:	3001      	adds	r0, #1
 8006d54:	e7f6      	b.n	8006d44 <memchr+0x4>

08006d56 <memcpy>:
 8006d56:	2300      	movs	r3, #0
 8006d58:	b510      	push	{r4, lr}
 8006d5a:	429a      	cmp	r2, r3
 8006d5c:	d100      	bne.n	8006d60 <memcpy+0xa>
 8006d5e:	bd10      	pop	{r4, pc}
 8006d60:	5ccc      	ldrb	r4, [r1, r3]
 8006d62:	54c4      	strb	r4, [r0, r3]
 8006d64:	3301      	adds	r3, #1
 8006d66:	e7f8      	b.n	8006d5a <memcpy+0x4>

08006d68 <_realloc_r>:
 8006d68:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006d6a:	0007      	movs	r7, r0
 8006d6c:	000e      	movs	r6, r1
 8006d6e:	0014      	movs	r4, r2
 8006d70:	2900      	cmp	r1, #0
 8006d72:	d105      	bne.n	8006d80 <_realloc_r+0x18>
 8006d74:	0011      	movs	r1, r2
 8006d76:	f7ff fc49 	bl	800660c <_malloc_r>
 8006d7a:	0005      	movs	r5, r0
 8006d7c:	0028      	movs	r0, r5
 8006d7e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006d80:	2a00      	cmp	r2, #0
 8006d82:	d103      	bne.n	8006d8c <_realloc_r+0x24>
 8006d84:	f7ff fbd6 	bl	8006534 <_free_r>
 8006d88:	0025      	movs	r5, r4
 8006d8a:	e7f7      	b.n	8006d7c <_realloc_r+0x14>
 8006d8c:	f000 f81b 	bl	8006dc6 <_malloc_usable_size_r>
 8006d90:	9001      	str	r0, [sp, #4]
 8006d92:	4284      	cmp	r4, r0
 8006d94:	d803      	bhi.n	8006d9e <_realloc_r+0x36>
 8006d96:	0035      	movs	r5, r6
 8006d98:	0843      	lsrs	r3, r0, #1
 8006d9a:	42a3      	cmp	r3, r4
 8006d9c:	d3ee      	bcc.n	8006d7c <_realloc_r+0x14>
 8006d9e:	0021      	movs	r1, r4
 8006da0:	0038      	movs	r0, r7
 8006da2:	f7ff fc33 	bl	800660c <_malloc_r>
 8006da6:	1e05      	subs	r5, r0, #0
 8006da8:	d0e8      	beq.n	8006d7c <_realloc_r+0x14>
 8006daa:	9b01      	ldr	r3, [sp, #4]
 8006dac:	0022      	movs	r2, r4
 8006dae:	429c      	cmp	r4, r3
 8006db0:	d900      	bls.n	8006db4 <_realloc_r+0x4c>
 8006db2:	001a      	movs	r2, r3
 8006db4:	0031      	movs	r1, r6
 8006db6:	0028      	movs	r0, r5
 8006db8:	f7ff ffcd 	bl	8006d56 <memcpy>
 8006dbc:	0031      	movs	r1, r6
 8006dbe:	0038      	movs	r0, r7
 8006dc0:	f7ff fbb8 	bl	8006534 <_free_r>
 8006dc4:	e7da      	b.n	8006d7c <_realloc_r+0x14>

08006dc6 <_malloc_usable_size_r>:
 8006dc6:	1f0b      	subs	r3, r1, #4
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	1f18      	subs	r0, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	da01      	bge.n	8006dd4 <_malloc_usable_size_r+0xe>
 8006dd0:	580b      	ldr	r3, [r1, r0]
 8006dd2:	18c0      	adds	r0, r0, r3
 8006dd4:	4770      	bx	lr
	...

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	46c0      	nop			; (mov r8, r8)
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	46c0      	nop			; (mov r8, r8)
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
