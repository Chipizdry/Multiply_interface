
SMART_HOME.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d30  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  08004df0  08004df0  00014df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004e64  08004e64  00020010  2**0
                  CONTENTS
  4 .ARM          00000000  08004e64  08004e64  00020010  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004e64  08004e64  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004e64  08004e64  00014e64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004e68  08004e68  00014e68  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08004e6c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000010  08004e7c  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000032c  08004e7c  0002032c  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020038  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000eb8a  00000000  00000000  0002007b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000021f1  00000000  00000000  0002ec05  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00030df8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b14  00000000  00000000  00031c10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000110d7  00000000  00000000  00032724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011506  00000000  00000000  000437fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00067f06  00000000  00000000  00054d01  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003280  00000000  00000000  000bcc08  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  000bfe88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000010 	.word	0x20000010
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004dd8 	.word	0x08004dd8

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000014 	.word	0x20000014
 8000104:	08004dd8 	.word	0x08004dd8

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <TCT>:
	 LED2_ON;
	 HAL_UART_Transmit_DMA(&huart1, str, sizeof(str));

}

void TCT(void){
 8000220:	b580      	push	{r7, lr}
 8000222:	af00      	add	r7, sp, #0

	                 if (count==13){OWR_ON;}
 8000224:	4b66      	ldr	r3, [pc, #408]	; (80003c0 <TCT+0x1a0>)
 8000226:	781b      	ldrb	r3, [r3, #0]
 8000228:	2b0d      	cmp	r3, #13
 800022a:	d106      	bne.n	800023a <TCT+0x1a>
 800022c:	2390      	movs	r3, #144	; 0x90
 800022e:	05db      	lsls	r3, r3, #23
 8000230:	2201      	movs	r2, #1
 8000232:	2180      	movs	r1, #128	; 0x80
 8000234:	0018      	movs	r0, r3
 8000236:	f002 f9f4 	bl	8002622 <HAL_GPIO_WritePin>
	                 if ((count==14)&&(alarm==1)){OWR_ON;}
 800023a:	4b61      	ldr	r3, [pc, #388]	; (80003c0 <TCT+0x1a0>)
 800023c:	781b      	ldrb	r3, [r3, #0]
 800023e:	2b0e      	cmp	r3, #14
 8000240:	d10a      	bne.n	8000258 <TCT+0x38>
 8000242:	4b60      	ldr	r3, [pc, #384]	; (80003c4 <TCT+0x1a4>)
 8000244:	781b      	ldrb	r3, [r3, #0]
 8000246:	2b01      	cmp	r3, #1
 8000248:	d106      	bne.n	8000258 <TCT+0x38>
 800024a:	2390      	movs	r3, #144	; 0x90
 800024c:	05db      	lsls	r3, r3, #23
 800024e:	2201      	movs	r2, #1
 8000250:	2180      	movs	r1, #128	; 0x80
 8000252:	0018      	movs	r0, r3
 8000254:	f002 f9e5 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==22){OWR_ON;}
 8000258:	4b59      	ldr	r3, [pc, #356]	; (80003c0 <TCT+0x1a0>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	2b16      	cmp	r3, #22
 800025e:	d106      	bne.n	800026e <TCT+0x4e>
 8000260:	2390      	movs	r3, #144	; 0x90
 8000262:	05db      	lsls	r3, r3, #23
 8000264:	2201      	movs	r2, #1
 8000266:	2180      	movs	r1, #128	; 0x80
 8000268:	0018      	movs	r0, r3
 800026a:	f002 f9da 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==31){OWR_ON;}
 800026e:	4b54      	ldr	r3, [pc, #336]	; (80003c0 <TCT+0x1a0>)
 8000270:	781b      	ldrb	r3, [r3, #0]
 8000272:	2b1f      	cmp	r3, #31
 8000274:	d106      	bne.n	8000284 <TCT+0x64>
 8000276:	2390      	movs	r3, #144	; 0x90
 8000278:	05db      	lsls	r3, r3, #23
 800027a:	2201      	movs	r2, #1
 800027c:	2180      	movs	r1, #128	; 0x80
 800027e:	0018      	movs	r0, r3
 8000280:	f002 f9cf 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==40){OWR_ON;}
 8000284:	4b4e      	ldr	r3, [pc, #312]	; (80003c0 <TCT+0x1a0>)
 8000286:	781b      	ldrb	r3, [r3, #0]
 8000288:	2b28      	cmp	r3, #40	; 0x28
 800028a:	d106      	bne.n	800029a <TCT+0x7a>
 800028c:	2390      	movs	r3, #144	; 0x90
 800028e:	05db      	lsls	r3, r3, #23
 8000290:	2201      	movs	r2, #1
 8000292:	2180      	movs	r1, #128	; 0x80
 8000294:	0018      	movs	r0, r3
 8000296:	f002 f9c4 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==49){OWR_ON;}
 800029a:	4b49      	ldr	r3, [pc, #292]	; (80003c0 <TCT+0x1a0>)
 800029c:	781b      	ldrb	r3, [r3, #0]
 800029e:	2b31      	cmp	r3, #49	; 0x31
 80002a0:	d106      	bne.n	80002b0 <TCT+0x90>
 80002a2:	2390      	movs	r3, #144	; 0x90
 80002a4:	05db      	lsls	r3, r3, #23
 80002a6:	2201      	movs	r2, #1
 80002a8:	2180      	movs	r1, #128	; 0x80
 80002aa:	0018      	movs	r0, r3
 80002ac:	f002 f9b9 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==58){OWR_ON;}
 80002b0:	4b43      	ldr	r3, [pc, #268]	; (80003c0 <TCT+0x1a0>)
 80002b2:	781b      	ldrb	r3, [r3, #0]
 80002b4:	2b3a      	cmp	r3, #58	; 0x3a
 80002b6:	d106      	bne.n	80002c6 <TCT+0xa6>
 80002b8:	2390      	movs	r3, #144	; 0x90
 80002ba:	05db      	lsls	r3, r3, #23
 80002bc:	2201      	movs	r2, #1
 80002be:	2180      	movs	r1, #128	; 0x80
 80002c0:	0018      	movs	r0, r3
 80002c2:	f002 f9ae 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==67){OWR_ON;}
 80002c6:	4b3e      	ldr	r3, [pc, #248]	; (80003c0 <TCT+0x1a0>)
 80002c8:	781b      	ldrb	r3, [r3, #0]
 80002ca:	2b43      	cmp	r3, #67	; 0x43
 80002cc:	d106      	bne.n	80002dc <TCT+0xbc>
 80002ce:	2390      	movs	r3, #144	; 0x90
 80002d0:	05db      	lsls	r3, r3, #23
 80002d2:	2201      	movs	r2, #1
 80002d4:	2180      	movs	r1, #128	; 0x80
 80002d6:	0018      	movs	r0, r3
 80002d8:	f002 f9a3 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==76){OWR_ON;}
 80002dc:	4b38      	ldr	r3, [pc, #224]	; (80003c0 <TCT+0x1a0>)
 80002de:	781b      	ldrb	r3, [r3, #0]
 80002e0:	2b4c      	cmp	r3, #76	; 0x4c
 80002e2:	d106      	bne.n	80002f2 <TCT+0xd2>
 80002e4:	2390      	movs	r3, #144	; 0x90
 80002e6:	05db      	lsls	r3, r3, #23
 80002e8:	2201      	movs	r2, #1
 80002ea:	2180      	movs	r1, #128	; 0x80
 80002ec:	0018      	movs	r0, r3
 80002ee:	f002 f998 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==85){OWR_ON;}
 80002f2:	4b33      	ldr	r3, [pc, #204]	; (80003c0 <TCT+0x1a0>)
 80002f4:	781b      	ldrb	r3, [r3, #0]
 80002f6:	2b55      	cmp	r3, #85	; 0x55
 80002f8:	d106      	bne.n	8000308 <TCT+0xe8>
 80002fa:	2390      	movs	r3, #144	; 0x90
 80002fc:	05db      	lsls	r3, r3, #23
 80002fe:	2201      	movs	r2, #1
 8000300:	2180      	movs	r1, #128	; 0x80
 8000302:	0018      	movs	r0, r3
 8000304:	f002 f98d 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==94){OWR_ON;}
 8000308:	4b2d      	ldr	r3, [pc, #180]	; (80003c0 <TCT+0x1a0>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	2b5e      	cmp	r3, #94	; 0x5e
 800030e:	d106      	bne.n	800031e <TCT+0xfe>
 8000310:	2390      	movs	r3, #144	; 0x90
 8000312:	05db      	lsls	r3, r3, #23
 8000314:	2201      	movs	r2, #1
 8000316:	2180      	movs	r1, #128	; 0x80
 8000318:	0018      	movs	r0, r3
 800031a:	f002 f982 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==103){OWR_ON;}
 800031e:	4b28      	ldr	r3, [pc, #160]	; (80003c0 <TCT+0x1a0>)
 8000320:	781b      	ldrb	r3, [r3, #0]
 8000322:	2b67      	cmp	r3, #103	; 0x67
 8000324:	d106      	bne.n	8000334 <TCT+0x114>
 8000326:	2390      	movs	r3, #144	; 0x90
 8000328:	05db      	lsls	r3, r3, #23
 800032a:	2201      	movs	r2, #1
 800032c:	2180      	movs	r1, #128	; 0x80
 800032e:	0018      	movs	r0, r3
 8000330:	f002 f977 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==112){OWR_ON;}
 8000334:	4b22      	ldr	r3, [pc, #136]	; (80003c0 <TCT+0x1a0>)
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	2b70      	cmp	r3, #112	; 0x70
 800033a:	d106      	bne.n	800034a <TCT+0x12a>
 800033c:	2390      	movs	r3, #144	; 0x90
 800033e:	05db      	lsls	r3, r3, #23
 8000340:	2201      	movs	r2, #1
 8000342:	2180      	movs	r1, #128	; 0x80
 8000344:	0018      	movs	r0, r3
 8000346:	f002 f96c 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==121){OWR_ON;}
 800034a:	4b1d      	ldr	r3, [pc, #116]	; (80003c0 <TCT+0x1a0>)
 800034c:	781b      	ldrb	r3, [r3, #0]
 800034e:	2b79      	cmp	r3, #121	; 0x79
 8000350:	d106      	bne.n	8000360 <TCT+0x140>
 8000352:	2390      	movs	r3, #144	; 0x90
 8000354:	05db      	lsls	r3, r3, #23
 8000356:	2201      	movs	r2, #1
 8000358:	2180      	movs	r1, #128	; 0x80
 800035a:	0018      	movs	r0, r3
 800035c:	f002 f961 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==130){OWR_ON;}
 8000360:	4b17      	ldr	r3, [pc, #92]	; (80003c0 <TCT+0x1a0>)
 8000362:	781b      	ldrb	r3, [r3, #0]
 8000364:	2b82      	cmp	r3, #130	; 0x82
 8000366:	d106      	bne.n	8000376 <TCT+0x156>
 8000368:	2390      	movs	r3, #144	; 0x90
 800036a:	05db      	lsls	r3, r3, #23
 800036c:	2201      	movs	r2, #1
 800036e:	2180      	movs	r1, #128	; 0x80
 8000370:	0018      	movs	r0, r3
 8000372:	f002 f956 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==139){OWR_ON;}
 8000376:	4b12      	ldr	r3, [pc, #72]	; (80003c0 <TCT+0x1a0>)
 8000378:	781b      	ldrb	r3, [r3, #0]
 800037a:	2b8b      	cmp	r3, #139	; 0x8b
 800037c:	d106      	bne.n	800038c <TCT+0x16c>
 800037e:	2390      	movs	r3, #144	; 0x90
 8000380:	05db      	lsls	r3, r3, #23
 8000382:	2201      	movs	r2, #1
 8000384:	2180      	movs	r1, #128	; 0x80
 8000386:	0018      	movs	r0, r3
 8000388:	f002 f94b 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==148){OWR_ON;}
 800038c:	4b0c      	ldr	r3, [pc, #48]	; (80003c0 <TCT+0x1a0>)
 800038e:	781b      	ldrb	r3, [r3, #0]
 8000390:	2b94      	cmp	r3, #148	; 0x94
 8000392:	d106      	bne.n	80003a2 <TCT+0x182>
 8000394:	2390      	movs	r3, #144	; 0x90
 8000396:	05db      	lsls	r3, r3, #23
 8000398:	2201      	movs	r2, #1
 800039a:	2180      	movs	r1, #128	; 0x80
 800039c:	0018      	movs	r0, r3
 800039e:	f002 f940 	bl	8002622 <HAL_GPIO_WritePin>
		        	 if (count==157){OWR_ON;}
 80003a2:	4b07      	ldr	r3, [pc, #28]	; (80003c0 <TCT+0x1a0>)
 80003a4:	781b      	ldrb	r3, [r3, #0]
 80003a6:	2b9d      	cmp	r3, #157	; 0x9d
 80003a8:	d106      	bne.n	80003b8 <TCT+0x198>
 80003aa:	2390      	movs	r3, #144	; 0x90
 80003ac:	05db      	lsls	r3, r3, #23
 80003ae:	2201      	movs	r2, #1
 80003b0:	2180      	movs	r1, #128	; 0x80
 80003b2:	0018      	movs	r0, r3
 80003b4:	f002 f935 	bl	8002622 <HAL_GPIO_WritePin>
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	46c0      	nop			; (mov r8, r8)
 80003c0:	20000320 	.word	0x20000320
 80003c4:	20000224 	.word	0x20000224

080003c8 <Protocol>:




void Protocol(void){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	           //  if ((count==9)&&(alarm=1)){OWR_ON;}

              TCT();
 80003cc:	f7ff ff28 	bl	8000220 <TCT>

	        	 if (count==13)
 80003d0:	4bd6      	ldr	r3, [pc, #856]	; (800072c <Protocol+0x364>)
 80003d2:	781b      	ldrb	r3, [r3, #0]
 80003d4:	2b0d      	cmp	r3, #13
 80003d6:	d12c      	bne.n	8000432 <Protocol+0x6a>
	        	         	   {  directive=0;
 80003d8:	4bd5      	ldr	r3, [pc, #852]	; (8000730 <Protocol+0x368>)
 80003da:	2200      	movs	r2, #0
 80003dc:	701a      	strb	r2, [r3, #0]

	        	         	     directive|= (rcvd[9]<<4)|(rcvd[10]<<3)|(rcvd[11]<<2)|(rcvd[12]<<1)|(rcvd[13]) ;
 80003de:	4bd5      	ldr	r3, [pc, #852]	; (8000734 <Protocol+0x36c>)
 80003e0:	7a5b      	ldrb	r3, [r3, #9]
 80003e2:	011b      	lsls	r3, r3, #4
 80003e4:	b25a      	sxtb	r2, r3
 80003e6:	4bd3      	ldr	r3, [pc, #844]	; (8000734 <Protocol+0x36c>)
 80003e8:	7a9b      	ldrb	r3, [r3, #10]
 80003ea:	00db      	lsls	r3, r3, #3
 80003ec:	b25b      	sxtb	r3, r3
 80003ee:	4313      	orrs	r3, r2
 80003f0:	b25a      	sxtb	r2, r3
 80003f2:	4bd0      	ldr	r3, [pc, #832]	; (8000734 <Protocol+0x36c>)
 80003f4:	7adb      	ldrb	r3, [r3, #11]
 80003f6:	009b      	lsls	r3, r3, #2
 80003f8:	b25b      	sxtb	r3, r3
 80003fa:	4313      	orrs	r3, r2
 80003fc:	b25a      	sxtb	r2, r3
 80003fe:	4bcd      	ldr	r3, [pc, #820]	; (8000734 <Protocol+0x36c>)
 8000400:	7b1b      	ldrb	r3, [r3, #12]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	b25b      	sxtb	r3, r3
 8000406:	4313      	orrs	r3, r2
 8000408:	b25a      	sxtb	r2, r3
 800040a:	4bca      	ldr	r3, [pc, #808]	; (8000734 <Protocol+0x36c>)
 800040c:	7b5b      	ldrb	r3, [r3, #13]
 800040e:	b25b      	sxtb	r3, r3
 8000410:	4313      	orrs	r3, r2
 8000412:	b25a      	sxtb	r2, r3
 8000414:	4bc6      	ldr	r3, [pc, #792]	; (8000730 <Protocol+0x368>)
 8000416:	781b      	ldrb	r3, [r3, #0]
 8000418:	b25b      	sxtb	r3, r3
 800041a:	4313      	orrs	r3, r2
 800041c:	b25b      	sxtb	r3, r3
 800041e:	b2da      	uxtb	r2, r3
 8000420:	4bc3      	ldr	r3, [pc, #780]	; (8000730 <Protocol+0x368>)
 8000422:	701a      	strb	r2, [r3, #0]

	        	         	   OWR_ON;
 8000424:	2390      	movs	r3, #144	; 0x90
 8000426:	05db      	lsls	r3, r3, #23
 8000428:	2201      	movs	r2, #1
 800042a:	2180      	movs	r1, #128	; 0x80
 800042c:	0018      	movs	r0, r3
 800042e:	f002 f8f8 	bl	8002622 <HAL_GPIO_WritePin>
	        	         	    }


	        	         	 switch(directive)
 8000432:	4bbf      	ldr	r3, [pc, #764]	; (8000730 <Protocol+0x368>)
 8000434:	781b      	ldrb	r3, [r3, #0]
 8000436:	2b0e      	cmp	r3, #14
 8000438:	d900      	bls.n	800043c <Protocol+0x74>
 800043a:	e18c      	b.n	8000756 <Protocol+0x38e>
 800043c:	009a      	lsls	r2, r3, #2
 800043e:	4bbe      	ldr	r3, [pc, #760]	; (8000738 <Protocol+0x370>)
 8000440:	18d3      	adds	r3, r2, r3
 8000442:	681b      	ldr	r3, [r3, #0]
 8000444:	469f      	mov	pc, r3
	        	         			   {

	        	         	case 0 :
                                  TCT();
 8000446:	f7ff feeb 	bl	8000220 <TCT>
	        	            break;
 800044a:	e184      	b.n	8000756 <Protocol+0x38e>

	        	         	case 1 :
	        	         	      TCT();
 800044c:	f7ff fee8 	bl	8000220 <TCT>
	        	            break;
 8000450:	e181      	b.n	8000756 <Protocol+0x38e>

	        	         	 case 2 :
	        	         		        	         		 TCT();
 8000452:	f7ff fee5 	bl	8000220 <TCT>

	        	         		        	         		if(count==14){OWR_ON;}
 8000456:	4bb5      	ldr	r3, [pc, #724]	; (800072c <Protocol+0x364>)
 8000458:	781b      	ldrb	r3, [r3, #0]
 800045a:	2b0e      	cmp	r3, #14
 800045c:	d106      	bne.n	800046c <Protocol+0xa4>
 800045e:	2390      	movs	r3, #144	; 0x90
 8000460:	05db      	lsls	r3, r3, #23
 8000462:	2201      	movs	r2, #1
 8000464:	2180      	movs	r1, #128	; 0x80
 8000466:	0018      	movs	r0, r3
 8000468:	f002 f8db 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         		if(count==15){OWR_ON;}
 800046c:	4baf      	ldr	r3, [pc, #700]	; (800072c <Protocol+0x364>)
 800046e:	781b      	ldrb	r3, [r3, #0]
 8000470:	2b0f      	cmp	r3, #15
 8000472:	d000      	beq.n	8000476 <Protocol+0xae>
 8000474:	e168      	b.n	8000748 <Protocol+0x380>
 8000476:	2390      	movs	r3, #144	; 0x90
 8000478:	05db      	lsls	r3, r3, #23
 800047a:	2201      	movs	r2, #1
 800047c:	2180      	movs	r1, #128	; 0x80
 800047e:	0018      	movs	r0, r3
 8000480:	f002 f8cf 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         //		 if(temp_ID==1){OWR_ON;}
	        	         		        	         //		 if(temp_ID==0){OWR_OFF;}
	        	         		        	         //		     temp_ID=0;
	        	         		        	         //		       }

	        	         		        	         	 break;
 8000484:	e160      	b.n	8000748 <Protocol+0x380>

	        	          	 case 3 :

	        	         	                                   TCT();
 8000486:	f7ff fecb 	bl	8000220 <TCT>

	        	         		        	         		 if((count>=14)&&(count<22))
 800048a:	4ba8      	ldr	r3, [pc, #672]	; (800072c <Protocol+0x364>)
 800048c:	781b      	ldrb	r3, [r3, #0]
 800048e:	2b0d      	cmp	r3, #13
 8000490:	d932      	bls.n	80004f8 <Protocol+0x130>
 8000492:	4ba6      	ldr	r3, [pc, #664]	; (800072c <Protocol+0x364>)
 8000494:	781b      	ldrb	r3, [r3, #0]
 8000496:	2b15      	cmp	r3, #21
 8000498:	d82e      	bhi.n	80004f8 <Protocol+0x130>
	        	         		        	         		        	         	       {
	        	         		        	         		        	         	            temp_ID|=((Device_ID>>(21-count))&(0b1));
 800049a:	4ba8      	ldr	r3, [pc, #672]	; (800073c <Protocol+0x374>)
 800049c:	781b      	ldrb	r3, [r3, #0]
 800049e:	001a      	movs	r2, r3
 80004a0:	4ba2      	ldr	r3, [pc, #648]	; (800072c <Protocol+0x364>)
 80004a2:	781b      	ldrb	r3, [r3, #0]
 80004a4:	0019      	movs	r1, r3
 80004a6:	2315      	movs	r3, #21
 80004a8:	1a5b      	subs	r3, r3, r1
 80004aa:	411a      	asrs	r2, r3
 80004ac:	0013      	movs	r3, r2
 80004ae:	b25b      	sxtb	r3, r3
 80004b0:	2201      	movs	r2, #1
 80004b2:	4013      	ands	r3, r2
 80004b4:	b25a      	sxtb	r2, r3
 80004b6:	4ba2      	ldr	r3, [pc, #648]	; (8000740 <Protocol+0x378>)
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	b25b      	sxtb	r3, r3
 80004bc:	4313      	orrs	r3, r2
 80004be:	b25b      	sxtb	r3, r3
 80004c0:	b2da      	uxtb	r2, r3
 80004c2:	4b9f      	ldr	r3, [pc, #636]	; (8000740 <Protocol+0x378>)
 80004c4:	701a      	strb	r2, [r3, #0]
	        	         		        	         		        	         	            if(temp_ID==1){OWR_ON;}
 80004c6:	4b9e      	ldr	r3, [pc, #632]	; (8000740 <Protocol+0x378>)
 80004c8:	781b      	ldrb	r3, [r3, #0]
 80004ca:	2b01      	cmp	r3, #1
 80004cc:	d106      	bne.n	80004dc <Protocol+0x114>
 80004ce:	2390      	movs	r3, #144	; 0x90
 80004d0:	05db      	lsls	r3, r3, #23
 80004d2:	2201      	movs	r2, #1
 80004d4:	2180      	movs	r1, #128	; 0x80
 80004d6:	0018      	movs	r0, r3
 80004d8:	f002 f8a3 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         		        	         	            if(temp_ID==0){OWR_OFF;}
 80004dc:	4b98      	ldr	r3, [pc, #608]	; (8000740 <Protocol+0x378>)
 80004de:	781b      	ldrb	r3, [r3, #0]
 80004e0:	2b00      	cmp	r3, #0
 80004e2:	d106      	bne.n	80004f2 <Protocol+0x12a>
 80004e4:	2390      	movs	r3, #144	; 0x90
 80004e6:	05db      	lsls	r3, r3, #23
 80004e8:	2200      	movs	r2, #0
 80004ea:	2180      	movs	r1, #128	; 0x80
 80004ec:	0018      	movs	r0, r3
 80004ee:	f002 f898 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         		        	         	            temp_ID=0;
 80004f2:	4b93      	ldr	r3, [pc, #588]	; (8000740 <Protocol+0x378>)
 80004f4:	2200      	movs	r2, #0
 80004f6:	701a      	strb	r2, [r3, #0]
	        	         		        	         		        	         	       }



	        	         		        	         	     if((count>=23)&&(count<31)&&(alarm==1))  //Статус прибора.выходов
 80004f8:	4b8c      	ldr	r3, [pc, #560]	; (800072c <Protocol+0x364>)
 80004fa:	781b      	ldrb	r3, [r3, #0]
 80004fc:	2b16      	cmp	r3, #22
 80004fe:	d91c      	bls.n	800053a <Protocol+0x172>
 8000500:	4b8a      	ldr	r3, [pc, #552]	; (800072c <Protocol+0x364>)
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	2b1e      	cmp	r3, #30
 8000506:	d818      	bhi.n	800053a <Protocol+0x172>
 8000508:	4b8e      	ldr	r3, [pc, #568]	; (8000744 <Protocol+0x37c>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b01      	cmp	r3, #1
 800050e:	d114      	bne.n	800053a <Protocol+0x172>
	        	         		        	         	             	        	      			{
	        	         		        	         	             	        	      				temp_ID|=((1)&(0b1));
 8000510:	4b8b      	ldr	r3, [pc, #556]	; (8000740 <Protocol+0x378>)
 8000512:	781b      	ldrb	r3, [r3, #0]
 8000514:	2201      	movs	r2, #1
 8000516:	4313      	orrs	r3, r2
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b89      	ldr	r3, [pc, #548]	; (8000740 <Protocol+0x378>)
 800051c:	701a      	strb	r2, [r3, #0]
	        	         		        	         	             	        	      				if(temp_ID==1){ OWR_ON;}
 800051e:	4b88      	ldr	r3, [pc, #544]	; (8000740 <Protocol+0x378>)
 8000520:	781b      	ldrb	r3, [r3, #0]
 8000522:	2b01      	cmp	r3, #1
 8000524:	d106      	bne.n	8000534 <Protocol+0x16c>
 8000526:	2390      	movs	r3, #144	; 0x90
 8000528:	05db      	lsls	r3, r3, #23
 800052a:	2201      	movs	r2, #1
 800052c:	2180      	movs	r1, #128	; 0x80
 800052e:	0018      	movs	r0, r3
 8000530:	f002 f877 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         	             	        	      				if(temp_ID==0){ }
	        	         		        	         	             	        	      				temp_ID=0;
 8000534:	4b82      	ldr	r3, [pc, #520]	; (8000740 <Protocol+0x378>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
	        	         		        	         	            	        	      			}

	        	         		        	         	     if((count>=32)&&(count<40)){OWR_ON;}
 800053a:	4b7c      	ldr	r3, [pc, #496]	; (800072c <Protocol+0x364>)
 800053c:	781b      	ldrb	r3, [r3, #0]
 800053e:	2b1f      	cmp	r3, #31
 8000540:	d90a      	bls.n	8000558 <Protocol+0x190>
 8000542:	4b7a      	ldr	r3, [pc, #488]	; (800072c <Protocol+0x364>)
 8000544:	781b      	ldrb	r3, [r3, #0]
 8000546:	2b27      	cmp	r3, #39	; 0x27
 8000548:	d806      	bhi.n	8000558 <Protocol+0x190>
 800054a:	2390      	movs	r3, #144	; 0x90
 800054c:	05db      	lsls	r3, r3, #23
 800054e:	2201      	movs	r2, #1
 8000550:	2180      	movs	r1, #128	; 0x80
 8000552:	0018      	movs	r0, r3
 8000554:	f002 f865 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         	   if((count>=41)&&(count<49)){OWR_ON;}
 8000558:	4b74      	ldr	r3, [pc, #464]	; (800072c <Protocol+0x364>)
 800055a:	781b      	ldrb	r3, [r3, #0]
 800055c:	2b28      	cmp	r3, #40	; 0x28
 800055e:	d800      	bhi.n	8000562 <Protocol+0x19a>
 8000560:	e0f4      	b.n	800074c <Protocol+0x384>
 8000562:	4b72      	ldr	r3, [pc, #456]	; (800072c <Protocol+0x364>)
 8000564:	781b      	ldrb	r3, [r3, #0]
 8000566:	2b30      	cmp	r3, #48	; 0x30
 8000568:	d900      	bls.n	800056c <Protocol+0x1a4>
 800056a:	e0ef      	b.n	800074c <Protocol+0x384>
 800056c:	2390      	movs	r3, #144	; 0x90
 800056e:	05db      	lsls	r3, r3, #23
 8000570:	2201      	movs	r2, #1
 8000572:	2180      	movs	r1, #128	; 0x80
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f854 	bl	8002622 <HAL_GPIO_WritePin>
	        	         		        	         	//      if(count==44){ OWR_ON;}




	        	         		        	         	  break;
 800057a:	e0e7      	b.n	800074c <Protocol+0x384>


	        	         	case 4 :
	        	         		      TCT();
 800057c:	f7ff fe50 	bl	8000220 <TCT>
	        	         		break;
 8000580:	e0e9      	b.n	8000756 <Protocol+0x38e>



	        	         	 case 6 :

	        	         		 if(count==30){OWR_ON;}
 8000582:	4b6a      	ldr	r3, [pc, #424]	; (800072c <Protocol+0x364>)
 8000584:	781b      	ldrb	r3, [r3, #0]
 8000586:	2b1e      	cmp	r3, #30
 8000588:	d106      	bne.n	8000598 <Protocol+0x1d0>
 800058a:	2390      	movs	r3, #144	; 0x90
 800058c:	05db      	lsls	r3, r3, #23
 800058e:	2201      	movs	r2, #1
 8000590:	2180      	movs	r1, #128	; 0x80
 8000592:	0018      	movs	r0, r3
 8000594:	f002 f845 	bl	8002622 <HAL_GPIO_WritePin>
	        	         	  if(count==45){OWR_ON;}
 8000598:	4b64      	ldr	r3, [pc, #400]	; (800072c <Protocol+0x364>)
 800059a:	781b      	ldrb	r3, [r3, #0]
 800059c:	2b2d      	cmp	r3, #45	; 0x2d
 800059e:	d106      	bne.n	80005ae <Protocol+0x1e6>
 80005a0:	2390      	movs	r3, #144	; 0x90
 80005a2:	05db      	lsls	r3, r3, #23
 80005a4:	2201      	movs	r2, #1
 80005a6:	2180      	movs	r1, #128	; 0x80
 80005a8:	0018      	movs	r0, r3
 80005aa:	f002 f83a 	bl	8002622 <HAL_GPIO_WritePin>
	        	            if(count==46)
 80005ae:	4b5f      	ldr	r3, [pc, #380]	; (800072c <Protocol+0x364>)
 80005b0:	781b      	ldrb	r3, [r3, #0]
 80005b2:	2b2e      	cmp	r3, #46	; 0x2e
 80005b4:	d000      	beq.n	80005b8 <Protocol+0x1f0>
 80005b6:	e0cb      	b.n	8000750 <Protocol+0x388>
	        	           {
	        	            	if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 80005b8:	4b5e      	ldr	r3, [pc, #376]	; (8000734 <Protocol+0x36c>)
 80005ba:	2223      	movs	r2, #35	; 0x23
 80005bc:	5c9b      	ldrb	r3, [r3, r2]
 80005be:	2b01      	cmp	r3, #1
 80005c0:	d10c      	bne.n	80005dc <Protocol+0x214>
 80005c2:	4b5c      	ldr	r3, [pc, #368]	; (8000734 <Protocol+0x36c>)
 80005c4:	222a      	movs	r2, #42	; 0x2a
 80005c6:	5c9b      	ldrb	r3, [r3, r2]
 80005c8:	2b01      	cmp	r3, #1
 80005ca:	d107      	bne.n	80005dc <Protocol+0x214>
 80005cc:	2380      	movs	r3, #128	; 0x80
 80005ce:	0119      	lsls	r1, r3, #4
 80005d0:	2390      	movs	r3, #144	; 0x90
 80005d2:	05db      	lsls	r3, r3, #23
 80005d4:	2201      	movs	r2, #1
 80005d6:	0018      	movs	r0, r3
 80005d8:	f002 f823 	bl	8002622 <HAL_GPIO_WritePin>
	        	                if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 80005dc:	4b55      	ldr	r3, [pc, #340]	; (8000734 <Protocol+0x36c>)
 80005de:	2224      	movs	r2, #36	; 0x24
 80005e0:	5c9b      	ldrb	r3, [r3, r2]
 80005e2:	2b01      	cmp	r3, #1
 80005e4:	d10c      	bne.n	8000600 <Protocol+0x238>
 80005e6:	4b53      	ldr	r3, [pc, #332]	; (8000734 <Protocol+0x36c>)
 80005e8:	222b      	movs	r2, #43	; 0x2b
 80005ea:	5c9b      	ldrb	r3, [r3, r2]
 80005ec:	2b01      	cmp	r3, #1
 80005ee:	d107      	bne.n	8000600 <Protocol+0x238>
 80005f0:	2380      	movs	r3, #128	; 0x80
 80005f2:	0119      	lsls	r1, r3, #4
 80005f4:	2390      	movs	r3, #144	; 0x90
 80005f6:	05db      	lsls	r3, r3, #23
 80005f8:	2200      	movs	r2, #0
 80005fa:	0018      	movs	r0, r3
 80005fc:	f002 f811 	bl	8002622 <HAL_GPIO_WritePin>
	        	                if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 8000600:	4b4c      	ldr	r3, [pc, #304]	; (8000734 <Protocol+0x36c>)
 8000602:	2225      	movs	r2, #37	; 0x25
 8000604:	5c9b      	ldrb	r3, [r3, r2]
 8000606:	2b01      	cmp	r3, #1
 8000608:	d10c      	bne.n	8000624 <Protocol+0x25c>
 800060a:	4b4a      	ldr	r3, [pc, #296]	; (8000734 <Protocol+0x36c>)
 800060c:	222c      	movs	r2, #44	; 0x2c
 800060e:	5c9b      	ldrb	r3, [r3, r2]
 8000610:	2b01      	cmp	r3, #1
 8000612:	d107      	bne.n	8000624 <Protocol+0x25c>
 8000614:	2380      	movs	r3, #128	; 0x80
 8000616:	0159      	lsls	r1, r3, #5
 8000618:	2390      	movs	r3, #144	; 0x90
 800061a:	05db      	lsls	r3, r3, #23
 800061c:	2201      	movs	r2, #1
 800061e:	0018      	movs	r0, r3
 8000620:	f001 ffff 	bl	8002622 <HAL_GPIO_WritePin>
	        	                if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 8000624:	4b43      	ldr	r3, [pc, #268]	; (8000734 <Protocol+0x36c>)
 8000626:	2226      	movs	r2, #38	; 0x26
 8000628:	5c9b      	ldrb	r3, [r3, r2]
 800062a:	2b01      	cmp	r3, #1
 800062c:	d000      	beq.n	8000630 <Protocol+0x268>
 800062e:	e08f      	b.n	8000750 <Protocol+0x388>
 8000630:	4b40      	ldr	r3, [pc, #256]	; (8000734 <Protocol+0x36c>)
 8000632:	222d      	movs	r2, #45	; 0x2d
 8000634:	5c9b      	ldrb	r3, [r3, r2]
 8000636:	2b01      	cmp	r3, #1
 8000638:	d000      	beq.n	800063c <Protocol+0x274>
 800063a:	e089      	b.n	8000750 <Protocol+0x388>
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	0159      	lsls	r1, r3, #5
 8000640:	2390      	movs	r3, #144	; 0x90
 8000642:	05db      	lsls	r3, r3, #23
 8000644:	2200      	movs	r2, #0
 8000646:	0018      	movs	r0, r3
 8000648:	f001 ffeb 	bl	8002622 <HAL_GPIO_WritePin>

	        	         			        	         			   }


	        	         	 break;
 800064c:	e080      	b.n	8000750 <Protocol+0x388>



	        	         	  case 14 :

	        	         			   if(count==30){OWR_ON;}
 800064e:	4b37      	ldr	r3, [pc, #220]	; (800072c <Protocol+0x364>)
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	2b1e      	cmp	r3, #30
 8000654:	d106      	bne.n	8000664 <Protocol+0x29c>
 8000656:	2390      	movs	r3, #144	; 0x90
 8000658:	05db      	lsls	r3, r3, #23
 800065a:	2201      	movs	r2, #1
 800065c:	2180      	movs	r1, #128	; 0x80
 800065e:	0018      	movs	r0, r3
 8000660:	f001 ffdf 	bl	8002622 <HAL_GPIO_WritePin>
	        	         			   if(count==45){OWR_ON;}
 8000664:	4b31      	ldr	r3, [pc, #196]	; (800072c <Protocol+0x364>)
 8000666:	781b      	ldrb	r3, [r3, #0]
 8000668:	2b2d      	cmp	r3, #45	; 0x2d
 800066a:	d106      	bne.n	800067a <Protocol+0x2b2>
 800066c:	2390      	movs	r3, #144	; 0x90
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	2201      	movs	r2, #1
 8000672:	2180      	movs	r1, #128	; 0x80
 8000674:	0018      	movs	r0, r3
 8000676:	f001 ffd4 	bl	8002622 <HAL_GPIO_WritePin>
	        	         			   if(count==54){OWR_ON;}
 800067a:	4b2c      	ldr	r3, [pc, #176]	; (800072c <Protocol+0x364>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b36      	cmp	r3, #54	; 0x36
 8000680:	d106      	bne.n	8000690 <Protocol+0x2c8>
 8000682:	2390      	movs	r3, #144	; 0x90
 8000684:	05db      	lsls	r3, r3, #23
 8000686:	2201      	movs	r2, #1
 8000688:	2180      	movs	r1, #128	; 0x80
 800068a:	0018      	movs	r0, r3
 800068c:	f001 ffc9 	bl	8002622 <HAL_GPIO_WritePin>

	        	         			   if(count==46)
 8000690:	4b26      	ldr	r3, [pc, #152]	; (800072c <Protocol+0x364>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	2b2e      	cmp	r3, #46	; 0x2e
 8000696:	d15d      	bne.n	8000754 <Protocol+0x38c>
	        	         			   {

	        	         				   if((rcvd[35]==1)&&(rcvd[42]==1)) {LED1_ON;}
 8000698:	4b26      	ldr	r3, [pc, #152]	; (8000734 <Protocol+0x36c>)
 800069a:	2223      	movs	r2, #35	; 0x23
 800069c:	5c9b      	ldrb	r3, [r3, r2]
 800069e:	2b01      	cmp	r3, #1
 80006a0:	d10c      	bne.n	80006bc <Protocol+0x2f4>
 80006a2:	4b24      	ldr	r3, [pc, #144]	; (8000734 <Protocol+0x36c>)
 80006a4:	222a      	movs	r2, #42	; 0x2a
 80006a6:	5c9b      	ldrb	r3, [r3, r2]
 80006a8:	2b01      	cmp	r3, #1
 80006aa:	d107      	bne.n	80006bc <Protocol+0x2f4>
 80006ac:	2380      	movs	r3, #128	; 0x80
 80006ae:	0119      	lsls	r1, r3, #4
 80006b0:	2390      	movs	r3, #144	; 0x90
 80006b2:	05db      	lsls	r3, r3, #23
 80006b4:	2201      	movs	r2, #1
 80006b6:	0018      	movs	r0, r3
 80006b8:	f001 ffb3 	bl	8002622 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[36]==1)&&(rcvd[43]==1)) {LED1_OFF;}
 80006bc:	4b1d      	ldr	r3, [pc, #116]	; (8000734 <Protocol+0x36c>)
 80006be:	2224      	movs	r2, #36	; 0x24
 80006c0:	5c9b      	ldrb	r3, [r3, r2]
 80006c2:	2b01      	cmp	r3, #1
 80006c4:	d10c      	bne.n	80006e0 <Protocol+0x318>
 80006c6:	4b1b      	ldr	r3, [pc, #108]	; (8000734 <Protocol+0x36c>)
 80006c8:	222b      	movs	r2, #43	; 0x2b
 80006ca:	5c9b      	ldrb	r3, [r3, r2]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d107      	bne.n	80006e0 <Protocol+0x318>
 80006d0:	2380      	movs	r3, #128	; 0x80
 80006d2:	0119      	lsls	r1, r3, #4
 80006d4:	2390      	movs	r3, #144	; 0x90
 80006d6:	05db      	lsls	r3, r3, #23
 80006d8:	2200      	movs	r2, #0
 80006da:	0018      	movs	r0, r3
 80006dc:	f001 ffa1 	bl	8002622 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[37]==1)&&(rcvd[44]==1)) {LED2_ON;}
 80006e0:	4b14      	ldr	r3, [pc, #80]	; (8000734 <Protocol+0x36c>)
 80006e2:	2225      	movs	r2, #37	; 0x25
 80006e4:	5c9b      	ldrb	r3, [r3, r2]
 80006e6:	2b01      	cmp	r3, #1
 80006e8:	d10c      	bne.n	8000704 <Protocol+0x33c>
 80006ea:	4b12      	ldr	r3, [pc, #72]	; (8000734 <Protocol+0x36c>)
 80006ec:	222c      	movs	r2, #44	; 0x2c
 80006ee:	5c9b      	ldrb	r3, [r3, r2]
 80006f0:	2b01      	cmp	r3, #1
 80006f2:	d107      	bne.n	8000704 <Protocol+0x33c>
 80006f4:	2380      	movs	r3, #128	; 0x80
 80006f6:	0159      	lsls	r1, r3, #5
 80006f8:	2390      	movs	r3, #144	; 0x90
 80006fa:	05db      	lsls	r3, r3, #23
 80006fc:	2201      	movs	r2, #1
 80006fe:	0018      	movs	r0, r3
 8000700:	f001 ff8f 	bl	8002622 <HAL_GPIO_WritePin>
	        	         				   if((rcvd[38]==1)&&(rcvd[45]==1)) {LED2_OFF;}
 8000704:	4b0b      	ldr	r3, [pc, #44]	; (8000734 <Protocol+0x36c>)
 8000706:	2226      	movs	r2, #38	; 0x26
 8000708:	5c9b      	ldrb	r3, [r3, r2]
 800070a:	2b01      	cmp	r3, #1
 800070c:	d122      	bne.n	8000754 <Protocol+0x38c>
 800070e:	4b09      	ldr	r3, [pc, #36]	; (8000734 <Protocol+0x36c>)
 8000710:	222d      	movs	r2, #45	; 0x2d
 8000712:	5c9b      	ldrb	r3, [r3, r2]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d11d      	bne.n	8000754 <Protocol+0x38c>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	0159      	lsls	r1, r3, #5
 800071c:	2390      	movs	r3, #144	; 0x90
 800071e:	05db      	lsls	r3, r3, #23
 8000720:	2200      	movs	r2, #0
 8000722:	0018      	movs	r0, r3
 8000724:	f001 ff7d 	bl	8002622 <HAL_GPIO_WritePin>
	        	         			   }
	        	         			   break;
 8000728:	e014      	b.n	8000754 <Protocol+0x38c>
 800072a:	46c0      	nop			; (mov r8, r8)
 800072c:	20000320 	.word	0x20000320
 8000730:	20000323 	.word	0x20000323
 8000734:	20000228 	.word	0x20000228
 8000738:	08004df0 	.word	0x08004df0
 800073c:	20000000 	.word	0x20000000
 8000740:	20000325 	.word	0x20000325
 8000744:	20000224 	.word	0x20000224
	        	         		        	         	 break;
 8000748:	46c0      	nop			; (mov r8, r8)
 800074a:	e004      	b.n	8000756 <Protocol+0x38e>
	        	         		        	         	  break;
 800074c:	46c0      	nop			; (mov r8, r8)
 800074e:	e002      	b.n	8000756 <Protocol+0x38e>
	        	         	 break;
 8000750:	46c0      	nop			; (mov r8, r8)
 8000752:	e000      	b.n	8000756 <Protocol+0x38e>
	        	         			   break;
 8000754:	46c0      	nop			; (mov r8, r8)



	        	         			   }
                                  }
 8000756:	46c0      	nop			; (mov r8, r8)
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000760:	f001 f81a 	bl	8001798 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000764:	f000 f832 	bl	80007cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000768:	f000 faba 	bl	8000ce0 <MX_GPIO_Init>
  MX_DMA_Init();
 800076c:	f000 fa92 	bl	8000c94 <MX_DMA_Init>
  MX_TIM1_Init();
 8000770:	f000 f954 	bl	8000a1c <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8000774:	f000 fa5e 	bl	8000c34 <MX_USART1_UART_Init>
  MX_ADC_Init();
 8000778:	f000 f888 	bl	800088c <MX_ADC_Init>
  MX_TIM3_Init();
 800077c:	f000 fa04 	bl	8000b88 <MX_TIM3_Init>
  MX_IWDG_Init();
 8000780:	f000 f92c 	bl	80009dc <MX_IWDG_Init>
  /* USER CODE BEGIN 2 */
      ISOL_ON;
 8000784:	2390      	movs	r3, #144	; 0x90
 8000786:	05db      	lsls	r3, r3, #23
 8000788:	2201      	movs	r2, #1
 800078a:	2140      	movs	r1, #64	; 0x40
 800078c:	0018      	movs	r0, r3
 800078e:	f001 ff48 	bl	8002622 <HAL_GPIO_WritePin>
      alarm=1;
 8000792:	4b0c      	ldr	r3, [pc, #48]	; (80007c4 <main+0x68>)
 8000794:	2201      	movs	r2, #1
 8000796:	701a      	strb	r2, [r3, #0]
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000798:	4b0b      	ldr	r3, [pc, #44]	; (80007c8 <main+0x6c>)
 800079a:	2100      	movs	r1, #0
 800079c:	0018      	movs	r0, r3
 800079e:	f002 fda1 	bl	80032e4 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_2);
 80007a2:	4b09      	ldr	r3, [pc, #36]	; (80007c8 <main+0x6c>)
 80007a4:	2104      	movs	r1, #4
 80007a6:	0018      	movs	r0, r3
 80007a8:	f002 fd9c 	bl	80032e4 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_3);
 80007ac:	4b06      	ldr	r3, [pc, #24]	; (80007c8 <main+0x6c>)
 80007ae:	2108      	movs	r1, #8
 80007b0:	0018      	movs	r0, r3
 80007b2:	f002 fd97 	bl	80032e4 <HAL_TIM_IC_Start_IT>
     HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_4);
 80007b6:	4b04      	ldr	r3, [pc, #16]	; (80007c8 <main+0x6c>)
 80007b8:	210c      	movs	r1, #12
 80007ba:	0018      	movs	r0, r3
 80007bc:	f002 fd92 	bl	80032e4 <HAL_TIM_IC_Start_IT>
  //  HAL_PWR_EnableSleepOnExit ();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007c0:	e7fe      	b.n	80007c0 <main+0x64>
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	20000224 	.word	0x20000224
 80007c8:	200000c0 	.word	0x200000c0

080007cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007cc:	b590      	push	{r4, r7, lr}
 80007ce:	b095      	sub	sp, #84	; 0x54
 80007d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007d2:	2420      	movs	r4, #32
 80007d4:	193b      	adds	r3, r7, r4
 80007d6:	0018      	movs	r0, r3
 80007d8:	2330      	movs	r3, #48	; 0x30
 80007da:	001a      	movs	r2, r3
 80007dc:	2100      	movs	r1, #0
 80007de:	f004 facf 	bl	8004d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007e2:	2310      	movs	r3, #16
 80007e4:	18fb      	adds	r3, r7, r3
 80007e6:	0018      	movs	r0, r3
 80007e8:	2310      	movs	r3, #16
 80007ea:	001a      	movs	r2, r3
 80007ec:	2100      	movs	r1, #0
 80007ee:	f004 fac7 	bl	8004d80 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007f2:	003b      	movs	r3, r7
 80007f4:	0018      	movs	r0, r3
 80007f6:	2310      	movs	r3, #16
 80007f8:	001a      	movs	r2, r3
 80007fa:	2100      	movs	r1, #0
 80007fc:	f004 fac0 	bl	8004d80 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000800:	0021      	movs	r1, r4
 8000802:	187b      	adds	r3, r7, r1
 8000804:	221a      	movs	r2, #26
 8000806:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_LSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	187b      	adds	r3, r7, r1
 800080a:	2201      	movs	r2, #1
 800080c:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 800080e:	187b      	adds	r3, r7, r1
 8000810:	2201      	movs	r2, #1
 8000812:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000814:	187b      	adds	r3, r7, r1
 8000816:	2210      	movs	r2, #16
 8000818:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI14CalibrationValue = 16;
 800081a:	187b      	adds	r3, r7, r1
 800081c:	2210      	movs	r2, #16
 800081e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000820:	187b      	adds	r3, r7, r1
 8000822:	2201      	movs	r2, #1
 8000824:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000826:	187b      	adds	r3, r7, r1
 8000828:	2200      	movs	r2, #0
 800082a:	621a      	str	r2, [r3, #32]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800082c:	187b      	adds	r3, r7, r1
 800082e:	0018      	movs	r0, r3
 8000830:	f001 ff84 	bl	800273c <HAL_RCC_OscConfig>
 8000834:	1e03      	subs	r3, r0, #0
 8000836:	d001      	beq.n	800083c <SystemClock_Config+0x70>
  {
    Error_Handler();
 8000838:	f000 fd4c 	bl	80012d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800083c:	2110      	movs	r1, #16
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2207      	movs	r2, #7
 8000842:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000844:	187b      	adds	r3, r7, r1
 8000846:	2200      	movs	r2, #0
 8000848:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800084a:	187b      	adds	r3, r7, r1
 800084c:	2200      	movs	r2, #0
 800084e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000850:	187b      	adds	r3, r7, r1
 8000852:	2200      	movs	r2, #0
 8000854:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2100      	movs	r1, #0
 800085a:	0018      	movs	r0, r3
 800085c:	f002 fa88 	bl	8002d70 <HAL_RCC_ClockConfig>
 8000860:	1e03      	subs	r3, r0, #0
 8000862:	d001      	beq.n	8000868 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000864:	f000 fd36 	bl	80012d4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000868:	003b      	movs	r3, r7
 800086a:	2201      	movs	r2, #1
 800086c:	601a      	str	r2, [r3, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_HSI;
 800086e:	003b      	movs	r3, r7
 8000870:	2203      	movs	r2, #3
 8000872:	609a      	str	r2, [r3, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000874:	003b      	movs	r3, r7
 8000876:	0018      	movs	r0, r3
 8000878:	f002 fbbe 	bl	8002ff8 <HAL_RCCEx_PeriphCLKConfig>
 800087c:	1e03      	subs	r3, r0, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000880:	f000 fd28 	bl	80012d4 <Error_Handler>
  }
}
 8000884:	46c0      	nop			; (mov r8, r8)
 8000886:	46bd      	mov	sp, r7
 8000888:	b015      	add	sp, #84	; 0x54
 800088a:	bd90      	pop	{r4, r7, pc}

0800088c <MX_ADC_Init>:
  * @brief ADC Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b084      	sub	sp, #16
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000892:	1d3b      	adds	r3, r7, #4
 8000894:	0018      	movs	r0, r3
 8000896:	230c      	movs	r3, #12
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f004 fa70 	bl	8004d80 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 80008a0:	4b4c      	ldr	r3, [pc, #304]	; (80009d4 <MX_ADC_Init+0x148>)
 80008a2:	4a4d      	ldr	r2, [pc, #308]	; (80009d8 <MX_ADC_Init+0x14c>)
 80008a4:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80008a6:	4b4b      	ldr	r3, [pc, #300]	; (80009d4 <MX_ADC_Init+0x148>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80008ac:	4b49      	ldr	r3, [pc, #292]	; (80009d4 <MX_ADC_Init+0x148>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b2:	4b48      	ldr	r3, [pc, #288]	; (80009d4 <MX_ADC_Init+0x148>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80008b8:	4b46      	ldr	r3, [pc, #280]	; (80009d4 <MX_ADC_Init+0x148>)
 80008ba:	2201      	movs	r2, #1
 80008bc:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008be:	4b45      	ldr	r3, [pc, #276]	; (80009d4 <MX_ADC_Init+0x148>)
 80008c0:	2204      	movs	r2, #4
 80008c2:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80008c4:	4b43      	ldr	r3, [pc, #268]	; (80009d4 <MX_ADC_Init+0x148>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	761a      	strb	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80008ca:	4b42      	ldr	r3, [pc, #264]	; (80009d4 <MX_ADC_Init+0x148>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	765a      	strb	r2, [r3, #25]
  hadc.Init.ContinuousConvMode = DISABLE;
 80008d0:	4b40      	ldr	r3, [pc, #256]	; (80009d4 <MX_ADC_Init+0x148>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	769a      	strb	r2, [r3, #26]
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80008d6:	4b3f      	ldr	r3, [pc, #252]	; (80009d4 <MX_ADC_Init+0x148>)
 80008d8:	2200      	movs	r2, #0
 80008da:	76da      	strb	r2, [r3, #27]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008dc:	4b3d      	ldr	r3, [pc, #244]	; (80009d4 <MX_ADC_Init+0x148>)
 80008de:	22c2      	movs	r2, #194	; 0xc2
 80008e0:	32ff      	adds	r2, #255	; 0xff
 80008e2:	61da      	str	r2, [r3, #28]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008e4:	4b3b      	ldr	r3, [pc, #236]	; (80009d4 <MX_ADC_Init+0x148>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	621a      	str	r2, [r3, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80008ea:	4b3a      	ldr	r3, [pc, #232]	; (80009d4 <MX_ADC_Init+0x148>)
 80008ec:	2224      	movs	r2, #36	; 0x24
 80008ee:	2100      	movs	r1, #0
 80008f0:	5499      	strb	r1, [r3, r2]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008f2:	4b38      	ldr	r3, [pc, #224]	; (80009d4 <MX_ADC_Init+0x148>)
 80008f4:	2201      	movs	r2, #1
 80008f6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80008f8:	4b36      	ldr	r3, [pc, #216]	; (80009d4 <MX_ADC_Init+0x148>)
 80008fa:	0018      	movs	r0, r3
 80008fc:	f000 ffb0 	bl	8001860 <HAL_ADC_Init>
 8000900:	1e03      	subs	r3, r0, #0
 8000902:	d001      	beq.n	8000908 <MX_ADC_Init+0x7c>
  {
    Error_Handler();
 8000904:	f000 fce6 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000908:	1d3b      	adds	r3, r7, #4
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 800090e:	1d3b      	adds	r3, r7, #4
 8000910:	2280      	movs	r2, #128	; 0x80
 8000912:	0152      	lsls	r2, r2, #5
 8000914:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_7CYCLES_5;
 8000916:	1d3b      	adds	r3, r7, #4
 8000918:	2201      	movs	r2, #1
 800091a:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800091c:	1d3a      	adds	r2, r7, #4
 800091e:	4b2d      	ldr	r3, [pc, #180]	; (80009d4 <MX_ADC_Init+0x148>)
 8000920:	0011      	movs	r1, r2
 8000922:	0018      	movs	r0, r3
 8000924:	f001 f998 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000928:	1e03      	subs	r3, r0, #0
 800092a:	d001      	beq.n	8000930 <MX_ADC_Init+0xa4>
  {
    Error_Handler();
 800092c:	f000 fcd2 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000930:	1d3b      	adds	r3, r7, #4
 8000932:	2201      	movs	r2, #1
 8000934:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000936:	1d3a      	adds	r2, r7, #4
 8000938:	4b26      	ldr	r3, [pc, #152]	; (80009d4 <MX_ADC_Init+0x148>)
 800093a:	0011      	movs	r1, r2
 800093c:	0018      	movs	r0, r3
 800093e:	f001 f98b 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000942:	1e03      	subs	r3, r0, #0
 8000944:	d001      	beq.n	800094a <MX_ADC_Init+0xbe>
  {
    Error_Handler();
 8000946:	f000 fcc5 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800094a:	1d3b      	adds	r3, r7, #4
 800094c:	2204      	movs	r2, #4
 800094e:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000950:	1d3a      	adds	r2, r7, #4
 8000952:	4b20      	ldr	r3, [pc, #128]	; (80009d4 <MX_ADC_Init+0x148>)
 8000954:	0011      	movs	r1, r2
 8000956:	0018      	movs	r0, r3
 8000958:	f001 f97e 	bl	8001c58 <HAL_ADC_ConfigChannel>
 800095c:	1e03      	subs	r3, r0, #0
 800095e:	d001      	beq.n	8000964 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 8000960:	f000 fcb8 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000964:	1d3b      	adds	r3, r7, #4
 8000966:	2205      	movs	r2, #5
 8000968:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800096a:	1d3a      	adds	r2, r7, #4
 800096c:	4b19      	ldr	r3, [pc, #100]	; (80009d4 <MX_ADC_Init+0x148>)
 800096e:	0011      	movs	r1, r2
 8000970:	0018      	movs	r0, r3
 8000972:	f001 f971 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000976:	1e03      	subs	r3, r0, #0
 8000978:	d001      	beq.n	800097e <MX_ADC_Init+0xf2>
  {
    Error_Handler();
 800097a:	f000 fcab 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800097e:	1d3b      	adds	r3, r7, #4
 8000980:	2208      	movs	r2, #8
 8000982:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000984:	1d3a      	adds	r2, r7, #4
 8000986:	4b13      	ldr	r3, [pc, #76]	; (80009d4 <MX_ADC_Init+0x148>)
 8000988:	0011      	movs	r1, r2
 800098a:	0018      	movs	r0, r3
 800098c:	f001 f964 	bl	8001c58 <HAL_ADC_ConfigChannel>
 8000990:	1e03      	subs	r3, r0, #0
 8000992:	d001      	beq.n	8000998 <MX_ADC_Init+0x10c>
  {
    Error_Handler();
 8000994:	f000 fc9e 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000998:	1d3b      	adds	r3, r7, #4
 800099a:	2210      	movs	r2, #16
 800099c:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800099e:	1d3a      	adds	r2, r7, #4
 80009a0:	4b0c      	ldr	r3, [pc, #48]	; (80009d4 <MX_ADC_Init+0x148>)
 80009a2:	0011      	movs	r1, r2
 80009a4:	0018      	movs	r0, r3
 80009a6:	f001 f957 	bl	8001c58 <HAL_ADC_ConfigChannel>
 80009aa:	1e03      	subs	r3, r0, #0
 80009ac:	d001      	beq.n	80009b2 <MX_ADC_Init+0x126>
  {
    Error_Handler();
 80009ae:	f000 fc91 	bl	80012d4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_VREFINT;
 80009b2:	1d3b      	adds	r3, r7, #4
 80009b4:	2211      	movs	r2, #17
 80009b6:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80009b8:	1d3a      	adds	r2, r7, #4
 80009ba:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <MX_ADC_Init+0x148>)
 80009bc:	0011      	movs	r1, r2
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 f94a 	bl	8001c58 <HAL_ADC_ConfigChannel>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_ADC_Init+0x140>
  {
    Error_Handler();
 80009c8:	f000 fc84 	bl	80012d4 <Error_Handler>
  /* USER CODE BEGIN ADC_Init 2 */


  /* USER CODE END ADC_Init 2 */

}
 80009cc:	46c0      	nop			; (mov r8, r8)
 80009ce:	46bd      	mov	sp, r7
 80009d0:	b004      	add	sp, #16
 80009d2:	bd80      	pop	{r7, pc}
 80009d4:	2000002c 	.word	0x2000002c
 80009d8:	40012400 	.word	0x40012400

080009dc <MX_IWDG_Init>:
  * @brief IWDG Initialization Function
  * @param None
  * @retval None
  */
static void MX_IWDG_Init(void)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	af00      	add	r7, sp, #0
  /* USER CODE END IWDG_Init 0 */

  /* USER CODE BEGIN IWDG_Init 1 */

  /* USER CODE END IWDG_Init 1 */
  hiwdg.Instance = IWDG;
 80009e0:	4b0b      	ldr	r3, [pc, #44]	; (8000a10 <MX_IWDG_Init+0x34>)
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <MX_IWDG_Init+0x38>)
 80009e4:	601a      	str	r2, [r3, #0]
  hiwdg.Init.Prescaler = IWDG_PRESCALER_64;
 80009e6:	4b0a      	ldr	r3, [pc, #40]	; (8000a10 <MX_IWDG_Init+0x34>)
 80009e8:	2204      	movs	r2, #4
 80009ea:	605a      	str	r2, [r3, #4]
  hiwdg.Init.Window = 4095;
 80009ec:	4b08      	ldr	r3, [pc, #32]	; (8000a10 <MX_IWDG_Init+0x34>)
 80009ee:	4a0a      	ldr	r2, [pc, #40]	; (8000a18 <MX_IWDG_Init+0x3c>)
 80009f0:	60da      	str	r2, [r3, #12]
  hiwdg.Init.Reload = 4095;
 80009f2:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <MX_IWDG_Init+0x34>)
 80009f4:	4a08      	ldr	r2, [pc, #32]	; (8000a18 <MX_IWDG_Init+0x3c>)
 80009f6:	609a      	str	r2, [r3, #8]
  if (HAL_IWDG_Init(&hiwdg) != HAL_OK)
 80009f8:	4b05      	ldr	r3, [pc, #20]	; (8000a10 <MX_IWDG_Init+0x34>)
 80009fa:	0018      	movs	r0, r3
 80009fc:	f001 fe2e 	bl	800265c <HAL_IWDG_Init>
 8000a00:	1e03      	subs	r3, r0, #0
 8000a02:	d001      	beq.n	8000a08 <MX_IWDG_Init+0x2c>
  {
    Error_Handler();
 8000a04:	f000 fc66 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN IWDG_Init 2 */

  /* USER CODE END IWDG_Init 2 */

}
 8000a08:	46c0      	nop			; (mov r8, r8)
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	46c0      	nop			; (mov r8, r8)
 8000a10:	200000b0 	.word	0x200000b0
 8000a14:	40003000 	.word	0x40003000
 8000a18:	00000fff 	.word	0x00000fff

08000a1c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a22:	2318      	movs	r3, #24
 8000a24:	18fb      	adds	r3, r7, r3
 8000a26:	0018      	movs	r0, r3
 8000a28:	2310      	movs	r3, #16
 8000a2a:	001a      	movs	r2, r3
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f004 f9a7 	bl	8004d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a32:	2310      	movs	r3, #16
 8000a34:	18fb      	adds	r3, r7, r3
 8000a36:	0018      	movs	r0, r3
 8000a38:	2308      	movs	r3, #8
 8000a3a:	001a      	movs	r2, r3
 8000a3c:	2100      	movs	r1, #0
 8000a3e:	f004 f99f 	bl	8004d80 <memset>
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000a42:	003b      	movs	r3, r7
 8000a44:	0018      	movs	r0, r3
 8000a46:	2310      	movs	r3, #16
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f004 f998 	bl	8004d80 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000a50:	4b4a      	ldr	r3, [pc, #296]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a52:	4a4b      	ldr	r2, [pc, #300]	; (8000b80 <MX_TIM1_Init+0x164>)
 8000a54:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 499;
 8000a56:	4b49      	ldr	r3, [pc, #292]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a58:	22f4      	movs	r2, #244	; 0xf4
 8000a5a:	32ff      	adds	r2, #255	; 0xff
 8000a5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a5e:	4b47      	ldr	r3, [pc, #284]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a60:	2200      	movs	r2, #0
 8000a62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 40000;
 8000a64:	4b45      	ldr	r3, [pc, #276]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <MX_TIM1_Init+0x168>)
 8000a68:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000a6a:	4b44      	ldr	r3, [pc, #272]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000a70:	4b42      	ldr	r3, [pc, #264]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a72:	2200      	movs	r2, #0
 8000a74:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a76:	4b41      	ldr	r3, [pc, #260]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a78:	2200      	movs	r2, #0
 8000a7a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000a7c:	4b3f      	ldr	r3, [pc, #252]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a7e:	0018      	movs	r0, r3
 8000a80:	f002 fb88 	bl	8003194 <HAL_TIM_Base_Init>
 8000a84:	1e03      	subs	r3, r0, #0
 8000a86:	d001      	beq.n	8000a8c <MX_TIM1_Init+0x70>
  {
    Error_Handler();
 8000a88:	f000 fc24 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000a8c:	2118      	movs	r1, #24
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2280      	movs	r2, #128	; 0x80
 8000a92:	0152      	lsls	r2, r2, #5
 8000a94:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000a96:	187a      	adds	r2, r7, r1
 8000a98:	4b38      	ldr	r3, [pc, #224]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f002 fedd 	bl	800385c <HAL_TIM_ConfigClockSource>
 8000aa2:	1e03      	subs	r3, r0, #0
 8000aa4:	d001      	beq.n	8000aaa <MX_TIM1_Init+0x8e>
  {
    Error_Handler();
 8000aa6:	f000 fc15 	bl	80012d4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8000aaa:	4b34      	ldr	r3, [pc, #208]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000aac:	0018      	movs	r0, r3
 8000aae:	f002 fbc1 	bl	8003234 <HAL_TIM_IC_Init>
 8000ab2:	1e03      	subs	r3, r0, #0
 8000ab4:	d001      	beq.n	8000aba <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8000ab6:	f000 fc0d 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000aba:	2110      	movs	r1, #16
 8000abc:	187b      	adds	r3, r7, r1
 8000abe:	2200      	movs	r2, #0
 8000ac0:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ac2:	187b      	adds	r3, r7, r1
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ac8:	187a      	adds	r2, r7, r1
 8000aca:	4b2c      	ldr	r3, [pc, #176]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000acc:	0011      	movs	r1, r2
 8000ace:	0018      	movs	r0, r3
 8000ad0:	f003 fa30 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000ad4:	1e03      	subs	r3, r0, #0
 8000ad6:	d001      	beq.n	8000adc <MX_TIM1_Init+0xc0>
  {
    Error_Handler();
 8000ad8:	f000 fbfc 	bl	80012d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000adc:	003b      	movs	r3, r7
 8000ade:	2202      	movs	r2, #2
 8000ae0:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ae2:	003b      	movs	r3, r7
 8000ae4:	2201      	movs	r2, #1
 8000ae6:	605a      	str	r2, [r3, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000ae8:	003b      	movs	r3, r7
 8000aea:	2200      	movs	r2, #0
 8000aec:	609a      	str	r2, [r3, #8]
  sConfigIC.ICFilter = 0;
 8000aee:	003b      	movs	r3, r7
 8000af0:	2200      	movs	r2, #0
 8000af2:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000af4:	0039      	movs	r1, r7
 8000af6:	4b21      	ldr	r3, [pc, #132]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000af8:	2200      	movs	r2, #0
 8000afa:	0018      	movs	r0, r3
 8000afc:	f002 fe0a 	bl	8003714 <HAL_TIM_IC_ConfigChannel>
 8000b00:	1e03      	subs	r3, r0, #0
 8000b02:	d001      	beq.n	8000b08 <MX_TIM1_Init+0xec>
  {
    Error_Handler();
 8000b04:	f000 fbe6 	bl	80012d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b08:	003b      	movs	r3, r7
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b0e:	003b      	movs	r3, r7
 8000b10:	2202      	movs	r2, #2
 8000b12:	605a      	str	r2, [r3, #4]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000b14:	0039      	movs	r1, r7
 8000b16:	4b19      	ldr	r3, [pc, #100]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000b18:	2204      	movs	r2, #4
 8000b1a:	0018      	movs	r0, r3
 8000b1c:	f002 fdfa 	bl	8003714 <HAL_TIM_IC_ConfigChannel>
 8000b20:	1e03      	subs	r3, r0, #0
 8000b22:	d001      	beq.n	8000b28 <MX_TIM1_Init+0x10c>
  {
    Error_Handler();
 8000b24:	f000 fbd6 	bl	80012d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_FALLING;
 8000b28:	003b      	movs	r3, r7
 8000b2a:	2202      	movs	r2, #2
 8000b2c:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000b2e:	003b      	movs	r3, r7
 8000b30:	2201      	movs	r2, #1
 8000b32:	605a      	str	r2, [r3, #4]
  sConfigIC.ICFilter = 10;
 8000b34:	003b      	movs	r3, r7
 8000b36:	220a      	movs	r2, #10
 8000b38:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_3) != HAL_OK)
 8000b3a:	0039      	movs	r1, r7
 8000b3c:	4b0f      	ldr	r3, [pc, #60]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000b3e:	2208      	movs	r2, #8
 8000b40:	0018      	movs	r0, r3
 8000b42:	f002 fde7 	bl	8003714 <HAL_TIM_IC_ConfigChannel>
 8000b46:	1e03      	subs	r3, r0, #0
 8000b48:	d001      	beq.n	8000b4e <MX_TIM1_Init+0x132>
  {
    Error_Handler();
 8000b4a:	f000 fbc3 	bl	80012d4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8000b4e:	003b      	movs	r3, r7
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_INDIRECTTI;
 8000b54:	003b      	movs	r3, r7
 8000b56:	2202      	movs	r2, #2
 8000b58:	605a      	str	r2, [r3, #4]
  sConfigIC.ICFilter = 0;
 8000b5a:	003b      	movs	r3, r7
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_4) != HAL_OK)
 8000b60:	0039      	movs	r1, r7
 8000b62:	4b06      	ldr	r3, [pc, #24]	; (8000b7c <MX_TIM1_Init+0x160>)
 8000b64:	220c      	movs	r2, #12
 8000b66:	0018      	movs	r0, r3
 8000b68:	f002 fdd4 	bl	8003714 <HAL_TIM_IC_ConfigChannel>
 8000b6c:	1e03      	subs	r3, r0, #0
 8000b6e:	d001      	beq.n	8000b74 <MX_TIM1_Init+0x158>
  {
    Error_Handler();
 8000b70:	f000 fbb0 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000b74:	46c0      	nop			; (mov r8, r8)
 8000b76:	46bd      	mov	sp, r7
 8000b78:	b00a      	add	sp, #40	; 0x28
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200000c0 	.word	0x200000c0
 8000b80:	40012c00 	.word	0x40012c00
 8000b84:	00009c40 	.word	0x00009c40

08000b88 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b086      	sub	sp, #24
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b8e:	2308      	movs	r3, #8
 8000b90:	18fb      	adds	r3, r7, r3
 8000b92:	0018      	movs	r0, r3
 8000b94:	2310      	movs	r3, #16
 8000b96:	001a      	movs	r2, r3
 8000b98:	2100      	movs	r1, #0
 8000b9a:	f004 f8f1 	bl	8004d80 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b9e:	003b      	movs	r3, r7
 8000ba0:	0018      	movs	r0, r3
 8000ba2:	2308      	movs	r3, #8
 8000ba4:	001a      	movs	r2, r3
 8000ba6:	2100      	movs	r1, #0
 8000ba8:	f004 f8ea 	bl	8004d80 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000bac:	4b1e      	ldr	r3, [pc, #120]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <MX_TIM3_Init+0xa4>)
 8000bb0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000bb2:	4b1d      	ldr	r3, [pc, #116]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000bb8:	4b1b      	ldr	r3, [pc, #108]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bba:	2200      	movs	r2, #0
 8000bbc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8000bbe:	4b1a      	ldr	r3, [pc, #104]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bc0:	4a1b      	ldr	r2, [pc, #108]	; (8000c30 <MX_TIM3_Init+0xa8>)
 8000bc2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000bc4:	4b18      	ldr	r3, [pc, #96]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000bca:	4b17      	ldr	r3, [pc, #92]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000bd0:	4b15      	ldr	r3, [pc, #84]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f002 fade 	bl	8003194 <HAL_TIM_Base_Init>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d001      	beq.n	8000be0 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000bdc:	f000 fb7a 	bl	80012d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000be0:	2108      	movs	r1, #8
 8000be2:	187b      	adds	r3, r7, r1
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0152      	lsls	r2, r2, #5
 8000be8:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000bea:	187a      	adds	r2, r7, r1
 8000bec:	4b0e      	ldr	r3, [pc, #56]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000bee:	0011      	movs	r1, r2
 8000bf0:	0018      	movs	r0, r3
 8000bf2:	f002 fe33 	bl	800385c <HAL_TIM_ConfigClockSource>
 8000bf6:	1e03      	subs	r3, r0, #0
 8000bf8:	d001      	beq.n	8000bfe <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000bfa:	f000 fb6b 	bl	80012d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bfe:	003b      	movs	r3, r7
 8000c00:	2200      	movs	r2, #0
 8000c02:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c04:	003b      	movs	r3, r7
 8000c06:	2200      	movs	r2, #0
 8000c08:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c0a:	003a      	movs	r2, r7
 8000c0c:	4b06      	ldr	r3, [pc, #24]	; (8000c28 <MX_TIM3_Init+0xa0>)
 8000c0e:	0011      	movs	r1, r2
 8000c10:	0018      	movs	r0, r3
 8000c12:	f003 f98f 	bl	8003f34 <HAL_TIMEx_MasterConfigSynchronization>
 8000c16:	1e03      	subs	r3, r0, #0
 8000c18:	d001      	beq.n	8000c1e <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000c1a:	f000 fb5b 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000c1e:	46c0      	nop			; (mov r8, r8)
 8000c20:	46bd      	mov	sp, r7
 8000c22:	b006      	add	sp, #24
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	46c0      	nop			; (mov r8, r8)
 8000c28:	20000108 	.word	0x20000108
 8000c2c:	40000400 	.word	0x40000400
 8000c30:	0000ffff 	.word	0x0000ffff

08000c34 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000c38:	4b14      	ldr	r3, [pc, #80]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c3a:	4a15      	ldr	r2, [pc, #84]	; (8000c90 <MX_USART1_UART_Init+0x5c>)
 8000c3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 256000;
 8000c3e:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c40:	22fa      	movs	r2, #250	; 0xfa
 8000c42:	0292      	lsls	r2, r2, #10
 8000c44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c46:	4b11      	ldr	r3, [pc, #68]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c4c:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c52:	4b0e      	ldr	r3, [pc, #56]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c58:	4b0c      	ldr	r3, [pc, #48]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c5a:	220c      	movs	r2, #12
 8000c5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c60:	2200      	movs	r2, #0
 8000c62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c66:	2200      	movs	r2, #0
 8000c68:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000c6a:	4b08      	ldr	r3, [pc, #32]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c6c:	2200      	movs	r2, #0
 8000c6e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c76:	4b05      	ldr	r3, [pc, #20]	; (8000c8c <MX_USART1_UART_Init+0x58>)
 8000c78:	0018      	movs	r0, r3
 8000c7a:	f003 f9bd 	bl	8003ff8 <HAL_UART_Init>
 8000c7e:	1e03      	subs	r3, r0, #0
 8000c80:	d001      	beq.n	8000c86 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000c82:	f000 fb27 	bl	80012d4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c86:	46c0      	nop			; (mov r8, r8)
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	20000150 	.word	0x20000150
 8000c90:	40013800 	.word	0x40013800

08000c94 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000c9a:	4b10      	ldr	r3, [pc, #64]	; (8000cdc <MX_DMA_Init+0x48>)
 8000c9c:	695a      	ldr	r2, [r3, #20]
 8000c9e:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_DMA_Init+0x48>)
 8000ca0:	2101      	movs	r1, #1
 8000ca2:	430a      	orrs	r2, r1
 8000ca4:	615a      	str	r2, [r3, #20]
 8000ca6:	4b0d      	ldr	r3, [pc, #52]	; (8000cdc <MX_DMA_Init+0x48>)
 8000ca8:	695b      	ldr	r3, [r3, #20]
 8000caa:	2201      	movs	r2, #1
 8000cac:	4013      	ands	r3, r2
 8000cae:	607b      	str	r3, [r7, #4]
 8000cb0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	2100      	movs	r1, #0
 8000cb6:	2009      	movs	r0, #9
 8000cb8:	f001 f970 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000cbc:	2009      	movs	r0, #9
 8000cbe:	f001 f982 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2100      	movs	r1, #0
 8000cc6:	200a      	movs	r0, #10
 8000cc8:	f001 f968 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 8000ccc:	200a      	movs	r0, #10
 8000cce:	f001 f97a 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

}
 8000cd2:	46c0      	nop			; (mov r8, r8)
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	b002      	add	sp, #8
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	46c0      	nop			; (mov r8, r8)
 8000cdc:	40021000 	.word	0x40021000

08000ce0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b089      	sub	sp, #36	; 0x24
 8000ce4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ce6:	240c      	movs	r4, #12
 8000ce8:	193b      	adds	r3, r7, r4
 8000cea:	0018      	movs	r0, r3
 8000cec:	2314      	movs	r3, #20
 8000cee:	001a      	movs	r2, r3
 8000cf0:	2100      	movs	r1, #0
 8000cf2:	f004 f845 	bl	8004d80 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000cf6:	4b4a      	ldr	r3, [pc, #296]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000cf8:	695a      	ldr	r2, [r3, #20]
 8000cfa:	4b49      	ldr	r3, [pc, #292]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000cfc:	2180      	movs	r1, #128	; 0x80
 8000cfe:	03c9      	lsls	r1, r1, #15
 8000d00:	430a      	orrs	r2, r1
 8000d02:	615a      	str	r2, [r3, #20]
 8000d04:	4b46      	ldr	r3, [pc, #280]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d06:	695a      	ldr	r2, [r3, #20]
 8000d08:	2380      	movs	r3, #128	; 0x80
 8000d0a:	03db      	lsls	r3, r3, #15
 8000d0c:	4013      	ands	r3, r2
 8000d0e:	60bb      	str	r3, [r7, #8]
 8000d10:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d12:	4b43      	ldr	r3, [pc, #268]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d14:	695a      	ldr	r2, [r3, #20]
 8000d16:	4b42      	ldr	r3, [pc, #264]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d18:	2180      	movs	r1, #128	; 0x80
 8000d1a:	0289      	lsls	r1, r1, #10
 8000d1c:	430a      	orrs	r2, r1
 8000d1e:	615a      	str	r2, [r3, #20]
 8000d20:	4b3f      	ldr	r3, [pc, #252]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d22:	695a      	ldr	r2, [r3, #20]
 8000d24:	2380      	movs	r3, #128	; 0x80
 8000d26:	029b      	lsls	r3, r3, #10
 8000d28:	4013      	ands	r3, r2
 8000d2a:	607b      	str	r3, [r7, #4]
 8000d2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d2e:	4b3c      	ldr	r3, [pc, #240]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d30:	695a      	ldr	r2, [r3, #20]
 8000d32:	4b3b      	ldr	r3, [pc, #236]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d34:	2180      	movs	r1, #128	; 0x80
 8000d36:	02c9      	lsls	r1, r1, #11
 8000d38:	430a      	orrs	r2, r1
 8000d3a:	615a      	str	r2, [r3, #20]
 8000d3c:	4b38      	ldr	r3, [pc, #224]	; (8000e20 <MX_GPIO_Init+0x140>)
 8000d3e:	695a      	ldr	r2, [r3, #20]
 8000d40:	2380      	movs	r3, #128	; 0x80
 8000d42:	02db      	lsls	r3, r3, #11
 8000d44:	4013      	ands	r3, r2
 8000d46:	603b      	str	r3, [r7, #0]
 8000d48:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ISOL_Pin|OWR_Pin|LED_1_Pin|LED_2_Pin
 8000d4a:	4936      	ldr	r1, [pc, #216]	; (8000e24 <MX_GPIO_Init+0x144>)
 8000d4c:	2390      	movs	r3, #144	; 0x90
 8000d4e:	05db      	lsls	r3, r3, #23
 8000d50:	2200      	movs	r2, #0
 8000d52:	0018      	movs	r0, r3
 8000d54:	f001 fc65 	bl	8002622 <HAL_GPIO_WritePin>
                          |GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, OUT_1_1_Pin|OUT_1_2_Pin|REL_2_Pin|REL_3_Pin
 8000d58:	4b33      	ldr	r3, [pc, #204]	; (8000e28 <MX_GPIO_Init+0x148>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	21f8      	movs	r1, #248	; 0xf8
 8000d5e:	0018      	movs	r0, r3
 8000d60:	f001 fc5f 	bl	8002622 <HAL_GPIO_WritePin>
                          |REL_4_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : ISOL_Pin LED_1_Pin LED_2_Pin PA15 */
  GPIO_InitStruct.Pin = ISOL_Pin|LED_1_Pin|LED_2_Pin|GPIO_PIN_15;
 8000d64:	193b      	adds	r3, r7, r4
 8000d66:	4a31      	ldr	r2, [pc, #196]	; (8000e2c <MX_GPIO_Init+0x14c>)
 8000d68:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d6a:	193b      	adds	r3, r7, r4
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d70:	193b      	adds	r3, r7, r4
 8000d72:	2200      	movs	r2, #0
 8000d74:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d76:	193b      	adds	r3, r7, r4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d7c:	193a      	adds	r2, r7, r4
 8000d7e:	2390      	movs	r3, #144	; 0x90
 8000d80:	05db      	lsls	r3, r3, #23
 8000d82:	0011      	movs	r1, r2
 8000d84:	0018      	movs	r0, r3
 8000d86:	f001 fabf 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : OWR_Pin */
  GPIO_InitStruct.Pin = OWR_Pin;
 8000d8a:	193b      	adds	r3, r7, r4
 8000d8c:	2280      	movs	r2, #128	; 0x80
 8000d8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d90:	193b      	adds	r3, r7, r4
 8000d92:	2201      	movs	r2, #1
 8000d94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d96:	193b      	adds	r3, r7, r4
 8000d98:	2200      	movs	r2, #0
 8000d9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000d9c:	193b      	adds	r3, r7, r4
 8000d9e:	2203      	movs	r2, #3
 8000da0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(OWR_GPIO_Port, &GPIO_InitStruct);
 8000da2:	193a      	adds	r2, r7, r4
 8000da4:	2390      	movs	r3, #144	; 0x90
 8000da6:	05db      	lsls	r3, r3, #23
 8000da8:	0011      	movs	r1, r2
 8000daa:	0018      	movs	r0, r3
 8000dac:	f001 faac 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : BTN_1_Pin */
  GPIO_InitStruct.Pin = BTN_1_Pin;
 8000db0:	193b      	adds	r3, r7, r4
 8000db2:	2202      	movs	r2, #2
 8000db4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000db6:	193b      	adds	r3, r7, r4
 8000db8:	2200      	movs	r2, #0
 8000dba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dbc:	193b      	adds	r3, r7, r4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(BTN_1_GPIO_Port, &GPIO_InitStruct);
 8000dc2:	193b      	adds	r3, r7, r4
 8000dc4:	4a18      	ldr	r2, [pc, #96]	; (8000e28 <MX_GPIO_Init+0x148>)
 8000dc6:	0019      	movs	r1, r3
 8000dc8:	0010      	movs	r0, r2
 8000dca:	f001 fa9d 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000dce:	193b      	adds	r3, r7, r4
 8000dd0:	2280      	movs	r2, #128	; 0x80
 8000dd2:	0092      	lsls	r2, r2, #2
 8000dd4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000dd6:	193b      	adds	r3, r7, r4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ddc:	193b      	adds	r3, r7, r4
 8000dde:	2200      	movs	r2, #0
 8000de0:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000de2:	193a      	adds	r2, r7, r4
 8000de4:	2390      	movs	r3, #144	; 0x90
 8000de6:	05db      	lsls	r3, r3, #23
 8000de8:	0011      	movs	r1, r2
 8000dea:	0018      	movs	r0, r3
 8000dec:	f001 fa8c 	bl	8002308 <HAL_GPIO_Init>

  /*Configure GPIO pins : OUT_1_1_Pin OUT_1_2_Pin REL_2_Pin REL_3_Pin
                           REL_4_Pin */
  GPIO_InitStruct.Pin = OUT_1_1_Pin|OUT_1_2_Pin|REL_2_Pin|REL_3_Pin
 8000df0:	0021      	movs	r1, r4
 8000df2:	187b      	adds	r3, r7, r1
 8000df4:	22f8      	movs	r2, #248	; 0xf8
 8000df6:	601a      	str	r2, [r3, #0]
                          |REL_4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000df8:	187b      	adds	r3, r7, r1
 8000dfa:	2201      	movs	r2, #1
 8000dfc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dfe:	187b      	adds	r3, r7, r1
 8000e00:	2200      	movs	r2, #0
 8000e02:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	187b      	adds	r3, r7, r1
 8000e06:	2200      	movs	r2, #0
 8000e08:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e0a:	187b      	adds	r3, r7, r1
 8000e0c:	4a06      	ldr	r2, [pc, #24]	; (8000e28 <MX_GPIO_Init+0x148>)
 8000e0e:	0019      	movs	r1, r3
 8000e10:	0010      	movs	r0, r2
 8000e12:	f001 fa79 	bl	8002308 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b009      	add	sp, #36	; 0x24
 8000e1c:	bd90      	pop	{r4, r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	40021000 	.word	0x40021000
 8000e24:	000098c0 	.word	0x000098c0
 8000e28:	48000400 	.word	0x48000400
 8000e2c:	00009840 	.word	0x00009840

08000e30 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 {
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
     if (htim->Instance == TIM1)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4ad2      	ldr	r2, [pc, #840]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x358>)
 8000e3e:	4293      	cmp	r3, r2
 8000e40:	d000      	beq.n	8000e44 <HAL_TIM_IC_CaptureCallback+0x14>
 8000e42:	e06e      	b.n	8000f22 <HAL_TIM_IC_CaptureCallback+0xf2>
     {


         if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)&&(line_status==0))
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	7f1b      	ldrb	r3, [r3, #28]
 8000e48:	2b01      	cmp	r3, #1
 8000e4a:	d12e      	bne.n	8000eaa <HAL_TIM_IC_CaptureCallback+0x7a>
 8000e4c:	4bcf      	ldr	r3, [pc, #828]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 8000e4e:	781b      	ldrb	r3, [r3, #0]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d12a      	bne.n	8000eaa <HAL_TIM_IC_CaptureCallback+0x7a>
         {

        	 period = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_1);
 8000e54:	4bce      	ldr	r3, [pc, #824]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x360>)
 8000e56:	2100      	movs	r1, #0
 8000e58:	0018      	movs	r0, r3
 8000e5a:	f002 fdd3 	bl	8003a04 <HAL_TIM_ReadCapturedValue>
 8000e5e:	0003      	movs	r3, r0
 8000e60:	b29a      	uxth	r2, r3
 8000e62:	4bcc      	ldr	r3, [pc, #816]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x364>)
 8000e64:	801a      	strh	r2, [r3, #0]


        	 TIM1->CNT=0;
 8000e66:	4bc8      	ldr	r3, [pc, #800]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x358>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	625a      	str	r2, [r3, #36]	; 0x24
         if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)   {alarm=1;}
 8000e6c:	4bca      	ldr	r3, [pc, #808]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x368>)
 8000e6e:	2102      	movs	r1, #2
 8000e70:	0018      	movs	r0, r3
 8000e72:	f001 fbb9 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000e76:	1e03      	subs	r3, r0, #0
 8000e78:	d102      	bne.n	8000e80 <HAL_TIM_IC_CaptureCallback+0x50>
 8000e7a:	4bc8      	ldr	r3, [pc, #800]	; (800119c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	701a      	strb	r2, [r3, #0]
        	 OWR_OFF;
 8000e80:	2390      	movs	r3, #144	; 0x90
 8000e82:	05db      	lsls	r3, r3, #23
 8000e84:	2200      	movs	r2, #0
 8000e86:	2180      	movs	r1, #128	; 0x80
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f001 fbca 	bl	8002622 <HAL_GPIO_WritePin>
        	 if((count==192)||(period>=100)){
 8000e8e:	4bc4      	ldr	r3, [pc, #784]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000e90:	781b      	ldrb	r3, [r3, #0]
 8000e92:	2bc0      	cmp	r3, #192	; 0xc0
 8000e94:	d003      	beq.n	8000e9e <HAL_TIM_IC_CaptureCallback+0x6e>
 8000e96:	4bbf      	ldr	r3, [pc, #764]	; (8001194 <HAL_TIM_IC_CaptureCallback+0x364>)
 8000e98:	881b      	ldrh	r3, [r3, #0]
 8000e9a:	2b63      	cmp	r3, #99	; 0x63
 8000e9c:	d902      	bls.n	8000ea4 <HAL_TIM_IC_CaptureCallback+0x74>
        		 count=0;}
 8000e9e:	4bc0      	ldr	r3, [pc, #768]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	701a      	strb	r2, [r3, #0]

        	 line_status=1;
 8000ea4:	4bb9      	ldr	r3, [pc, #740]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 8000ea6:	2201      	movs	r2, #1
 8000ea8:	701a      	strb	r2, [r3, #0]
        	 }


         if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_3)&&(line_status==0))
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	7f1b      	ldrb	r3, [r3, #28]
 8000eae:	2b04      	cmp	r3, #4
 8000eb0:	d135      	bne.n	8000f1e <HAL_TIM_IC_CaptureCallback+0xee>
 8000eb2:	4bb6      	ldr	r3, [pc, #728]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 8000eb4:	781b      	ldrb	r3, [r3, #0]
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d131      	bne.n	8000f1e <HAL_TIM_IC_CaptureCallback+0xee>
                  {
                 	 period_x = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_3);
 8000eba:	4bb5      	ldr	r3, [pc, #724]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x360>)
 8000ebc:	2108      	movs	r1, #8
 8000ebe:	0018      	movs	r0, r3
 8000ec0:	f002 fda0 	bl	8003a04 <HAL_TIM_ReadCapturedValue>
 8000ec4:	0003      	movs	r3, r0
 8000ec6:	b29a      	uxth	r2, r3
 8000ec8:	4bb6      	ldr	r3, [pc, #728]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x374>)
 8000eca:	801a      	strh	r2, [r3, #0]

                 	 TIM1->CNT=0;
 8000ecc:	4bae      	ldr	r3, [pc, #696]	; (8001188 <HAL_TIM_IC_CaptureCallback+0x358>)
 8000ece:	2200      	movs	r2, #0
 8000ed0:	625a      	str	r2, [r3, #36]	; 0x24
                  if(HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_1)==0)   {alarm=1;}
 8000ed2:	4bb1      	ldr	r3, [pc, #708]	; (8001198 <HAL_TIM_IC_CaptureCallback+0x368>)
 8000ed4:	2102      	movs	r1, #2
 8000ed6:	0018      	movs	r0, r3
 8000ed8:	f001 fb86 	bl	80025e8 <HAL_GPIO_ReadPin>
 8000edc:	1e03      	subs	r3, r0, #0
 8000ede:	d102      	bne.n	8000ee6 <HAL_TIM_IC_CaptureCallback+0xb6>
 8000ee0:	4bae      	ldr	r3, [pc, #696]	; (800119c <HAL_TIM_IC_CaptureCallback+0x36c>)
 8000ee2:	2201      	movs	r2, #1
 8000ee4:	701a      	strb	r2, [r3, #0]
                 	 OWR_OFF;
 8000ee6:	2390      	movs	r3, #144	; 0x90
 8000ee8:	05db      	lsls	r3, r3, #23
 8000eea:	2200      	movs	r2, #0
 8000eec:	2180      	movs	r1, #128	; 0x80
 8000eee:	0018      	movs	r0, r3
 8000ef0:	f001 fb97 	bl	8002622 <HAL_GPIO_WritePin>
                 	 if((count==192)||(period_x>=100)){
 8000ef4:	4baa      	ldr	r3, [pc, #680]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	2bc0      	cmp	r3, #192	; 0xc0
 8000efa:	d003      	beq.n	8000f04 <HAL_TIM_IC_CaptureCallback+0xd4>
 8000efc:	4ba9      	ldr	r3, [pc, #676]	; (80011a4 <HAL_TIM_IC_CaptureCallback+0x374>)
 8000efe:	881b      	ldrh	r3, [r3, #0]
 8000f00:	2b63      	cmp	r3, #99	; 0x63
 8000f02:	d902      	bls.n	8000f0a <HAL_TIM_IC_CaptureCallback+0xda>
                 		 count=0;}
 8000f04:	4ba6      	ldr	r3, [pc, #664]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000f06:	2200      	movs	r2, #0
 8000f08:	701a      	strb	r2, [r3, #0]
                 	 ISOL_ON;
 8000f0a:	2390      	movs	r3, #144	; 0x90
 8000f0c:	05db      	lsls	r3, r3, #23
 8000f0e:	2201      	movs	r2, #1
 8000f10:	2140      	movs	r1, #64	; 0x40
 8000f12:	0018      	movs	r0, r3
 8000f14:	f001 fb85 	bl	8002622 <HAL_GPIO_WritePin>
                 	 line_status=2;
 8000f18:	4b9c      	ldr	r3, [pc, #624]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 8000f1a:	2202      	movs	r2, #2
 8000f1c:	701a      	strb	r2, [r3, #0]
                 	 }


         HAL_PWR_EnableSleepOnExit ();
 8000f1e:	f001 fbff 	bl	8002720 <HAL_PWR_EnableSleepOnExit>
         }



          if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) // FALLING с HIGH на LOW
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	7f1b      	ldrb	r3, [r3, #28]
 8000f26:	2b02      	cmp	r3, #2
 8000f28:	d000      	beq.n	8000f2c <HAL_TIM_IC_CaptureCallback+0xfc>
 8000f2a:	e0c8      	b.n	80010be <HAL_TIM_IC_CaptureCallback+0x28e>
                        { pulse = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_2);
 8000f2c:	4b98      	ldr	r3, [pc, #608]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x360>)
 8000f2e:	2104      	movs	r1, #4
 8000f30:	0018      	movs	r0, r3
 8000f32:	f002 fd67 	bl	8003a04 <HAL_TIM_ReadCapturedValue>
 8000f36:	0003      	movs	r3, r0
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	4b9b      	ldr	r3, [pc, #620]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000f3c:	801a      	strh	r2, [r3, #0]
                          HAL_IWDG_Refresh(&hiwdg);
 8000f3e:	4b9b      	ldr	r3, [pc, #620]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x37c>)
 8000f40:	0018      	movs	r0, r3
 8000f42:	f001 fbdd 	bl	8002700 <HAL_IWDG_Refresh>
                          if(line_status==1){ISOL_OFF};
 8000f46:	4b91      	ldr	r3, [pc, #580]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 8000f48:	781b      	ldrb	r3, [r3, #0]
 8000f4a:	2b01      	cmp	r3, #1
 8000f4c:	d106      	bne.n	8000f5c <HAL_TIM_IC_CaptureCallback+0x12c>
 8000f4e:	2390      	movs	r3, #144	; 0x90
 8000f50:	05db      	lsls	r3, r3, #23
 8000f52:	2200      	movs	r2, #0
 8000f54:	2140      	movs	r1, #64	; 0x40
 8000f56:	0018      	movs	r0, r3
 8000f58:	f001 fb63 	bl	8002622 <HAL_GPIO_WritePin>
                          line_status=0;
 8000f5c:	4b8b      	ldr	r3, [pc, #556]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	701a      	strb	r2, [r3, #0]
                        OWR_OFF;
 8000f62:	2390      	movs	r3, #144	; 0x90
 8000f64:	05db      	lsls	r3, r3, #23
 8000f66:	2200      	movs	r2, #0
 8000f68:	2180      	movs	r1, #128	; 0x80
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 fb59 	bl	8002622 <HAL_GPIO_WritePin>

             if((pulse>55)&&(pulse<60))  {count=0;rcvd[count]=2;rcv_addres=0;directive=0;}
 8000f70:	4b8d      	ldr	r3, [pc, #564]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000f72:	881b      	ldrh	r3, [r3, #0]
 8000f74:	2b37      	cmp	r3, #55	; 0x37
 8000f76:	d912      	bls.n	8000f9e <HAL_TIM_IC_CaptureCallback+0x16e>
 8000f78:	4b8b      	ldr	r3, [pc, #556]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000f7a:	881b      	ldrh	r3, [r3, #0]
 8000f7c:	2b3b      	cmp	r3, #59	; 0x3b
 8000f7e:	d80e      	bhi.n	8000f9e <HAL_TIM_IC_CaptureCallback+0x16e>
 8000f80:	4b87      	ldr	r3, [pc, #540]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000f82:	2200      	movs	r2, #0
 8000f84:	701a      	strb	r2, [r3, #0]
 8000f86:	4b86      	ldr	r3, [pc, #536]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000f88:	781b      	ldrb	r3, [r3, #0]
 8000f8a:	001a      	movs	r2, r3
 8000f8c:	4b88      	ldr	r3, [pc, #544]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000f8e:	2102      	movs	r1, #2
 8000f90:	5499      	strb	r1, [r3, r2]
 8000f92:	4b88      	ldr	r3, [pc, #544]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	701a      	strb	r2, [r3, #0]
 8000f98:	4b87      	ldr	r3, [pc, #540]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x388>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	701a      	strb	r2, [r3, #0]
        	 if((pulse>36)&&(pulse<40))  rcvd[count]=1;
 8000f9e:	4b82      	ldr	r3, [pc, #520]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000fa0:	881b      	ldrh	r3, [r3, #0]
 8000fa2:	2b24      	cmp	r3, #36	; 0x24
 8000fa4:	d909      	bls.n	8000fba <HAL_TIM_IC_CaptureCallback+0x18a>
 8000fa6:	4b80      	ldr	r3, [pc, #512]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000fa8:	881b      	ldrh	r3, [r3, #0]
 8000faa:	2b27      	cmp	r3, #39	; 0x27
 8000fac:	d805      	bhi.n	8000fba <HAL_TIM_IC_CaptureCallback+0x18a>
 8000fae:	4b7c      	ldr	r3, [pc, #496]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	001a      	movs	r2, r3
 8000fb4:	4b7e      	ldr	r3, [pc, #504]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000fb6:	2101      	movs	r1, #1
 8000fb8:	5499      	strb	r1, [r3, r2]
        	 if((pulse>16)&&(pulse<21))  rcvd[count]=0;
 8000fba:	4b7b      	ldr	r3, [pc, #492]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000fbc:	881b      	ldrh	r3, [r3, #0]
 8000fbe:	2b10      	cmp	r3, #16
 8000fc0:	d909      	bls.n	8000fd6 <HAL_TIM_IC_CaptureCallback+0x1a6>
 8000fc2:	4b79      	ldr	r3, [pc, #484]	; (80011a8 <HAL_TIM_IC_CaptureCallback+0x378>)
 8000fc4:	881b      	ldrh	r3, [r3, #0]
 8000fc6:	2b14      	cmp	r3, #20
 8000fc8:	d805      	bhi.n	8000fd6 <HAL_TIM_IC_CaptureCallback+0x1a6>
 8000fca:	4b75      	ldr	r3, [pc, #468]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000fcc:	781b      	ldrb	r3, [r3, #0]
 8000fce:	001a      	movs	r2, r3
 8000fd0:	4b77      	ldr	r3, [pc, #476]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	5499      	strb	r1, [r3, r2]
        	// Print_test();
        	 if((rcvd[1]==1)&&(rcvd[2]==0)&&(count==2))
 8000fd6:	4b76      	ldr	r3, [pc, #472]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000fd8:	785b      	ldrb	r3, [r3, #1]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d11a      	bne.n	8001014 <HAL_TIM_IC_CaptureCallback+0x1e4>
 8000fde:	4b74      	ldr	r3, [pc, #464]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8000fe0:	789b      	ldrb	r3, [r3, #2]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d116      	bne.n	8001014 <HAL_TIM_IC_CaptureCallback+0x1e4>
 8000fe6:	4b6e      	ldr	r3, [pc, #440]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8000fe8:	781b      	ldrb	r3, [r3, #0]
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d112      	bne.n	8001014 <HAL_TIM_IC_CaptureCallback+0x1e4>
        	        	                        	  {
        	        	                        		 addres_call=addres_call+1;
 8000fee:	4b73      	ldr	r3, [pc, #460]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000ff0:	781b      	ldrb	r3, [r3, #0]
 8000ff2:	3301      	adds	r3, #1
 8000ff4:	b2da      	uxtb	r2, r3
 8000ff6:	4b71      	ldr	r3, [pc, #452]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000ff8:	701a      	strb	r2, [r3, #0]
        	        	                        		 if(addres_call==addres)
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8000ffc:	781a      	ldrb	r2, [r3, #0]
 8000ffe:	4b70      	ldr	r3, [pc, #448]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x390>)
 8001000:	781b      	ldrb	r3, [r3, #0]
 8001002:	429a      	cmp	r2, r3
 8001004:	d106      	bne.n	8001014 <HAL_TIM_IC_CaptureCallback+0x1e4>
        	        	                        		    {OWR_ON;}}
 8001006:	2390      	movs	r3, #144	; 0x90
 8001008:	05db      	lsls	r3, r3, #23
 800100a:	2201      	movs	r2, #1
 800100c:	2180      	movs	r1, #128	; 0x80
 800100e:	0018      	movs	r0, r3
 8001010:	f001 fb07 	bl	8002622 <HAL_GPIO_WritePin>

        	 if (count==8)
 8001014:	4b62      	ldr	r3, [pc, #392]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	2b08      	cmp	r3, #8
 800101a:	d13e      	bne.n	800109a <HAL_TIM_IC_CaptureCallback+0x26a>
        	        	    {
        	        	      rcv_addres=0;
 800101c:	4b65      	ldr	r3, [pc, #404]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 800101e:	2200      	movs	r2, #0
 8001020:	701a      	strb	r2, [r3, #0]
        	        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]);
 8001022:	4b63      	ldr	r3, [pc, #396]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001024:	785b      	ldrb	r3, [r3, #1]
 8001026:	01db      	lsls	r3, r3, #7
 8001028:	b25a      	sxtb	r2, r3
 800102a:	4b61      	ldr	r3, [pc, #388]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 800102c:	789b      	ldrb	r3, [r3, #2]
 800102e:	019b      	lsls	r3, r3, #6
 8001030:	b25b      	sxtb	r3, r3
 8001032:	4313      	orrs	r3, r2
 8001034:	b25a      	sxtb	r2, r3
 8001036:	4b5e      	ldr	r3, [pc, #376]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001038:	78db      	ldrb	r3, [r3, #3]
 800103a:	015b      	lsls	r3, r3, #5
 800103c:	b25b      	sxtb	r3, r3
 800103e:	4313      	orrs	r3, r2
 8001040:	b25a      	sxtb	r2, r3
 8001042:	4b5b      	ldr	r3, [pc, #364]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001044:	791b      	ldrb	r3, [r3, #4]
 8001046:	011b      	lsls	r3, r3, #4
 8001048:	b25b      	sxtb	r3, r3
 800104a:	4313      	orrs	r3, r2
 800104c:	b25a      	sxtb	r2, r3
 800104e:	4b58      	ldr	r3, [pc, #352]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001050:	795b      	ldrb	r3, [r3, #5]
 8001052:	00db      	lsls	r3, r3, #3
 8001054:	b25b      	sxtb	r3, r3
 8001056:	4313      	orrs	r3, r2
 8001058:	b25a      	sxtb	r2, r3
 800105a:	4b55      	ldr	r3, [pc, #340]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 800105c:	799b      	ldrb	r3, [r3, #6]
 800105e:	009b      	lsls	r3, r3, #2
 8001060:	b25b      	sxtb	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b25a      	sxtb	r2, r3
 8001066:	4b52      	ldr	r3, [pc, #328]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001068:	79db      	ldrb	r3, [r3, #7]
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	b25b      	sxtb	r3, r3
 800106e:	4313      	orrs	r3, r2
 8001070:	b25a      	sxtb	r2, r3
 8001072:	4b4f      	ldr	r3, [pc, #316]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001074:	7a1b      	ldrb	r3, [r3, #8]
 8001076:	b25b      	sxtb	r3, r3
 8001078:	4313      	orrs	r3, r2
 800107a:	b25a      	sxtb	r2, r3
 800107c:	4b4d      	ldr	r3, [pc, #308]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 800107e:	781b      	ldrb	r3, [r3, #0]
 8001080:	b25b      	sxtb	r3, r3
 8001082:	4313      	orrs	r3, r2
 8001084:	b25b      	sxtb	r3, r3
 8001086:	b2da      	uxtb	r2, r3
 8001088:	4b4a      	ldr	r3, [pc, #296]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 800108a:	701a      	strb	r2, [r3, #0]
        	        	      if(rcv_addres==0){addres_call=0;}
 800108c:	4b49      	ldr	r3, [pc, #292]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d102      	bne.n	800109a <HAL_TIM_IC_CaptureCallback+0x26a>
 8001094:	4b49      	ldr	r3, [pc, #292]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001096:	2200      	movs	r2, #0
 8001098:	701a      	strb	r2, [r3, #0]

        	        	    }
        	 if((rcv_addres==addres)&&(count>8)){Protocol();}
 800109a:	4b46      	ldr	r3, [pc, #280]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 800109c:	781a      	ldrb	r2, [r3, #0]
 800109e:	4b48      	ldr	r3, [pc, #288]	; (80011c0 <HAL_TIM_IC_CaptureCallback+0x390>)
 80010a0:	781b      	ldrb	r3, [r3, #0]
 80010a2:	429a      	cmp	r2, r3
 80010a4:	d105      	bne.n	80010b2 <HAL_TIM_IC_CaptureCallback+0x282>
 80010a6:	4b3e      	ldr	r3, [pc, #248]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 80010a8:	781b      	ldrb	r3, [r3, #0]
 80010aa:	2b08      	cmp	r3, #8
 80010ac:	d901      	bls.n	80010b2 <HAL_TIM_IC_CaptureCallback+0x282>
 80010ae:	f7ff f98b 	bl	80003c8 <Protocol>


        	  count++;
 80010b2:	4b3b      	ldr	r3, [pc, #236]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 80010b4:	781b      	ldrb	r3, [r3, #0]
 80010b6:	3301      	adds	r3, #1
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	4b39      	ldr	r3, [pc, #228]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 80010bc:	701a      	strb	r2, [r3, #0]

                        }



          if((htim->Channel == HAL_TIM_ACTIVE_CHANNEL_4)&&(line_status!=0)) // FALLING с HIGH на LOW
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	7f1b      	ldrb	r3, [r3, #28]
 80010c2:	2b08      	cmp	r3, #8
 80010c4:	d000      	beq.n	80010c8 <HAL_TIM_IC_CaptureCallback+0x298>
 80010c6:	e0e4      	b.n	8001292 <HAL_TIM_IC_CaptureCallback+0x462>
 80010c8:	4b30      	ldr	r3, [pc, #192]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 80010ca:	781b      	ldrb	r3, [r3, #0]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d100      	bne.n	80010d2 <HAL_TIM_IC_CaptureCallback+0x2a2>
 80010d0:	e0df      	b.n	8001292 <HAL_TIM_IC_CaptureCallback+0x462>
                                 {
                                   pulse_x = HAL_TIM_ReadCapturedValue(&htim1, TIM_CHANNEL_4);
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <HAL_TIM_IC_CaptureCallback+0x360>)
 80010d4:	210c      	movs	r1, #12
 80010d6:	0018      	movs	r0, r3
 80010d8:	f002 fc94 	bl	8003a04 <HAL_TIM_ReadCapturedValue>
 80010dc:	0003      	movs	r3, r0
 80010de:	b29a      	uxth	r2, r3
 80010e0:	4b38      	ldr	r3, [pc, #224]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 80010e2:	801a      	strh	r2, [r3, #0]
                                   HAL_IWDG_Refresh(&hiwdg);
 80010e4:	4b31      	ldr	r3, [pc, #196]	; (80011ac <HAL_TIM_IC_CaptureCallback+0x37c>)
 80010e6:	0018      	movs	r0, r3
 80010e8:	f001 fb0a 	bl	8002700 <HAL_IWDG_Refresh>
                                   line_status=0;
 80010ec:	4b27      	ldr	r3, [pc, #156]	; (800118c <HAL_TIM_IC_CaptureCallback+0x35c>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	701a      	strb	r2, [r3, #0]
                                 OWR_OFF;
 80010f2:	2390      	movs	r3, #144	; 0x90
 80010f4:	05db      	lsls	r3, r3, #23
 80010f6:	2200      	movs	r2, #0
 80010f8:	2180      	movs	r1, #128	; 0x80
 80010fa:	0018      	movs	r0, r3
 80010fc:	f001 fa91 	bl	8002622 <HAL_GPIO_WritePin>

                      if((pulse_x>55)&&(pulse_x<60))  {count=0;rcvd[count]=2;rcv_addres=0;directive=0;}
 8001100:	4b30      	ldr	r3, [pc, #192]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001102:	881b      	ldrh	r3, [r3, #0]
 8001104:	2b37      	cmp	r3, #55	; 0x37
 8001106:	d912      	bls.n	800112e <HAL_TIM_IC_CaptureCallback+0x2fe>
 8001108:	4b2e      	ldr	r3, [pc, #184]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 800110a:	881b      	ldrh	r3, [r3, #0]
 800110c:	2b3b      	cmp	r3, #59	; 0x3b
 800110e:	d80e      	bhi.n	800112e <HAL_TIM_IC_CaptureCallback+0x2fe>
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001112:	2200      	movs	r2, #0
 8001114:	701a      	strb	r2, [r3, #0]
 8001116:	4b22      	ldr	r3, [pc, #136]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	001a      	movs	r2, r3
 800111c:	4b24      	ldr	r3, [pc, #144]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 800111e:	2102      	movs	r1, #2
 8001120:	5499      	strb	r1, [r3, r2]
 8001122:	4b24      	ldr	r3, [pc, #144]	; (80011b4 <HAL_TIM_IC_CaptureCallback+0x384>)
 8001124:	2200      	movs	r2, #0
 8001126:	701a      	strb	r2, [r3, #0]
 8001128:	4b23      	ldr	r3, [pc, #140]	; (80011b8 <HAL_TIM_IC_CaptureCallback+0x388>)
 800112a:	2200      	movs	r2, #0
 800112c:	701a      	strb	r2, [r3, #0]
                 	 if((pulse_x>36)&&(pulse_x<40))  rcvd[count]=1;
 800112e:	4b25      	ldr	r3, [pc, #148]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001130:	881b      	ldrh	r3, [r3, #0]
 8001132:	2b24      	cmp	r3, #36	; 0x24
 8001134:	d909      	bls.n	800114a <HAL_TIM_IC_CaptureCallback+0x31a>
 8001136:	4b23      	ldr	r3, [pc, #140]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001138:	881b      	ldrh	r3, [r3, #0]
 800113a:	2b27      	cmp	r3, #39	; 0x27
 800113c:	d805      	bhi.n	800114a <HAL_TIM_IC_CaptureCallback+0x31a>
 800113e:	4b18      	ldr	r3, [pc, #96]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	001a      	movs	r2, r3
 8001144:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001146:	2101      	movs	r1, #1
 8001148:	5499      	strb	r1, [r3, r2]
                 	 if((pulse_x>16)&&(pulse_x<21))  rcvd[count]=0;
 800114a:	4b1e      	ldr	r3, [pc, #120]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 800114c:	881b      	ldrh	r3, [r3, #0]
 800114e:	2b10      	cmp	r3, #16
 8001150:	d909      	bls.n	8001166 <HAL_TIM_IC_CaptureCallback+0x336>
 8001152:	4b1c      	ldr	r3, [pc, #112]	; (80011c4 <HAL_TIM_IC_CaptureCallback+0x394>)
 8001154:	881b      	ldrh	r3, [r3, #0]
 8001156:	2b14      	cmp	r3, #20
 8001158:	d805      	bhi.n	8001166 <HAL_TIM_IC_CaptureCallback+0x336>
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	001a      	movs	r2, r3
 8001160:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]

                 	 if((rcvd[1]==1)&&(rcvd[2]==0)&&(count==2))
 8001166:	4b12      	ldr	r3, [pc, #72]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001168:	785b      	ldrb	r3, [r3, #1]
 800116a:	2b01      	cmp	r3, #1
 800116c:	d13c      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x3b8>
 800116e:	4b10      	ldr	r3, [pc, #64]	; (80011b0 <HAL_TIM_IC_CaptureCallback+0x380>)
 8001170:	789b      	ldrb	r3, [r3, #2]
 8001172:	2b00      	cmp	r3, #0
 8001174:	d138      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x3b8>
 8001176:	4b0a      	ldr	r3, [pc, #40]	; (80011a0 <HAL_TIM_IC_CaptureCallback+0x370>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b02      	cmp	r3, #2
 800117c:	d134      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x3b8>
                 	        	                        	  {
                 	        	                        		 addres_call=addres_call+1;
 800117e:	4b0f      	ldr	r3, [pc, #60]	; (80011bc <HAL_TIM_IC_CaptureCallback+0x38c>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	3301      	adds	r3, #1
 8001184:	e020      	b.n	80011c8 <HAL_TIM_IC_CaptureCallback+0x398>
 8001186:	46c0      	nop			; (mov r8, r8)
 8001188:	40012c00 	.word	0x40012c00
 800118c:	20000326 	.word	0x20000326
 8001190:	200000c0 	.word	0x200000c0
 8001194:	2000021c 	.word	0x2000021c
 8001198:	48000400 	.word	0x48000400
 800119c:	20000224 	.word	0x20000224
 80011a0:	20000320 	.word	0x20000320
 80011a4:	2000021e 	.word	0x2000021e
 80011a8:	20000220 	.word	0x20000220
 80011ac:	200000b0 	.word	0x200000b0
 80011b0:	20000228 	.word	0x20000228
 80011b4:	20000321 	.word	0x20000321
 80011b8:	20000323 	.word	0x20000323
 80011bc:	20000322 	.word	0x20000322
 80011c0:	20000324 	.word	0x20000324
 80011c4:	20000222 	.word	0x20000222
 80011c8:	b2da      	uxtb	r2, r3
 80011ca:	4b35      	ldr	r3, [pc, #212]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x470>)
 80011cc:	701a      	strb	r2, [r3, #0]
                 	        	                        		 if(addres_call==addres)
 80011ce:	4b34      	ldr	r3, [pc, #208]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x470>)
 80011d0:	781a      	ldrb	r2, [r3, #0]
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_TIM_IC_CaptureCallback+0x474>)
 80011d4:	781b      	ldrb	r3, [r3, #0]
 80011d6:	429a      	cmp	r2, r3
 80011d8:	d106      	bne.n	80011e8 <HAL_TIM_IC_CaptureCallback+0x3b8>
                 	        	                        		    {OWR_ON;}}
 80011da:	2390      	movs	r3, #144	; 0x90
 80011dc:	05db      	lsls	r3, r3, #23
 80011de:	2201      	movs	r2, #1
 80011e0:	2180      	movs	r1, #128	; 0x80
 80011e2:	0018      	movs	r0, r3
 80011e4:	f001 fa1d 	bl	8002622 <HAL_GPIO_WritePin>

                 	 if (count==8)
 80011e8:	4b2f      	ldr	r3, [pc, #188]	; (80012a8 <HAL_TIM_IC_CaptureCallback+0x478>)
 80011ea:	781b      	ldrb	r3, [r3, #0]
 80011ec:	2b08      	cmp	r3, #8
 80011ee:	d13e      	bne.n	800126e <HAL_TIM_IC_CaptureCallback+0x43e>
                 	        	    {
                 	        	      rcv_addres=0;
 80011f0:	4b2e      	ldr	r3, [pc, #184]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x47c>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
                 	        	      rcv_addres|= (rcvd[1]<<7)|(rcvd[2]<<6)|(rcvd[3]<<5)|(rcvd[4]<<4)|(rcvd[5]<<3)|(rcvd[6]<<2)|(rcvd[7]<<1)|(rcvd[8]);
 80011f6:	4b2e      	ldr	r3, [pc, #184]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 80011f8:	785b      	ldrb	r3, [r3, #1]
 80011fa:	01db      	lsls	r3, r3, #7
 80011fc:	b25a      	sxtb	r2, r3
 80011fe:	4b2c      	ldr	r3, [pc, #176]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001200:	789b      	ldrb	r3, [r3, #2]
 8001202:	019b      	lsls	r3, r3, #6
 8001204:	b25b      	sxtb	r3, r3
 8001206:	4313      	orrs	r3, r2
 8001208:	b25a      	sxtb	r2, r3
 800120a:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 800120c:	78db      	ldrb	r3, [r3, #3]
 800120e:	015b      	lsls	r3, r3, #5
 8001210:	b25b      	sxtb	r3, r3
 8001212:	4313      	orrs	r3, r2
 8001214:	b25a      	sxtb	r2, r3
 8001216:	4b26      	ldr	r3, [pc, #152]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001218:	791b      	ldrb	r3, [r3, #4]
 800121a:	011b      	lsls	r3, r3, #4
 800121c:	b25b      	sxtb	r3, r3
 800121e:	4313      	orrs	r3, r2
 8001220:	b25a      	sxtb	r2, r3
 8001222:	4b23      	ldr	r3, [pc, #140]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001224:	795b      	ldrb	r3, [r3, #5]
 8001226:	00db      	lsls	r3, r3, #3
 8001228:	b25b      	sxtb	r3, r3
 800122a:	4313      	orrs	r3, r2
 800122c:	b25a      	sxtb	r2, r3
 800122e:	4b20      	ldr	r3, [pc, #128]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001230:	799b      	ldrb	r3, [r3, #6]
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	b25b      	sxtb	r3, r3
 8001236:	4313      	orrs	r3, r2
 8001238:	b25a      	sxtb	r2, r3
 800123a:	4b1d      	ldr	r3, [pc, #116]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 800123c:	79db      	ldrb	r3, [r3, #7]
 800123e:	005b      	lsls	r3, r3, #1
 8001240:	b25b      	sxtb	r3, r3
 8001242:	4313      	orrs	r3, r2
 8001244:	b25a      	sxtb	r2, r3
 8001246:	4b1a      	ldr	r3, [pc, #104]	; (80012b0 <HAL_TIM_IC_CaptureCallback+0x480>)
 8001248:	7a1b      	ldrb	r3, [r3, #8]
 800124a:	b25b      	sxtb	r3, r3
 800124c:	4313      	orrs	r3, r2
 800124e:	b25a      	sxtb	r2, r3
 8001250:	4b16      	ldr	r3, [pc, #88]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001252:	781b      	ldrb	r3, [r3, #0]
 8001254:	b25b      	sxtb	r3, r3
 8001256:	4313      	orrs	r3, r2
 8001258:	b25b      	sxtb	r3, r3
 800125a:	b2da      	uxtb	r2, r3
 800125c:	4b13      	ldr	r3, [pc, #76]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x47c>)
 800125e:	701a      	strb	r2, [r3, #0]
                 	        	      if(rcv_addres==0){addres_call=0;}
 8001260:	4b12      	ldr	r3, [pc, #72]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b00      	cmp	r3, #0
 8001266:	d102      	bne.n	800126e <HAL_TIM_IC_CaptureCallback+0x43e>
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_TIM_IC_CaptureCallback+0x470>)
 800126a:	2200      	movs	r2, #0
 800126c:	701a      	strb	r2, [r3, #0]

                 	        	    }
                 	 if((rcv_addres==addres)&&(count>8)){Protocol();}
 800126e:	4b0f      	ldr	r3, [pc, #60]	; (80012ac <HAL_TIM_IC_CaptureCallback+0x47c>)
 8001270:	781a      	ldrb	r2, [r3, #0]
 8001272:	4b0c      	ldr	r3, [pc, #48]	; (80012a4 <HAL_TIM_IC_CaptureCallback+0x474>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	429a      	cmp	r2, r3
 8001278:	d105      	bne.n	8001286 <HAL_TIM_IC_CaptureCallback+0x456>
 800127a:	4b0b      	ldr	r3, [pc, #44]	; (80012a8 <HAL_TIM_IC_CaptureCallback+0x478>)
 800127c:	781b      	ldrb	r3, [r3, #0]
 800127e:	2b08      	cmp	r3, #8
 8001280:	d901      	bls.n	8001286 <HAL_TIM_IC_CaptureCallback+0x456>
 8001282:	f7ff f8a1 	bl	80003c8 <Protocol>


                 	  count++;
 8001286:	4b08      	ldr	r3, [pc, #32]	; (80012a8 <HAL_TIM_IC_CaptureCallback+0x478>)
 8001288:	781b      	ldrb	r3, [r3, #0]
 800128a:	3301      	adds	r3, #1
 800128c:	b2da      	uxtb	r2, r3
 800128e:	4b06      	ldr	r3, [pc, #24]	; (80012a8 <HAL_TIM_IC_CaptureCallback+0x478>)
 8001290:	701a      	strb	r2, [r3, #0]





          HAL_PWR_EnableSleepOnExit ();
 8001292:	f001 fa45 	bl	8002720 <HAL_PWR_EnableSleepOnExit>
     }
 8001296:	46c0      	nop			; (mov r8, r8)
 8001298:	46bd      	mov	sp, r7
 800129a:	b002      	add	sp, #8
 800129c:	bd80      	pop	{r7, pc}
 800129e:	46c0      	nop			; (mov r8, r8)
 80012a0:	20000322 	.word	0x20000322
 80012a4:	20000324 	.word	0x20000324
 80012a8:	20000320 	.word	0x20000320
 80012ac:	20000321 	.word	0x20000321
 80012b0:	20000228 	.word	0x20000228

080012b4 <HAL_UART_TxCpltCallback>:


void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)

{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b082      	sub	sp, #8
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
  LED2_OFF;
 80012bc:	2380      	movs	r3, #128	; 0x80
 80012be:	0159      	lsls	r1, r3, #5
 80012c0:	2390      	movs	r3, #144	; 0x90
 80012c2:	05db      	lsls	r3, r3, #23
 80012c4:	2200      	movs	r2, #0
 80012c6:	0018      	movs	r0, r3
 80012c8:	f001 f9ab 	bl	8002622 <HAL_GPIO_WritePin>
}
 80012cc:	46c0      	nop			; (mov r8, r8)
 80012ce:	46bd      	mov	sp, r7
 80012d0:	b002      	add	sp, #8
 80012d2:	bd80      	pop	{r7, pc}

080012d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012d8:	b672      	cpsid	i
}
 80012da:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012dc:	e7fe      	b.n	80012dc <Error_Handler+0x8>
	...

080012e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e6:	4b13      	ldr	r3, [pc, #76]	; (8001334 <HAL_MspInit+0x54>)
 80012e8:	699a      	ldr	r2, [r3, #24]
 80012ea:	4b12      	ldr	r3, [pc, #72]	; (8001334 <HAL_MspInit+0x54>)
 80012ec:	2101      	movs	r1, #1
 80012ee:	430a      	orrs	r2, r1
 80012f0:	619a      	str	r2, [r3, #24]
 80012f2:	4b10      	ldr	r3, [pc, #64]	; (8001334 <HAL_MspInit+0x54>)
 80012f4:	699b      	ldr	r3, [r3, #24]
 80012f6:	2201      	movs	r2, #1
 80012f8:	4013      	ands	r3, r2
 80012fa:	607b      	str	r3, [r7, #4]
 80012fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80012fe:	4b0d      	ldr	r3, [pc, #52]	; (8001334 <HAL_MspInit+0x54>)
 8001300:	69da      	ldr	r2, [r3, #28]
 8001302:	4b0c      	ldr	r3, [pc, #48]	; (8001334 <HAL_MspInit+0x54>)
 8001304:	2180      	movs	r1, #128	; 0x80
 8001306:	0549      	lsls	r1, r1, #21
 8001308:	430a      	orrs	r2, r1
 800130a:	61da      	str	r2, [r3, #28]
 800130c:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_MspInit+0x54>)
 800130e:	69da      	ldr	r2, [r3, #28]
 8001310:	2380      	movs	r3, #128	; 0x80
 8001312:	055b      	lsls	r3, r3, #21
 8001314:	4013      	ands	r3, r2
 8001316:	603b      	str	r3, [r7, #0]
 8001318:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 800131a:	2200      	movs	r2, #0
 800131c:	2100      	movs	r1, #0
 800131e:	2004      	movs	r0, #4
 8001320:	f000 fe3c 	bl	8001f9c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8001324:	2004      	movs	r0, #4
 8001326:	f000 fe4e 	bl	8001fc6 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800132a:	46c0      	nop			; (mov r8, r8)
 800132c:	46bd      	mov	sp, r7
 800132e:	b002      	add	sp, #8
 8001330:	bd80      	pop	{r7, pc}
 8001332:	46c0      	nop			; (mov r8, r8)
 8001334:	40021000 	.word	0x40021000

08001338 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001338:	b590      	push	{r4, r7, lr}
 800133a:	b08b      	sub	sp, #44	; 0x2c
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001340:	2414      	movs	r4, #20
 8001342:	193b      	adds	r3, r7, r4
 8001344:	0018      	movs	r0, r3
 8001346:	2314      	movs	r3, #20
 8001348:	001a      	movs	r2, r3
 800134a:	2100      	movs	r1, #0
 800134c:	f003 fd18 	bl	8004d80 <memset>
  if(hadc->Instance==ADC1)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	4a3f      	ldr	r2, [pc, #252]	; (8001454 <HAL_ADC_MspInit+0x11c>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d178      	bne.n	800144c <HAL_ADC_MspInit+0x114>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800135a:	4b3f      	ldr	r3, [pc, #252]	; (8001458 <HAL_ADC_MspInit+0x120>)
 800135c:	699a      	ldr	r2, [r3, #24]
 800135e:	4b3e      	ldr	r3, [pc, #248]	; (8001458 <HAL_ADC_MspInit+0x120>)
 8001360:	2180      	movs	r1, #128	; 0x80
 8001362:	0089      	lsls	r1, r1, #2
 8001364:	430a      	orrs	r2, r1
 8001366:	619a      	str	r2, [r3, #24]
 8001368:	4b3b      	ldr	r3, [pc, #236]	; (8001458 <HAL_ADC_MspInit+0x120>)
 800136a:	699a      	ldr	r2, [r3, #24]
 800136c:	2380      	movs	r3, #128	; 0x80
 800136e:	009b      	lsls	r3, r3, #2
 8001370:	4013      	ands	r3, r2
 8001372:	613b      	str	r3, [r7, #16]
 8001374:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	4b38      	ldr	r3, [pc, #224]	; (8001458 <HAL_ADC_MspInit+0x120>)
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	4b37      	ldr	r3, [pc, #220]	; (8001458 <HAL_ADC_MspInit+0x120>)
 800137c:	2180      	movs	r1, #128	; 0x80
 800137e:	0289      	lsls	r1, r1, #10
 8001380:	430a      	orrs	r2, r1
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <HAL_ADC_MspInit+0x120>)
 8001386:	695a      	ldr	r2, [r3, #20]
 8001388:	2380      	movs	r3, #128	; 0x80
 800138a:	029b      	lsls	r3, r3, #10
 800138c:	4013      	ands	r3, r2
 800138e:	60fb      	str	r3, [r7, #12]
 8001390:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001392:	4b31      	ldr	r3, [pc, #196]	; (8001458 <HAL_ADC_MspInit+0x120>)
 8001394:	695a      	ldr	r2, [r3, #20]
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <HAL_ADC_MspInit+0x120>)
 8001398:	2180      	movs	r1, #128	; 0x80
 800139a:	02c9      	lsls	r1, r1, #11
 800139c:	430a      	orrs	r2, r1
 800139e:	615a      	str	r2, [r3, #20]
 80013a0:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <HAL_ADC_MspInit+0x120>)
 80013a2:	695a      	ldr	r2, [r3, #20]
 80013a4:	2380      	movs	r3, #128	; 0x80
 80013a6:	02db      	lsls	r3, r3, #11
 80013a8:	4013      	ands	r3, r2
 80013aa:	60bb      	str	r3, [r7, #8]
 80013ac:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC_IN1
    PA4     ------> ADC_IN4
    PA5     ------> ADC_IN5
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80013ae:	193b      	adds	r3, r7, r4
 80013b0:	2233      	movs	r2, #51	; 0x33
 80013b2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013b4:	193b      	adds	r3, r7, r4
 80013b6:	2203      	movs	r2, #3
 80013b8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ba:	193b      	adds	r3, r7, r4
 80013bc:	2200      	movs	r2, #0
 80013be:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013c0:	193a      	adds	r2, r7, r4
 80013c2:	2390      	movs	r3, #144	; 0x90
 80013c4:	05db      	lsls	r3, r3, #23
 80013c6:	0011      	movs	r1, r2
 80013c8:	0018      	movs	r0, r3
 80013ca:	f000 ff9d 	bl	8002308 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = V_M_Pin;
 80013ce:	193b      	adds	r3, r7, r4
 80013d0:	2201      	movs	r2, #1
 80013d2:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013d4:	193b      	adds	r3, r7, r4
 80013d6:	2203      	movs	r2, #3
 80013d8:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	193b      	adds	r3, r7, r4
 80013dc:	2200      	movs	r2, #0
 80013de:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(V_M_GPIO_Port, &GPIO_InitStruct);
 80013e0:	193b      	adds	r3, r7, r4
 80013e2:	4a1e      	ldr	r2, [pc, #120]	; (800145c <HAL_ADC_MspInit+0x124>)
 80013e4:	0019      	movs	r1, r3
 80013e6:	0010      	movs	r0, r2
 80013e8:	f000 ff8e 	bl	8002308 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC Init */
    hdma_adc.Instance = DMA1_Channel1;
 80013ec:	4b1c      	ldr	r3, [pc, #112]	; (8001460 <HAL_ADC_MspInit+0x128>)
 80013ee:	4a1d      	ldr	r2, [pc, #116]	; (8001464 <HAL_ADC_MspInit+0x12c>)
 80013f0:	601a      	str	r2, [r3, #0]
    hdma_adc.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013f2:	4b1b      	ldr	r3, [pc, #108]	; (8001460 <HAL_ADC_MspInit+0x128>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	605a      	str	r2, [r3, #4]
    hdma_adc.Init.PeriphInc = DMA_PINC_DISABLE;
 80013f8:	4b19      	ldr	r3, [pc, #100]	; (8001460 <HAL_ADC_MspInit+0x128>)
 80013fa:	2200      	movs	r2, #0
 80013fc:	609a      	str	r2, [r3, #8]
    hdma_adc.Init.MemInc = DMA_MINC_ENABLE;
 80013fe:	4b18      	ldr	r3, [pc, #96]	; (8001460 <HAL_ADC_MspInit+0x128>)
 8001400:	2280      	movs	r2, #128	; 0x80
 8001402:	60da      	str	r2, [r3, #12]
    hdma_adc.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001404:	4b16      	ldr	r3, [pc, #88]	; (8001460 <HAL_ADC_MspInit+0x128>)
 8001406:	2280      	movs	r2, #128	; 0x80
 8001408:	0052      	lsls	r2, r2, #1
 800140a:	611a      	str	r2, [r3, #16]
    hdma_adc.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800140c:	4b14      	ldr	r3, [pc, #80]	; (8001460 <HAL_ADC_MspInit+0x128>)
 800140e:	2280      	movs	r2, #128	; 0x80
 8001410:	00d2      	lsls	r2, r2, #3
 8001412:	615a      	str	r2, [r3, #20]
    hdma_adc.Init.Mode = DMA_NORMAL;
 8001414:	4b12      	ldr	r3, [pc, #72]	; (8001460 <HAL_ADC_MspInit+0x128>)
 8001416:	2200      	movs	r2, #0
 8001418:	619a      	str	r2, [r3, #24]
    hdma_adc.Init.Priority = DMA_PRIORITY_LOW;
 800141a:	4b11      	ldr	r3, [pc, #68]	; (8001460 <HAL_ADC_MspInit+0x128>)
 800141c:	2200      	movs	r2, #0
 800141e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc) != HAL_OK)
 8001420:	4b0f      	ldr	r3, [pc, #60]	; (8001460 <HAL_ADC_MspInit+0x128>)
 8001422:	0018      	movs	r0, r3
 8001424:	f000 fdec 	bl	8002000 <HAL_DMA_Init>
 8001428:	1e03      	subs	r3, r0, #0
 800142a:	d001      	beq.n	8001430 <HAL_ADC_MspInit+0xf8>
    {
      Error_Handler();
 800142c:	f7ff ff52 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	4a0b      	ldr	r2, [pc, #44]	; (8001460 <HAL_ADC_MspInit+0x128>)
 8001434:	631a      	str	r2, [r3, #48]	; 0x30
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <HAL_ADC_MspInit+0x128>)
 8001438:	687a      	ldr	r2, [r7, #4]
 800143a:	625a      	str	r2, [r3, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	2100      	movs	r1, #0
 8001440:	200c      	movs	r0, #12
 8001442:	f000 fdab 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001446:	200c      	movs	r0, #12
 8001448:	f000 fdbd 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800144c:	46c0      	nop			; (mov r8, r8)
 800144e:	46bd      	mov	sp, r7
 8001450:	b00b      	add	sp, #44	; 0x2c
 8001452:	bd90      	pop	{r4, r7, pc}
 8001454:	40012400 	.word	0x40012400
 8001458:	40021000 	.word	0x40021000
 800145c:	48000400 	.word	0x48000400
 8001460:	2000006c 	.word	0x2000006c
 8001464:	40020008 	.word	0x40020008

08001468 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001468:	b590      	push	{r4, r7, lr}
 800146a:	b08b      	sub	sp, #44	; 0x2c
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001470:	2414      	movs	r4, #20
 8001472:	193b      	adds	r3, r7, r4
 8001474:	0018      	movs	r0, r3
 8001476:	2314      	movs	r3, #20
 8001478:	001a      	movs	r2, r3
 800147a:	2100      	movs	r1, #0
 800147c:	f003 fc80 	bl	8004d80 <memset>
  if(htim_base->Instance==TIM1)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	4a32      	ldr	r2, [pc, #200]	; (8001550 <HAL_TIM_Base_MspInit+0xe8>)
 8001486:	4293      	cmp	r3, r2
 8001488:	d144      	bne.n	8001514 <HAL_TIM_Base_MspInit+0xac>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800148a:	4b32      	ldr	r3, [pc, #200]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 800148c:	699a      	ldr	r2, [r3, #24]
 800148e:	4b31      	ldr	r3, [pc, #196]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 8001490:	2180      	movs	r1, #128	; 0x80
 8001492:	0109      	lsls	r1, r1, #4
 8001494:	430a      	orrs	r2, r1
 8001496:	619a      	str	r2, [r3, #24]
 8001498:	4b2e      	ldr	r3, [pc, #184]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 800149a:	699a      	ldr	r2, [r3, #24]
 800149c:	2380      	movs	r3, #128	; 0x80
 800149e:	011b      	lsls	r3, r3, #4
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
 80014a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b2b      	ldr	r3, [pc, #172]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 80014a8:	695a      	ldr	r2, [r3, #20]
 80014aa:	4b2a      	ldr	r3, [pc, #168]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 80014ac:	2180      	movs	r1, #128	; 0x80
 80014ae:	0289      	lsls	r1, r1, #10
 80014b0:	430a      	orrs	r2, r1
 80014b2:	615a      	str	r2, [r3, #20]
 80014b4:	4b27      	ldr	r3, [pc, #156]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 80014b6:	695a      	ldr	r2, [r3, #20]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	029b      	lsls	r3, r3, #10
 80014bc:	4013      	ands	r3, r2
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = L__Pin|L___Pin;
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	22a0      	movs	r2, #160	; 0xa0
 80014c6:	00d2      	lsls	r2, r2, #3
 80014c8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ca:	0021      	movs	r1, r4
 80014cc:	187b      	adds	r3, r7, r1
 80014ce:	2202      	movs	r2, #2
 80014d0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	187b      	adds	r3, r7, r1
 80014d4:	2200      	movs	r2, #0
 80014d6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d8:	187b      	adds	r3, r7, r1
 80014da:	2200      	movs	r2, #0
 80014dc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 80014de:	187b      	adds	r3, r7, r1
 80014e0:	2202      	movs	r2, #2
 80014e2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e4:	187a      	adds	r2, r7, r1
 80014e6:	2390      	movs	r3, #144	; 0x90
 80014e8:	05db      	lsls	r3, r3, #23
 80014ea:	0011      	movs	r1, r2
 80014ec:	0018      	movs	r0, r3
 80014ee:	f000 ff0b 	bl	8002308 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_UP_TRG_COM_IRQn, 0, 0);
 80014f2:	2200      	movs	r2, #0
 80014f4:	2100      	movs	r1, #0
 80014f6:	200d      	movs	r0, #13
 80014f8:	f000 fd50 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_UP_TRG_COM_IRQn);
 80014fc:	200d      	movs	r0, #13
 80014fe:	f000 fd62 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	200e      	movs	r0, #14
 8001508:	f000 fd48 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 800150c:	200e      	movs	r0, #14
 800150e:	f000 fd5a 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001512:	e018      	b.n	8001546 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a0f      	ldr	r2, [pc, #60]	; (8001558 <HAL_TIM_Base_MspInit+0xf0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d113      	bne.n	8001546 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800151e:	4b0d      	ldr	r3, [pc, #52]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 8001520:	69da      	ldr	r2, [r3, #28]
 8001522:	4b0c      	ldr	r3, [pc, #48]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 8001524:	2102      	movs	r1, #2
 8001526:	430a      	orrs	r2, r1
 8001528:	61da      	str	r2, [r3, #28]
 800152a:	4b0a      	ldr	r3, [pc, #40]	; (8001554 <HAL_TIM_Base_MspInit+0xec>)
 800152c:	69db      	ldr	r3, [r3, #28]
 800152e:	2202      	movs	r2, #2
 8001530:	4013      	ands	r3, r2
 8001532:	60bb      	str	r3, [r7, #8]
 8001534:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001536:	2200      	movs	r2, #0
 8001538:	2100      	movs	r1, #0
 800153a:	2010      	movs	r0, #16
 800153c:	f000 fd2e 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001540:	2010      	movs	r0, #16
 8001542:	f000 fd40 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
}
 8001546:	46c0      	nop			; (mov r8, r8)
 8001548:	46bd      	mov	sp, r7
 800154a:	b00b      	add	sp, #44	; 0x2c
 800154c:	bd90      	pop	{r4, r7, pc}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	40012c00 	.word	0x40012c00
 8001554:	40021000 	.word	0x40021000
 8001558:	40000400 	.word	0x40000400

0800155c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800155c:	b590      	push	{r4, r7, lr}
 800155e:	b08b      	sub	sp, #44	; 0x2c
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	2414      	movs	r4, #20
 8001566:	193b      	adds	r3, r7, r4
 8001568:	0018      	movs	r0, r3
 800156a:	2314      	movs	r3, #20
 800156c:	001a      	movs	r2, r3
 800156e:	2100      	movs	r1, #0
 8001570:	f003 fc06 	bl	8004d80 <memset>
  if(huart->Instance==USART1)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a33      	ldr	r2, [pc, #204]	; (8001648 <HAL_UART_MspInit+0xec>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d160      	bne.n	8001640 <HAL_UART_MspInit+0xe4>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800157e:	4b33      	ldr	r3, [pc, #204]	; (800164c <HAL_UART_MspInit+0xf0>)
 8001580:	699a      	ldr	r2, [r3, #24]
 8001582:	4b32      	ldr	r3, [pc, #200]	; (800164c <HAL_UART_MspInit+0xf0>)
 8001584:	2180      	movs	r1, #128	; 0x80
 8001586:	01c9      	lsls	r1, r1, #7
 8001588:	430a      	orrs	r2, r1
 800158a:	619a      	str	r2, [r3, #24]
 800158c:	4b2f      	ldr	r3, [pc, #188]	; (800164c <HAL_UART_MspInit+0xf0>)
 800158e:	699a      	ldr	r2, [r3, #24]
 8001590:	2380      	movs	r3, #128	; 0x80
 8001592:	01db      	lsls	r3, r3, #7
 8001594:	4013      	ands	r3, r2
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800159a:	4b2c      	ldr	r3, [pc, #176]	; (800164c <HAL_UART_MspInit+0xf0>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	4b2b      	ldr	r3, [pc, #172]	; (800164c <HAL_UART_MspInit+0xf0>)
 80015a0:	2180      	movs	r1, #128	; 0x80
 80015a2:	0289      	lsls	r1, r1, #10
 80015a4:	430a      	orrs	r2, r1
 80015a6:	615a      	str	r2, [r3, #20]
 80015a8:	4b28      	ldr	r3, [pc, #160]	; (800164c <HAL_UART_MspInit+0xf0>)
 80015aa:	695a      	ldr	r2, [r3, #20]
 80015ac:	2380      	movs	r3, #128	; 0x80
 80015ae:	029b      	lsls	r3, r3, #10
 80015b0:	4013      	ands	r3, r2
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA2     ------> USART1_TX
    PA3     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80015b6:	0021      	movs	r1, r4
 80015b8:	187b      	adds	r3, r7, r1
 80015ba:	220c      	movs	r2, #12
 80015bc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015be:	187b      	adds	r3, r7, r1
 80015c0:	2202      	movs	r2, #2
 80015c2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	187b      	adds	r3, r7, r1
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80015ca:	187b      	adds	r3, r7, r1
 80015cc:	2203      	movs	r2, #3
 80015ce:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 80015d0:	187b      	adds	r3, r7, r1
 80015d2:	2201      	movs	r2, #1
 80015d4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d6:	187a      	adds	r2, r7, r1
 80015d8:	2390      	movs	r3, #144	; 0x90
 80015da:	05db      	lsls	r3, r3, #23
 80015dc:	0011      	movs	r1, r2
 80015de:	0018      	movs	r0, r3
 80015e0:	f000 fe92 	bl	8002308 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel2;
 80015e4:	4b1a      	ldr	r3, [pc, #104]	; (8001650 <HAL_UART_MspInit+0xf4>)
 80015e6:	4a1b      	ldr	r2, [pc, #108]	; (8001654 <HAL_UART_MspInit+0xf8>)
 80015e8:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015ea:	4b19      	ldr	r3, [pc, #100]	; (8001650 <HAL_UART_MspInit+0xf4>)
 80015ec:	2210      	movs	r2, #16
 80015ee:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015f0:	4b17      	ldr	r3, [pc, #92]	; (8001650 <HAL_UART_MspInit+0xf4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015f6:	4b16      	ldr	r3, [pc, #88]	; (8001650 <HAL_UART_MspInit+0xf4>)
 80015f8:	2280      	movs	r2, #128	; 0x80
 80015fa:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80015fc:	4b14      	ldr	r3, [pc, #80]	; (8001650 <HAL_UART_MspInit+0xf4>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001602:	4b13      	ldr	r3, [pc, #76]	; (8001650 <HAL_UART_MspInit+0xf4>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8001608:	4b11      	ldr	r3, [pc, #68]	; (8001650 <HAL_UART_MspInit+0xf4>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <HAL_UART_MspInit+0xf4>)
 8001610:	2200      	movs	r2, #0
 8001612:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001614:	4b0e      	ldr	r3, [pc, #56]	; (8001650 <HAL_UART_MspInit+0xf4>)
 8001616:	0018      	movs	r0, r3
 8001618:	f000 fcf2 	bl	8002000 <HAL_DMA_Init>
 800161c:	1e03      	subs	r3, r0, #0
 800161e:	d001      	beq.n	8001624 <HAL_UART_MspInit+0xc8>
    {
      Error_Handler();
 8001620:	f7ff fe58 	bl	80012d4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <HAL_UART_MspInit+0xf4>)
 8001628:	671a      	str	r2, [r3, #112]	; 0x70
 800162a:	4b09      	ldr	r3, [pc, #36]	; (8001650 <HAL_UART_MspInit+0xf4>)
 800162c:	687a      	ldr	r2, [r7, #4]
 800162e:	625a      	str	r2, [r3, #36]	; 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001630:	2200      	movs	r2, #0
 8001632:	2100      	movs	r1, #0
 8001634:	201b      	movs	r0, #27
 8001636:	f000 fcb1 	bl	8001f9c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800163a:	201b      	movs	r0, #27
 800163c:	f000 fcc3 	bl	8001fc6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001640:	46c0      	nop			; (mov r8, r8)
 8001642:	46bd      	mov	sp, r7
 8001644:	b00b      	add	sp, #44	; 0x2c
 8001646:	bd90      	pop	{r4, r7, pc}
 8001648:	40013800 	.word	0x40013800
 800164c:	40021000 	.word	0x40021000
 8001650:	200001d8 	.word	0x200001d8
 8001654:	4002001c 	.word	0x4002001c

08001658 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800165c:	e7fe      	b.n	800165c <NMI_Handler+0x4>

0800165e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800165e:	b580      	push	{r7, lr}
 8001660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001662:	e7fe      	b.n	8001662 <HardFault_Handler+0x4>

08001664 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001668:	46c0      	nop			; (mov r8, r8)
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}

0800166e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800166e:	b580      	push	{r7, lr}
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001672:	46c0      	nop			; (mov r8, r8)
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}

08001678 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800167c:	f000 f8d4 	bl	8001828 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001680:	46c0      	nop			; (mov r8, r8)
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}

08001686 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8001686:	b580      	push	{r7, lr}
 8001688:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 800168a:	46c0      	nop			; (mov r8, r8)
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}

08001690 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 1 interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc);
 8001694:	4b03      	ldr	r3, [pc, #12]	; (80016a4 <DMA1_Channel1_IRQHandler+0x14>)
 8001696:	0018      	movs	r0, r3
 8001698:	f000 fd77 	bl	800218a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800169c:	46c0      	nop			; (mov r8, r8)
 800169e:	46bd      	mov	sp, r7
 80016a0:	bd80      	pop	{r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	2000006c 	.word	0x2000006c

080016a8 <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 80016a8:	b580      	push	{r7, lr}
 80016aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 80016ac:	4b03      	ldr	r3, [pc, #12]	; (80016bc <DMA1_Channel2_3_IRQHandler+0x14>)
 80016ae:	0018      	movs	r0, r3
 80016b0:	f000 fd6b 	bl	800218a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 80016b4:	46c0      	nop			; (mov r8, r8)
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	46c0      	nop			; (mov r8, r8)
 80016bc:	200001d8 	.word	0x200001d8

080016c0 <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC interrupt.
  */
void ADC1_IRQHandler(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc);
 80016c4:	4b03      	ldr	r3, [pc, #12]	; (80016d4 <ADC1_IRQHandler+0x14>)
 80016c6:	0018      	movs	r0, r3
 80016c8:	f000 fa0a 	bl	8001ae0 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 80016cc:	46c0      	nop			; (mov r8, r8)
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	2000002c 	.word	0x2000002c

080016d8 <TIM1_BRK_UP_TRG_COM_IRQHandler>:

/**
  * @brief This function handles TIM1 break, update, trigger and commutation interrupts.
  */
void TIM1_BRK_UP_TRG_COM_IRQHandler(void)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 0 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016dc:	4b03      	ldr	r3, [pc, #12]	; (80016ec <TIM1_BRK_UP_TRG_COM_IRQHandler+0x14>)
 80016de:	0018      	movs	r0, r3
 80016e0:	f001 ff02 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_UP_TRG_COM_IRQn 1 */

  /* USER CODE END TIM1_BRK_UP_TRG_COM_IRQn 1 */
}
 80016e4:	46c0      	nop			; (mov r8, r8)
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	46c0      	nop			; (mov r8, r8)
 80016ec:	200000c0 	.word	0x200000c0

080016f0 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80016f4:	4b03      	ldr	r3, [pc, #12]	; (8001704 <TIM1_CC_IRQHandler+0x14>)
 80016f6:	0018      	movs	r0, r3
 80016f8:	f001 fef6 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 80016fc:	46c0      	nop			; (mov r8, r8)
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	200000c0 	.word	0x200000c0

08001708 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800170c:	4b03      	ldr	r3, [pc, #12]	; (800171c <TIM3_IRQHandler+0x14>)
 800170e:	0018      	movs	r0, r3
 8001710:	f001 feea 	bl	80034e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001714:	46c0      	nop			; (mov r8, r8)
 8001716:	46bd      	mov	sp, r7
 8001718:	bd80      	pop	{r7, pc}
 800171a:	46c0      	nop			; (mov r8, r8)
 800171c:	20000108 	.word	0x20000108

08001720 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001724:	4b03      	ldr	r3, [pc, #12]	; (8001734 <USART1_IRQHandler+0x14>)
 8001726:	0018      	movs	r0, r3
 8001728:	f002 fcba 	bl	80040a0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800172c:	46c0      	nop			; (mov r8, r8)
 800172e:	46bd      	mov	sp, r7
 8001730:	bd80      	pop	{r7, pc}
 8001732:	46c0      	nop			; (mov r8, r8)
 8001734:	20000150 	.word	0x20000150

08001738 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	af00      	add	r7, sp, #0
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 800173c:	46c0      	nop			; (mov r8, r8)
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001744:	480d      	ldr	r0, [pc, #52]	; (800177c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001746:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001748:	480d      	ldr	r0, [pc, #52]	; (8001780 <LoopForever+0x6>)
  ldr r1, =_edata
 800174a:	490e      	ldr	r1, [pc, #56]	; (8001784 <LoopForever+0xa>)
  ldr r2, =_sidata
 800174c:	4a0e      	ldr	r2, [pc, #56]	; (8001788 <LoopForever+0xe>)
  movs r3, #0
 800174e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001750:	e002      	b.n	8001758 <LoopCopyDataInit>

08001752 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001752:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001754:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001756:	3304      	adds	r3, #4

08001758 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001758:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800175a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800175c:	d3f9      	bcc.n	8001752 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175e:	4a0b      	ldr	r2, [pc, #44]	; (800178c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001760:	4c0b      	ldr	r4, [pc, #44]	; (8001790 <LoopForever+0x16>)
  movs r3, #0
 8001762:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001764:	e001      	b.n	800176a <LoopFillZerobss>

08001766 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001766:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001768:	3204      	adds	r2, #4

0800176a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800176a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800176c:	d3fb      	bcc.n	8001766 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800176e:	f7ff ffe3 	bl	8001738 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001772:	f003 fb0d 	bl	8004d90 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001776:	f7fe fff1 	bl	800075c <main>

0800177a <LoopForever>:

LoopForever:
    b LoopForever
 800177a:	e7fe      	b.n	800177a <LoopForever>
  ldr   r0, =_estack
 800177c:	20001000 	.word	0x20001000
  ldr r0, =_sdata
 8001780:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001784:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8001788:	08004e6c 	.word	0x08004e6c
  ldr r2, =_sbss
 800178c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8001790:	2000032c 	.word	0x2000032c

08001794 <DMA1_Channel4_5_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001794:	e7fe      	b.n	8001794 <DMA1_Channel4_5_IRQHandler>
	...

08001798 <HAL_Init>:
  *       In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800179c:	4b07      	ldr	r3, [pc, #28]	; (80017bc <HAL_Init+0x24>)
 800179e:	681a      	ldr	r2, [r3, #0]
 80017a0:	4b06      	ldr	r3, [pc, #24]	; (80017bc <HAL_Init+0x24>)
 80017a2:	2110      	movs	r1, #16
 80017a4:	430a      	orrs	r2, r1
 80017a6:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 80017a8:	2003      	movs	r0, #3
 80017aa:	f000 f809 	bl	80017c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80017ae:	f7ff fd97 	bl	80012e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80017b2:	2300      	movs	r3, #0
}
 80017b4:	0018      	movs	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	46c0      	nop			; (mov r8, r8)
 80017bc:	40022000 	.word	0x40022000

080017c0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017c0:	b590      	push	{r4, r7, lr}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017c8:	4b14      	ldr	r3, [pc, #80]	; (800181c <HAL_InitTick+0x5c>)
 80017ca:	681c      	ldr	r4, [r3, #0]
 80017cc:	4b14      	ldr	r3, [pc, #80]	; (8001820 <HAL_InitTick+0x60>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	0019      	movs	r1, r3
 80017d2:	23fa      	movs	r3, #250	; 0xfa
 80017d4:	0098      	lsls	r0, r3, #2
 80017d6:	f7fe fc97 	bl	8000108 <__udivsi3>
 80017da:	0003      	movs	r3, r0
 80017dc:	0019      	movs	r1, r3
 80017de:	0020      	movs	r0, r4
 80017e0:	f7fe fc92 	bl	8000108 <__udivsi3>
 80017e4:	0003      	movs	r3, r0
 80017e6:	0018      	movs	r0, r3
 80017e8:	f000 fbfd 	bl	8001fe6 <HAL_SYSTICK_Config>
 80017ec:	1e03      	subs	r3, r0, #0
 80017ee:	d001      	beq.n	80017f4 <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 80017f0:	2301      	movs	r3, #1
 80017f2:	e00f      	b.n	8001814 <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	2b03      	cmp	r3, #3
 80017f8:	d80b      	bhi.n	8001812 <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017fa:	6879      	ldr	r1, [r7, #4]
 80017fc:	2301      	movs	r3, #1
 80017fe:	425b      	negs	r3, r3
 8001800:	2200      	movs	r2, #0
 8001802:	0018      	movs	r0, r3
 8001804:	f000 fbca 	bl	8001f9c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001808:	4b06      	ldr	r3, [pc, #24]	; (8001824 <HAL_InitTick+0x64>)
 800180a:	687a      	ldr	r2, [r7, #4]
 800180c:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

   /* Return function status */
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
 8001810:	e000      	b.n	8001814 <HAL_InitTick+0x54>
    return HAL_ERROR;
 8001812:	2301      	movs	r3, #1
}
 8001814:	0018      	movs	r0, r3
 8001816:	46bd      	mov	sp, r7
 8001818:	b003      	add	sp, #12
 800181a:	bd90      	pop	{r4, r7, pc}
 800181c:	20000004 	.word	0x20000004
 8001820:	2000000c 	.word	0x2000000c
 8001824:	20000008 	.word	0x20000008

08001828 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800182c:	4b05      	ldr	r3, [pc, #20]	; (8001844 <HAL_IncTick+0x1c>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	001a      	movs	r2, r3
 8001832:	4b05      	ldr	r3, [pc, #20]	; (8001848 <HAL_IncTick+0x20>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	18d2      	adds	r2, r2, r3
 8001838:	4b03      	ldr	r3, [pc, #12]	; (8001848 <HAL_IncTick+0x20>)
 800183a:	601a      	str	r2, [r3, #0]
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	46c0      	nop			; (mov r8, r8)
 8001844:	2000000c 	.word	0x2000000c
 8001848:	20000328 	.word	0x20000328

0800184c <HAL_GetTick>:
  * @note   This function is declared as __weak  to be overwritten  in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	af00      	add	r7, sp, #0
  return uwTick;
 8001850:	4b02      	ldr	r3, [pc, #8]	; (800185c <HAL_GetTick+0x10>)
 8001852:	681b      	ldr	r3, [r3, #0]
}
 8001854:	0018      	movs	r0, r3
 8001856:	46bd      	mov	sp, r7
 8001858:	bd80      	pop	{r7, pc}
 800185a:	46c0      	nop			; (mov r8, r8)
 800185c:	20000328 	.word	0x20000328

08001860 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0U;
 8001870:	2300      	movs	r3, #0
 8001872:	60bb      	str	r3, [r7, #8]

  /* Check ADC handle */
  if(hadc == NULL)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d101      	bne.n	800187e <HAL_ADC_Init+0x1e>
  {
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
 800187c:	e125      	b.n	8001aca <HAL_ADC_Init+0x26a>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001882:	2b00      	cmp	r3, #0
 8001884:	d10a      	bne.n	800189c <HAL_ADC_Init+0x3c>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2200      	movs	r2, #0
 800188a:	63da      	str	r2, [r3, #60]	; 0x3c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	2234      	movs	r2, #52	; 0x34
 8001890:	2100      	movs	r1, #0
 8001892:	5499      	strb	r1, [r3, r2]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	0018      	movs	r0, r3
 8001898:	f7ff fd4e 	bl	8001338 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018a0:	2210      	movs	r2, #16
 80018a2:	4013      	ands	r3, r2
 80018a4:	d000      	beq.n	80018a8 <HAL_ADC_Init+0x48>
 80018a6:	e103      	b.n	8001ab0 <HAL_ADC_Init+0x250>
 80018a8:	230f      	movs	r3, #15
 80018aa:	18fb      	adds	r3, r7, r3
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d000      	beq.n	80018b4 <HAL_ADC_Init+0x54>
 80018b2:	e0fd      	b.n	8001ab0 <HAL_ADC_Init+0x250>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	689b      	ldr	r3, [r3, #8]
 80018ba:	2204      	movs	r2, #4
 80018bc:	4013      	ands	r3, r2
      (tmp_hal_status == HAL_OK)                                &&
 80018be:	d000      	beq.n	80018c2 <HAL_ADC_Init+0x62>
 80018c0:	e0f6      	b.n	8001ab0 <HAL_ADC_Init+0x250>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018c6:	4a83      	ldr	r2, [pc, #524]	; (8001ad4 <HAL_ADC_Init+0x274>)
 80018c8:	4013      	ands	r3, r2
 80018ca:	2202      	movs	r2, #2
 80018cc:	431a      	orrs	r2, r3
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	639a      	str	r2, [r3, #56]	; 0x38
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	2203      	movs	r2, #3
 80018da:	4013      	ands	r3, r2
 80018dc:	2b01      	cmp	r3, #1
 80018de:	d112      	bne.n	8001906 <HAL_ADC_Init+0xa6>
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	2201      	movs	r2, #1
 80018e8:	4013      	ands	r3, r2
 80018ea:	2b01      	cmp	r3, #1
 80018ec:	d009      	beq.n	8001902 <HAL_ADC_Init+0xa2>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	68da      	ldr	r2, [r3, #12]
 80018f4:	2380      	movs	r3, #128	; 0x80
 80018f6:	021b      	lsls	r3, r3, #8
 80018f8:	401a      	ands	r2, r3
 80018fa:	2380      	movs	r3, #128	; 0x80
 80018fc:	021b      	lsls	r3, r3, #8
 80018fe:	429a      	cmp	r2, r3
 8001900:	d101      	bne.n	8001906 <HAL_ADC_Init+0xa6>
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_ADC_Init+0xa8>
 8001906:	2300      	movs	r3, #0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d116      	bne.n	800193a <HAL_ADC_Init+0xda>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68db      	ldr	r3, [r3, #12]
 8001912:	2218      	movs	r2, #24
 8001914:	4393      	bics	r3, r2
 8001916:	0019      	movs	r1, r3
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	689a      	ldr	r2, [r3, #8]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	430a      	orrs	r2, r1
 8001922:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	009b      	lsls	r3, r3, #2
 800192c:	0899      	lsrs	r1, r3, #2
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685a      	ldr	r2, [r3, #4]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	430a      	orrs	r2, r1
 8001938:	611a      	str	r2, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	68da      	ldr	r2, [r3, #12]
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	4964      	ldr	r1, [pc, #400]	; (8001ad8 <HAL_ADC_Init+0x278>)
 8001946:	400a      	ands	r2, r1
 8001948:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	7e1b      	ldrb	r3, [r3, #24]
 800194e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	7e5b      	ldrb	r3, [r3, #25]
 8001954:	03db      	lsls	r3, r3, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001956:	431a      	orrs	r2, r3
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	7e9b      	ldrb	r3, [r3, #26]
 800195c:	035b      	lsls	r3, r3, #13
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800195e:	431a      	orrs	r2, r3
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001964:	2b01      	cmp	r3, #1
 8001966:	d002      	beq.n	800196e <HAL_ADC_Init+0x10e>
 8001968:	2380      	movs	r3, #128	; 0x80
 800196a:	015b      	lsls	r3, r3, #5
 800196c:	e000      	b.n	8001970 <HAL_ADC_Init+0x110>
 800196e:	2300      	movs	r3, #0
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001970:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                             |
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	68db      	ldr	r3, [r3, #12]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001976:	431a      	orrs	r2, r3
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	691b      	ldr	r3, [r3, #16]
 800197c:	2b02      	cmp	r3, #2
 800197e:	d101      	bne.n	8001984 <HAL_ADC_Init+0x124>
 8001980:	2304      	movs	r3, #4
 8001982:	e000      	b.n	8001986 <HAL_ADC_Init+0x126>
 8001984:	2300      	movs	r3, #0
                 hadc->Init.DataAlign                                             |
 8001986:	431a      	orrs	r2, r3
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	2124      	movs	r1, #36	; 0x24
 800198c:	5c5b      	ldrb	r3, [r3, r1]
 800198e:	005b      	lsls	r3, r3, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001990:	4313      	orrs	r3, r2
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001992:	68ba      	ldr	r2, [r7, #8]
 8001994:	4313      	orrs	r3, r2
 8001996:	60bb      	str	r3, [r7, #8]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	7edb      	ldrb	r3, [r3, #27]
 800199c:	2b01      	cmp	r3, #1
 800199e:	d115      	bne.n	80019cc <HAL_ADC_Init+0x16c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	7e9b      	ldrb	r3, [r3, #26]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d105      	bne.n	80019b4 <HAL_ADC_Init+0x154>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	2280      	movs	r2, #128	; 0x80
 80019ac:	0252      	lsls	r2, r2, #9
 80019ae:	4313      	orrs	r3, r2
 80019b0:	60bb      	str	r3, [r7, #8]
 80019b2:	e00b      	b.n	80019cc <HAL_ADC_Init+0x16c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019b8:	2220      	movs	r2, #32
 80019ba:	431a      	orrs	r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	639a      	str	r2, [r3, #56]	; 0x38
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019c4:	2201      	movs	r2, #1
 80019c6:	431a      	orrs	r2, r3
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	63da      	str	r2, [r3, #60]	; 0x3c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	69da      	ldr	r2, [r3, #28]
 80019d0:	23c2      	movs	r3, #194	; 0xc2
 80019d2:	33ff      	adds	r3, #255	; 0xff
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d007      	beq.n	80019e8 <HAL_ADC_Init+0x188>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	69da      	ldr	r2, [r3, #28]
                    hadc->Init.ExternalTrigConvEdge );
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a1b      	ldr	r3, [r3, #32]
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80019e0:	4313      	orrs	r3, r2
 80019e2:	68ba      	ldr	r2, [r7, #8]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	60bb      	str	r3, [r7, #8]
    }
    
    /* Update ADC configuration register with previous settings */
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	68d9      	ldr	r1, [r3, #12]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	68ba      	ldr	r2, [r7, #8]
 80019f4:	430a      	orrs	r2, r1
 80019f6:	60da      	str	r2, [r3, #12]
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019fc:	2380      	movs	r3, #128	; 0x80
 80019fe:	055b      	lsls	r3, r3, #21
 8001a00:	429a      	cmp	r2, r3
 8001a02:	d01b      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d017      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d013      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a18:	2b03      	cmp	r3, #3
 8001a1a:	d00f      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a20:	2b04      	cmp	r3, #4
 8001a22:	d00b      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a28:	2b05      	cmp	r3, #5
 8001a2a:	d007      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a30:	2b06      	cmp	r3, #6
 8001a32:	d003      	beq.n	8001a3c <HAL_ADC_Init+0x1dc>
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a38:	2b07      	cmp	r3, #7
 8001a3a:	d112      	bne.n	8001a62 <HAL_ADC_Init+0x202>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	695a      	ldr	r2, [r3, #20]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	2107      	movs	r1, #7
 8001a48:	438a      	bics	r2, r1
 8001a4a:	615a      	str	r2, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	6959      	ldr	r1, [r3, #20]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a56:	2207      	movs	r2, #7
 8001a58:	401a      	ands	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	615a      	str	r2, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	4a1c      	ldr	r2, [pc, #112]	; (8001adc <HAL_ADC_Init+0x27c>)
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d10b      	bne.n	8001a8a <HAL_ADC_Init+0x22a>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	2200      	movs	r2, #0
 8001a76:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	4393      	bics	r3, r2
 8001a80:	2201      	movs	r2, #1
 8001a82:	431a      	orrs	r2, r3
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	639a      	str	r2, [r3, #56]	; 0x38
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001a88:	e01c      	b.n	8001ac4 <HAL_ADC_Init+0x264>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a8e:	2212      	movs	r2, #18
 8001a90:	4393      	bics	r3, r2
 8001a92:	2210      	movs	r2, #16
 8001a94:	431a      	orrs	r2, r3
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	639a      	str	r2, [r3, #56]	; 0x38
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9e:	2201      	movs	r2, #1
 8001aa0:	431a      	orrs	r2, r3
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	63da      	str	r2, [r3, #60]	; 0x3c
      
      tmp_hal_status = HAL_ERROR;
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	18fb      	adds	r3, r7, r3
 8001aaa:	2201      	movs	r2, #1
 8001aac:	701a      	strb	r2, [r3, #0]
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001aae:	e009      	b.n	8001ac4 <HAL_ADC_Init+0x264>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ab4:	2210      	movs	r2, #16
 8001ab6:	431a      	orrs	r2, r3
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	639a      	str	r2, [r3, #56]	; 0x38
        
    tmp_hal_status = HAL_ERROR;
 8001abc:	230f      	movs	r3, #15
 8001abe:	18fb      	adds	r3, r7, r3
 8001ac0:	2201      	movs	r2, #1
 8001ac2:	701a      	strb	r2, [r3, #0]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ac4:	230f      	movs	r3, #15
 8001ac6:	18fb      	adds	r3, r7, r3
 8001ac8:	781b      	ldrb	r3, [r3, #0]
}
 8001aca:	0018      	movs	r0, r3
 8001acc:	46bd      	mov	sp, r7
 8001ace:	b004      	add	sp, #16
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	46c0      	nop			; (mov r8, r8)
 8001ad4:	fffffefd 	.word	0xfffffefd
 8001ad8:	fffe0219 	.word	0xfffe0219
 8001adc:	833fffe7 	.word	0x833fffe7

08001ae0 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b084      	sub	sp, #16
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	685b      	ldr	r3, [r3, #4]
 8001af6:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2204      	movs	r2, #4
 8001afc:	4013      	ands	r3, r2
 8001afe:	d003      	beq.n	8001b08 <HAL_ADC_IRQHandler+0x28>
 8001b00:	68bb      	ldr	r3, [r7, #8]
 8001b02:	2204      	movs	r2, #4
 8001b04:	4013      	ands	r3, r2
 8001b06:	d107      	bne.n	8001b18 <HAL_ADC_IRQHandler+0x38>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	4013      	ands	r3, r2
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b0e:	d049      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0xc4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2208      	movs	r2, #8
 8001b14:	4013      	ands	r3, r2
 8001b16:	d045      	beq.n	8001ba4 <HAL_ADC_IRQHandler+0xc4>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	2210      	movs	r2, #16
 8001b1e:	4013      	ands	r3, r2
 8001b20:	d106      	bne.n	8001b30 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b26:	2280      	movs	r2, #128	; 0x80
 8001b28:	0092      	lsls	r2, r2, #2
 8001b2a:	431a      	orrs	r2, r3
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	639a      	str	r2, [r3, #56]	; 0x38
    }
    
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	68da      	ldr	r2, [r3, #12]
 8001b36:	23c0      	movs	r3, #192	; 0xc0
 8001b38:	011b      	lsls	r3, r3, #4
 8001b3a:	4013      	ands	r3, r2
 8001b3c:	d12a      	bne.n	8001b94 <HAL_ADC_IRQHandler+0xb4>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	7e9b      	ldrb	r3, [r3, #26]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d126      	bne.n	8001b94 <HAL_ADC_IRQHandler+0xb4>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	2208      	movs	r2, #8
 8001b4a:	4013      	ands	r3, r2
 8001b4c:	d022      	beq.n	8001b94 <HAL_ADC_IRQHandler+0xb4>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	2204      	movs	r2, #4
 8001b56:	4013      	ands	r3, r2
 8001b58:	d110      	bne.n	8001b7c <HAL_ADC_IRQHandler+0x9c>
        {
          /* Disable ADC end of single conversion interrupt on group regular */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	685a      	ldr	r2, [r3, #4]
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	210c      	movs	r1, #12
 8001b66:	438a      	bics	r2, r1
 8001b68:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b6e:	4a2d      	ldr	r2, [pc, #180]	; (8001c24 <HAL_ADC_IRQHandler+0x144>)
 8001b70:	4013      	ands	r3, r2
 8001b72:	2201      	movs	r2, #1
 8001b74:	431a      	orrs	r2, r3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	639a      	str	r2, [r3, #56]	; 0x38
 8001b7a:	e00b      	b.n	8001b94 <HAL_ADC_IRQHandler+0xb4>
                            HAL_ADC_STATE_READY);
        }
        else
        {
          /* Change ADC state to error state */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b80:	2220      	movs	r2, #32
 8001b82:	431a      	orrs	r2, r3
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	639a      	str	r2, [r3, #56]	; 0x38
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b8c:	2201      	movs	r2, #1
 8001b8e:	431a      	orrs	r2, r3
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	63da      	str	r2, [r3, #60]	; 0x3c
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	0018      	movs	r0, r3
 8001b98:	f000 f846 	bl	8001c28 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	220c      	movs	r2, #12
 8001ba2:	601a      	str	r2, [r3, #0]
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if(((tmp_isr & ADC_FLAG_AWD) == ADC_FLAG_AWD) && ((tmp_ier & ADC_IT_AWD) == ADC_IT_AWD))
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	2280      	movs	r2, #128	; 0x80
 8001ba8:	4013      	ands	r3, r2
 8001baa:	d012      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0xf2>
 8001bac:	68bb      	ldr	r3, [r7, #8]
 8001bae:	2280      	movs	r2, #128	; 0x80
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	d00e      	beq.n	8001bd2 <HAL_ADC_IRQHandler+0xf2>
  {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0252      	lsls	r2, r2, #9
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	639a      	str	r2, [r3, #56]	; 0x38

#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	0018      	movs	r0, r3
 8001bc6:	f000 f837 	bl	8001c38 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear ADC Analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	601a      	str	r2, [r3, #0]
   
  }
  
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001bd2:	68fb      	ldr	r3, [r7, #12]
 8001bd4:	2210      	movs	r2, #16
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d020      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x13c>
 8001bda:	68bb      	ldr	r3, [r7, #8]
 8001bdc:	2210      	movs	r2, #16
 8001bde:	4013      	ands	r3, r2
 8001be0:	d01c      	beq.n	8001c1c <HAL_ADC_IRQHandler+0x13c>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	2b01      	cmp	r3, #1
 8001be8:	d006      	beq.n	8001bf8 <HAL_ADC_IRQHandler+0x118>
        HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN)  )
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	4013      	ands	r3, r2
    if ((hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)            ||
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d10d      	bne.n	8001c14 <HAL_ADC_IRQHandler+0x134>
    {
      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bfc:	2202      	movs	r2, #2
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	63da      	str	r2, [r3, #60]	; 0x3c
      
      /* Clear ADC overrun flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	2210      	movs	r2, #16
 8001c0a:	601a      	str	r2, [r3, #0]
      
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	0018      	movs	r0, r3
 8001c10:	f000 f81a 	bl	8001c48 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2210      	movs	r2, #16
 8001c1a:	601a      	str	r2, [r3, #0]
  }

}
 8001c1c:	46c0      	nop			; (mov r8, r8)
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	b004      	add	sp, #16
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	fffffefe 	.word	0xfffffefe

08001c28 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001c28:	b580      	push	{r7, lr}
 8001c2a:	b082      	sub	sp, #8
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8001c30:	46c0      	nop			; (mov r8, r8)
 8001c32:	46bd      	mov	sp, r7
 8001c34:	b002      	add	sp, #8
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	b082      	sub	sp, #8
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b002      	add	sp, #8
 8001c46:	bd80      	pop	{r7, pc}

08001c48 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	b082      	sub	sp, #8
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001c50:	46c0      	nop			; (mov r8, r8)
 8001c52:	46bd      	mov	sp, r7
 8001c54:	b002      	add	sp, #8
 8001c56:	bd80      	pop	{r7, pc}

08001c58 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c62:	230f      	movs	r3, #15
 8001c64:	18fb      	adds	r3, r7, r3
 8001c66:	2200      	movs	r2, #0
 8001c68:	701a      	strb	r2, [r3, #0]
  __IO uint32_t wait_loop_index = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));
  
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c72:	2380      	movs	r3, #128	; 0x80
 8001c74:	055b      	lsls	r3, r3, #21
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d011      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x46>
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d00d      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x46>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d009      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x46>
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c8e:	2b03      	cmp	r3, #3
 8001c90:	d005      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x46>
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c96:	2b04      	cmp	r3, #4
 8001c98:	d001      	beq.n	8001c9e <HAL_ADC_ConfigChannel+0x46>
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	2234      	movs	r2, #52	; 0x34
 8001ca2:	5c9b      	ldrb	r3, [r3, r2]
 8001ca4:	2b01      	cmp	r3, #1
 8001ca6:	d101      	bne.n	8001cac <HAL_ADC_ConfigChannel+0x54>
 8001ca8:	2302      	movs	r3, #2
 8001caa:	e0bb      	b.n	8001e24 <HAL_ADC_ConfigChannel+0x1cc>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2234      	movs	r2, #52	; 0x34
 8001cb0:	2101      	movs	r1, #1
 8001cb2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	2204      	movs	r2, #4
 8001cbc:	4013      	ands	r3, r2
 8001cbe:	d000      	beq.n	8001cc2 <HAL_ADC_ConfigChannel+0x6a>
 8001cc0:	e09f      	b.n	8001e02 <HAL_ADC_ConfigChannel+0x1aa>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	685b      	ldr	r3, [r3, #4]
 8001cc6:	4a59      	ldr	r2, [pc, #356]	; (8001e2c <HAL_ADC_ConfigChannel+0x1d4>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d100      	bne.n	8001cce <HAL_ADC_ConfigChannel+0x76>
 8001ccc:	e077      	b.n	8001dbe <HAL_ADC_ConfigChannel+0x166>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	2201      	movs	r2, #1
 8001cda:	409a      	lsls	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	430a      	orrs	r2, r1
 8001ce2:	629a      	str	r2, [r3, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ce8:	2380      	movs	r3, #128	; 0x80
 8001cea:	055b      	lsls	r3, r3, #21
 8001cec:	429a      	cmp	r2, r3
 8001cee:	d037      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d033      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d02f      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d04:	2b03      	cmp	r3, #3
 8001d06:	d02b      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2b04      	cmp	r3, #4
 8001d0e:	d027      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d023      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	2b06      	cmp	r3, #6
 8001d1e:	d01f      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d24:	2b07      	cmp	r3, #7
 8001d26:	d01b      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
      {
        /* Modify sampling time if needed (not needed in case of recurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	689a      	ldr	r2, [r3, #8]
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	695b      	ldr	r3, [r3, #20]
 8001d32:	2107      	movs	r1, #7
 8001d34:	400b      	ands	r3, r1
 8001d36:	429a      	cmp	r2, r3
 8001d38:	d012      	beq.n	8001d60 <HAL_ADC_ConfigChannel+0x108>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	695a      	ldr	r2, [r3, #20]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	2107      	movs	r1, #7
 8001d46:	438a      	bics	r2, r1
 8001d48:	615a      	str	r2, [r3, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	6959      	ldr	r1, [r3, #20]
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	2207      	movs	r2, #7
 8001d56:	401a      	ands	r2, r3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	430a      	orrs	r2, r1
 8001d5e:	615a      	str	r2, [r3, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001d60:	683b      	ldr	r3, [r7, #0]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	2b10      	cmp	r3, #16
 8001d66:	d003      	beq.n	8001d70 <HAL_ADC_ConfigChannel+0x118>
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	2b11      	cmp	r3, #17
 8001d6e:	d152      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path. */
        /* If Channel_17 is selected, enable VREFINT measurement path. */
        /* If Channel_18 is selected, enable VBAT measurement path. */
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001d70:	4b2f      	ldr	r3, [pc, #188]	; (8001e30 <HAL_ADC_ConfigChannel+0x1d8>)
 8001d72:	6819      	ldr	r1, [r3, #0]
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	2b10      	cmp	r3, #16
 8001d7a:	d102      	bne.n	8001d82 <HAL_ADC_ConfigChannel+0x12a>
 8001d7c:	2380      	movs	r3, #128	; 0x80
 8001d7e:	041b      	lsls	r3, r3, #16
 8001d80:	e001      	b.n	8001d86 <HAL_ADC_ConfigChannel+0x12e>
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	03db      	lsls	r3, r3, #15
 8001d86:	4a2a      	ldr	r2, [pc, #168]	; (8001e30 <HAL_ADC_ConfigChannel+0x1d8>)
 8001d88:	430b      	orrs	r3, r1
 8001d8a:	6013      	str	r3, [r2, #0]
        
        /* If Temp. sensor is selected, wait for stabilization delay */
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	2b10      	cmp	r3, #16
 8001d92:	d140      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x1be>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001d94:	4b27      	ldr	r3, [pc, #156]	; (8001e34 <HAL_ADC_ConfigChannel+0x1dc>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	4927      	ldr	r1, [pc, #156]	; (8001e38 <HAL_ADC_ConfigChannel+0x1e0>)
 8001d9a:	0018      	movs	r0, r3
 8001d9c:	f7fe f9b4 	bl	8000108 <__udivsi3>
 8001da0:	0003      	movs	r3, r0
 8001da2:	001a      	movs	r2, r3
 8001da4:	0013      	movs	r3, r2
 8001da6:	009b      	lsls	r3, r3, #2
 8001da8:	189b      	adds	r3, r3, r2
 8001daa:	005b      	lsls	r3, r3, #1
 8001dac:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001dae:	e002      	b.n	8001db6 <HAL_ADC_ConfigChannel+0x15e>
          {
            wait_loop_index--;
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	3b01      	subs	r3, #1
 8001db4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001db6:	68bb      	ldr	r3, [r7, #8]
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d1f9      	bne.n	8001db0 <HAL_ADC_ConfigChannel+0x158>
 8001dbc:	e02b      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1be>
    }
    else
    {
      /* Regular sequence configuration */
      /* Reset the channel selection register from the selected channel */
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	2101      	movs	r1, #1
 8001dca:	4099      	lsls	r1, r3
 8001dcc:	000b      	movs	r3, r1
 8001dce:	43d9      	mvns	r1, r3
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	400a      	ands	r2, r1
 8001dd6:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
      /* internal measurement paths disable: If internal channel selected,    */
      /* disable dedicated internal buffers and path.                         */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	2b10      	cmp	r3, #16
 8001dde:	d003      	beq.n	8001de8 <HAL_ADC_ConfigChannel+0x190>
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b11      	cmp	r3, #17
 8001de6:	d116      	bne.n	8001e16 <HAL_ADC_ConfigChannel+0x1be>
      {
        /* If Channel_16 is selected, disable Temp. sensor measurement path. */
        /* If Channel_17 is selected, disable VREFINT measurement path. */
        /* If Channel_18 is selected, disable VBAT measurement path. */
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001de8:	4b11      	ldr	r3, [pc, #68]	; (8001e30 <HAL_ADC_ConfigChannel+0x1d8>)
 8001dea:	6819      	ldr	r1, [r3, #0]
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	2b10      	cmp	r3, #16
 8001df2:	d101      	bne.n	8001df8 <HAL_ADC_ConfigChannel+0x1a0>
 8001df4:	4a11      	ldr	r2, [pc, #68]	; (8001e3c <HAL_ADC_ConfigChannel+0x1e4>)
 8001df6:	e000      	b.n	8001dfa <HAL_ADC_ConfigChannel+0x1a2>
 8001df8:	4a11      	ldr	r2, [pc, #68]	; (8001e40 <HAL_ADC_ConfigChannel+0x1e8>)
 8001dfa:	4b0d      	ldr	r3, [pc, #52]	; (8001e30 <HAL_ADC_ConfigChannel+0x1d8>)
 8001dfc:	400a      	ands	r2, r1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e009      	b.n	8001e16 <HAL_ADC_ConfigChannel+0x1be>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e06:	2220      	movs	r2, #32
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	639a      	str	r2, [r3, #56]	; 0x38
    
    tmp_hal_status = HAL_ERROR;
 8001e0e:	230f      	movs	r3, #15
 8001e10:	18fb      	adds	r3, r7, r3
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	2234      	movs	r2, #52	; 0x34
 8001e1a:	2100      	movs	r1, #0
 8001e1c:	5499      	strb	r1, [r3, r2]
  
  /* Return function status */
  return tmp_hal_status;
 8001e1e:	230f      	movs	r3, #15
 8001e20:	18fb      	adds	r3, r7, r3
 8001e22:	781b      	ldrb	r3, [r3, #0]
}
 8001e24:	0018      	movs	r0, r3
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b004      	add	sp, #16
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	00001001 	.word	0x00001001
 8001e30:	40012708 	.word	0x40012708
 8001e34:	20000004 	.word	0x20000004
 8001e38:	000f4240 	.word	0x000f4240
 8001e3c:	ff7fffff 	.word	0xff7fffff
 8001e40:	ffbfffff 	.word	0xffbfffff

08001e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b082      	sub	sp, #8
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	0002      	movs	r2, r0
 8001e4c:	1dfb      	adds	r3, r7, #7
 8001e4e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	1dfb      	adds	r3, r7, #7
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	2b7f      	cmp	r3, #127	; 0x7f
 8001e56:	d809      	bhi.n	8001e6c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001e58:	1dfb      	adds	r3, r7, #7
 8001e5a:	781b      	ldrb	r3, [r3, #0]
 8001e5c:	001a      	movs	r2, r3
 8001e5e:	231f      	movs	r3, #31
 8001e60:	401a      	ands	r2, r3
 8001e62:	4b04      	ldr	r3, [pc, #16]	; (8001e74 <__NVIC_EnableIRQ+0x30>)
 8001e64:	2101      	movs	r1, #1
 8001e66:	4091      	lsls	r1, r2
 8001e68:	000a      	movs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]
  }
}
 8001e6c:	46c0      	nop			; (mov r8, r8)
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	b002      	add	sp, #8
 8001e72:	bd80      	pop	{r7, pc}
 8001e74:	e000e100 	.word	0xe000e100

08001e78 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e78:	b590      	push	{r4, r7, lr}
 8001e7a:	b083      	sub	sp, #12
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	0002      	movs	r2, r0
 8001e80:	6039      	str	r1, [r7, #0]
 8001e82:	1dfb      	adds	r3, r7, #7
 8001e84:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001e86:	1dfb      	adds	r3, r7, #7
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b7f      	cmp	r3, #127	; 0x7f
 8001e8c:	d828      	bhi.n	8001ee0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001e8e:	4a2f      	ldr	r2, [pc, #188]	; (8001f4c <__NVIC_SetPriority+0xd4>)
 8001e90:	1dfb      	adds	r3, r7, #7
 8001e92:	781b      	ldrb	r3, [r3, #0]
 8001e94:	b25b      	sxtb	r3, r3
 8001e96:	089b      	lsrs	r3, r3, #2
 8001e98:	33c0      	adds	r3, #192	; 0xc0
 8001e9a:	009b      	lsls	r3, r3, #2
 8001e9c:	589b      	ldr	r3, [r3, r2]
 8001e9e:	1dfa      	adds	r2, r7, #7
 8001ea0:	7812      	ldrb	r2, [r2, #0]
 8001ea2:	0011      	movs	r1, r2
 8001ea4:	2203      	movs	r2, #3
 8001ea6:	400a      	ands	r2, r1
 8001ea8:	00d2      	lsls	r2, r2, #3
 8001eaa:	21ff      	movs	r1, #255	; 0xff
 8001eac:	4091      	lsls	r1, r2
 8001eae:	000a      	movs	r2, r1
 8001eb0:	43d2      	mvns	r2, r2
 8001eb2:	401a      	ands	r2, r3
 8001eb4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	019b      	lsls	r3, r3, #6
 8001eba:	22ff      	movs	r2, #255	; 0xff
 8001ebc:	401a      	ands	r2, r3
 8001ebe:	1dfb      	adds	r3, r7, #7
 8001ec0:	781b      	ldrb	r3, [r3, #0]
 8001ec2:	0018      	movs	r0, r3
 8001ec4:	2303      	movs	r3, #3
 8001ec6:	4003      	ands	r3, r0
 8001ec8:	00db      	lsls	r3, r3, #3
 8001eca:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ecc:	481f      	ldr	r0, [pc, #124]	; (8001f4c <__NVIC_SetPriority+0xd4>)
 8001ece:	1dfb      	adds	r3, r7, #7
 8001ed0:	781b      	ldrb	r3, [r3, #0]
 8001ed2:	b25b      	sxtb	r3, r3
 8001ed4:	089b      	lsrs	r3, r3, #2
 8001ed6:	430a      	orrs	r2, r1
 8001ed8:	33c0      	adds	r3, #192	; 0xc0
 8001eda:	009b      	lsls	r3, r3, #2
 8001edc:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001ede:	e031      	b.n	8001f44 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ee0:	4a1b      	ldr	r2, [pc, #108]	; (8001f50 <__NVIC_SetPriority+0xd8>)
 8001ee2:	1dfb      	adds	r3, r7, #7
 8001ee4:	781b      	ldrb	r3, [r3, #0]
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	230f      	movs	r3, #15
 8001eea:	400b      	ands	r3, r1
 8001eec:	3b08      	subs	r3, #8
 8001eee:	089b      	lsrs	r3, r3, #2
 8001ef0:	3306      	adds	r3, #6
 8001ef2:	009b      	lsls	r3, r3, #2
 8001ef4:	18d3      	adds	r3, r2, r3
 8001ef6:	3304      	adds	r3, #4
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	1dfa      	adds	r2, r7, #7
 8001efc:	7812      	ldrb	r2, [r2, #0]
 8001efe:	0011      	movs	r1, r2
 8001f00:	2203      	movs	r2, #3
 8001f02:	400a      	ands	r2, r1
 8001f04:	00d2      	lsls	r2, r2, #3
 8001f06:	21ff      	movs	r1, #255	; 0xff
 8001f08:	4091      	lsls	r1, r2
 8001f0a:	000a      	movs	r2, r1
 8001f0c:	43d2      	mvns	r2, r2
 8001f0e:	401a      	ands	r2, r3
 8001f10:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001f12:	683b      	ldr	r3, [r7, #0]
 8001f14:	019b      	lsls	r3, r3, #6
 8001f16:	22ff      	movs	r2, #255	; 0xff
 8001f18:	401a      	ands	r2, r3
 8001f1a:	1dfb      	adds	r3, r7, #7
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	0018      	movs	r0, r3
 8001f20:	2303      	movs	r3, #3
 8001f22:	4003      	ands	r3, r0
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f28:	4809      	ldr	r0, [pc, #36]	; (8001f50 <__NVIC_SetPriority+0xd8>)
 8001f2a:	1dfb      	adds	r3, r7, #7
 8001f2c:	781b      	ldrb	r3, [r3, #0]
 8001f2e:	001c      	movs	r4, r3
 8001f30:	230f      	movs	r3, #15
 8001f32:	4023      	ands	r3, r4
 8001f34:	3b08      	subs	r3, #8
 8001f36:	089b      	lsrs	r3, r3, #2
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	3306      	adds	r3, #6
 8001f3c:	009b      	lsls	r3, r3, #2
 8001f3e:	18c3      	adds	r3, r0, r3
 8001f40:	3304      	adds	r3, #4
 8001f42:	601a      	str	r2, [r3, #0]
}
 8001f44:	46c0      	nop			; (mov r8, r8)
 8001f46:	46bd      	mov	sp, r7
 8001f48:	b003      	add	sp, #12
 8001f4a:	bd90      	pop	{r4, r7, pc}
 8001f4c:	e000e100 	.word	0xe000e100
 8001f50:	e000ed00 	.word	0xe000ed00

08001f54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b082      	sub	sp, #8
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	1e5a      	subs	r2, r3, #1
 8001f60:	2380      	movs	r3, #128	; 0x80
 8001f62:	045b      	lsls	r3, r3, #17
 8001f64:	429a      	cmp	r2, r3
 8001f66:	d301      	bcc.n	8001f6c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e010      	b.n	8001f8e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f6c:	4b0a      	ldr	r3, [pc, #40]	; (8001f98 <SysTick_Config+0x44>)
 8001f6e:	687a      	ldr	r2, [r7, #4]
 8001f70:	3a01      	subs	r2, #1
 8001f72:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f74:	2301      	movs	r3, #1
 8001f76:	425b      	negs	r3, r3
 8001f78:	2103      	movs	r1, #3
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff ff7c 	bl	8001e78 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f80:	4b05      	ldr	r3, [pc, #20]	; (8001f98 <SysTick_Config+0x44>)
 8001f82:	2200      	movs	r2, #0
 8001f84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f86:	4b04      	ldr	r3, [pc, #16]	; (8001f98 <SysTick_Config+0x44>)
 8001f88:	2207      	movs	r2, #7
 8001f8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f8c:	2300      	movs	r3, #0
}
 8001f8e:	0018      	movs	r0, r3
 8001f90:	46bd      	mov	sp, r7
 8001f92:	b002      	add	sp, #8
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	46c0      	nop			; (mov r8, r8)
 8001f98:	e000e010 	.word	0xe000e010

08001f9c <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b084      	sub	sp, #16
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	210f      	movs	r1, #15
 8001fa8:	187b      	adds	r3, r7, r1
 8001faa:	1c02      	adds	r2, r0, #0
 8001fac:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 8001fae:	68ba      	ldr	r2, [r7, #8]
 8001fb0:	187b      	adds	r3, r7, r1
 8001fb2:	781b      	ldrb	r3, [r3, #0]
 8001fb4:	b25b      	sxtb	r3, r3
 8001fb6:	0011      	movs	r1, r2
 8001fb8:	0018      	movs	r0, r3
 8001fba:	f7ff ff5d 	bl	8001e78 <__NVIC_SetPriority>
}
 8001fbe:	46c0      	nop			; (mov r8, r8)
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	b004      	add	sp, #16
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	0002      	movs	r2, r0
 8001fce:	1dfb      	adds	r3, r7, #7
 8001fd0:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001fd2:	1dfb      	adds	r3, r7, #7
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7ff ff33 	bl	8001e44 <__NVIC_EnableIRQ>
}
 8001fde:	46c0      	nop			; (mov r8, r8)
 8001fe0:	46bd      	mov	sp, r7
 8001fe2:	b002      	add	sp, #8
 8001fe4:	bd80      	pop	{r7, pc}

08001fe6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fe6:	b580      	push	{r7, lr}
 8001fe8:	b082      	sub	sp, #8
 8001fea:	af00      	add	r7, sp, #0
 8001fec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	0018      	movs	r0, r3
 8001ff2:	f7ff ffaf 	bl	8001f54 <SysTick_Config>
 8001ff6:	0003      	movs	r3, r0
}
 8001ff8:	0018      	movs	r0, r3
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	b002      	add	sp, #8
 8001ffe:	bd80      	pop	{r7, pc}

08002000 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	b084      	sub	sp, #16
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002008:	2300      	movs	r3, #0
 800200a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if (NULL == hdma)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	2b00      	cmp	r3, #0
 8002010:	d101      	bne.n	8002016 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e036      	b.n	8002084 <HAL_DMA_Init+0x84>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2221      	movs	r2, #33	; 0x21
 800201a:	2102      	movs	r1, #2
 800201c:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a18      	ldr	r2, [pc, #96]	; (800208c <HAL_DMA_Init+0x8c>)
 800202a:	4013      	ands	r3, r2
 800202c:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8002036:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	68db      	ldr	r3, [r3, #12]
 800203c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002042:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	695b      	ldr	r3, [r3, #20]
 8002048:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800204e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	69db      	ldr	r3, [r3, #28]
 8002054:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8002056:	68fa      	ldr	r2, [r7, #12]
 8002058:	4313      	orrs	r3, r2
 800205a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68fa      	ldr	r2, [r7, #12]
 8002062:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	0018      	movs	r0, r3
 8002068:	f000 f932 	bl	80022d0 <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	2200      	movs	r2, #0
 8002070:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2221      	movs	r2, #33	; 0x21
 8002076:	2101      	movs	r1, #1
 8002078:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	2220      	movs	r2, #32
 800207e:	2100      	movs	r1, #0
 8002080:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002082:	2300      	movs	r3, #0
}
 8002084:	0018      	movs	r0, r3
 8002086:	46bd      	mov	sp, r7
 8002088:	b004      	add	sp, #16
 800208a:	bd80      	pop	{r7, pc}
 800208c:	ffffc00f 	.word	0xffffc00f

08002090 <HAL_DMA_Abort>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	2221      	movs	r2, #33	; 0x21
 800209c:	5c9b      	ldrb	r3, [r3, r2]
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d008      	beq.n	80020b6 <HAL_DMA_Abort+0x26>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2204      	movs	r2, #4
 80020a8:	639a      	str	r2, [r3, #56]	; 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2220      	movs	r2, #32
 80020ae:	2100      	movs	r1, #0
 80020b0:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e020      	b.n	80020f8 <HAL_DMA_Abort+0x68>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	681a      	ldr	r2, [r3, #0]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	210e      	movs	r1, #14
 80020c2:	438a      	bics	r2, r1
 80020c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	681a      	ldr	r2, [r3, #0]
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2101      	movs	r1, #1
 80020d2:	438a      	bics	r2, r1
 80020d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020de:	2101      	movs	r1, #1
 80020e0:	4091      	lsls	r1, r2
 80020e2:	000a      	movs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2221      	movs	r2, #33	; 0x21
 80020ea:	2101      	movs	r1, #1
 80020ec:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	2220      	movs	r2, #32
 80020f2:	2100      	movs	r1, #0
 80020f4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80020f6:	2300      	movs	r3, #0
}
 80020f8:	0018      	movs	r0, r3
 80020fa:	46bd      	mov	sp, r7
 80020fc:	b002      	add	sp, #8
 80020fe:	bd80      	pop	{r7, pc}

08002100 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b084      	sub	sp, #16
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002108:	210f      	movs	r1, #15
 800210a:	187b      	adds	r3, r7, r1
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	2221      	movs	r2, #33	; 0x21
 8002114:	5c9b      	ldrb	r3, [r3, r2]
 8002116:	b2db      	uxtb	r3, r3
 8002118:	2b02      	cmp	r3, #2
 800211a:	d006      	beq.n	800212a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2204      	movs	r2, #4
 8002120:	639a      	str	r2, [r3, #56]	; 0x38

    status = HAL_ERROR;
 8002122:	187b      	adds	r3, r7, r1
 8002124:	2201      	movs	r2, #1
 8002126:	701a      	strb	r2, [r3, #0]
 8002128:	e028      	b.n	800217c <HAL_DMA_Abort_IT+0x7c>
  }
  else
  {

    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	681a      	ldr	r2, [r3, #0]
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	210e      	movs	r1, #14
 8002136:	438a      	bics	r2, r1
 8002138:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	2101      	movs	r1, #1
 8002146:	438a      	bics	r2, r1
 8002148:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002152:	2101      	movs	r1, #1
 8002154:	4091      	lsls	r1, r2
 8002156:	000a      	movs	r2, r1
 8002158:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2221      	movs	r2, #33	; 0x21
 800215e:	2101      	movs	r1, #1
 8002160:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2220      	movs	r2, #32
 8002166:	2100      	movs	r1, #0
 8002168:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800216e:	2b00      	cmp	r3, #0
 8002170:	d004      	beq.n	800217c <HAL_DMA_Abort_IT+0x7c>
    {
      hdma->XferAbortCallback(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002176:	687a      	ldr	r2, [r7, #4]
 8002178:	0010      	movs	r0, r2
 800217a:	4798      	blx	r3
    }
  }
  return status;
 800217c:	230f      	movs	r3, #15
 800217e:	18fb      	adds	r3, r7, r3
 8002180:	781b      	ldrb	r3, [r3, #0]
}
 8002182:	0018      	movs	r0, r3
 8002184:	46bd      	mov	sp, r7
 8002186:	b004      	add	sp, #16
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	2204      	movs	r2, #4
 80021a8:	409a      	lsls	r2, r3
 80021aa:	0013      	movs	r3, r2
 80021ac:	68fa      	ldr	r2, [r7, #12]
 80021ae:	4013      	ands	r3, r2
 80021b0:	d024      	beq.n	80021fc <HAL_DMA_IRQHandler+0x72>
 80021b2:	68bb      	ldr	r3, [r7, #8]
 80021b4:	2204      	movs	r2, #4
 80021b6:	4013      	ands	r3, r2
 80021b8:	d020      	beq.n	80021fc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	2220      	movs	r2, #32
 80021c2:	4013      	ands	r3, r2
 80021c4:	d107      	bne.n	80021d6 <HAL_DMA_IRQHandler+0x4c>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2104      	movs	r1, #4
 80021d2:	438a      	bics	r2, r1
 80021d4:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021de:	2104      	movs	r1, #4
 80021e0:	4091      	lsls	r1, r2
 80021e2:	000a      	movs	r2, r1
 80021e4:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d100      	bne.n	80021f0 <HAL_DMA_IRQHandler+0x66>
 80021ee:	e06a      	b.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f4:	687a      	ldr	r2, [r7, #4]
 80021f6:	0010      	movs	r0, r2
 80021f8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80021fa:	e064      	b.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002200:	2202      	movs	r2, #2
 8002202:	409a      	lsls	r2, r3
 8002204:	0013      	movs	r3, r2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	4013      	ands	r3, r2
 800220a:	d02b      	beq.n	8002264 <HAL_DMA_IRQHandler+0xda>
 800220c:	68bb      	ldr	r3, [r7, #8]
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d027      	beq.n	8002264 <HAL_DMA_IRQHandler+0xda>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2220      	movs	r2, #32
 800221c:	4013      	ands	r3, r2
 800221e:	d10b      	bne.n	8002238 <HAL_DMA_IRQHandler+0xae>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	210a      	movs	r1, #10
 800222c:	438a      	bics	r2, r1
 800222e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2221      	movs	r2, #33	; 0x21
 8002234:	2101      	movs	r1, #1
 8002236:	5499      	strb	r1, [r3, r2]
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2102      	movs	r1, #2
 8002242:	4091      	lsls	r1, r2
 8002244:	000a      	movs	r2, r1
 8002246:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2220      	movs	r2, #32
 800224c:	2100      	movs	r1, #0
 800224e:	5499      	strb	r1, [r3, r2]

    if (hdma->XferCpltCallback != NULL)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002254:	2b00      	cmp	r3, #0
 8002256:	d036      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800225c:	687a      	ldr	r2, [r7, #4]
 800225e:	0010      	movs	r0, r2
 8002260:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002262:	e030      	b.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002268:	2208      	movs	r2, #8
 800226a:	409a      	lsls	r2, r3
 800226c:	0013      	movs	r3, r2
 800226e:	68fa      	ldr	r2, [r7, #12]
 8002270:	4013      	ands	r3, r2
 8002272:	d028      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
 8002274:	68bb      	ldr	r3, [r7, #8]
 8002276:	2208      	movs	r2, #8
 8002278:	4013      	ands	r3, r2
 800227a:	d024      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	210e      	movs	r1, #14
 8002288:	438a      	bics	r2, r1
 800228a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002294:	2101      	movs	r1, #1
 8002296:	4091      	lsls	r1, r2
 8002298:	000a      	movs	r2, r1
 800229a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2201      	movs	r2, #1
 80022a0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	2221      	movs	r2, #33	; 0x21
 80022a6:	2101      	movs	r1, #1
 80022a8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	2220      	movs	r2, #32
 80022ae:	2100      	movs	r1, #0
 80022b0:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d005      	beq.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	687a      	ldr	r2, [r7, #4]
 80022c0:	0010      	movs	r0, r2
 80022c2:	4798      	blx	r3
    }
  }
}
 80022c4:	e7ff      	b.n	80022c6 <HAL_DMA_IRQHandler+0x13c>
 80022c6:	46c0      	nop			; (mov r8, r8)
 80022c8:	46bd      	mov	sp, r7
 80022ca:	b004      	add	sp, #16
 80022cc:	bd80      	pop	{r7, pc}
	...

080022d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	b082      	sub	sp, #8
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	4a08      	ldr	r2, [pc, #32]	; (8002300 <DMA_CalcBaseAndBitshift+0x30>)
 80022de:	4694      	mov	ip, r2
 80022e0:	4463      	add	r3, ip
 80022e2:	2114      	movs	r1, #20
 80022e4:	0018      	movs	r0, r3
 80022e6:	f7fd ff0f 	bl	8000108 <__udivsi3>
 80022ea:	0003      	movs	r3, r0
 80022ec:	009a      	lsls	r2, r3, #2
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	4a03      	ldr	r2, [pc, #12]	; (8002304 <DMA_CalcBaseAndBitshift+0x34>)
 80022f6:	63da      	str	r2, [r3, #60]	; 0x3c
#endif
}
 80022f8:	46c0      	nop			; (mov r8, r8)
 80022fa:	46bd      	mov	sp, r7
 80022fc:	b002      	add	sp, #8
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	bffdfff8 	.word	0xbffdfff8
 8002304:	40020000 	.word	0x40020000

08002308 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002312:	2300      	movs	r3, #0
 8002314:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002316:	e14f      	b.n	80025b8 <HAL_GPIO_Init+0x2b0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2101      	movs	r1, #1
 800231e:	697a      	ldr	r2, [r7, #20]
 8002320:	4091      	lsls	r1, r2
 8002322:	000a      	movs	r2, r1
 8002324:	4013      	ands	r3, r2
 8002326:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d100      	bne.n	8002330 <HAL_GPIO_Init+0x28>
 800232e:	e140      	b.n	80025b2 <HAL_GPIO_Init+0x2aa>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685b      	ldr	r3, [r3, #4]
 8002334:	2203      	movs	r2, #3
 8002336:	4013      	ands	r3, r2
 8002338:	2b01      	cmp	r3, #1
 800233a:	d005      	beq.n	8002348 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2203      	movs	r2, #3
 8002342:	4013      	ands	r3, r2
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002344:	2b02      	cmp	r3, #2
 8002346:	d130      	bne.n	80023aa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	2203      	movs	r2, #3
 8002354:	409a      	lsls	r2, r3
 8002356:	0013      	movs	r3, r2
 8002358:	43da      	mvns	r2, r3
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002360:	683b      	ldr	r3, [r7, #0]
 8002362:	68da      	ldr	r2, [r3, #12]
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	005b      	lsls	r3, r3, #1
 8002368:	409a      	lsls	r2, r3
 800236a:	0013      	movs	r3, r2
 800236c:	693a      	ldr	r2, [r7, #16]
 800236e:	4313      	orrs	r3, r2
 8002370:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	693a      	ldr	r2, [r7, #16]
 8002376:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800237e:	2201      	movs	r2, #1
 8002380:	697b      	ldr	r3, [r7, #20]
 8002382:	409a      	lsls	r2, r3
 8002384:	0013      	movs	r3, r2
 8002386:	43da      	mvns	r2, r3
 8002388:	693b      	ldr	r3, [r7, #16]
 800238a:	4013      	ands	r3, r2
 800238c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685b      	ldr	r3, [r3, #4]
 8002392:	091b      	lsrs	r3, r3, #4
 8002394:	2201      	movs	r2, #1
 8002396:	401a      	ands	r2, r3
 8002398:	697b      	ldr	r3, [r7, #20]
 800239a:	409a      	lsls	r2, r3
 800239c:	0013      	movs	r3, r2
 800239e:	693a      	ldr	r2, [r7, #16]
 80023a0:	4313      	orrs	r3, r2
 80023a2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2203      	movs	r2, #3
 80023b0:	4013      	ands	r3, r2
 80023b2:	2b03      	cmp	r3, #3
 80023b4:	d017      	beq.n	80023e6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	68db      	ldr	r3, [r3, #12]
 80023ba:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	2203      	movs	r2, #3
 80023c2:	409a      	lsls	r2, r3
 80023c4:	0013      	movs	r3, r2
 80023c6:	43da      	mvns	r2, r3
 80023c8:	693b      	ldr	r3, [r7, #16]
 80023ca:	4013      	ands	r3, r2
 80023cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	689a      	ldr	r2, [r3, #8]
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	005b      	lsls	r3, r3, #1
 80023d6:	409a      	lsls	r2, r3
 80023d8:	0013      	movs	r3, r2
 80023da:	693a      	ldr	r2, [r7, #16]
 80023dc:	4313      	orrs	r3, r2
 80023de:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	693a      	ldr	r2, [r7, #16]
 80023e4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	685b      	ldr	r3, [r3, #4]
 80023ea:	2203      	movs	r2, #3
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b02      	cmp	r3, #2
 80023f0:	d123      	bne.n	800243a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80023f2:	697b      	ldr	r3, [r7, #20]
 80023f4:	08da      	lsrs	r2, r3, #3
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	3208      	adds	r2, #8
 80023fa:	0092      	lsls	r2, r2, #2
 80023fc:	58d3      	ldr	r3, [r2, r3]
 80023fe:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002400:	697b      	ldr	r3, [r7, #20]
 8002402:	2207      	movs	r2, #7
 8002404:	4013      	ands	r3, r2
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	220f      	movs	r2, #15
 800240a:	409a      	lsls	r2, r3
 800240c:	0013      	movs	r3, r2
 800240e:	43da      	mvns	r2, r3
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4013      	ands	r3, r2
 8002414:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002416:	683b      	ldr	r3, [r7, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	697b      	ldr	r3, [r7, #20]
 800241c:	2107      	movs	r1, #7
 800241e:	400b      	ands	r3, r1
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	409a      	lsls	r2, r3
 8002424:	0013      	movs	r3, r2
 8002426:	693a      	ldr	r2, [r7, #16]
 8002428:	4313      	orrs	r3, r2
 800242a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	6939      	ldr	r1, [r7, #16]
 8002438:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	005b      	lsls	r3, r3, #1
 8002444:	2203      	movs	r2, #3
 8002446:	409a      	lsls	r2, r3
 8002448:	0013      	movs	r3, r2
 800244a:	43da      	mvns	r2, r3
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4013      	ands	r3, r2
 8002450:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2203      	movs	r2, #3
 8002458:	401a      	ands	r2, r3
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	005b      	lsls	r3, r3, #1
 800245e:	409a      	lsls	r2, r3
 8002460:	0013      	movs	r3, r2
 8002462:	693a      	ldr	r2, [r7, #16]
 8002464:	4313      	orrs	r3, r2
 8002466:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	693a      	ldr	r2, [r7, #16]
 800246c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	685a      	ldr	r2, [r3, #4]
 8002472:	23c0      	movs	r3, #192	; 0xc0
 8002474:	029b      	lsls	r3, r3, #10
 8002476:	4013      	ands	r3, r2
 8002478:	d100      	bne.n	800247c <HAL_GPIO_Init+0x174>
 800247a:	e09a      	b.n	80025b2 <HAL_GPIO_Init+0x2aa>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800247c:	4b54      	ldr	r3, [pc, #336]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800247e:	699a      	ldr	r2, [r3, #24]
 8002480:	4b53      	ldr	r3, [pc, #332]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 8002482:	2101      	movs	r1, #1
 8002484:	430a      	orrs	r2, r1
 8002486:	619a      	str	r2, [r3, #24]
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_GPIO_Init+0x2c8>)
 800248a:	699b      	ldr	r3, [r3, #24]
 800248c:	2201      	movs	r2, #1
 800248e:	4013      	ands	r3, r2
 8002490:	60bb      	str	r3, [r7, #8]
 8002492:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002494:	4a4f      	ldr	r2, [pc, #316]	; (80025d4 <HAL_GPIO_Init+0x2cc>)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	089b      	lsrs	r3, r3, #2
 800249a:	3302      	adds	r3, #2
 800249c:	009b      	lsls	r3, r3, #2
 800249e:	589b      	ldr	r3, [r3, r2]
 80024a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	2203      	movs	r2, #3
 80024a6:	4013      	ands	r3, r2
 80024a8:	009b      	lsls	r3, r3, #2
 80024aa:	220f      	movs	r2, #15
 80024ac:	409a      	lsls	r2, r3
 80024ae:	0013      	movs	r3, r2
 80024b0:	43da      	mvns	r2, r3
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	4013      	ands	r3, r2
 80024b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80024b8:	687a      	ldr	r2, [r7, #4]
 80024ba:	2390      	movs	r3, #144	; 0x90
 80024bc:	05db      	lsls	r3, r3, #23
 80024be:	429a      	cmp	r2, r3
 80024c0:	d013      	beq.n	80024ea <HAL_GPIO_Init+0x1e2>
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	4a44      	ldr	r2, [pc, #272]	; (80025d8 <HAL_GPIO_Init+0x2d0>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d00d      	beq.n	80024e6 <HAL_GPIO_Init+0x1de>
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4a43      	ldr	r2, [pc, #268]	; (80025dc <HAL_GPIO_Init+0x2d4>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d007      	beq.n	80024e2 <HAL_GPIO_Init+0x1da>
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	4a42      	ldr	r2, [pc, #264]	; (80025e0 <HAL_GPIO_Init+0x2d8>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d101      	bne.n	80024de <HAL_GPIO_Init+0x1d6>
 80024da:	2303      	movs	r3, #3
 80024dc:	e006      	b.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024de:	2305      	movs	r3, #5
 80024e0:	e004      	b.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024e2:	2302      	movs	r3, #2
 80024e4:	e002      	b.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024e6:	2301      	movs	r3, #1
 80024e8:	e000      	b.n	80024ec <HAL_GPIO_Init+0x1e4>
 80024ea:	2300      	movs	r3, #0
 80024ec:	697a      	ldr	r2, [r7, #20]
 80024ee:	2103      	movs	r1, #3
 80024f0:	400a      	ands	r2, r1
 80024f2:	0092      	lsls	r2, r2, #2
 80024f4:	4093      	lsls	r3, r2
 80024f6:	693a      	ldr	r2, [r7, #16]
 80024f8:	4313      	orrs	r3, r2
 80024fa:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80024fc:	4935      	ldr	r1, [pc, #212]	; (80025d4 <HAL_GPIO_Init+0x2cc>)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	089b      	lsrs	r3, r3, #2
 8002502:	3302      	adds	r3, #2
 8002504:	009b      	lsls	r3, r3, #2
 8002506:	693a      	ldr	r2, [r7, #16]
 8002508:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800250a:	4b36      	ldr	r3, [pc, #216]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 800250c:	689b      	ldr	r3, [r3, #8]
 800250e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	43da      	mvns	r2, r3
 8002514:	693b      	ldr	r3, [r7, #16]
 8002516:	4013      	ands	r3, r2
 8002518:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	685a      	ldr	r2, [r3, #4]
 800251e:	2380      	movs	r3, #128	; 0x80
 8002520:	035b      	lsls	r3, r3, #13
 8002522:	4013      	ands	r3, r2
 8002524:	d003      	beq.n	800252e <HAL_GPIO_Init+0x226>
        {
          temp |= iocurrent;
 8002526:	693a      	ldr	r2, [r7, #16]
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4313      	orrs	r3, r2
 800252c:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800252e:	4b2d      	ldr	r3, [pc, #180]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 8002530:	693a      	ldr	r2, [r7, #16]
 8002532:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 8002534:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	43da      	mvns	r2, r3
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	4013      	ands	r3, r2
 8002542:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	685a      	ldr	r2, [r3, #4]
 8002548:	2380      	movs	r3, #128	; 0x80
 800254a:	039b      	lsls	r3, r3, #14
 800254c:	4013      	ands	r3, r2
 800254e:	d003      	beq.n	8002558 <HAL_GPIO_Init+0x250>
        {
          temp |= iocurrent;
 8002550:	693a      	ldr	r2, [r7, #16]
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002558:	4b22      	ldr	r3, [pc, #136]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 800255a:	693a      	ldr	r2, [r7, #16]
 800255c:	60da      	str	r2, [r3, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR;
 800255e:	4b21      	ldr	r3, [pc, #132]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	43da      	mvns	r2, r3
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	4013      	ands	r3, r2
 800256c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	685a      	ldr	r2, [r3, #4]
 8002572:	2380      	movs	r3, #128	; 0x80
 8002574:	029b      	lsls	r3, r3, #10
 8002576:	4013      	ands	r3, r2
 8002578:	d003      	beq.n	8002582 <HAL_GPIO_Init+0x27a>
        {
          temp |= iocurrent;
 800257a:	693a      	ldr	r2, [r7, #16]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002582:	4b18      	ldr	r3, [pc, #96]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 8002584:	693a      	ldr	r2, [r7, #16]
 8002586:	605a      	str	r2, [r3, #4]

        temp = EXTI->IMR;
 8002588:	4b16      	ldr	r3, [pc, #88]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	43da      	mvns	r2, r3
 8002592:	693b      	ldr	r3, [r7, #16]
 8002594:	4013      	ands	r3, r2
 8002596:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	685a      	ldr	r2, [r3, #4]
 800259c:	2380      	movs	r3, #128	; 0x80
 800259e:	025b      	lsls	r3, r3, #9
 80025a0:	4013      	ands	r3, r2
 80025a2:	d003      	beq.n	80025ac <HAL_GPIO_Init+0x2a4>
        {
          temp |= iocurrent;
 80025a4:	693a      	ldr	r2, [r7, #16]
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80025ac:	4b0d      	ldr	r3, [pc, #52]	; (80025e4 <HAL_GPIO_Init+0x2dc>)
 80025ae:	693a      	ldr	r2, [r7, #16]
 80025b0:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	697b      	ldr	r3, [r7, #20]
 80025be:	40da      	lsrs	r2, r3
 80025c0:	1e13      	subs	r3, r2, #0
 80025c2:	d000      	beq.n	80025c6 <HAL_GPIO_Init+0x2be>
 80025c4:	e6a8      	b.n	8002318 <HAL_GPIO_Init+0x10>
  } 
}
 80025c6:	46c0      	nop			; (mov r8, r8)
 80025c8:	46c0      	nop			; (mov r8, r8)
 80025ca:	46bd      	mov	sp, r7
 80025cc:	b006      	add	sp, #24
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40010000 	.word	0x40010000
 80025d8:	48000400 	.word	0x48000400
 80025dc:	48000800 	.word	0x48000800
 80025e0:	48000c00 	.word	0x48000c00
 80025e4:	40010400 	.word	0x40010400

080025e8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b084      	sub	sp, #16
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	000a      	movs	r2, r1
 80025f2:	1cbb      	adds	r3, r7, #2
 80025f4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	1cba      	adds	r2, r7, #2
 80025fc:	8812      	ldrh	r2, [r2, #0]
 80025fe:	4013      	ands	r3, r2
 8002600:	d004      	beq.n	800260c <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8002602:	230f      	movs	r3, #15
 8002604:	18fb      	adds	r3, r7, r3
 8002606:	2201      	movs	r2, #1
 8002608:	701a      	strb	r2, [r3, #0]
 800260a:	e003      	b.n	8002614 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800260c:	230f      	movs	r3, #15
 800260e:	18fb      	adds	r3, r7, r3
 8002610:	2200      	movs	r2, #0
 8002612:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8002614:	230f      	movs	r3, #15
 8002616:	18fb      	adds	r3, r7, r3
 8002618:	781b      	ldrb	r3, [r3, #0]
  }
 800261a:	0018      	movs	r0, r3
 800261c:	46bd      	mov	sp, r7
 800261e:	b004      	add	sp, #16
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002622:	b580      	push	{r7, lr}
 8002624:	b082      	sub	sp, #8
 8002626:	af00      	add	r7, sp, #0
 8002628:	6078      	str	r0, [r7, #4]
 800262a:	0008      	movs	r0, r1
 800262c:	0011      	movs	r1, r2
 800262e:	1cbb      	adds	r3, r7, #2
 8002630:	1c02      	adds	r2, r0, #0
 8002632:	801a      	strh	r2, [r3, #0]
 8002634:	1c7b      	adds	r3, r7, #1
 8002636:	1c0a      	adds	r2, r1, #0
 8002638:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800263a:	1c7b      	adds	r3, r7, #1
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d004      	beq.n	800264c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002642:	1cbb      	adds	r3, r7, #2
 8002644:	881a      	ldrh	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800264a:	e003      	b.n	8002654 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800264c:	1cbb      	adds	r3, r7, #2
 800264e:	881a      	ldrh	r2, [r3, #0]
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002654:	46c0      	nop			; (mov r8, r8)
 8002656:	46bd      	mov	sp, r7
 8002658:	b002      	add	sp, #8
 800265a:	bd80      	pop	{r7, pc}

0800265c <HAL_IWDG_Init>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Init(IWDG_HandleTypeDef *hiwdg)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b084      	sub	sp, #16
 8002660:	af00      	add	r7, sp, #0
 8002662:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check the IWDG handle allocation */
  if (hiwdg == NULL)
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2b00      	cmp	r3, #0
 8002668:	d101      	bne.n	800266e <HAL_IWDG_Init+0x12>
  {
    return HAL_ERROR;
 800266a:	2301      	movs	r3, #1
 800266c:	e03d      	b.n	80026ea <HAL_IWDG_Init+0x8e>
  assert_param(IS_IWDG_PRESCALER(hiwdg->Init.Prescaler));
  assert_param(IS_IWDG_RELOAD(hiwdg->Init.Reload));
  assert_param(IS_IWDG_WINDOW(hiwdg->Init.Window));

  /* Enable IWDG. LSI is turned on automatically */
  __HAL_IWDG_START(hiwdg);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a20      	ldr	r2, [pc, #128]	; (80026f4 <HAL_IWDG_Init+0x98>)
 8002674:	601a      	str	r2, [r3, #0]

  /* Enable write access to IWDG_PR, IWDG_RLR and IWDG_WINR registers by writing
  0x5555 in KR */
  IWDG_ENABLE_WRITE_ACCESS(hiwdg);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	4a1f      	ldr	r2, [pc, #124]	; (80026f8 <HAL_IWDG_Init+0x9c>)
 800267c:	601a      	str	r2, [r3, #0]

  /* Write to IWDG registers the Prescaler & Reload values to work with */
  hiwdg->Instance->PR = hiwdg->Init.Prescaler;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	687a      	ldr	r2, [r7, #4]
 8002684:	6852      	ldr	r2, [r2, #4]
 8002686:	605a      	str	r2, [r3, #4]
  hiwdg->Instance->RLR = hiwdg->Init.Reload;
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	687a      	ldr	r2, [r7, #4]
 800268e:	6892      	ldr	r2, [r2, #8]
 8002690:	609a      	str	r2, [r3, #8]

  /* Check pending flag, if previous update not done, return timeout */
  tickstart = HAL_GetTick();
 8002692:	f7ff f8db 	bl	800184c <HAL_GetTick>
 8002696:	0003      	movs	r3, r0
 8002698:	60fb      	str	r3, [r7, #12]

  /* Wait for register to be updated */
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 800269a:	e00e      	b.n	80026ba <HAL_IWDG_Init+0x5e>
  {
    if ((HAL_GetTick() - tickstart) > HAL_IWDG_DEFAULT_TIMEOUT)
 800269c:	f7ff f8d6 	bl	800184c <HAL_GetTick>
 80026a0:	0002      	movs	r2, r0
 80026a2:	68fb      	ldr	r3, [r7, #12]
 80026a4:	1ad3      	subs	r3, r2, r3
 80026a6:	2b27      	cmp	r3, #39	; 0x27
 80026a8:	d907      	bls.n	80026ba <HAL_IWDG_Init+0x5e>
    {
      if ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	2207      	movs	r2, #7
 80026b2:	4013      	ands	r3, r2
 80026b4:	d001      	beq.n	80026ba <HAL_IWDG_Init+0x5e>
      {
        return HAL_TIMEOUT;
 80026b6:	2303      	movs	r3, #3
 80026b8:	e017      	b.n	80026ea <HAL_IWDG_Init+0x8e>
  while ((hiwdg->Instance->SR & IWDG_KERNEL_UPDATE_FLAGS) != 0x00u)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	68db      	ldr	r3, [r3, #12]
 80026c0:	2207      	movs	r2, #7
 80026c2:	4013      	ands	r3, r2
 80026c4:	d1ea      	bne.n	800269c <HAL_IWDG_Init+0x40>
    }
  }

  /* If window parameter is different than current value, modify window
  register */
  if (hiwdg->Instance->WINR != hiwdg->Init.Window)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	691a      	ldr	r2, [r3, #16]
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	68db      	ldr	r3, [r3, #12]
 80026d0:	429a      	cmp	r2, r3
 80026d2:	d005      	beq.n	80026e0 <HAL_IWDG_Init+0x84>
  {
    /* Write to IWDG WINR the IWDG_Window value to compare with. In any case,
    even if window feature is disabled, Watchdog will be reloaded by writing
    windows register */
    hiwdg->Instance->WINR = hiwdg->Init.Window;
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	687a      	ldr	r2, [r7, #4]
 80026da:	68d2      	ldr	r2, [r2, #12]
 80026dc:	611a      	str	r2, [r3, #16]
 80026de:	e003      	b.n	80026e8 <HAL_IWDG_Init+0x8c>
  }
  else
  {
    /* Reload IWDG counter with value defined in the reload register */
    __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a05      	ldr	r2, [pc, #20]	; (80026fc <HAL_IWDG_Init+0xa0>)
 80026e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	0018      	movs	r0, r3
 80026ec:	46bd      	mov	sp, r7
 80026ee:	b004      	add	sp, #16
 80026f0:	bd80      	pop	{r7, pc}
 80026f2:	46c0      	nop			; (mov r8, r8)
 80026f4:	0000cccc 	.word	0x0000cccc
 80026f8:	00005555 	.word	0x00005555
 80026fc:	0000aaaa 	.word	0x0000aaaa

08002700 <HAL_IWDG_Refresh>:
  * @param  hiwdg  pointer to a IWDG_HandleTypeDef structure that contains
  *                the configuration information for the specified IWDG module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_IWDG_Refresh(IWDG_HandleTypeDef *hiwdg)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b082      	sub	sp, #8
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  /* Reload IWDG counter with value defined in the reload register */
  __HAL_IWDG_RELOAD_COUNTER(hiwdg);
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	4a03      	ldr	r2, [pc, #12]	; (800271c <HAL_IWDG_Refresh+0x1c>)
 800270e:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002710:	2300      	movs	r3, #0
}
 8002712:	0018      	movs	r0, r3
 8002714:	46bd      	mov	sp, r7
 8002716:	b002      	add	sp, #8
 8002718:	bd80      	pop	{r7, pc}
 800271a:	46c0      	nop			; (mov r8, r8)
 800271c:	0000aaaa 	.word	0x0000aaaa

08002720 <HAL_PWR_EnableSleepOnExit>:
  *       Setting this bit is useful when the processor is expected to run only on
  *       interruptions handling.         
  * @retval None
  */
void HAL_PWR_EnableSleepOnExit(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* Set SLEEPONEXIT bit of Cortex System Control Register */
  SET_BIT(SCB->SCR, ((uint32_t)SCB_SCR_SLEEPONEXIT_Msk));
 8002724:	4b04      	ldr	r3, [pc, #16]	; (8002738 <HAL_PWR_EnableSleepOnExit+0x18>)
 8002726:	691a      	ldr	r2, [r3, #16]
 8002728:	4b03      	ldr	r3, [pc, #12]	; (8002738 <HAL_PWR_EnableSleepOnExit+0x18>)
 800272a:	2102      	movs	r1, #2
 800272c:	430a      	orrs	r2, r1
 800272e:	611a      	str	r2, [r3, #16]
}
 8002730:	46c0      	nop			; (mov r8, r8)
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}
 8002736:	46c0      	nop			; (mov r8, r8)
 8002738:	e000ed00 	.word	0xe000ed00

0800273c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b088      	sub	sp, #32
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d101      	bne.n	800274e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800274a:	2301      	movs	r3, #1
 800274c:	e301      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	2201      	movs	r2, #1
 8002754:	4013      	ands	r3, r2
 8002756:	d100      	bne.n	800275a <HAL_RCC_OscConfig+0x1e>
 8002758:	e08d      	b.n	8002876 <HAL_RCC_OscConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800275a:	4bc3      	ldr	r3, [pc, #780]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800275c:	685b      	ldr	r3, [r3, #4]
 800275e:	220c      	movs	r2, #12
 8002760:	4013      	ands	r3, r2
 8002762:	2b04      	cmp	r3, #4
 8002764:	d00e      	beq.n	8002784 <HAL_RCC_OscConfig+0x48>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002766:	4bc0      	ldr	r3, [pc, #768]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	220c      	movs	r2, #12
 800276c:	4013      	ands	r3, r2
 800276e:	2b08      	cmp	r3, #8
 8002770:	d116      	bne.n	80027a0 <HAL_RCC_OscConfig+0x64>
 8002772:	4bbd      	ldr	r3, [pc, #756]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002774:	685a      	ldr	r2, [r3, #4]
 8002776:	2380      	movs	r3, #128	; 0x80
 8002778:	025b      	lsls	r3, r3, #9
 800277a:	401a      	ands	r2, r3
 800277c:	2380      	movs	r3, #128	; 0x80
 800277e:	025b      	lsls	r3, r3, #9
 8002780:	429a      	cmp	r2, r3
 8002782:	d10d      	bne.n	80027a0 <HAL_RCC_OscConfig+0x64>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002784:	4bb8      	ldr	r3, [pc, #736]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	029b      	lsls	r3, r3, #10
 800278c:	4013      	ands	r3, r2
 800278e:	d100      	bne.n	8002792 <HAL_RCC_OscConfig+0x56>
 8002790:	e070      	b.n	8002874 <HAL_RCC_OscConfig+0x138>
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d000      	beq.n	800279c <HAL_RCC_OscConfig+0x60>
 800279a:	e06b      	b.n	8002874 <HAL_RCC_OscConfig+0x138>
      {
        return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e2d8      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d107      	bne.n	80027b8 <HAL_RCC_OscConfig+0x7c>
 80027a8:	4baf      	ldr	r3, [pc, #700]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	4bae      	ldr	r3, [pc, #696]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027ae:	2180      	movs	r1, #128	; 0x80
 80027b0:	0249      	lsls	r1, r1, #9
 80027b2:	430a      	orrs	r2, r1
 80027b4:	601a      	str	r2, [r3, #0]
 80027b6:	e02f      	b.n	8002818 <HAL_RCC_OscConfig+0xdc>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	685b      	ldr	r3, [r3, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10c      	bne.n	80027da <HAL_RCC_OscConfig+0x9e>
 80027c0:	4ba9      	ldr	r3, [pc, #676]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027c2:	681a      	ldr	r2, [r3, #0]
 80027c4:	4ba8      	ldr	r3, [pc, #672]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027c6:	49a9      	ldr	r1, [pc, #676]	; (8002a6c <HAL_RCC_OscConfig+0x330>)
 80027c8:	400a      	ands	r2, r1
 80027ca:	601a      	str	r2, [r3, #0]
 80027cc:	4ba6      	ldr	r3, [pc, #664]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027ce:	681a      	ldr	r2, [r3, #0]
 80027d0:	4ba5      	ldr	r3, [pc, #660]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027d2:	49a7      	ldr	r1, [pc, #668]	; (8002a70 <HAL_RCC_OscConfig+0x334>)
 80027d4:	400a      	ands	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]
 80027d8:	e01e      	b.n	8002818 <HAL_RCC_OscConfig+0xdc>
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	2b05      	cmp	r3, #5
 80027e0:	d10e      	bne.n	8002800 <HAL_RCC_OscConfig+0xc4>
 80027e2:	4ba1      	ldr	r3, [pc, #644]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	4ba0      	ldr	r3, [pc, #640]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027e8:	2180      	movs	r1, #128	; 0x80
 80027ea:	02c9      	lsls	r1, r1, #11
 80027ec:	430a      	orrs	r2, r1
 80027ee:	601a      	str	r2, [r3, #0]
 80027f0:	4b9d      	ldr	r3, [pc, #628]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027f2:	681a      	ldr	r2, [r3, #0]
 80027f4:	4b9c      	ldr	r3, [pc, #624]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80027f6:	2180      	movs	r1, #128	; 0x80
 80027f8:	0249      	lsls	r1, r1, #9
 80027fa:	430a      	orrs	r2, r1
 80027fc:	601a      	str	r2, [r3, #0]
 80027fe:	e00b      	b.n	8002818 <HAL_RCC_OscConfig+0xdc>
 8002800:	4b99      	ldr	r3, [pc, #612]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002802:	681a      	ldr	r2, [r3, #0]
 8002804:	4b98      	ldr	r3, [pc, #608]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002806:	4999      	ldr	r1, [pc, #612]	; (8002a6c <HAL_RCC_OscConfig+0x330>)
 8002808:	400a      	ands	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
 800280c:	4b96      	ldr	r3, [pc, #600]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	4b95      	ldr	r3, [pc, #596]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002812:	4997      	ldr	r1, [pc, #604]	; (8002a70 <HAL_RCC_OscConfig+0x334>)
 8002814:	400a      	ands	r2, r1
 8002816:	601a      	str	r2, [r3, #0]
      

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	2b00      	cmp	r3, #0
 800281e:	d014      	beq.n	800284a <HAL_RCC_OscConfig+0x10e>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002820:	f7ff f814 	bl	800184c <HAL_GetTick>
 8002824:	0003      	movs	r3, r0
 8002826:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002828:	e008      	b.n	800283c <HAL_RCC_OscConfig+0x100>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800282a:	f7ff f80f 	bl	800184c <HAL_GetTick>
 800282e:	0002      	movs	r2, r0
 8002830:	69bb      	ldr	r3, [r7, #24]
 8002832:	1ad3      	subs	r3, r2, r3
 8002834:	2b64      	cmp	r3, #100	; 0x64
 8002836:	d901      	bls.n	800283c <HAL_RCC_OscConfig+0x100>
          {
            return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e28a      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283c:	4b8a      	ldr	r3, [pc, #552]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	2380      	movs	r3, #128	; 0x80
 8002842:	029b      	lsls	r3, r3, #10
 8002844:	4013      	ands	r3, r2
 8002846:	d0f0      	beq.n	800282a <HAL_RCC_OscConfig+0xee>
 8002848:	e015      	b.n	8002876 <HAL_RCC_OscConfig+0x13a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284a:	f7fe ffff 	bl	800184c <HAL_GetTick>
 800284e:	0003      	movs	r3, r0
 8002850:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x12a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002854:	f7fe fffa 	bl	800184c <HAL_GetTick>
 8002858:	0002      	movs	r2, r0
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e275      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b80      	ldr	r3, [pc, #512]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	2380      	movs	r3, #128	; 0x80
 800286c:	029b      	lsls	r3, r3, #10
 800286e:	4013      	ands	r3, r2
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x118>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x13a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	2202      	movs	r2, #2
 800287c:	4013      	ands	r3, r2
 800287e:	d100      	bne.n	8002882 <HAL_RCC_OscConfig+0x146>
 8002880:	e069      	b.n	8002956 <HAL_RCC_OscConfig+0x21a>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8002882:	4b79      	ldr	r3, [pc, #484]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	220c      	movs	r2, #12
 8002888:	4013      	ands	r3, r2
 800288a:	d00b      	beq.n	80028a4 <HAL_RCC_OscConfig+0x168>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800288c:	4b76      	ldr	r3, [pc, #472]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	220c      	movs	r2, #12
 8002892:	4013      	ands	r3, r2
 8002894:	2b08      	cmp	r3, #8
 8002896:	d11c      	bne.n	80028d2 <HAL_RCC_OscConfig+0x196>
 8002898:	4b73      	ldr	r3, [pc, #460]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800289a:	685a      	ldr	r2, [r3, #4]
 800289c:	2380      	movs	r3, #128	; 0x80
 800289e:	025b      	lsls	r3, r3, #9
 80028a0:	4013      	ands	r3, r2
 80028a2:	d116      	bne.n	80028d2 <HAL_RCC_OscConfig+0x196>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a4:	4b70      	ldr	r3, [pc, #448]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	2202      	movs	r2, #2
 80028aa:	4013      	ands	r3, r2
 80028ac:	d005      	beq.n	80028ba <HAL_RCC_OscConfig+0x17e>
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	2b01      	cmp	r3, #1
 80028b4:	d001      	beq.n	80028ba <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e24b      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028ba:	4b6b      	ldr	r3, [pc, #428]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	22f8      	movs	r2, #248	; 0xf8
 80028c0:	4393      	bics	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	691b      	ldr	r3, [r3, #16]
 80028c8:	00da      	lsls	r2, r3, #3
 80028ca:	4b67      	ldr	r3, [pc, #412]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028cc:	430a      	orrs	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d0:	e041      	b.n	8002956 <HAL_RCC_OscConfig+0x21a>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	68db      	ldr	r3, [r3, #12]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d024      	beq.n	8002924 <HAL_RCC_OscConfig+0x1e8>
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028da:	4b63      	ldr	r3, [pc, #396]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028dc:	681a      	ldr	r2, [r3, #0]
 80028de:	4b62      	ldr	r3, [pc, #392]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80028e0:	2101      	movs	r1, #1
 80028e2:	430a      	orrs	r2, r1
 80028e4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e6:	f7fe ffb1 	bl	800184c <HAL_GetTick>
 80028ea:	0003      	movs	r3, r0
 80028ec:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028ee:	e008      	b.n	8002902 <HAL_RCC_OscConfig+0x1c6>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80028f0:	f7fe ffac 	bl	800184c <HAL_GetTick>
 80028f4:	0002      	movs	r2, r0
 80028f6:	69bb      	ldr	r3, [r7, #24]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d901      	bls.n	8002902 <HAL_RCC_OscConfig+0x1c6>
          {
            return HAL_TIMEOUT;
 80028fe:	2303      	movs	r3, #3
 8002900:	e227      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002902:	4b59      	ldr	r3, [pc, #356]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2202      	movs	r2, #2
 8002908:	4013      	ands	r3, r2
 800290a:	d0f1      	beq.n	80028f0 <HAL_RCC_OscConfig+0x1b4>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	4b56      	ldr	r3, [pc, #344]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	22f8      	movs	r2, #248	; 0xf8
 8002912:	4393      	bics	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	691b      	ldr	r3, [r3, #16]
 800291a:	00da      	lsls	r2, r3, #3
 800291c:	4b52      	ldr	r3, [pc, #328]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800291e:	430a      	orrs	r2, r1
 8002920:	601a      	str	r2, [r3, #0]
 8002922:	e018      	b.n	8002956 <HAL_RCC_OscConfig+0x21a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002924:	4b50      	ldr	r3, [pc, #320]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002926:	681a      	ldr	r2, [r3, #0]
 8002928:	4b4f      	ldr	r3, [pc, #316]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800292a:	2101      	movs	r1, #1
 800292c:	438a      	bics	r2, r1
 800292e:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002930:	f7fe ff8c 	bl	800184c <HAL_GetTick>
 8002934:	0003      	movs	r3, r0
 8002936:	61bb      	str	r3, [r7, #24]
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002938:	e008      	b.n	800294c <HAL_RCC_OscConfig+0x210>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800293a:	f7fe ff87 	bl	800184c <HAL_GetTick>
 800293e:	0002      	movs	r2, r0
 8002940:	69bb      	ldr	r3, [r7, #24]
 8002942:	1ad3      	subs	r3, r2, r3
 8002944:	2b02      	cmp	r3, #2
 8002946:	d901      	bls.n	800294c <HAL_RCC_OscConfig+0x210>
          {
            return HAL_TIMEOUT;
 8002948:	2303      	movs	r3, #3
 800294a:	e202      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800294c:	4b46      	ldr	r3, [pc, #280]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	2202      	movs	r2, #2
 8002952:	4013      	ands	r3, r2
 8002954:	d1f1      	bne.n	800293a <HAL_RCC_OscConfig+0x1fe>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2208      	movs	r2, #8
 800295c:	4013      	ands	r3, r2
 800295e:	d036      	beq.n	80029ce <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	69db      	ldr	r3, [r3, #28]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d019      	beq.n	800299c <HAL_RCC_OscConfig+0x260>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002968:	4b3f      	ldr	r3, [pc, #252]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800296a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296c:	4b3e      	ldr	r3, [pc, #248]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800296e:	2101      	movs	r1, #1
 8002970:	430a      	orrs	r2, r1
 8002972:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002974:	f7fe ff6a 	bl	800184c <HAL_GetTick>
 8002978:	0003      	movs	r3, r0
 800297a:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297c:	e008      	b.n	8002990 <HAL_RCC_OscConfig+0x254>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800297e:	f7fe ff65 	bl	800184c <HAL_GetTick>
 8002982:	0002      	movs	r2, r0
 8002984:	69bb      	ldr	r3, [r7, #24]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	2b02      	cmp	r3, #2
 800298a:	d901      	bls.n	8002990 <HAL_RCC_OscConfig+0x254>
        {
          return HAL_TIMEOUT;
 800298c:	2303      	movs	r3, #3
 800298e:	e1e0      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002990:	4b35      	ldr	r3, [pc, #212]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002994:	2202      	movs	r2, #2
 8002996:	4013      	ands	r3, r2
 8002998:	d0f1      	beq.n	800297e <HAL_RCC_OscConfig+0x242>
 800299a:	e018      	b.n	80029ce <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800299c:	4b32      	ldr	r3, [pc, #200]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 800299e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029a0:	4b31      	ldr	r3, [pc, #196]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029a2:	2101      	movs	r1, #1
 80029a4:	438a      	bics	r2, r1
 80029a6:	625a      	str	r2, [r3, #36]	; 0x24
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029a8:	f7fe ff50 	bl	800184c <HAL_GetTick>
 80029ac:	0003      	movs	r3, r0
 80029ae:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x288>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029b2:	f7fe ff4b 	bl	800184c <HAL_GetTick>
 80029b6:	0002      	movs	r2, r0
 80029b8:	69bb      	ldr	r3, [r7, #24]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x288>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e1c6      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c4:	4b28      	ldr	r3, [pc, #160]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c8:	2202      	movs	r2, #2
 80029ca:	4013      	ands	r3, r2
 80029cc:	d1f1      	bne.n	80029b2 <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2204      	movs	r2, #4
 80029d4:	4013      	ands	r3, r2
 80029d6:	d100      	bne.n	80029da <HAL_RCC_OscConfig+0x29e>
 80029d8:	e0b4      	b.n	8002b44 <HAL_RCC_OscConfig+0x408>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	201f      	movs	r0, #31
 80029dc:	183b      	adds	r3, r7, r0
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029e4:	69da      	ldr	r2, [r3, #28]
 80029e6:	2380      	movs	r3, #128	; 0x80
 80029e8:	055b      	lsls	r3, r3, #21
 80029ea:	4013      	ands	r3, r2
 80029ec:	d110      	bne.n	8002a10 <HAL_RCC_OscConfig+0x2d4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ee:	4b1e      	ldr	r3, [pc, #120]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029f0:	69da      	ldr	r2, [r3, #28]
 80029f2:	4b1d      	ldr	r3, [pc, #116]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029f4:	2180      	movs	r1, #128	; 0x80
 80029f6:	0549      	lsls	r1, r1, #21
 80029f8:	430a      	orrs	r2, r1
 80029fa:	61da      	str	r2, [r3, #28]
 80029fc:	4b1a      	ldr	r3, [pc, #104]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	2380      	movs	r3, #128	; 0x80
 8002a02:	055b      	lsls	r3, r3, #21
 8002a04:	4013      	ands	r3, r2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8002a0a:	183b      	adds	r3, r7, r0
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a10:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_RCC_OscConfig+0x338>)
 8002a12:	681a      	ldr	r2, [r3, #0]
 8002a14:	2380      	movs	r3, #128	; 0x80
 8002a16:	005b      	lsls	r3, r3, #1
 8002a18:	4013      	ands	r3, r2
 8002a1a:	d11a      	bne.n	8002a52 <HAL_RCC_OscConfig+0x316>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a1c:	4b15      	ldr	r3, [pc, #84]	; (8002a74 <HAL_RCC_OscConfig+0x338>)
 8002a1e:	681a      	ldr	r2, [r3, #0]
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_RCC_OscConfig+0x338>)
 8002a22:	2180      	movs	r1, #128	; 0x80
 8002a24:	0049      	lsls	r1, r1, #1
 8002a26:	430a      	orrs	r2, r1
 8002a28:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a2a:	f7fe ff0f 	bl	800184c <HAL_GetTick>
 8002a2e:	0003      	movs	r3, r0
 8002a30:	61bb      	str	r3, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a32:	e008      	b.n	8002a46 <HAL_RCC_OscConfig+0x30a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a34:	f7fe ff0a 	bl	800184c <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b64      	cmp	r3, #100	; 0x64
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x30a>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e185      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <HAL_RCC_OscConfig+0x338>)
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	2380      	movs	r3, #128	; 0x80
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	4013      	ands	r3, r2
 8002a50:	d0f0      	beq.n	8002a34 <HAL_RCC_OscConfig+0x2f8>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d10e      	bne.n	8002a78 <HAL_RCC_OscConfig+0x33c>
 8002a5a:	4b03      	ldr	r3, [pc, #12]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002a5c:	6a1a      	ldr	r2, [r3, #32]
 8002a5e:	4b02      	ldr	r3, [pc, #8]	; (8002a68 <HAL_RCC_OscConfig+0x32c>)
 8002a60:	2101      	movs	r1, #1
 8002a62:	430a      	orrs	r2, r1
 8002a64:	621a      	str	r2, [r3, #32]
 8002a66:	e035      	b.n	8002ad4 <HAL_RCC_OscConfig+0x398>
 8002a68:	40021000 	.word	0x40021000
 8002a6c:	fffeffff 	.word	0xfffeffff
 8002a70:	fffbffff 	.word	0xfffbffff
 8002a74:	40007000 	.word	0x40007000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d10c      	bne.n	8002a9a <HAL_RCC_OscConfig+0x35e>
 8002a80:	4bb6      	ldr	r3, [pc, #728]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002a82:	6a1a      	ldr	r2, [r3, #32]
 8002a84:	4bb5      	ldr	r3, [pc, #724]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002a86:	2101      	movs	r1, #1
 8002a88:	438a      	bics	r2, r1
 8002a8a:	621a      	str	r2, [r3, #32]
 8002a8c:	4bb3      	ldr	r3, [pc, #716]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002a8e:	6a1a      	ldr	r2, [r3, #32]
 8002a90:	4bb2      	ldr	r3, [pc, #712]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002a92:	2104      	movs	r1, #4
 8002a94:	438a      	bics	r2, r1
 8002a96:	621a      	str	r2, [r3, #32]
 8002a98:	e01c      	b.n	8002ad4 <HAL_RCC_OscConfig+0x398>
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	689b      	ldr	r3, [r3, #8]
 8002a9e:	2b05      	cmp	r3, #5
 8002aa0:	d10c      	bne.n	8002abc <HAL_RCC_OscConfig+0x380>
 8002aa2:	4bae      	ldr	r3, [pc, #696]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	4bad      	ldr	r3, [pc, #692]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002aa8:	2104      	movs	r1, #4
 8002aaa:	430a      	orrs	r2, r1
 8002aac:	621a      	str	r2, [r3, #32]
 8002aae:	4bab      	ldr	r3, [pc, #684]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002ab0:	6a1a      	ldr	r2, [r3, #32]
 8002ab2:	4baa      	ldr	r3, [pc, #680]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002ab4:	2101      	movs	r1, #1
 8002ab6:	430a      	orrs	r2, r1
 8002ab8:	621a      	str	r2, [r3, #32]
 8002aba:	e00b      	b.n	8002ad4 <HAL_RCC_OscConfig+0x398>
 8002abc:	4ba7      	ldr	r3, [pc, #668]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002abe:	6a1a      	ldr	r2, [r3, #32]
 8002ac0:	4ba6      	ldr	r3, [pc, #664]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	438a      	bics	r2, r1
 8002ac6:	621a      	str	r2, [r3, #32]
 8002ac8:	4ba4      	ldr	r3, [pc, #656]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002aca:	6a1a      	ldr	r2, [r3, #32]
 8002acc:	4ba3      	ldr	r3, [pc, #652]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002ace:	2104      	movs	r1, #4
 8002ad0:	438a      	bics	r2, r1
 8002ad2:	621a      	str	r2, [r3, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d014      	beq.n	8002b06 <HAL_RCC_OscConfig+0x3ca>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002adc:	f7fe feb6 	bl	800184c <HAL_GetTick>
 8002ae0:	0003      	movs	r3, r0
 8002ae2:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ae4:	e009      	b.n	8002afa <HAL_RCC_OscConfig+0x3be>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ae6:	f7fe feb1 	bl	800184c <HAL_GetTick>
 8002aea:	0002      	movs	r2, r0
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	1ad3      	subs	r3, r2, r3
 8002af0:	4a9b      	ldr	r2, [pc, #620]	; (8002d60 <HAL_RCC_OscConfig+0x624>)
 8002af2:	4293      	cmp	r3, r2
 8002af4:	d901      	bls.n	8002afa <HAL_RCC_OscConfig+0x3be>
        {
          return HAL_TIMEOUT;
 8002af6:	2303      	movs	r3, #3
 8002af8:	e12b      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002afa:	4b98      	ldr	r3, [pc, #608]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002afc:	6a1b      	ldr	r3, [r3, #32]
 8002afe:	2202      	movs	r2, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	d0f0      	beq.n	8002ae6 <HAL_RCC_OscConfig+0x3aa>
 8002b04:	e013      	b.n	8002b2e <HAL_RCC_OscConfig+0x3f2>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b06:	f7fe fea1 	bl	800184c <HAL_GetTick>
 8002b0a:	0003      	movs	r3, r0
 8002b0c:	61bb      	str	r3, [r7, #24]
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b0e:	e009      	b.n	8002b24 <HAL_RCC_OscConfig+0x3e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b10:	f7fe fe9c 	bl	800184c <HAL_GetTick>
 8002b14:	0002      	movs	r2, r0
 8002b16:	69bb      	ldr	r3, [r7, #24]
 8002b18:	1ad3      	subs	r3, r2, r3
 8002b1a:	4a91      	ldr	r2, [pc, #580]	; (8002d60 <HAL_RCC_OscConfig+0x624>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d901      	bls.n	8002b24 <HAL_RCC_OscConfig+0x3e8>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e116      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b24:	4b8d      	ldr	r3, [pc, #564]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	2202      	movs	r2, #2
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	d1f0      	bne.n	8002b10 <HAL_RCC_OscConfig+0x3d4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002b2e:	231f      	movs	r3, #31
 8002b30:	18fb      	adds	r3, r7, r3
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d105      	bne.n	8002b44 <HAL_RCC_OscConfig+0x408>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b38:	4b88      	ldr	r3, [pc, #544]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b3a:	69da      	ldr	r2, [r3, #28]
 8002b3c:	4b87      	ldr	r3, [pc, #540]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b3e:	4989      	ldr	r1, [pc, #548]	; (8002d64 <HAL_RCC_OscConfig+0x628>)
 8002b40:	400a      	ands	r2, r1
 8002b42:	61da      	str	r2, [r3, #28]
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	2210      	movs	r2, #16
 8002b4a:	4013      	ands	r3, r2
 8002b4c:	d063      	beq.n	8002c16 <HAL_RCC_OscConfig+0x4da>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d12a      	bne.n	8002bac <HAL_RCC_OscConfig+0x470>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002b56:	4b81      	ldr	r3, [pc, #516]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b5a:	4b80      	ldr	r3, [pc, #512]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b5c:	2104      	movs	r1, #4
 8002b5e:	430a      	orrs	r2, r1
 8002b60:	635a      	str	r2, [r3, #52]	; 0x34

      /* Enable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_ENABLE();
 8002b62:	4b7e      	ldr	r3, [pc, #504]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b64:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002b66:	4b7d      	ldr	r3, [pc, #500]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b68:	2101      	movs	r1, #1
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6e:	f7fe fe6d 	bl	800184c <HAL_GetTick>
 8002b72:	0003      	movs	r3, r0
 8002b74:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b76:	e008      	b.n	8002b8a <HAL_RCC_OscConfig+0x44e>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002b78:	f7fe fe68 	bl	800184c <HAL_GetTick>
 8002b7c:	0002      	movs	r2, r0
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	1ad3      	subs	r3, r2, r3
 8002b82:	2b02      	cmp	r3, #2
 8002b84:	d901      	bls.n	8002b8a <HAL_RCC_OscConfig+0x44e>
        {
          return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e0e3      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8002b8a:	4b74      	ldr	r3, [pc, #464]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b8e:	2202      	movs	r2, #2
 8002b90:	4013      	ands	r3, r2
 8002b92:	d0f1      	beq.n	8002b78 <HAL_RCC_OscConfig+0x43c>
        }      
      } 

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002b94:	4b71      	ldr	r3, [pc, #452]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002b96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b98:	22f8      	movs	r2, #248	; 0xf8
 8002b9a:	4393      	bics	r3, r2
 8002b9c:	0019      	movs	r1, r3
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	699b      	ldr	r3, [r3, #24]
 8002ba2:	00da      	lsls	r2, r3, #3
 8002ba4:	4b6d      	ldr	r3, [pc, #436]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002ba6:	430a      	orrs	r2, r1
 8002ba8:	635a      	str	r2, [r3, #52]	; 0x34
 8002baa:	e034      	b.n	8002c16 <HAL_RCC_OscConfig+0x4da>
    }
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	695b      	ldr	r3, [r3, #20]
 8002bb0:	3305      	adds	r3, #5
 8002bb2:	d111      	bne.n	8002bd8 <HAL_RCC_OscConfig+0x49c>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();
 8002bb4:	4b69      	ldr	r3, [pc, #420]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bb6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bb8:	4b68      	ldr	r3, [pc, #416]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bba:	2104      	movs	r1, #4
 8002bbc:	438a      	bics	r2, r1
 8002bbe:	635a      	str	r2, [r3, #52]	; 0x34

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 8002bc0:	4b66      	ldr	r3, [pc, #408]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002bc4:	22f8      	movs	r2, #248	; 0xf8
 8002bc6:	4393      	bics	r3, r2
 8002bc8:	0019      	movs	r1, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	699b      	ldr	r3, [r3, #24]
 8002bce:	00da      	lsls	r2, r3, #3
 8002bd0:	4b62      	ldr	r3, [pc, #392]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bd2:	430a      	orrs	r2, r1
 8002bd4:	635a      	str	r2, [r3, #52]	; 0x34
 8002bd6:	e01e      	b.n	8002c16 <HAL_RCC_OscConfig+0x4da>
    }
    else
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 8002bd8:	4b60      	ldr	r3, [pc, #384]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bda:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bdc:	4b5f      	ldr	r3, [pc, #380]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bde:	2104      	movs	r1, #4
 8002be0:	430a      	orrs	r2, r1
 8002be2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the Internal High Speed oscillator (HSI). */
      __HAL_RCC_HSI14_DISABLE();
 8002be4:	4b5d      	ldr	r3, [pc, #372]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002be6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002be8:	4b5c      	ldr	r3, [pc, #368]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002bea:	2101      	movs	r1, #1
 8002bec:	438a      	bics	r2, r1
 8002bee:	635a      	str	r2, [r3, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bf0:	f7fe fe2c 	bl	800184c <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	61bb      	str	r3, [r7, #24]
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x4d0>
      {
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8002bfa:	f7fe fe27 	bl	800184c <HAL_GetTick>
 8002bfe:	0002      	movs	r2, r0
 8002c00:	69bb      	ldr	r3, [r7, #24]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x4d0>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e0a2      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8002c0c:	4b53      	ldr	r3, [pc, #332]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c10:	2202      	movs	r2, #2
 8002c12:	4013      	ands	r3, r2
 8002c14:	d1f1      	bne.n	8002bfa <HAL_RCC_OscConfig+0x4be>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6a1b      	ldr	r3, [r3, #32]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d100      	bne.n	8002c20 <HAL_RCC_OscConfig+0x4e4>
 8002c1e:	e097      	b.n	8002d50 <HAL_RCC_OscConfig+0x614>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c20:	4b4e      	ldr	r3, [pc, #312]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c22:	685b      	ldr	r3, [r3, #4]
 8002c24:	220c      	movs	r2, #12
 8002c26:	4013      	ands	r3, r2
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d100      	bne.n	8002c2e <HAL_RCC_OscConfig+0x4f2>
 8002c2c:	e06b      	b.n	8002d06 <HAL_RCC_OscConfig+0x5ca>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	2b02      	cmp	r3, #2
 8002c34:	d14c      	bne.n	8002cd0 <HAL_RCC_OscConfig+0x594>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c36:	4b49      	ldr	r3, [pc, #292]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c38:	681a      	ldr	r2, [r3, #0]
 8002c3a:	4b48      	ldr	r3, [pc, #288]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c3c:	494a      	ldr	r1, [pc, #296]	; (8002d68 <HAL_RCC_OscConfig+0x62c>)
 8002c3e:	400a      	ands	r2, r1
 8002c40:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c42:	f7fe fe03 	bl	800184c <HAL_GetTick>
 8002c46:	0003      	movs	r3, r0
 8002c48:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c4a:	e008      	b.n	8002c5e <HAL_RCC_OscConfig+0x522>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c4c:	f7fe fdfe 	bl	800184c <HAL_GetTick>
 8002c50:	0002      	movs	r2, r0
 8002c52:	69bb      	ldr	r3, [r7, #24]
 8002c54:	1ad3      	subs	r3, r2, r3
 8002c56:	2b02      	cmp	r3, #2
 8002c58:	d901      	bls.n	8002c5e <HAL_RCC_OscConfig+0x522>
          {
            return HAL_TIMEOUT;
 8002c5a:	2303      	movs	r3, #3
 8002c5c:	e079      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002c5e:	4b3f      	ldr	r3, [pc, #252]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	2380      	movs	r3, #128	; 0x80
 8002c64:	049b      	lsls	r3, r3, #18
 8002c66:	4013      	ands	r3, r2
 8002c68:	d1f0      	bne.n	8002c4c <HAL_RCC_OscConfig+0x510>
          }
        }

        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c6a:	4b3c      	ldr	r3, [pc, #240]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c6e:	220f      	movs	r2, #15
 8002c70:	4393      	bics	r3, r2
 8002c72:	0019      	movs	r1, r3
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c78:	4b38      	ldr	r3, [pc, #224]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c7a:	430a      	orrs	r2, r1
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8002c7e:	4b37      	ldr	r3, [pc, #220]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c80:	685b      	ldr	r3, [r3, #4]
 8002c82:	4a3a      	ldr	r2, [pc, #232]	; (8002d6c <HAL_RCC_OscConfig+0x630>)
 8002c84:	4013      	ands	r3, r2
 8002c86:	0019      	movs	r1, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c90:	431a      	orrs	r2, r3
 8002c92:	4b32      	ldr	r3, [pc, #200]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c94:	430a      	orrs	r2, r1
 8002c96:	605a      	str	r2, [r3, #4]
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c98:	4b30      	ldr	r3, [pc, #192]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c9a:	681a      	ldr	r2, [r3, #0]
 8002c9c:	4b2f      	ldr	r3, [pc, #188]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002c9e:	2180      	movs	r1, #128	; 0x80
 8002ca0:	0449      	lsls	r1, r1, #17
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	601a      	str	r2, [r3, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fdd1 	bl	800184c <HAL_GetTick>
 8002caa:	0003      	movs	r3, r0
 8002cac:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cb0:	f7fe fdcc 	bl	800184c <HAL_GetTick>
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	69bb      	ldr	r3, [r7, #24]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b02      	cmp	r3, #2
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e047      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002cc2:	4b26      	ldr	r3, [pc, #152]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	2380      	movs	r3, #128	; 0x80
 8002cc8:	049b      	lsls	r3, r3, #18
 8002cca:	4013      	ands	r3, r2
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x574>
 8002cce:	e03f      	b.n	8002d50 <HAL_RCC_OscConfig+0x614>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd0:	4b22      	ldr	r3, [pc, #136]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002cd2:	681a      	ldr	r2, [r3, #0]
 8002cd4:	4b21      	ldr	r3, [pc, #132]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002cd6:	4924      	ldr	r1, [pc, #144]	; (8002d68 <HAL_RCC_OscConfig+0x62c>)
 8002cd8:	400a      	ands	r2, r1
 8002cda:	601a      	str	r2, [r3, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cdc:	f7fe fdb6 	bl	800184c <HAL_GetTick>
 8002ce0:	0003      	movs	r3, r0
 8002ce2:	61bb      	str	r3, [r7, #24]
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ce4:	e008      	b.n	8002cf8 <HAL_RCC_OscConfig+0x5bc>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ce6:	f7fe fdb1 	bl	800184c <HAL_GetTick>
 8002cea:	0002      	movs	r2, r0
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	1ad3      	subs	r3, r2, r3
 8002cf0:	2b02      	cmp	r3, #2
 8002cf2:	d901      	bls.n	8002cf8 <HAL_RCC_OscConfig+0x5bc>
          {
            return HAL_TIMEOUT;
 8002cf4:	2303      	movs	r3, #3
 8002cf6:	e02c      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf8:	4b18      	ldr	r3, [pc, #96]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002cfa:	681a      	ldr	r2, [r3, #0]
 8002cfc:	2380      	movs	r3, #128	; 0x80
 8002cfe:	049b      	lsls	r3, r3, #18
 8002d00:	4013      	ands	r3, r2
 8002d02:	d1f0      	bne.n	8002ce6 <HAL_RCC_OscConfig+0x5aa>
 8002d04:	e024      	b.n	8002d50 <HAL_RCC_OscConfig+0x614>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6a1b      	ldr	r3, [r3, #32]
 8002d0a:	2b01      	cmp	r3, #1
 8002d0c:	d101      	bne.n	8002d12 <HAL_RCC_OscConfig+0x5d6>
      {
        return HAL_ERROR;
 8002d0e:	2301      	movs	r3, #1
 8002d10:	e01f      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config  = RCC->CFGR;
 8002d12:	4b12      	ldr	r3, [pc, #72]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	617b      	str	r3, [r7, #20]
        pll_config2 = RCC->CFGR2;
 8002d18:	4b10      	ldr	r3, [pc, #64]	; (8002d5c <HAL_RCC_OscConfig+0x620>)
 8002d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1c:	613b      	str	r3, [r7, #16]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d1e:	697a      	ldr	r2, [r7, #20]
 8002d20:	2380      	movs	r3, #128	; 0x80
 8002d22:	025b      	lsls	r3, r3, #9
 8002d24:	401a      	ands	r2, r3
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d10e      	bne.n	8002d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d2e:	693b      	ldr	r3, [r7, #16]
 8002d30:	220f      	movs	r2, #15
 8002d32:	401a      	ands	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d38:	429a      	cmp	r2, r3
 8002d3a:	d107      	bne.n	8002d4c <HAL_RCC_OscConfig+0x610>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8002d3c:	697a      	ldr	r2, [r7, #20]
 8002d3e:	23f0      	movs	r3, #240	; 0xf0
 8002d40:	039b      	lsls	r3, r3, #14
 8002d42:	401a      	ands	r2, r3
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8002d48:	429a      	cmp	r2, r3
 8002d4a:	d001      	beq.n	8002d50 <HAL_RCC_OscConfig+0x614>
        {
          return HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	e000      	b.n	8002d52 <HAL_RCC_OscConfig+0x616>
        }
      }
    }
  }

  return HAL_OK;
 8002d50:	2300      	movs	r3, #0
}
 8002d52:	0018      	movs	r0, r3
 8002d54:	46bd      	mov	sp, r7
 8002d56:	b008      	add	sp, #32
 8002d58:	bd80      	pop	{r7, pc}
 8002d5a:	46c0      	nop			; (mov r8, r8)
 8002d5c:	40021000 	.word	0x40021000
 8002d60:	00001388 	.word	0x00001388
 8002d64:	efffffff 	.word	0xefffffff
 8002d68:	feffffff 	.word	0xfeffffff
 8002d6c:	ffc2ffff 	.word	0xffc2ffff

08002d70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d70:	b580      	push	{r7, lr}
 8002d72:	b084      	sub	sp, #16
 8002d74:	af00      	add	r7, sp, #0
 8002d76:	6078      	str	r0, [r7, #4]
 8002d78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d101      	bne.n	8002d84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e0b3      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d84:	4b5b      	ldr	r3, [pc, #364]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	2201      	movs	r2, #1
 8002d8a:	4013      	ands	r3, r2
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d911      	bls.n	8002db6 <HAL_RCC_ClockConfig+0x46>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d92:	4b58      	ldr	r3, [pc, #352]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	2201      	movs	r2, #1
 8002d98:	4393      	bics	r3, r2
 8002d9a:	0019      	movs	r1, r3
 8002d9c:	4b55      	ldr	r3, [pc, #340]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002da4:	4b53      	ldr	r3, [pc, #332]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	2201      	movs	r2, #1
 8002daa:	4013      	ands	r3, r2
 8002dac:	683a      	ldr	r2, [r7, #0]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d001      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x46>
    {
      return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e09a      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	2202      	movs	r2, #2
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	d015      	beq.n	8002dec <HAL_RCC_ClockConfig+0x7c>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	2204      	movs	r2, #4
 8002dc6:	4013      	ands	r3, r2
 8002dc8:	d006      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002dca:	4b4b      	ldr	r3, [pc, #300]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002dcc:	685a      	ldr	r2, [r3, #4]
 8002dce:	4b4a      	ldr	r3, [pc, #296]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002dd0:	21e0      	movs	r1, #224	; 0xe0
 8002dd2:	00c9      	lsls	r1, r1, #3
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	605a      	str	r2, [r3, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002dd8:	4b47      	ldr	r3, [pc, #284]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	22f0      	movs	r2, #240	; 0xf0
 8002dde:	4393      	bics	r3, r2
 8002de0:	0019      	movs	r1, r3
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	689a      	ldr	r2, [r3, #8]
 8002de6:	4b44      	ldr	r3, [pc, #272]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002de8:	430a      	orrs	r2, r1
 8002dea:	605a      	str	r2, [r3, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	2201      	movs	r2, #1
 8002df2:	4013      	ands	r3, r2
 8002df4:	d040      	beq.n	8002e78 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	685b      	ldr	r3, [r3, #4]
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d107      	bne.n	8002e0e <HAL_RCC_ClockConfig+0x9e>
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dfe:	4b3e      	ldr	r3, [pc, #248]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002e00:	681a      	ldr	r2, [r3, #0]
 8002e02:	2380      	movs	r3, #128	; 0x80
 8002e04:	029b      	lsls	r3, r3, #10
 8002e06:	4013      	ands	r3, r2
 8002e08:	d114      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e06e      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	2b02      	cmp	r3, #2
 8002e14:	d107      	bne.n	8002e26 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e16:	4b38      	ldr	r3, [pc, #224]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002e18:	681a      	ldr	r2, [r3, #0]
 8002e1a:	2380      	movs	r3, #128	; 0x80
 8002e1c:	049b      	lsls	r3, r3, #18
 8002e1e:	4013      	ands	r3, r2
 8002e20:	d108      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e22:	2301      	movs	r3, #1
 8002e24:	e062      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
#endif /* RCC_CFGR_SWS_HSI48 */
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	4b34      	ldr	r3, [pc, #208]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	d101      	bne.n	8002e34 <HAL_RCC_ClockConfig+0xc4>
      {
        return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e05b      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002e34:	4b30      	ldr	r3, [pc, #192]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	2203      	movs	r2, #3
 8002e3a:	4393      	bics	r3, r2
 8002e3c:	0019      	movs	r1, r3
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	685a      	ldr	r2, [r3, #4]
 8002e42:	4b2d      	ldr	r3, [pc, #180]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002e44:	430a      	orrs	r2, r1
 8002e46:	605a      	str	r2, [r3, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002e48:	f7fe fd00 	bl	800184c <HAL_GetTick>
 8002e4c:	0003      	movs	r3, r0
 8002e4e:	60fb      	str	r3, [r7, #12]
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e50:	e009      	b.n	8002e66 <HAL_RCC_ClockConfig+0xf6>
    {
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002e52:	f7fe fcfb 	bl	800184c <HAL_GetTick>
 8002e56:	0002      	movs	r2, r0
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	1ad3      	subs	r3, r2, r3
 8002e5c:	4a27      	ldr	r2, [pc, #156]	; (8002efc <HAL_RCC_ClockConfig+0x18c>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d901      	bls.n	8002e66 <HAL_RCC_ClockConfig+0xf6>
      {
        return HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	e042      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002e66:	4b24      	ldr	r3, [pc, #144]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	220c      	movs	r2, #12
 8002e6c:	401a      	ands	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d1ec      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xe2>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e78:	4b1e      	ldr	r3, [pc, #120]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	4013      	ands	r3, r2
 8002e80:	683a      	ldr	r2, [r7, #0]
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d211      	bcs.n	8002eaa <HAL_RCC_ClockConfig+0x13a>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e86:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2201      	movs	r2, #1
 8002e8c:	4393      	bics	r3, r2
 8002e8e:	0019      	movs	r1, r3
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002e92:	683a      	ldr	r2, [r7, #0]
 8002e94:	430a      	orrs	r2, r1
 8002e96:	601a      	str	r2, [r3, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e98:	4b16      	ldr	r3, [pc, #88]	; (8002ef4 <HAL_RCC_ClockConfig+0x184>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4013      	ands	r3, r2
 8002ea0:	683a      	ldr	r2, [r7, #0]
 8002ea2:	429a      	cmp	r2, r3
 8002ea4:	d001      	beq.n	8002eaa <HAL_RCC_ClockConfig+0x13a>
    {
      return HAL_ERROR;
 8002ea6:	2301      	movs	r3, #1
 8002ea8:	e020      	b.n	8002eec <HAL_RCC_ClockConfig+0x17c>
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	2204      	movs	r2, #4
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	d009      	beq.n	8002ec8 <HAL_RCC_ClockConfig+0x158>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002eb4:	4b10      	ldr	r3, [pc, #64]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	4a11      	ldr	r2, [pc, #68]	; (8002f00 <HAL_RCC_ClockConfig+0x190>)
 8002eba:	4013      	ands	r3, r2
 8002ebc:	0019      	movs	r1, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	4b0d      	ldr	r3, [pc, #52]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002ec4:	430a      	orrs	r2, r1
 8002ec6:	605a      	str	r2, [r3, #4]
  }
  
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002ec8:	f000 f820 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8002ecc:	0001      	movs	r1, r0
 8002ece:	4b0a      	ldr	r3, [pc, #40]	; (8002ef8 <HAL_RCC_ClockConfig+0x188>)
 8002ed0:	685b      	ldr	r3, [r3, #4]
 8002ed2:	091b      	lsrs	r3, r3, #4
 8002ed4:	220f      	movs	r2, #15
 8002ed6:	4013      	ands	r3, r2
 8002ed8:	4a0a      	ldr	r2, [pc, #40]	; (8002f04 <HAL_RCC_ClockConfig+0x194>)
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	000a      	movs	r2, r1
 8002ede:	40da      	lsrs	r2, r3
 8002ee0:	4b09      	ldr	r3, [pc, #36]	; (8002f08 <HAL_RCC_ClockConfig+0x198>)
 8002ee2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002ee4:	2003      	movs	r0, #3
 8002ee6:	f7fe fc6b 	bl	80017c0 <HAL_InitTick>
  
  return HAL_OK;
 8002eea:	2300      	movs	r3, #0
}
 8002eec:	0018      	movs	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b004      	add	sp, #16
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	40022000 	.word	0x40022000
 8002ef8:	40021000 	.word	0x40021000
 8002efc:	00001388 	.word	0x00001388
 8002f00:	fffff8ff 	.word	0xfffff8ff
 8002f04:	08004e2c 	.word	0x08004e2c
 8002f08:	20000004 	.word	0x20000004

08002f0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b086      	sub	sp, #24
 8002f10:	af00      	add	r7, sp, #0
  static const uint8_t aPLLMULFactorTable[16U] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
                                                   10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  static const uint8_t aPredivFactorTable[16U] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
                                                   9U,10U, 11U, 12U, 13U, 14U, 15U, 16U};

  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002f12:	2300      	movs	r3, #0
 8002f14:	60fb      	str	r3, [r7, #12]
 8002f16:	2300      	movs	r3, #0
 8002f18:	60bb      	str	r3, [r7, #8]
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	617b      	str	r3, [r7, #20]
 8002f1e:	2300      	movs	r3, #0
 8002f20:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002f22:	2300      	movs	r3, #0
 8002f24:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002f26:	4b20      	ldr	r3, [pc, #128]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	220c      	movs	r2, #12
 8002f30:	4013      	ands	r3, r2
 8002f32:	2b04      	cmp	r3, #4
 8002f34:	d002      	beq.n	8002f3c <HAL_RCC_GetSysClockFreq+0x30>
 8002f36:	2b08      	cmp	r3, #8
 8002f38:	d003      	beq.n	8002f42 <HAL_RCC_GetSysClockFreq+0x36>
 8002f3a:	e02c      	b.n	8002f96 <HAL_RCC_GetSysClockFreq+0x8a>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	; (8002fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f3e:	613b      	str	r3, [r7, #16]
      break;
 8002f40:	e02c      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x90>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	0c9b      	lsrs	r3, r3, #18
 8002f46:	220f      	movs	r2, #15
 8002f48:	4013      	ands	r3, r2
 8002f4a:	4a19      	ldr	r2, [pc, #100]	; (8002fb0 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002f4c:	5cd3      	ldrb	r3, [r2, r3]
 8002f4e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8002f50:	4b15      	ldr	r3, [pc, #84]	; (8002fa8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002f52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f54:	220f      	movs	r2, #15
 8002f56:	4013      	ands	r3, r2
 8002f58:	4a16      	ldr	r2, [pc, #88]	; (8002fb4 <HAL_RCC_GetSysClockFreq+0xa8>)
 8002f5a:	5cd3      	ldrb	r3, [r2, r3]
 8002f5c:	60bb      	str	r3, [r7, #8]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8002f5e:	68fa      	ldr	r2, [r7, #12]
 8002f60:	2380      	movs	r3, #128	; 0x80
 8002f62:	025b      	lsls	r3, r3, #9
 8002f64:	4013      	ands	r3, r2
 8002f66:	d009      	beq.n	8002f7c <HAL_RCC_GetSysClockFreq+0x70>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002f68:	68b9      	ldr	r1, [r7, #8]
 8002f6a:	4810      	ldr	r0, [pc, #64]	; (8002fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f6c:	f7fd f8cc 	bl	8000108 <__udivsi3>
 8002f70:	0003      	movs	r3, r0
 8002f72:	001a      	movs	r2, r3
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	4353      	muls	r3, r2
 8002f78:	617b      	str	r3, [r7, #20]
 8002f7a:	e009      	b.n	8002f90 <HAL_RCC_GetSysClockFreq+0x84>
#if  (defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F070x6) || defined(STM32F071xB) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F091xC) || defined(STM32F098xx) || defined(STM32F030xC))
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
#else
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002f7c:	6879      	ldr	r1, [r7, #4]
 8002f7e:	000a      	movs	r2, r1
 8002f80:	0152      	lsls	r2, r2, #5
 8002f82:	1a52      	subs	r2, r2, r1
 8002f84:	0193      	lsls	r3, r2, #6
 8002f86:	1a9b      	subs	r3, r3, r2
 8002f88:	00db      	lsls	r3, r3, #3
 8002f8a:	185b      	adds	r3, r3, r1
 8002f8c:	021b      	lsls	r3, r3, #8
 8002f8e:	617b      	str	r3, [r7, #20]
#endif
      }
      sysclockfreq = pllclk;
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	613b      	str	r3, [r7, #16]
      break;
 8002f94:	e002      	b.n	8002f9c <HAL_RCC_GetSysClockFreq+0x90>
    }
#endif /* RCC_CFGR_SWS_HSI48 */
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002f96:	4b05      	ldr	r3, [pc, #20]	; (8002fac <HAL_RCC_GetSysClockFreq+0xa0>)
 8002f98:	613b      	str	r3, [r7, #16]
      break;
 8002f9a:	46c0      	nop			; (mov r8, r8)
    }
  }
  return sysclockfreq;
 8002f9c:	693b      	ldr	r3, [r7, #16]
}
 8002f9e:	0018      	movs	r0, r3
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	b006      	add	sp, #24
 8002fa4:	bd80      	pop	{r7, pc}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	40021000 	.word	0x40021000
 8002fac:	007a1200 	.word	0x007a1200
 8002fb0:	08004e44 	.word	0x08004e44
 8002fb4:	08004e54 	.word	0x08004e54

08002fb8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002fbc:	4b02      	ldr	r3, [pc, #8]	; (8002fc8 <HAL_RCC_GetHCLKFreq+0x10>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
}
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
 8002fc6:	46c0      	nop			; (mov r8, r8)
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8002fd0:	f7ff fff2 	bl	8002fb8 <HAL_RCC_GetHCLKFreq>
 8002fd4:	0001      	movs	r1, r0
 8002fd6:	4b06      	ldr	r3, [pc, #24]	; (8002ff0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	0a1b      	lsrs	r3, r3, #8
 8002fdc:	2207      	movs	r2, #7
 8002fde:	4013      	ands	r3, r2
 8002fe0:	4a04      	ldr	r2, [pc, #16]	; (8002ff4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002fe2:	5cd3      	ldrb	r3, [r2, r3]
 8002fe4:	40d9      	lsrs	r1, r3
 8002fe6:	000b      	movs	r3, r1
}    
 8002fe8:	0018      	movs	r0, r3
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}
 8002fee:	46c0      	nop			; (mov r8, r8)
 8002ff0:	40021000 	.word	0x40021000
 8002ff4:	08004e3c 	.word	0x08004e3c

08002ff8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003000:	2300      	movs	r3, #0
 8003002:	613b      	str	r3, [r7, #16]
  uint32_t temp_reg = 0U;
 8003004:	2300      	movs	r3, #0
 8003006:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	2380      	movs	r3, #128	; 0x80
 800300e:	025b      	lsls	r3, r3, #9
 8003010:	4013      	ands	r3, r2
 8003012:	d100      	bne.n	8003016 <HAL_RCCEx_PeriphCLKConfig+0x1e>
 8003014:	e08e      	b.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
    
    FlagStatus       pwrclkchanged = RESET;
 8003016:	2017      	movs	r0, #23
 8003018:	183b      	adds	r3, r7, r0
 800301a:	2200      	movs	r2, #0
 800301c:	701a      	strb	r2, [r3, #0]

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800301e:	4b57      	ldr	r3, [pc, #348]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003020:	69da      	ldr	r2, [r3, #28]
 8003022:	2380      	movs	r3, #128	; 0x80
 8003024:	055b      	lsls	r3, r3, #21
 8003026:	4013      	ands	r3, r2
 8003028:	d110      	bne.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x54>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 800302a:	4b54      	ldr	r3, [pc, #336]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800302c:	69da      	ldr	r2, [r3, #28]
 800302e:	4b53      	ldr	r3, [pc, #332]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003030:	2180      	movs	r1, #128	; 0x80
 8003032:	0549      	lsls	r1, r1, #21
 8003034:	430a      	orrs	r2, r1
 8003036:	61da      	str	r2, [r3, #28]
 8003038:	4b50      	ldr	r3, [pc, #320]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800303a:	69da      	ldr	r2, [r3, #28]
 800303c:	2380      	movs	r3, #128	; 0x80
 800303e:	055b      	lsls	r3, r3, #21
 8003040:	4013      	ands	r3, r2
 8003042:	60bb      	str	r3, [r7, #8]
 8003044:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003046:	183b      	adds	r3, r7, r0
 8003048:	2201      	movs	r2, #1
 800304a:	701a      	strb	r2, [r3, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800304c:	4b4c      	ldr	r3, [pc, #304]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800304e:	681a      	ldr	r2, [r3, #0]
 8003050:	2380      	movs	r3, #128	; 0x80
 8003052:	005b      	lsls	r3, r3, #1
 8003054:	4013      	ands	r3, r2
 8003056:	d11a      	bne.n	800308e <HAL_RCCEx_PeriphCLKConfig+0x96>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003058:	4b49      	ldr	r3, [pc, #292]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800305a:	681a      	ldr	r2, [r3, #0]
 800305c:	4b48      	ldr	r3, [pc, #288]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 800305e:	2180      	movs	r1, #128	; 0x80
 8003060:	0049      	lsls	r1, r1, #1
 8003062:	430a      	orrs	r2, r1
 8003064:	601a      	str	r2, [r3, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003066:	f7fe fbf1 	bl	800184c <HAL_GetTick>
 800306a:	0003      	movs	r3, r0
 800306c:	613b      	str	r3, [r7, #16]
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800306e:	e008      	b.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003070:	f7fe fbec 	bl	800184c <HAL_GetTick>
 8003074:	0002      	movs	r2, r0
 8003076:	693b      	ldr	r3, [r7, #16]
 8003078:	1ad3      	subs	r3, r2, r3
 800307a:	2b64      	cmp	r3, #100	; 0x64
 800307c:	d901      	bls.n	8003082 <HAL_RCCEx_PeriphCLKConfig+0x8a>
        {
          return HAL_TIMEOUT;
 800307e:	2303      	movs	r3, #3
 8003080:	e077      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x17a>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003082:	4b3f      	ldr	r3, [pc, #252]	; (8003180 <HAL_RCCEx_PeriphCLKConfig+0x188>)
 8003084:	681a      	ldr	r2, [r3, #0]
 8003086:	2380      	movs	r3, #128	; 0x80
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	4013      	ands	r3, r2
 800308c:	d0f0      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0x78>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800308e:	4b3b      	ldr	r3, [pc, #236]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003090:	6a1a      	ldr	r2, [r3, #32]
 8003092:	23c0      	movs	r3, #192	; 0xc0
 8003094:	009b      	lsls	r3, r3, #2
 8003096:	4013      	ands	r3, r2
 8003098:	60fb      	str	r3, [r7, #12]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	2b00      	cmp	r3, #0
 800309e:	d034      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x112>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	685a      	ldr	r2, [r3, #4]
 80030a4:	23c0      	movs	r3, #192	; 0xc0
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	4013      	ands	r3, r2
 80030aa:	68fa      	ldr	r2, [r7, #12]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d02c      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x112>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80030b0:	4b32      	ldr	r3, [pc, #200]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030b2:	6a1b      	ldr	r3, [r3, #32]
 80030b4:	4a33      	ldr	r2, [pc, #204]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 80030b6:	4013      	ands	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80030ba:	4b30      	ldr	r3, [pc, #192]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030bc:	6a1a      	ldr	r2, [r3, #32]
 80030be:	4b2f      	ldr	r3, [pc, #188]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030c0:	2180      	movs	r1, #128	; 0x80
 80030c2:	0249      	lsls	r1, r1, #9
 80030c4:	430a      	orrs	r2, r1
 80030c6:	621a      	str	r2, [r3, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80030c8:	4b2c      	ldr	r3, [pc, #176]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030ca:	6a1a      	ldr	r2, [r3, #32]
 80030cc:	4b2b      	ldr	r3, [pc, #172]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030ce:	492e      	ldr	r1, [pc, #184]	; (8003188 <HAL_RCCEx_PeriphCLKConfig+0x190>)
 80030d0:	400a      	ands	r2, r1
 80030d2:	621a      	str	r2, [r3, #32]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 80030d6:	68fa      	ldr	r2, [r7, #12]
 80030d8:	621a      	str	r2, [r3, #32]
      
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	2201      	movs	r2, #1
 80030de:	4013      	ands	r3, r2
 80030e0:	d013      	beq.n	800310a <HAL_RCCEx_PeriphCLKConfig+0x112>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030e2:	f7fe fbb3 	bl	800184c <HAL_GetTick>
 80030e6:	0003      	movs	r3, r0
 80030e8:	613b      	str	r3, [r7, #16]
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030ea:	e009      	b.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x108>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80030ec:	f7fe fbae 	bl	800184c <HAL_GetTick>
 80030f0:	0002      	movs	r2, r0
 80030f2:	693b      	ldr	r3, [r7, #16]
 80030f4:	1ad3      	subs	r3, r2, r3
 80030f6:	4a25      	ldr	r2, [pc, #148]	; (800318c <HAL_RCCEx_PeriphCLKConfig+0x194>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d901      	bls.n	8003100 <HAL_RCCEx_PeriphCLKConfig+0x108>
          {
            return HAL_TIMEOUT;
 80030fc:	2303      	movs	r3, #3
 80030fe:	e038      	b.n	8003172 <HAL_RCCEx_PeriphCLKConfig+0x17a>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003100:	4b1e      	ldr	r3, [pc, #120]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003102:	6a1b      	ldr	r3, [r3, #32]
 8003104:	2202      	movs	r2, #2
 8003106:	4013      	ands	r3, r2
 8003108:	d0f0      	beq.n	80030ec <HAL_RCCEx_PeriphCLKConfig+0xf4>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800310a:	4b1c      	ldr	r3, [pc, #112]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800310c:	6a1b      	ldr	r3, [r3, #32]
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <HAL_RCCEx_PeriphCLKConfig+0x18c>)
 8003110:	4013      	ands	r3, r2
 8003112:	0019      	movs	r1, r3
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	685a      	ldr	r2, [r3, #4]
 8003118:	4b18      	ldr	r3, [pc, #96]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800311a:	430a      	orrs	r2, r1
 800311c:	621a      	str	r2, [r3, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800311e:	2317      	movs	r3, #23
 8003120:	18fb      	adds	r3, r7, r3
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	2b01      	cmp	r3, #1
 8003126:	d105      	bne.n	8003134 <HAL_RCCEx_PeriphCLKConfig+0x13c>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003128:	4b14      	ldr	r3, [pc, #80]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	4b13      	ldr	r3, [pc, #76]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800312e:	4918      	ldr	r1, [pc, #96]	; (8003190 <HAL_RCCEx_PeriphCLKConfig+0x198>)
 8003130:	400a      	ands	r2, r1
 8003132:	61da      	str	r2, [r3, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2201      	movs	r2, #1
 800313a:	4013      	ands	r3, r2
 800313c:	d009      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x15a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800313e:	4b0f      	ldr	r3, [pc, #60]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 8003140:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003142:	2203      	movs	r2, #3
 8003144:	4393      	bics	r3, r2
 8003146:	0019      	movs	r1, r3
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689a      	ldr	r2, [r3, #8]
 800314c:	4b0b      	ldr	r3, [pc, #44]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800314e:	430a      	orrs	r2, r1
 8003150:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2220      	movs	r2, #32
 8003158:	4013      	ands	r3, r2
 800315a:	d009      	beq.n	8003170 <HAL_RCCEx_PeriphCLKConfig+0x178>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800315c:	4b07      	ldr	r3, [pc, #28]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800315e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003160:	2210      	movs	r2, #16
 8003162:	4393      	bics	r3, r2
 8003164:	0019      	movs	r1, r3
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	68da      	ldr	r2, [r3, #12]
 800316a:	4b04      	ldr	r3, [pc, #16]	; (800317c <HAL_RCCEx_PeriphCLKConfig+0x184>)
 800316c:	430a      	orrs	r2, r1
 800316e:	631a      	str	r2, [r3, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003170:	2300      	movs	r3, #0
}
 8003172:	0018      	movs	r0, r3
 8003174:	46bd      	mov	sp, r7
 8003176:	b006      	add	sp, #24
 8003178:	bd80      	pop	{r7, pc}
 800317a:	46c0      	nop			; (mov r8, r8)
 800317c:	40021000 	.word	0x40021000
 8003180:	40007000 	.word	0x40007000
 8003184:	fffffcff 	.word	0xfffffcff
 8003188:	fffeffff 	.word	0xfffeffff
 800318c:	00001388 	.word	0x00001388
 8003190:	efffffff 	.word	0xefffffff

08003194 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b082      	sub	sp, #8
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d101      	bne.n	80031a6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e042      	b.n	800322c <HAL_TIM_Base_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	223d      	movs	r2, #61	; 0x3d
 80031aa:	5c9b      	ldrb	r3, [r3, r2]
 80031ac:	b2db      	uxtb	r3, r3
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d107      	bne.n	80031c2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	223c      	movs	r2, #60	; 0x3c
 80031b6:	2100      	movs	r1, #0
 80031b8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	0018      	movs	r0, r3
 80031be:	f7fe f953 	bl	8001468 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	223d      	movs	r2, #61	; 0x3d
 80031c6:	2102      	movs	r1, #2
 80031c8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3304      	adds	r3, #4
 80031d2:	0019      	movs	r1, r3
 80031d4:	0010      	movs	r0, r2
 80031d6:	f000 fc69 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2246      	movs	r2, #70	; 0x46
 80031de:	2101      	movs	r1, #1
 80031e0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	223e      	movs	r2, #62	; 0x3e
 80031e6:	2101      	movs	r1, #1
 80031e8:	5499      	strb	r1, [r3, r2]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	223f      	movs	r2, #63	; 0x3f
 80031ee:	2101      	movs	r1, #1
 80031f0:	5499      	strb	r1, [r3, r2]
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	2240      	movs	r2, #64	; 0x40
 80031f6:	2101      	movs	r1, #1
 80031f8:	5499      	strb	r1, [r3, r2]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2241      	movs	r2, #65	; 0x41
 80031fe:	2101      	movs	r1, #1
 8003200:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2242      	movs	r2, #66	; 0x42
 8003206:	2101      	movs	r1, #1
 8003208:	5499      	strb	r1, [r3, r2]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2243      	movs	r2, #67	; 0x43
 800320e:	2101      	movs	r1, #1
 8003210:	5499      	strb	r1, [r3, r2]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	2244      	movs	r2, #68	; 0x44
 8003216:	2101      	movs	r1, #1
 8003218:	5499      	strb	r1, [r3, r2]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2245      	movs	r2, #69	; 0x45
 800321e:	2101      	movs	r1, #1
 8003220:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	223d      	movs	r2, #61	; 0x3d
 8003226:	2101      	movs	r1, #1
 8003228:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800322a:	2300      	movs	r3, #0
}
 800322c:	0018      	movs	r0, r3
 800322e:	46bd      	mov	sp, r7
 8003230:	b002      	add	sp, #8
 8003232:	bd80      	pop	{r7, pc}

08003234 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d101      	bne.n	8003246 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e042      	b.n	80032cc <HAL_TIM_IC_Init+0x98>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	223d      	movs	r2, #61	; 0x3d
 800324a:	5c9b      	ldrb	r3, [r3, r2]
 800324c:	b2db      	uxtb	r3, r3
 800324e:	2b00      	cmp	r3, #0
 8003250:	d107      	bne.n	8003262 <HAL_TIM_IC_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	223c      	movs	r2, #60	; 0x3c
 8003256:	2100      	movs	r1, #0
 8003258:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	0018      	movs	r0, r3
 800325e:	f000 f839 	bl	80032d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	223d      	movs	r2, #61	; 0x3d
 8003266:	2102      	movs	r1, #2
 8003268:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681a      	ldr	r2, [r3, #0]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	3304      	adds	r3, #4
 8003272:	0019      	movs	r1, r3
 8003274:	0010      	movs	r0, r2
 8003276:	f000 fc19 	bl	8003aac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2246      	movs	r2, #70	; 0x46
 800327e:	2101      	movs	r1, #1
 8003280:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	223e      	movs	r2, #62	; 0x3e
 8003286:	2101      	movs	r1, #1
 8003288:	5499      	strb	r1, [r3, r2]
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	223f      	movs	r2, #63	; 0x3f
 800328e:	2101      	movs	r1, #1
 8003290:	5499      	strb	r1, [r3, r2]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2240      	movs	r2, #64	; 0x40
 8003296:	2101      	movs	r1, #1
 8003298:	5499      	strb	r1, [r3, r2]
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2241      	movs	r2, #65	; 0x41
 800329e:	2101      	movs	r1, #1
 80032a0:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	2242      	movs	r2, #66	; 0x42
 80032a6:	2101      	movs	r1, #1
 80032a8:	5499      	strb	r1, [r3, r2]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2243      	movs	r2, #67	; 0x43
 80032ae:	2101      	movs	r1, #1
 80032b0:	5499      	strb	r1, [r3, r2]
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2244      	movs	r2, #68	; 0x44
 80032b6:	2101      	movs	r1, #1
 80032b8:	5499      	strb	r1, [r3, r2]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2245      	movs	r2, #69	; 0x45
 80032be:	2101      	movs	r1, #1
 80032c0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	223d      	movs	r2, #61	; 0x3d
 80032c6:	2101      	movs	r1, #1
 80032c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80032ca:	2300      	movs	r3, #0
}
 80032cc:	0018      	movs	r0, r3
 80032ce:	46bd      	mov	sp, r7
 80032d0:	b002      	add	sp, #8
 80032d2:	bd80      	pop	{r7, pc}

080032d4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80032dc:	46c0      	nop			; (mov r8, r8)
 80032de:	46bd      	mov	sp, r7
 80032e0:	b002      	add	sp, #8
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
 80032ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80032ee:	230f      	movs	r3, #15
 80032f0:	18fb      	adds	r3, r7, r3
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d104      	bne.n	8003306 <HAL_TIM_IC_Start_IT+0x22>
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	223e      	movs	r2, #62	; 0x3e
 8003300:	5c9b      	ldrb	r3, [r3, r2]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	e013      	b.n	800332e <HAL_TIM_IC_Start_IT+0x4a>
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	2b04      	cmp	r3, #4
 800330a:	d104      	bne.n	8003316 <HAL_TIM_IC_Start_IT+0x32>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	223f      	movs	r2, #63	; 0x3f
 8003310:	5c9b      	ldrb	r3, [r3, r2]
 8003312:	b2db      	uxtb	r3, r3
 8003314:	e00b      	b.n	800332e <HAL_TIM_IC_Start_IT+0x4a>
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	2b08      	cmp	r3, #8
 800331a:	d104      	bne.n	8003326 <HAL_TIM_IC_Start_IT+0x42>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2240      	movs	r2, #64	; 0x40
 8003320:	5c9b      	ldrb	r3, [r3, r2]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	e003      	b.n	800332e <HAL_TIM_IC_Start_IT+0x4a>
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	2241      	movs	r2, #65	; 0x41
 800332a:	5c9b      	ldrb	r3, [r3, r2]
 800332c:	b2db      	uxtb	r3, r3
 800332e:	220e      	movs	r2, #14
 8003330:	18ba      	adds	r2, r7, r2
 8003332:	7013      	strb	r3, [r2, #0]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d104      	bne.n	8003344 <HAL_TIM_IC_Start_IT+0x60>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	2242      	movs	r2, #66	; 0x42
 800333e:	5c9b      	ldrb	r3, [r3, r2]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	e013      	b.n	800336c <HAL_TIM_IC_Start_IT+0x88>
 8003344:	683b      	ldr	r3, [r7, #0]
 8003346:	2b04      	cmp	r3, #4
 8003348:	d104      	bne.n	8003354 <HAL_TIM_IC_Start_IT+0x70>
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2243      	movs	r2, #67	; 0x43
 800334e:	5c9b      	ldrb	r3, [r3, r2]
 8003350:	b2db      	uxtb	r3, r3
 8003352:	e00b      	b.n	800336c <HAL_TIM_IC_Start_IT+0x88>
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d104      	bne.n	8003364 <HAL_TIM_IC_Start_IT+0x80>
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2244      	movs	r2, #68	; 0x44
 800335e:	5c9b      	ldrb	r3, [r3, r2]
 8003360:	b2db      	uxtb	r3, r3
 8003362:	e003      	b.n	800336c <HAL_TIM_IC_Start_IT+0x88>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2245      	movs	r2, #69	; 0x45
 8003368:	5c9b      	ldrb	r3, [r3, r2]
 800336a:	b2db      	uxtb	r3, r3
 800336c:	210d      	movs	r1, #13
 800336e:	187a      	adds	r2, r7, r1
 8003370:	7013      	strb	r3, [r2, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8003372:	230e      	movs	r3, #14
 8003374:	18fb      	adds	r3, r7, r3
 8003376:	781b      	ldrb	r3, [r3, #0]
 8003378:	2b01      	cmp	r3, #1
 800337a:	d103      	bne.n	8003384 <HAL_TIM_IC_Start_IT+0xa0>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 800337c:	187b      	adds	r3, r7, r1
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d001      	beq.n	8003388 <HAL_TIM_IC_Start_IT+0xa4>
  {
    return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0a6      	b.n	80034d6 <HAL_TIM_IC_Start_IT+0x1f2>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d104      	bne.n	8003398 <HAL_TIM_IC_Start_IT+0xb4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	223e      	movs	r2, #62	; 0x3e
 8003392:	2102      	movs	r1, #2
 8003394:	5499      	strb	r1, [r3, r2]
 8003396:	e013      	b.n	80033c0 <HAL_TIM_IC_Start_IT+0xdc>
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	2b04      	cmp	r3, #4
 800339c:	d104      	bne.n	80033a8 <HAL_TIM_IC_Start_IT+0xc4>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	223f      	movs	r2, #63	; 0x3f
 80033a2:	2102      	movs	r1, #2
 80033a4:	5499      	strb	r1, [r3, r2]
 80033a6:	e00b      	b.n	80033c0 <HAL_TIM_IC_Start_IT+0xdc>
 80033a8:	683b      	ldr	r3, [r7, #0]
 80033aa:	2b08      	cmp	r3, #8
 80033ac:	d104      	bne.n	80033b8 <HAL_TIM_IC_Start_IT+0xd4>
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	2240      	movs	r2, #64	; 0x40
 80033b2:	2102      	movs	r1, #2
 80033b4:	5499      	strb	r1, [r3, r2]
 80033b6:	e003      	b.n	80033c0 <HAL_TIM_IC_Start_IT+0xdc>
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2241      	movs	r2, #65	; 0x41
 80033bc:	2102      	movs	r1, #2
 80033be:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d104      	bne.n	80033d0 <HAL_TIM_IC_Start_IT+0xec>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2242      	movs	r2, #66	; 0x42
 80033ca:	2102      	movs	r1, #2
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	e013      	b.n	80033f8 <HAL_TIM_IC_Start_IT+0x114>
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	2b04      	cmp	r3, #4
 80033d4:	d104      	bne.n	80033e0 <HAL_TIM_IC_Start_IT+0xfc>
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2243      	movs	r2, #67	; 0x43
 80033da:	2102      	movs	r1, #2
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	e00b      	b.n	80033f8 <HAL_TIM_IC_Start_IT+0x114>
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	2b08      	cmp	r3, #8
 80033e4:	d104      	bne.n	80033f0 <HAL_TIM_IC_Start_IT+0x10c>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2244      	movs	r2, #68	; 0x44
 80033ea:	2102      	movs	r1, #2
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	e003      	b.n	80033f8 <HAL_TIM_IC_Start_IT+0x114>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2245      	movs	r2, #69	; 0x45
 80033f4:	2102      	movs	r1, #2
 80033f6:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	2b0c      	cmp	r3, #12
 80033fc:	d02a      	beq.n	8003454 <HAL_TIM_IC_Start_IT+0x170>
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	2b0c      	cmp	r3, #12
 8003402:	d830      	bhi.n	8003466 <HAL_TIM_IC_Start_IT+0x182>
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	2b08      	cmp	r3, #8
 8003408:	d01b      	beq.n	8003442 <HAL_TIM_IC_Start_IT+0x15e>
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	2b08      	cmp	r3, #8
 800340e:	d82a      	bhi.n	8003466 <HAL_TIM_IC_Start_IT+0x182>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d003      	beq.n	800341e <HAL_TIM_IC_Start_IT+0x13a>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	2b04      	cmp	r3, #4
 800341a:	d009      	beq.n	8003430 <HAL_TIM_IC_Start_IT+0x14c>
 800341c:	e023      	b.n	8003466 <HAL_TIM_IC_Start_IT+0x182>
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	68da      	ldr	r2, [r3, #12]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	2102      	movs	r1, #2
 800342a:	430a      	orrs	r2, r1
 800342c:	60da      	str	r2, [r3, #12]
      break;
 800342e:	e01f      	b.n	8003470 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2104      	movs	r1, #4
 800343c:	430a      	orrs	r2, r1
 800343e:	60da      	str	r2, [r3, #12]
      break;
 8003440:	e016      	b.n	8003470 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68da      	ldr	r2, [r3, #12]
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2108      	movs	r1, #8
 800344e:	430a      	orrs	r2, r1
 8003450:	60da      	str	r2, [r3, #12]
      break;
 8003452:	e00d      	b.n	8003470 <HAL_TIM_IC_Start_IT+0x18c>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	2110      	movs	r1, #16
 8003460:	430a      	orrs	r2, r1
 8003462:	60da      	str	r2, [r3, #12]
      break;
 8003464:	e004      	b.n	8003470 <HAL_TIM_IC_Start_IT+0x18c>
    }

    default:
      status = HAL_ERROR;
 8003466:	230f      	movs	r3, #15
 8003468:	18fb      	adds	r3, r7, r3
 800346a:	2201      	movs	r2, #1
 800346c:	701a      	strb	r2, [r3, #0]
      break;
 800346e:	46c0      	nop			; (mov r8, r8)
  }

  if (status == HAL_OK)
 8003470:	230f      	movs	r3, #15
 8003472:	18fb      	adds	r3, r7, r3
 8003474:	781b      	ldrb	r3, [r3, #0]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d12a      	bne.n	80034d0 <HAL_TIM_IC_Start_IT+0x1ec>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	6839      	ldr	r1, [r7, #0]
 8003480:	2201      	movs	r2, #1
 8003482:	0018      	movs	r0, r3
 8003484:	f000 fd32 	bl	8003eec <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	4a14      	ldr	r2, [pc, #80]	; (80034e0 <HAL_TIM_IC_Start_IT+0x1fc>)
 800348e:	4293      	cmp	r3, r2
 8003490:	d004      	beq.n	800349c <HAL_TIM_IC_Start_IT+0x1b8>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	4a13      	ldr	r2, [pc, #76]	; (80034e4 <HAL_TIM_IC_Start_IT+0x200>)
 8003498:	4293      	cmp	r3, r2
 800349a:	d111      	bne.n	80034c0 <HAL_TIM_IC_Start_IT+0x1dc>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2207      	movs	r2, #7
 80034a4:	4013      	ands	r3, r2
 80034a6:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034a8:	68bb      	ldr	r3, [r7, #8]
 80034aa:	2b06      	cmp	r3, #6
 80034ac:	d010      	beq.n	80034d0 <HAL_TIM_IC_Start_IT+0x1ec>
      {
        __HAL_TIM_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	681a      	ldr	r2, [r3, #0]
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	2101      	movs	r1, #1
 80034ba:	430a      	orrs	r2, r1
 80034bc:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80034be:	e007      	b.n	80034d0 <HAL_TIM_IC_Start_IT+0x1ec>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	681a      	ldr	r2, [r3, #0]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2101      	movs	r1, #1
 80034cc:	430a      	orrs	r2, r1
 80034ce:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80034d0:	230f      	movs	r3, #15
 80034d2:	18fb      	adds	r3, r7, r3
 80034d4:	781b      	ldrb	r3, [r3, #0]
}
 80034d6:	0018      	movs	r0, r3
 80034d8:	46bd      	mov	sp, r7
 80034da:	b004      	add	sp, #16
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	46c0      	nop			; (mov r8, r8)
 80034e0:	40012c00 	.word	0x40012c00
 80034e4:	40000400 	.word	0x40000400

080034e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	691b      	ldr	r3, [r3, #16]
 80034f6:	2202      	movs	r2, #2
 80034f8:	4013      	ands	r3, r2
 80034fa:	2b02      	cmp	r3, #2
 80034fc:	d124      	bne.n	8003548 <HAL_TIM_IRQHandler+0x60>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	68db      	ldr	r3, [r3, #12]
 8003504:	2202      	movs	r2, #2
 8003506:	4013      	ands	r3, r2
 8003508:	2b02      	cmp	r3, #2
 800350a:	d11d      	bne.n	8003548 <HAL_TIM_IRQHandler+0x60>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	2203      	movs	r2, #3
 8003512:	4252      	negs	r2, r2
 8003514:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699b      	ldr	r3, [r3, #24]
 8003522:	2203      	movs	r2, #3
 8003524:	4013      	ands	r3, r2
 8003526:	d004      	beq.n	8003532 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	0018      	movs	r0, r3
 800352c:	f7fd fc80 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 8003530:	e007      	b.n	8003542 <HAL_TIM_IRQHandler+0x5a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	0018      	movs	r0, r3
 8003536:	f000 faa1 	bl	8003a7c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	0018      	movs	r0, r3
 800353e:	f000 faa5 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2200      	movs	r2, #0
 8003546:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	2204      	movs	r2, #4
 8003550:	4013      	ands	r3, r2
 8003552:	2b04      	cmp	r3, #4
 8003554:	d125      	bne.n	80035a2 <HAL_TIM_IRQHandler+0xba>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	68db      	ldr	r3, [r3, #12]
 800355c:	2204      	movs	r2, #4
 800355e:	4013      	ands	r3, r2
 8003560:	2b04      	cmp	r3, #4
 8003562:	d11e      	bne.n	80035a2 <HAL_TIM_IRQHandler+0xba>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	2205      	movs	r2, #5
 800356a:	4252      	negs	r2, r2
 800356c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2202      	movs	r2, #2
 8003572:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	699a      	ldr	r2, [r3, #24]
 800357a:	23c0      	movs	r3, #192	; 0xc0
 800357c:	009b      	lsls	r3, r3, #2
 800357e:	4013      	ands	r3, r2
 8003580:	d004      	beq.n	800358c <HAL_TIM_IRQHandler+0xa4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	0018      	movs	r0, r3
 8003586:	f7fd fc53 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 800358a:	e007      	b.n	800359c <HAL_TIM_IRQHandler+0xb4>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	0018      	movs	r0, r3
 8003590:	f000 fa74 	bl	8003a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	0018      	movs	r0, r3
 8003598:	f000 fa78 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	2200      	movs	r2, #0
 80035a0:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	2208      	movs	r2, #8
 80035aa:	4013      	ands	r3, r2
 80035ac:	2b08      	cmp	r3, #8
 80035ae:	d124      	bne.n	80035fa <HAL_TIM_IRQHandler+0x112>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68db      	ldr	r3, [r3, #12]
 80035b6:	2208      	movs	r2, #8
 80035b8:	4013      	ands	r3, r2
 80035ba:	2b08      	cmp	r3, #8
 80035bc:	d11d      	bne.n	80035fa <HAL_TIM_IRQHandler+0x112>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	2209      	movs	r2, #9
 80035c4:	4252      	negs	r2, r2
 80035c6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2204      	movs	r2, #4
 80035cc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	69db      	ldr	r3, [r3, #28]
 80035d4:	2203      	movs	r2, #3
 80035d6:	4013      	ands	r3, r2
 80035d8:	d004      	beq.n	80035e4 <HAL_TIM_IRQHandler+0xfc>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fd fc27 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 80035e2:	e007      	b.n	80035f4 <HAL_TIM_IRQHandler+0x10c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	0018      	movs	r0, r3
 80035e8:	f000 fa48 	bl	8003a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	0018      	movs	r0, r3
 80035f0:	f000 fa4c 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2200      	movs	r2, #0
 80035f8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	2210      	movs	r2, #16
 8003602:	4013      	ands	r3, r2
 8003604:	2b10      	cmp	r3, #16
 8003606:	d125      	bne.n	8003654 <HAL_TIM_IRQHandler+0x16c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	2210      	movs	r2, #16
 8003610:	4013      	ands	r3, r2
 8003612:	2b10      	cmp	r3, #16
 8003614:	d11e      	bne.n	8003654 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	2211      	movs	r2, #17
 800361c:	4252      	negs	r2, r2
 800361e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	2208      	movs	r2, #8
 8003624:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	69da      	ldr	r2, [r3, #28]
 800362c:	23c0      	movs	r3, #192	; 0xc0
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	4013      	ands	r3, r2
 8003632:	d004      	beq.n	800363e <HAL_TIM_IRQHandler+0x156>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	0018      	movs	r0, r3
 8003638:	f7fd fbfa 	bl	8000e30 <HAL_TIM_IC_CaptureCallback>
 800363c:	e007      	b.n	800364e <HAL_TIM_IRQHandler+0x166>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	0018      	movs	r0, r3
 8003642:	f000 fa1b 	bl	8003a7c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	0018      	movs	r0, r3
 800364a:	f000 fa1f 	bl	8003a8c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	2200      	movs	r2, #0
 8003652:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	2201      	movs	r2, #1
 800365c:	4013      	ands	r3, r2
 800365e:	2b01      	cmp	r3, #1
 8003660:	d10f      	bne.n	8003682 <HAL_TIM_IRQHandler+0x19a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2201      	movs	r2, #1
 800366a:	4013      	ands	r3, r2
 800366c:	2b01      	cmp	r3, #1
 800366e:	d108      	bne.n	8003682 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2202      	movs	r2, #2
 8003676:	4252      	negs	r2, r2
 8003678:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	0018      	movs	r0, r3
 800367e:	f000 f9f5 	bl	8003a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	691b      	ldr	r3, [r3, #16]
 8003688:	2280      	movs	r2, #128	; 0x80
 800368a:	4013      	ands	r3, r2
 800368c:	2b80      	cmp	r3, #128	; 0x80
 800368e:	d10f      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1c8>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	68db      	ldr	r3, [r3, #12]
 8003696:	2280      	movs	r2, #128	; 0x80
 8003698:	4013      	ands	r3, r2
 800369a:	2b80      	cmp	r3, #128	; 0x80
 800369c:	d108      	bne.n	80036b0 <HAL_TIM_IRQHandler+0x1c8>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2281      	movs	r2, #129	; 0x81
 80036a4:	4252      	negs	r2, r2
 80036a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	0018      	movs	r0, r3
 80036ac:	f000 fc9c 	bl	8003fe8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	2240      	movs	r2, #64	; 0x40
 80036b8:	4013      	ands	r3, r2
 80036ba:	2b40      	cmp	r3, #64	; 0x40
 80036bc:	d10f      	bne.n	80036de <HAL_TIM_IRQHandler+0x1f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	68db      	ldr	r3, [r3, #12]
 80036c4:	2240      	movs	r2, #64	; 0x40
 80036c6:	4013      	ands	r3, r2
 80036c8:	2b40      	cmp	r3, #64	; 0x40
 80036ca:	d108      	bne.n	80036de <HAL_TIM_IRQHandler+0x1f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	2241      	movs	r2, #65	; 0x41
 80036d2:	4252      	negs	r2, r2
 80036d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	0018      	movs	r0, r3
 80036da:	f000 f9df 	bl	8003a9c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	691b      	ldr	r3, [r3, #16]
 80036e4:	2220      	movs	r2, #32
 80036e6:	4013      	ands	r3, r2
 80036e8:	2b20      	cmp	r3, #32
 80036ea:	d10f      	bne.n	800370c <HAL_TIM_IRQHandler+0x224>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
 80036f2:	2220      	movs	r2, #32
 80036f4:	4013      	ands	r3, r2
 80036f6:	2b20      	cmp	r3, #32
 80036f8:	d108      	bne.n	800370c <HAL_TIM_IRQHandler+0x224>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2221      	movs	r2, #33	; 0x21
 8003700:	4252      	negs	r2, r2
 8003702:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	0018      	movs	r0, r3
 8003708:	f000 fc66 	bl	8003fd8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800370c:	46c0      	nop			; (mov r8, r8)
 800370e:	46bd      	mov	sp, r7
 8003710:	b002      	add	sp, #8
 8003712:	bd80      	pop	{r7, pc}

08003714 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	60f8      	str	r0, [r7, #12]
 800371c:	60b9      	str	r1, [r7, #8]
 800371e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003720:	2317      	movs	r3, #23
 8003722:	18fb      	adds	r3, r7, r3
 8003724:	2200      	movs	r2, #0
 8003726:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	223c      	movs	r2, #60	; 0x3c
 800372c:	5c9b      	ldrb	r3, [r3, r2]
 800372e:	2b01      	cmp	r3, #1
 8003730:	d101      	bne.n	8003736 <HAL_TIM_IC_ConfigChannel+0x22>
 8003732:	2302      	movs	r3, #2
 8003734:	e08c      	b.n	8003850 <HAL_TIM_IC_ConfigChannel+0x13c>
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	223c      	movs	r2, #60	; 0x3c
 800373a:	2101      	movs	r1, #1
 800373c:	5499      	strb	r1, [r3, r2]

  if (Channel == TIM_CHANNEL_1)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d11b      	bne.n	800377c <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003748:	68bb      	ldr	r3, [r7, #8]
 800374a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003750:	68bb      	ldr	r3, [r7, #8]
 8003752:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003754:	f000 fa16 	bl	8003b84 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	699a      	ldr	r2, [r3, #24]
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	210c      	movs	r1, #12
 8003764:	438a      	bics	r2, r1
 8003766:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6999      	ldr	r1, [r3, #24]
 800376e:	68bb      	ldr	r3, [r7, #8]
 8003770:	689a      	ldr	r2, [r3, #8]
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	430a      	orrs	r2, r1
 8003778:	619a      	str	r2, [r3, #24]
 800377a:	e062      	b.n	8003842 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b04      	cmp	r3, #4
 8003780:	d11c      	bne.n	80037bc <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003786:	68bb      	ldr	r3, [r7, #8]
 8003788:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800378a:	68bb      	ldr	r3, [r7, #8]
 800378c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003792:	f000 fa77 	bl	8003c84 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	699a      	ldr	r2, [r3, #24]
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	492d      	ldr	r1, [pc, #180]	; (8003858 <HAL_TIM_IC_ConfigChannel+0x144>)
 80037a2:	400a      	ands	r2, r1
 80037a4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	6999      	ldr	r1, [r3, #24]
 80037ac:	68bb      	ldr	r3, [r7, #8]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	021a      	lsls	r2, r3, #8
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	619a      	str	r2, [r3, #24]
 80037ba:	e042      	b.n	8003842 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b08      	cmp	r3, #8
 80037c0:	d11b      	bne.n	80037fa <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80037ca:	68bb      	ldr	r3, [r7, #8]
 80037cc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80037ce:	68bb      	ldr	r3, [r7, #8]
 80037d0:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80037d2:	f000 facb 	bl	8003d6c <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69da      	ldr	r2, [r3, #28]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	210c      	movs	r1, #12
 80037e2:	438a      	bics	r2, r1
 80037e4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	69d9      	ldr	r1, [r3, #28]
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	430a      	orrs	r2, r1
 80037f6:	61da      	str	r2, [r3, #28]
 80037f8:	e023      	b.n	8003842 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else if (Channel == TIM_CHANNEL_4)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b0c      	cmp	r3, #12
 80037fe:	d11c      	bne.n	800383a <HAL_TIM_IC_ConfigChannel+0x126>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003804:	68bb      	ldr	r3, [r7, #8]
 8003806:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 800380c:	68bb      	ldr	r3, [r7, #8]
 800380e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003810:	f000 faec 	bl	8003dec <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69da      	ldr	r2, [r3, #28]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	490e      	ldr	r1, [pc, #56]	; (8003858 <HAL_TIM_IC_ConfigChannel+0x144>)
 8003820:	400a      	ands	r2, r1
 8003822:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	69d9      	ldr	r1, [r3, #28]
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	021a      	lsls	r2, r3, #8
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	430a      	orrs	r2, r1
 8003836:	61da      	str	r2, [r3, #28]
 8003838:	e003      	b.n	8003842 <HAL_TIM_IC_ConfigChannel+0x12e>
  }
  else
  {
    status = HAL_ERROR;
 800383a:	2317      	movs	r3, #23
 800383c:	18fb      	adds	r3, r7, r3
 800383e:	2201      	movs	r2, #1
 8003840:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(htim);
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	223c      	movs	r2, #60	; 0x3c
 8003846:	2100      	movs	r1, #0
 8003848:	5499      	strb	r1, [r3, r2]

  return status;
 800384a:	2317      	movs	r3, #23
 800384c:	18fb      	adds	r3, r7, r3
 800384e:	781b      	ldrb	r3, [r3, #0]
}
 8003850:	0018      	movs	r0, r3
 8003852:	46bd      	mov	sp, r7
 8003854:	b006      	add	sp, #24
 8003856:	bd80      	pop	{r7, pc}
 8003858:	fffff3ff 	.word	0xfffff3ff

0800385c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b084      	sub	sp, #16
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003866:	230f      	movs	r3, #15
 8003868:	18fb      	adds	r3, r7, r3
 800386a:	2200      	movs	r2, #0
 800386c:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	223c      	movs	r2, #60	; 0x3c
 8003872:	5c9b      	ldrb	r3, [r3, r2]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d101      	bne.n	800387c <HAL_TIM_ConfigClockSource+0x20>
 8003878:	2302      	movs	r3, #2
 800387a:	e0bc      	b.n	80039f6 <HAL_TIM_ConfigClockSource+0x19a>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	223c      	movs	r2, #60	; 0x3c
 8003880:	2101      	movs	r1, #1
 8003882:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	223d      	movs	r2, #61	; 0x3d
 8003888:	2102      	movs	r1, #2
 800388a:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	2277      	movs	r2, #119	; 0x77
 8003898:	4393      	bics	r3, r2
 800389a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4a58      	ldr	r2, [pc, #352]	; (8003a00 <HAL_TIM_ConfigClockSource+0x1a4>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68ba      	ldr	r2, [r7, #8]
 80038aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2280      	movs	r2, #128	; 0x80
 80038b2:	0192      	lsls	r2, r2, #6
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d040      	beq.n	800393a <HAL_TIM_ConfigClockSource+0xde>
 80038b8:	2280      	movs	r2, #128	; 0x80
 80038ba:	0192      	lsls	r2, r2, #6
 80038bc:	4293      	cmp	r3, r2
 80038be:	d900      	bls.n	80038c2 <HAL_TIM_ConfigClockSource+0x66>
 80038c0:	e088      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038c2:	2280      	movs	r2, #128	; 0x80
 80038c4:	0152      	lsls	r2, r2, #5
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d100      	bne.n	80038cc <HAL_TIM_ConfigClockSource+0x70>
 80038ca:	e088      	b.n	80039de <HAL_TIM_ConfigClockSource+0x182>
 80038cc:	2280      	movs	r2, #128	; 0x80
 80038ce:	0152      	lsls	r2, r2, #5
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d900      	bls.n	80038d6 <HAL_TIM_ConfigClockSource+0x7a>
 80038d4:	e07e      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038d6:	2b70      	cmp	r3, #112	; 0x70
 80038d8:	d018      	beq.n	800390c <HAL_TIM_ConfigClockSource+0xb0>
 80038da:	d900      	bls.n	80038de <HAL_TIM_ConfigClockSource+0x82>
 80038dc:	e07a      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038de:	2b60      	cmp	r3, #96	; 0x60
 80038e0:	d04f      	beq.n	8003982 <HAL_TIM_ConfigClockSource+0x126>
 80038e2:	d900      	bls.n	80038e6 <HAL_TIM_ConfigClockSource+0x8a>
 80038e4:	e076      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038e6:	2b50      	cmp	r3, #80	; 0x50
 80038e8:	d03b      	beq.n	8003962 <HAL_TIM_ConfigClockSource+0x106>
 80038ea:	d900      	bls.n	80038ee <HAL_TIM_ConfigClockSource+0x92>
 80038ec:	e072      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038ee:	2b40      	cmp	r3, #64	; 0x40
 80038f0:	d057      	beq.n	80039a2 <HAL_TIM_ConfigClockSource+0x146>
 80038f2:	d900      	bls.n	80038f6 <HAL_TIM_ConfigClockSource+0x9a>
 80038f4:	e06e      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038f6:	2b30      	cmp	r3, #48	; 0x30
 80038f8:	d063      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x166>
 80038fa:	d86b      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 80038fc:	2b20      	cmp	r3, #32
 80038fe:	d060      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x166>
 8003900:	d868      	bhi.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
 8003902:	2b00      	cmp	r3, #0
 8003904:	d05d      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x166>
 8003906:	2b10      	cmp	r3, #16
 8003908:	d05b      	beq.n	80039c2 <HAL_TIM_ConfigClockSource+0x166>
 800390a:	e063      	b.n	80039d4 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003910:	683b      	ldr	r3, [r7, #0]
 8003912:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003918:	683b      	ldr	r3, [r7, #0]
 800391a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800391c:	f000 fac6 	bl	8003eac <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	689b      	ldr	r3, [r3, #8]
 8003926:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	2277      	movs	r2, #119	; 0x77
 800392c:	4313      	orrs	r3, r2
 800392e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	68ba      	ldr	r2, [r7, #8]
 8003936:	609a      	str	r2, [r3, #8]
      break;
 8003938:	e052      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800393e:	683b      	ldr	r3, [r7, #0]
 8003940:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800394a:	f000 faaf 	bl	8003eac <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689a      	ldr	r2, [r3, #8]
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	2180      	movs	r1, #128	; 0x80
 800395a:	01c9      	lsls	r1, r1, #7
 800395c:	430a      	orrs	r2, r1
 800395e:	609a      	str	r2, [r3, #8]
      break;
 8003960:	e03e      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800396e:	001a      	movs	r2, r3
 8003970:	f000 f95a 	bl	8003c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	2150      	movs	r1, #80	; 0x50
 800397a:	0018      	movs	r0, r3
 800397c:	f000 fa7c 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 8003980:	e02e      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003986:	683b      	ldr	r3, [r7, #0]
 8003988:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800398e:	001a      	movs	r2, r3
 8003990:	f000 f9ba 	bl	8003d08 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	2160      	movs	r1, #96	; 0x60
 800399a:	0018      	movs	r0, r3
 800399c:	f000 fa6c 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 80039a0:	e01e      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ae:	001a      	movs	r2, r3
 80039b0:	f000 f93a 	bl	8003c28 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	2140      	movs	r1, #64	; 0x40
 80039ba:	0018      	movs	r0, r3
 80039bc:	f000 fa5c 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 80039c0:	e00e      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681a      	ldr	r2, [r3, #0]
 80039c6:	683b      	ldr	r3, [r7, #0]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	0019      	movs	r1, r3
 80039cc:	0010      	movs	r0, r2
 80039ce:	f000 fa53 	bl	8003e78 <TIM_ITRx_SetConfig>
      break;
 80039d2:	e005      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80039d4:	230f      	movs	r3, #15
 80039d6:	18fb      	adds	r3, r7, r3
 80039d8:	2201      	movs	r2, #1
 80039da:	701a      	strb	r2, [r3, #0]
      break;
 80039dc:	e000      	b.n	80039e0 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80039de:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	223d      	movs	r2, #61	; 0x3d
 80039e4:	2101      	movs	r1, #1
 80039e6:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	223c      	movs	r2, #60	; 0x3c
 80039ec:	2100      	movs	r1, #0
 80039ee:	5499      	strb	r1, [r3, r2]

  return status;
 80039f0:	230f      	movs	r3, #15
 80039f2:	18fb      	adds	r3, r7, r3
 80039f4:	781b      	ldrb	r3, [r3, #0]
}
 80039f6:	0018      	movs	r0, r3
 80039f8:	46bd      	mov	sp, r7
 80039fa:	b004      	add	sp, #16
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	46c0      	nop			; (mov r8, r8)
 8003a00:	ffff00ff 	.word	0xffff00ff

08003a04 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
 8003a0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	2b0c      	cmp	r3, #12
 8003a16:	d01e      	beq.n	8003a56 <HAL_TIM_ReadCapturedValue+0x52>
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	2b0c      	cmp	r3, #12
 8003a1c:	d820      	bhi.n	8003a60 <HAL_TIM_ReadCapturedValue+0x5c>
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	2b08      	cmp	r3, #8
 8003a22:	d013      	beq.n	8003a4c <HAL_TIM_ReadCapturedValue+0x48>
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	2b08      	cmp	r3, #8
 8003a28:	d81a      	bhi.n	8003a60 <HAL_TIM_ReadCapturedValue+0x5c>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d003      	beq.n	8003a38 <HAL_TIM_ReadCapturedValue+0x34>
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	2b04      	cmp	r3, #4
 8003a34:	d005      	beq.n	8003a42 <HAL_TIM_ReadCapturedValue+0x3e>

      break;
    }

    default:
      break;
 8003a36:	e013      	b.n	8003a60 <HAL_TIM_ReadCapturedValue+0x5c>
      tmpreg =  htim->Instance->CCR1;
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a3e:	60fb      	str	r3, [r7, #12]
      break;
 8003a40:	e00f      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR2;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a48:	60fb      	str	r3, [r7, #12]
      break;
 8003a4a:	e00a      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR3;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003a52:	60fb      	str	r3, [r7, #12]
      break;
 8003a54:	e005      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x5e>
      tmpreg =   htim->Instance->CCR4;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a5c:	60fb      	str	r3, [r7, #12]
      break;
 8003a5e:	e000      	b.n	8003a62 <HAL_TIM_ReadCapturedValue+0x5e>
      break;
 8003a60:	46c0      	nop			; (mov r8, r8)
  }

  return tmpreg;
 8003a62:	68fb      	ldr	r3, [r7, #12]
}
 8003a64:	0018      	movs	r0, r3
 8003a66:	46bd      	mov	sp, r7
 8003a68:	b004      	add	sp, #16
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b082      	sub	sp, #8
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003a74:	46c0      	nop			; (mov r8, r8)
 8003a76:	46bd      	mov	sp, r7
 8003a78:	b002      	add	sp, #8
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b082      	sub	sp, #8
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003a84:	46c0      	nop			; (mov r8, r8)
 8003a86:	46bd      	mov	sp, r7
 8003a88:	b002      	add	sp, #8
 8003a8a:	bd80      	pop	{r7, pc}

08003a8c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a94:	46c0      	nop			; (mov r8, r8)
 8003a96:	46bd      	mov	sp, r7
 8003a98:	b002      	add	sp, #8
 8003a9a:	bd80      	pop	{r7, pc}

08003a9c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b082      	sub	sp, #8
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003aa4:	46c0      	nop			; (mov r8, r8)
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	b002      	add	sp, #8
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a2b      	ldr	r2, [pc, #172]	; (8003b6c <TIM_Base_SetConfig+0xc0>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d003      	beq.n	8003acc <TIM_Base_SetConfig+0x20>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a2a      	ldr	r2, [pc, #168]	; (8003b70 <TIM_Base_SetConfig+0xc4>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d108      	bne.n	8003ade <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	2270      	movs	r2, #112	; 0x70
 8003ad0:	4393      	bics	r3, r2
 8003ad2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	685b      	ldr	r3, [r3, #4]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	4a22      	ldr	r2, [pc, #136]	; (8003b6c <TIM_Base_SetConfig+0xc0>)
 8003ae2:	4293      	cmp	r3, r2
 8003ae4:	d00f      	beq.n	8003b06 <TIM_Base_SetConfig+0x5a>
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a21      	ldr	r2, [pc, #132]	; (8003b70 <TIM_Base_SetConfig+0xc4>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d00b      	beq.n	8003b06 <TIM_Base_SetConfig+0x5a>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <TIM_Base_SetConfig+0xc8>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d007      	beq.n	8003b06 <TIM_Base_SetConfig+0x5a>
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	4a1f      	ldr	r2, [pc, #124]	; (8003b78 <TIM_Base_SetConfig+0xcc>)
 8003afa:	4293      	cmp	r3, r2
 8003afc:	d003      	beq.n	8003b06 <TIM_Base_SetConfig+0x5a>
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	4a1e      	ldr	r2, [pc, #120]	; (8003b7c <TIM_Base_SetConfig+0xd0>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d108      	bne.n	8003b18 <TIM_Base_SetConfig+0x6c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	4a1d      	ldr	r2, [pc, #116]	; (8003b80 <TIM_Base_SetConfig+0xd4>)
 8003b0a:	4013      	ands	r3, r2
 8003b0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003b0e:	683b      	ldr	r3, [r7, #0]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	68fa      	ldr	r2, [r7, #12]
 8003b14:	4313      	orrs	r3, r2
 8003b16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2280      	movs	r2, #128	; 0x80
 8003b1c:	4393      	bics	r3, r2
 8003b1e:	001a      	movs	r2, r3
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	695b      	ldr	r3, [r3, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	68fa      	ldr	r2, [r7, #12]
 8003b2c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	689a      	ldr	r2, [r3, #8]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	4a0a      	ldr	r2, [pc, #40]	; (8003b6c <TIM_Base_SetConfig+0xc0>)
 8003b42:	4293      	cmp	r3, r2
 8003b44:	d007      	beq.n	8003b56 <TIM_Base_SetConfig+0xaa>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	4a0b      	ldr	r2, [pc, #44]	; (8003b78 <TIM_Base_SetConfig+0xcc>)
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d003      	beq.n	8003b56 <TIM_Base_SetConfig+0xaa>
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	4a0a      	ldr	r2, [pc, #40]	; (8003b7c <TIM_Base_SetConfig+0xd0>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d103      	bne.n	8003b5e <TIM_Base_SetConfig+0xb2>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	691a      	ldr	r2, [r3, #16]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2201      	movs	r2, #1
 8003b62:	615a      	str	r2, [r3, #20]
}
 8003b64:	46c0      	nop			; (mov r8, r8)
 8003b66:	46bd      	mov	sp, r7
 8003b68:	b004      	add	sp, #16
 8003b6a:	bd80      	pop	{r7, pc}
 8003b6c:	40012c00 	.word	0x40012c00
 8003b70:	40000400 	.word	0x40000400
 8003b74:	40002000 	.word	0x40002000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	fffffcff 	.word	0xfffffcff

08003b84 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
 8003b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	6a1b      	ldr	r3, [r3, #32]
 8003b96:	2201      	movs	r2, #1
 8003b98:	4393      	bics	r3, r2
 8003b9a:	001a      	movs	r2, r3
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	699b      	ldr	r3, [r3, #24]
 8003ba4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a1b      	ldr	r3, [r3, #32]
 8003baa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	4a1c      	ldr	r2, [pc, #112]	; (8003c20 <TIM_TI1_SetConfig+0x9c>)
 8003bb0:	4293      	cmp	r3, r2
 8003bb2:	d003      	beq.n	8003bbc <TIM_TI1_SetConfig+0x38>
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4a1b      	ldr	r2, [pc, #108]	; (8003c24 <TIM_TI1_SetConfig+0xa0>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d101      	bne.n	8003bc0 <TIM_TI1_SetConfig+0x3c>
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e000      	b.n	8003bc2 <TIM_TI1_SetConfig+0x3e>
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d008      	beq.n	8003bd8 <TIM_TI1_SetConfig+0x54>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003bc6:	697b      	ldr	r3, [r7, #20]
 8003bc8:	2203      	movs	r2, #3
 8003bca:	4393      	bics	r3, r2
 8003bcc:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003bce:	697a      	ldr	r2, [r7, #20]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4313      	orrs	r3, r2
 8003bd4:	617b      	str	r3, [r7, #20]
 8003bd6:	e003      	b.n	8003be0 <TIM_TI1_SetConfig+0x5c>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	4313      	orrs	r3, r2
 8003bde:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	22f0      	movs	r2, #240	; 0xf0
 8003be4:	4393      	bics	r3, r2
 8003be6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	011b      	lsls	r3, r3, #4
 8003bec:	22ff      	movs	r2, #255	; 0xff
 8003bee:	4013      	ands	r3, r2
 8003bf0:	697a      	ldr	r2, [r7, #20]
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	220a      	movs	r2, #10
 8003bfa:	4393      	bics	r3, r2
 8003bfc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	220a      	movs	r2, #10
 8003c02:	4013      	ands	r3, r2
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	4313      	orrs	r3, r2
 8003c08:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	697a      	ldr	r2, [r7, #20]
 8003c0e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	621a      	str	r2, [r3, #32]
}
 8003c16:	46c0      	nop			; (mov r8, r8)
 8003c18:	46bd      	mov	sp, r7
 8003c1a:	b006      	add	sp, #24
 8003c1c:	bd80      	pop	{r7, pc}
 8003c1e:	46c0      	nop			; (mov r8, r8)
 8003c20:	40012c00 	.word	0x40012c00
 8003c24:	40000400 	.word	0x40000400

08003c28 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b086      	sub	sp, #24
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	60f8      	str	r0, [r7, #12]
 8003c30:	60b9      	str	r1, [r7, #8]
 8003c32:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	6a1b      	ldr	r3, [r3, #32]
 8003c38:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6a1b      	ldr	r3, [r3, #32]
 8003c3e:	2201      	movs	r2, #1
 8003c40:	4393      	bics	r3, r2
 8003c42:	001a      	movs	r2, r3
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	699b      	ldr	r3, [r3, #24]
 8003c4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	22f0      	movs	r2, #240	; 0xf0
 8003c52:	4393      	bics	r3, r2
 8003c54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	011b      	lsls	r3, r3, #4
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	4313      	orrs	r3, r2
 8003c5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	220a      	movs	r2, #10
 8003c64:	4393      	bics	r3, r2
 8003c66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c68:	697a      	ldr	r2, [r7, #20]
 8003c6a:	68bb      	ldr	r3, [r7, #8]
 8003c6c:	4313      	orrs	r3, r2
 8003c6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	693a      	ldr	r2, [r7, #16]
 8003c74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	697a      	ldr	r2, [r7, #20]
 8003c7a:	621a      	str	r2, [r3, #32]
}
 8003c7c:	46c0      	nop			; (mov r8, r8)
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	b006      	add	sp, #24
 8003c82:	bd80      	pop	{r7, pc}

08003c84 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b086      	sub	sp, #24
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	60f8      	str	r0, [r7, #12]
 8003c8c:	60b9      	str	r1, [r7, #8]
 8003c8e:	607a      	str	r2, [r7, #4]
 8003c90:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	2210      	movs	r2, #16
 8003c98:	4393      	bics	r3, r2
 8003c9a:	001a      	movs	r2, r3
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6a1b      	ldr	r3, [r3, #32]
 8003caa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	4a14      	ldr	r2, [pc, #80]	; (8003d00 <TIM_TI2_SetConfig+0x7c>)
 8003cb0:	4013      	ands	r3, r2
 8003cb2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	021b      	lsls	r3, r3, #8
 8003cb8:	697a      	ldr	r2, [r7, #20]
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	4a10      	ldr	r2, [pc, #64]	; (8003d04 <TIM_TI2_SetConfig+0x80>)
 8003cc2:	4013      	ands	r3, r2
 8003cc4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	031b      	lsls	r3, r3, #12
 8003cca:	041b      	lsls	r3, r3, #16
 8003ccc:	0c1b      	lsrs	r3, r3, #16
 8003cce:	697a      	ldr	r2, [r7, #20]
 8003cd0:	4313      	orrs	r3, r2
 8003cd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003cd4:	693b      	ldr	r3, [r7, #16]
 8003cd6:	22a0      	movs	r2, #160	; 0xa0
 8003cd8:	4393      	bics	r3, r2
 8003cda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	011b      	lsls	r3, r3, #4
 8003ce0:	22a0      	movs	r2, #160	; 0xa0
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	693a      	ldr	r2, [r7, #16]
 8003ce6:	4313      	orrs	r3, r2
 8003ce8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	621a      	str	r2, [r3, #32]
}
 8003cf6:	46c0      	nop			; (mov r8, r8)
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	b006      	add	sp, #24
 8003cfc:	bd80      	pop	{r7, pc}
 8003cfe:	46c0      	nop			; (mov r8, r8)
 8003d00:	fffffcff 	.word	0xfffffcff
 8003d04:	ffff0fff 	.word	0xffff0fff

08003d08 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	60f8      	str	r0, [r7, #12]
 8003d10:	60b9      	str	r1, [r7, #8]
 8003d12:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6a1b      	ldr	r3, [r3, #32]
 8003d18:	2210      	movs	r2, #16
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	001a      	movs	r2, r3
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	699b      	ldr	r3, [r3, #24]
 8003d26:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	6a1b      	ldr	r3, [r3, #32]
 8003d2c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003d2e:	697b      	ldr	r3, [r7, #20]
 8003d30:	4a0d      	ldr	r2, [pc, #52]	; (8003d68 <TIM_TI2_ConfigInputStage+0x60>)
 8003d32:	4013      	ands	r3, r2
 8003d34:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	031b      	lsls	r3, r3, #12
 8003d3a:	697a      	ldr	r2, [r7, #20]
 8003d3c:	4313      	orrs	r3, r2
 8003d3e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	22a0      	movs	r2, #160	; 0xa0
 8003d44:	4393      	bics	r3, r2
 8003d46:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	011b      	lsls	r3, r3, #4
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	697a      	ldr	r2, [r7, #20]
 8003d56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	693a      	ldr	r2, [r7, #16]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b006      	add	sp, #24
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	46c0      	nop			; (mov r8, r8)
 8003d68:	ffff0fff 	.word	0xffff0fff

08003d6c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b086      	sub	sp, #24
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	60f8      	str	r0, [r7, #12]
 8003d74:	60b9      	str	r1, [r7, #8]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6a1b      	ldr	r3, [r3, #32]
 8003d7e:	4a19      	ldr	r2, [pc, #100]	; (8003de4 <TIM_TI3_SetConfig+0x78>)
 8003d80:	401a      	ands	r2, r3
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	69db      	ldr	r3, [r3, #28]
 8003d8a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003d92:	697b      	ldr	r3, [r7, #20]
 8003d94:	2203      	movs	r2, #3
 8003d96:	4393      	bics	r3, r2
 8003d98:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8003d9a:	697a      	ldr	r2, [r7, #20]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	4313      	orrs	r3, r2
 8003da0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	22f0      	movs	r2, #240	; 0xf0
 8003da6:	4393      	bics	r3, r2
 8003da8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	011b      	lsls	r3, r3, #4
 8003dae:	22ff      	movs	r2, #255	; 0xff
 8003db0:	4013      	ands	r3, r2
 8003db2:	697a      	ldr	r2, [r7, #20]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	4a0b      	ldr	r2, [pc, #44]	; (8003de8 <TIM_TI3_SetConfig+0x7c>)
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	021a      	lsls	r2, r3, #8
 8003dc4:	23a0      	movs	r3, #160	; 0xa0
 8003dc6:	011b      	lsls	r3, r3, #4
 8003dc8:	4013      	ands	r3, r2
 8003dca:	693a      	ldr	r2, [r7, #16]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	697a      	ldr	r2, [r7, #20]
 8003dd4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	693a      	ldr	r2, [r7, #16]
 8003dda:	621a      	str	r2, [r3, #32]
}
 8003ddc:	46c0      	nop			; (mov r8, r8)
 8003dde:	46bd      	mov	sp, r7
 8003de0:	b006      	add	sp, #24
 8003de2:	bd80      	pop	{r7, pc}
 8003de4:	fffffeff 	.word	0xfffffeff
 8003de8:	fffff5ff 	.word	0xfffff5ff

08003dec <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003dec:	b580      	push	{r7, lr}
 8003dee:	b086      	sub	sp, #24
 8003df0:	af00      	add	r7, sp, #0
 8003df2:	60f8      	str	r0, [r7, #12]
 8003df4:	60b9      	str	r1, [r7, #8]
 8003df6:	607a      	str	r2, [r7, #4]
 8003df8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6a1b      	ldr	r3, [r3, #32]
 8003dfe:	4a1a      	ldr	r2, [pc, #104]	; (8003e68 <TIM_TI4_SetConfig+0x7c>)
 8003e00:	401a      	ands	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	69db      	ldr	r3, [r3, #28]
 8003e0a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	6a1b      	ldr	r3, [r3, #32]
 8003e10:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4a15      	ldr	r2, [pc, #84]	; (8003e6c <TIM_TI4_SetConfig+0x80>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	021b      	lsls	r3, r3, #8
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	4a12      	ldr	r2, [pc, #72]	; (8003e70 <TIM_TI4_SetConfig+0x84>)
 8003e28:	4013      	ands	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	031b      	lsls	r3, r3, #12
 8003e30:	041b      	lsls	r3, r3, #16
 8003e32:	0c1b      	lsrs	r3, r3, #16
 8003e34:	697a      	ldr	r2, [r7, #20]
 8003e36:	4313      	orrs	r3, r2
 8003e38:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4a0d      	ldr	r2, [pc, #52]	; (8003e74 <TIM_TI4_SetConfig+0x88>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003e42:	68bb      	ldr	r3, [r7, #8]
 8003e44:	031a      	lsls	r2, r3, #12
 8003e46:	23a0      	movs	r3, #160	; 0xa0
 8003e48:	021b      	lsls	r3, r3, #8
 8003e4a:	4013      	ands	r3, r2
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	697a      	ldr	r2, [r7, #20]
 8003e56:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	46c0      	nop			; (mov r8, r8)
 8003e60:	46bd      	mov	sp, r7
 8003e62:	b006      	add	sp, #24
 8003e64:	bd80      	pop	{r7, pc}
 8003e66:	46c0      	nop			; (mov r8, r8)
 8003e68:	ffffefff 	.word	0xffffefff
 8003e6c:	fffffcff 	.word	0xfffffcff
 8003e70:	ffff0fff 	.word	0xffff0fff
 8003e74:	ffff5fff 	.word	0xffff5fff

08003e78 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b084      	sub	sp, #16
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	2270      	movs	r2, #112	; 0x70
 8003e8c:	4393      	bics	r3, r2
 8003e8e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	2207      	movs	r2, #7
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	609a      	str	r2, [r3, #8]
}
 8003ea2:	46c0      	nop			; (mov r8, r8)
 8003ea4:	46bd      	mov	sp, r7
 8003ea6:	b004      	add	sp, #16
 8003ea8:	bd80      	pop	{r7, pc}
	...

08003eac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b086      	sub	sp, #24
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
 8003eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	689b      	ldr	r3, [r3, #8]
 8003ebe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	4a09      	ldr	r2, [pc, #36]	; (8003ee8 <TIM_ETR_SetConfig+0x3c>)
 8003ec4:	4013      	ands	r3, r2
 8003ec6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	021a      	lsls	r2, r3, #8
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	431a      	orrs	r2, r3
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	697a      	ldr	r2, [r7, #20]
 8003ed6:	4313      	orrs	r3, r2
 8003ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	697a      	ldr	r2, [r7, #20]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	46c0      	nop			; (mov r8, r8)
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	b006      	add	sp, #24
 8003ee6:	bd80      	pop	{r7, pc}
 8003ee8:	ffff00ff 	.word	0xffff00ff

08003eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b086      	sub	sp, #24
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	221f      	movs	r2, #31
 8003efc:	4013      	ands	r3, r2
 8003efe:	2201      	movs	r2, #1
 8003f00:	409a      	lsls	r2, r3
 8003f02:	0013      	movs	r3, r2
 8003f04:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	6a1b      	ldr	r3, [r3, #32]
 8003f0a:	697a      	ldr	r2, [r7, #20]
 8003f0c:	43d2      	mvns	r2, r2
 8003f0e:	401a      	ands	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6a1a      	ldr	r2, [r3, #32]
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	211f      	movs	r1, #31
 8003f1c:	400b      	ands	r3, r1
 8003f1e:	6879      	ldr	r1, [r7, #4]
 8003f20:	4099      	lsls	r1, r3
 8003f22:	000b      	movs	r3, r1
 8003f24:	431a      	orrs	r2, r3
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	621a      	str	r2, [r3, #32]
}
 8003f2a:	46c0      	nop			; (mov r8, r8)
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	b006      	add	sp, #24
 8003f30:	bd80      	pop	{r7, pc}
	...

08003f34 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b084      	sub	sp, #16
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
 8003f3c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	223c      	movs	r2, #60	; 0x3c
 8003f42:	5c9b      	ldrb	r3, [r3, r2]
 8003f44:	2b01      	cmp	r3, #1
 8003f46:	d101      	bne.n	8003f4c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f48:	2302      	movs	r3, #2
 8003f4a:	e03c      	b.n	8003fc6 <HAL_TIMEx_MasterConfigSynchronization+0x92>
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	223c      	movs	r2, #60	; 0x3c
 8003f50:	2101      	movs	r1, #1
 8003f52:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	223d      	movs	r2, #61	; 0x3d
 8003f58:	2102      	movs	r1, #2
 8003f5a:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	685b      	ldr	r3, [r3, #4]
 8003f62:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	2270      	movs	r2, #112	; 0x70
 8003f70:	4393      	bics	r3, r2
 8003f72:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	68fa      	ldr	r2, [r7, #12]
 8003f7a:	4313      	orrs	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	4a11      	ldr	r2, [pc, #68]	; (8003fd0 <HAL_TIMEx_MasterConfigSynchronization+0x9c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d004      	beq.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0x66>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	4a0f      	ldr	r2, [pc, #60]	; (8003fd4 <HAL_TIMEx_MasterConfigSynchronization+0xa0>)
 8003f96:	4293      	cmp	r3, r2
 8003f98:	d10c      	bne.n	8003fb4 <HAL_TIMEx_MasterConfigSynchronization+0x80>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	2280      	movs	r2, #128	; 0x80
 8003f9e:	4393      	bics	r3, r2
 8003fa0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003fa2:	683b      	ldr	r3, [r7, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	68ba      	ldr	r2, [r7, #8]
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	68ba      	ldr	r2, [r7, #8]
 8003fb2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	223d      	movs	r2, #61	; 0x3d
 8003fb8:	2101      	movs	r1, #1
 8003fba:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	223c      	movs	r2, #60	; 0x3c
 8003fc0:	2100      	movs	r1, #0
 8003fc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003fc4:	2300      	movs	r3, #0
}
 8003fc6:	0018      	movs	r0, r3
 8003fc8:	46bd      	mov	sp, r7
 8003fca:	b004      	add	sp, #16
 8003fcc:	bd80      	pop	{r7, pc}
 8003fce:	46c0      	nop			; (mov r8, r8)
 8003fd0:	40012c00 	.word	0x40012c00
 8003fd4:	40000400 	.word	0x40000400

08003fd8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fd8:	b580      	push	{r7, lr}
 8003fda:	b082      	sub	sp, #8
 8003fdc:	af00      	add	r7, sp, #0
 8003fde:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	b002      	add	sp, #8
 8003fe6:	bd80      	pop	{r7, pc}

08003fe8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	b002      	add	sp, #8
 8003ff6:	bd80      	pop	{r7, pc}

08003ff8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2b00      	cmp	r3, #0
 8004004:	d101      	bne.n	800400a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e044      	b.n	8004094 <HAL_UART_Init+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800400e:	2b00      	cmp	r3, #0
 8004010:	d107      	bne.n	8004022 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2278      	movs	r2, #120	; 0x78
 8004016:	2100      	movs	r1, #0
 8004018:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	0018      	movs	r0, r3
 800401e:	f7fd fa9d 	bl	800155c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2224      	movs	r2, #36	; 0x24
 8004026:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681a      	ldr	r2, [r3, #0]
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	2101      	movs	r1, #1
 8004034:	438a      	bics	r2, r1
 8004036:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	0018      	movs	r0, r3
 800403c:	f000 fb0c 	bl	8004658 <UART_SetConfig>
 8004040:	0003      	movs	r3, r0
 8004042:	2b01      	cmp	r3, #1
 8004044:	d101      	bne.n	800404a <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e024      	b.n	8004094 <HAL_UART_Init+0x9c>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	0018      	movs	r0, r3
 8004056:	f000 fc27 	bl	80048a8 <UART_AdvFeatureConfig>
  - LINEN (if LIN is supported) and CLKEN bits in the USART_CR2 register,
  - SCEN (if Smartcard is supported), HDSEL and IREN (if IrDA is supported)  bits in the USART_CR3 register.*/
#if defined (USART_CR2_LINEN)
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
#else
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_CLKEN);
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685a      	ldr	r2, [r3, #4]
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	490d      	ldr	r1, [pc, #52]	; (800409c <HAL_UART_Init+0xa4>)
 8004066:	400a      	ands	r2, r1
 8004068:	605a      	str	r2, [r3, #4]
#endif /* USART_CR3_IREN */
#else
#if defined (USART_CR3_IREN)
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_HDSEL | USART_CR3_IREN));
#else
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_HDSEL);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	2108      	movs	r1, #8
 8004076:	438a      	bics	r2, r1
 8004078:	609a      	str	r2, [r3, #8]
#endif /* USART_CR3_IREN*/
#endif /* USART_CR3_SCEN */

  __HAL_UART_ENABLE(huart);
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	681a      	ldr	r2, [r3, #0]
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2101      	movs	r1, #1
 8004086:	430a      	orrs	r2, r1
 8004088:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	0018      	movs	r0, r3
 800408e:	f000 fcbf 	bl	8004a10 <UART_CheckIdleState>
 8004092:	0003      	movs	r3, r0
}
 8004094:	0018      	movs	r0, r3
 8004096:	46bd      	mov	sp, r7
 8004098:	b002      	add	sp, #8
 800409a:	bd80      	pop	{r7, pc}
 800409c:	fffff7ff 	.word	0xfffff7ff

080040a0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80040a0:	b590      	push	{r4, r7, lr}
 80040a2:	b0ab      	sub	sp, #172	; 0xac
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	69db      	ldr	r3, [r3, #28]
 80040ae:	22a4      	movs	r2, #164	; 0xa4
 80040b0:	18b9      	adds	r1, r7, r2
 80040b2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	20a0      	movs	r0, #160	; 0xa0
 80040bc:	1839      	adds	r1, r7, r0
 80040be:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	689b      	ldr	r3, [r3, #8]
 80040c6:	219c      	movs	r1, #156	; 0x9c
 80040c8:	1879      	adds	r1, r7, r1
 80040ca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80040cc:	0011      	movs	r1, r2
 80040ce:	18bb      	adds	r3, r7, r2
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a99      	ldr	r2, [pc, #612]	; (8004338 <HAL_UART_IRQHandler+0x298>)
 80040d4:	4013      	ands	r3, r2
 80040d6:	2298      	movs	r2, #152	; 0x98
 80040d8:	18bc      	adds	r4, r7, r2
 80040da:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 80040dc:	18bb      	adds	r3, r7, r2
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d114      	bne.n	800410e <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80040e4:	187b      	adds	r3, r7, r1
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2220      	movs	r2, #32
 80040ea:	4013      	ands	r3, r2
 80040ec:	d00f      	beq.n	800410e <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80040ee:	183b      	adds	r3, r7, r0
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	2220      	movs	r2, #32
 80040f4:	4013      	ands	r3, r2
 80040f6:	d00a      	beq.n	800410e <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d100      	bne.n	8004102 <HAL_UART_IRQHandler+0x62>
 8004100:	e286      	b.n	8004610 <HAL_UART_IRQHandler+0x570>
      {
        huart->RxISR(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004106:	687a      	ldr	r2, [r7, #4]
 8004108:	0010      	movs	r0, r2
 800410a:	4798      	blx	r3
      }
      return;
 800410c:	e280      	b.n	8004610 <HAL_UART_IRQHandler+0x570>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800410e:	2398      	movs	r3, #152	; 0x98
 8004110:	18fb      	adds	r3, r7, r3
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d100      	bne.n	800411a <HAL_UART_IRQHandler+0x7a>
 8004118:	e114      	b.n	8004344 <HAL_UART_IRQHandler+0x2a4>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800411a:	239c      	movs	r3, #156	; 0x9c
 800411c:	18fb      	adds	r3, r7, r3
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2201      	movs	r2, #1
 8004122:	4013      	ands	r3, r2
 8004124:	d106      	bne.n	8004134 <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8004126:	23a0      	movs	r3, #160	; 0xa0
 8004128:	18fb      	adds	r3, r7, r3
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a83      	ldr	r2, [pc, #524]	; (800433c <HAL_UART_IRQHandler+0x29c>)
 800412e:	4013      	ands	r3, r2
 8004130:	d100      	bne.n	8004134 <HAL_UART_IRQHandler+0x94>
 8004132:	e107      	b.n	8004344 <HAL_UART_IRQHandler+0x2a4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004134:	23a4      	movs	r3, #164	; 0xa4
 8004136:	18fb      	adds	r3, r7, r3
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	2201      	movs	r2, #1
 800413c:	4013      	ands	r3, r2
 800413e:	d012      	beq.n	8004166 <HAL_UART_IRQHandler+0xc6>
 8004140:	23a0      	movs	r3, #160	; 0xa0
 8004142:	18fb      	adds	r3, r7, r3
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	2380      	movs	r3, #128	; 0x80
 8004148:	005b      	lsls	r3, r3, #1
 800414a:	4013      	ands	r3, r2
 800414c:	d00b      	beq.n	8004166 <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2201      	movs	r2, #1
 8004154:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	2284      	movs	r2, #132	; 0x84
 800415a:	589b      	ldr	r3, [r3, r2]
 800415c:	2201      	movs	r2, #1
 800415e:	431a      	orrs	r2, r3
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2184      	movs	r1, #132	; 0x84
 8004164:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004166:	23a4      	movs	r3, #164	; 0xa4
 8004168:	18fb      	adds	r3, r7, r3
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	2202      	movs	r2, #2
 800416e:	4013      	ands	r3, r2
 8004170:	d011      	beq.n	8004196 <HAL_UART_IRQHandler+0xf6>
 8004172:	239c      	movs	r3, #156	; 0x9c
 8004174:	18fb      	adds	r3, r7, r3
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	2201      	movs	r2, #1
 800417a:	4013      	ands	r3, r2
 800417c:	d00b      	beq.n	8004196 <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	2202      	movs	r2, #2
 8004184:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2284      	movs	r2, #132	; 0x84
 800418a:	589b      	ldr	r3, [r3, r2]
 800418c:	2204      	movs	r2, #4
 800418e:	431a      	orrs	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2184      	movs	r1, #132	; 0x84
 8004194:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004196:	23a4      	movs	r3, #164	; 0xa4
 8004198:	18fb      	adds	r3, r7, r3
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2204      	movs	r2, #4
 800419e:	4013      	ands	r3, r2
 80041a0:	d011      	beq.n	80041c6 <HAL_UART_IRQHandler+0x126>
 80041a2:	239c      	movs	r3, #156	; 0x9c
 80041a4:	18fb      	adds	r3, r7, r3
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	2201      	movs	r2, #1
 80041aa:	4013      	ands	r3, r2
 80041ac:	d00b      	beq.n	80041c6 <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2204      	movs	r2, #4
 80041b4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2284      	movs	r2, #132	; 0x84
 80041ba:	589b      	ldr	r3, [r3, r2]
 80041bc:	2202      	movs	r2, #2
 80041be:	431a      	orrs	r2, r3
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2184      	movs	r1, #132	; 0x84
 80041c4:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80041c6:	23a4      	movs	r3, #164	; 0xa4
 80041c8:	18fb      	adds	r3, r7, r3
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	2208      	movs	r2, #8
 80041ce:	4013      	ands	r3, r2
 80041d0:	d017      	beq.n	8004202 <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041d2:	23a0      	movs	r3, #160	; 0xa0
 80041d4:	18fb      	adds	r3, r7, r3
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2220      	movs	r2, #32
 80041da:	4013      	ands	r3, r2
 80041dc:	d105      	bne.n	80041ea <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80041de:	239c      	movs	r3, #156	; 0x9c
 80041e0:	18fb      	adds	r3, r7, r3
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	2201      	movs	r2, #1
 80041e6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80041e8:	d00b      	beq.n	8004202 <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	2208      	movs	r2, #8
 80041f0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2284      	movs	r2, #132	; 0x84
 80041f6:	589b      	ldr	r3, [r3, r2]
 80041f8:	2208      	movs	r2, #8
 80041fa:	431a      	orrs	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2184      	movs	r1, #132	; 0x84
 8004200:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8004202:	23a4      	movs	r3, #164	; 0xa4
 8004204:	18fb      	adds	r3, r7, r3
 8004206:	681a      	ldr	r2, [r3, #0]
 8004208:	2380      	movs	r3, #128	; 0x80
 800420a:	011b      	lsls	r3, r3, #4
 800420c:	4013      	ands	r3, r2
 800420e:	d013      	beq.n	8004238 <HAL_UART_IRQHandler+0x198>
 8004210:	23a0      	movs	r3, #160	; 0xa0
 8004212:	18fb      	adds	r3, r7, r3
 8004214:	681a      	ldr	r2, [r3, #0]
 8004216:	2380      	movs	r3, #128	; 0x80
 8004218:	04db      	lsls	r3, r3, #19
 800421a:	4013      	ands	r3, r2
 800421c:	d00c      	beq.n	8004238 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	0112      	lsls	r2, r2, #4
 8004226:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2284      	movs	r2, #132	; 0x84
 800422c:	589b      	ldr	r3, [r3, r2]
 800422e:	2220      	movs	r2, #32
 8004230:	431a      	orrs	r2, r3
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	2184      	movs	r1, #132	; 0x84
 8004236:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2284      	movs	r2, #132	; 0x84
 800423c:	589b      	ldr	r3, [r3, r2]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d100      	bne.n	8004244 <HAL_UART_IRQHandler+0x1a4>
 8004242:	e1e7      	b.n	8004614 <HAL_UART_IRQHandler+0x574>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8004244:	23a4      	movs	r3, #164	; 0xa4
 8004246:	18fb      	adds	r3, r7, r3
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2220      	movs	r2, #32
 800424c:	4013      	ands	r3, r2
 800424e:	d00e      	beq.n	800426e <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8004250:	23a0      	movs	r3, #160	; 0xa0
 8004252:	18fb      	adds	r3, r7, r3
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	2220      	movs	r2, #32
 8004258:	4013      	ands	r3, r2
 800425a:	d008      	beq.n	800426e <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004260:	2b00      	cmp	r3, #0
 8004262:	d004      	beq.n	800426e <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	0010      	movs	r0, r2
 800426c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	2284      	movs	r2, #132	; 0x84
 8004272:	589b      	ldr	r3, [r3, r2]
 8004274:	2194      	movs	r1, #148	; 0x94
 8004276:	187a      	adds	r2, r7, r1
 8004278:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2240      	movs	r2, #64	; 0x40
 8004282:	4013      	ands	r3, r2
 8004284:	2b40      	cmp	r3, #64	; 0x40
 8004286:	d004      	beq.n	8004292 <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8004288:	187b      	adds	r3, r7, r1
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	2228      	movs	r2, #40	; 0x28
 800428e:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8004290:	d047      	beq.n	8004322 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	0018      	movs	r0, r3
 8004296:	f000 fccd 	bl	8004c34 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	689b      	ldr	r3, [r3, #8]
 80042a0:	2240      	movs	r2, #64	; 0x40
 80042a2:	4013      	ands	r3, r2
 80042a4:	2b40      	cmp	r3, #64	; 0x40
 80042a6:	d137      	bne.n	8004318 <HAL_UART_IRQHandler+0x278>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80042a8:	f3ef 8310 	mrs	r3, PRIMASK
 80042ac:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 80042ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80042b0:	2090      	movs	r0, #144	; 0x90
 80042b2:	183a      	adds	r2, r7, r0
 80042b4:	6013      	str	r3, [r2, #0]
 80042b6:	2301      	movs	r3, #1
 80042b8:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042ba:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80042bc:	f383 8810 	msr	PRIMASK, r3
}
 80042c0:	46c0      	nop			; (mov r8, r8)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	689a      	ldr	r2, [r3, #8]
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	2140      	movs	r1, #64	; 0x40
 80042ce:	438a      	bics	r2, r1
 80042d0:	609a      	str	r2, [r3, #8]
 80042d2:	183b      	adds	r3, r7, r0
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80042d8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80042da:	f383 8810 	msr	PRIMASK, r3
}
 80042de:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042ec:	4a14      	ldr	r2, [pc, #80]	; (8004340 <HAL_UART_IRQHandler+0x2a0>)
 80042ee:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80042f4:	0018      	movs	r0, r3
 80042f6:	f7fd ff03 	bl	8002100 <HAL_DMA_Abort_IT>
 80042fa:	1e03      	subs	r3, r0, #0
 80042fc:	d01a      	beq.n	8004334 <HAL_UART_IRQHandler+0x294>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004302:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004308:	0018      	movs	r0, r3
 800430a:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800430c:	e012      	b.n	8004334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	0018      	movs	r0, r3
 8004312:	f000 f98d 	bl	8004630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004316:	e00d      	b.n	8004334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	0018      	movs	r0, r3
 800431c:	f000 f988 	bl	8004630 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004320:	e008      	b.n	8004334 <HAL_UART_IRQHandler+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f000 f983 	bl	8004630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2284      	movs	r2, #132	; 0x84
 800432e:	2100      	movs	r1, #0
 8004330:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8004332:	e16f      	b.n	8004614 <HAL_UART_IRQHandler+0x574>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004334:	46c0      	nop			; (mov r8, r8)
    return;
 8004336:	e16d      	b.n	8004614 <HAL_UART_IRQHandler+0x574>
 8004338:	0000080f 	.word	0x0000080f
 800433c:	04000120 	.word	0x04000120
 8004340:	08004cfd 	.word	0x08004cfd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004348:	2b01      	cmp	r3, #1
 800434a:	d000      	beq.n	800434e <HAL_UART_IRQHandler+0x2ae>
 800434c:	e139      	b.n	80045c2 <HAL_UART_IRQHandler+0x522>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800434e:	23a4      	movs	r3, #164	; 0xa4
 8004350:	18fb      	adds	r3, r7, r3
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2210      	movs	r2, #16
 8004356:	4013      	ands	r3, r2
 8004358:	d100      	bne.n	800435c <HAL_UART_IRQHandler+0x2bc>
 800435a:	e132      	b.n	80045c2 <HAL_UART_IRQHandler+0x522>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800435c:	23a0      	movs	r3, #160	; 0xa0
 800435e:	18fb      	adds	r3, r7, r3
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	2210      	movs	r2, #16
 8004364:	4013      	ands	r3, r2
 8004366:	d100      	bne.n	800436a <HAL_UART_IRQHandler+0x2ca>
 8004368:	e12b      	b.n	80045c2 <HAL_UART_IRQHandler+0x522>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	2210      	movs	r2, #16
 8004370:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	689b      	ldr	r3, [r3, #8]
 8004378:	2240      	movs	r2, #64	; 0x40
 800437a:	4013      	ands	r3, r2
 800437c:	2b40      	cmp	r3, #64	; 0x40
 800437e:	d000      	beq.n	8004382 <HAL_UART_IRQHandler+0x2e2>
 8004380:	e09f      	b.n	80044c2 <HAL_UART_IRQHandler+0x422>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	685a      	ldr	r2, [r3, #4]
 800438a:	217e      	movs	r1, #126	; 0x7e
 800438c:	187b      	adds	r3, r7, r1
 800438e:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8004390:	187b      	adds	r3, r7, r1
 8004392:	881b      	ldrh	r3, [r3, #0]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d100      	bne.n	800439a <HAL_UART_IRQHandler+0x2fa>
 8004398:	e13e      	b.n	8004618 <HAL_UART_IRQHandler+0x578>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2258      	movs	r2, #88	; 0x58
 800439e:	5a9b      	ldrh	r3, [r3, r2]
 80043a0:	187a      	adds	r2, r7, r1
 80043a2:	8812      	ldrh	r2, [r2, #0]
 80043a4:	429a      	cmp	r2, r3
 80043a6:	d300      	bcc.n	80043aa <HAL_UART_IRQHandler+0x30a>
 80043a8:	e136      	b.n	8004618 <HAL_UART_IRQHandler+0x578>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	187a      	adds	r2, r7, r1
 80043ae:	215a      	movs	r1, #90	; 0x5a
 80043b0:	8812      	ldrh	r2, [r2, #0]
 80043b2:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b20      	cmp	r3, #32
 80043bc:	d06f      	beq.n	800449e <HAL_UART_IRQHandler+0x3fe>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043be:	f3ef 8310 	mrs	r3, PRIMASK
 80043c2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80043c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80043c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80043c8:	2301      	movs	r3, #1
 80043ca:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80043ce:	f383 8810 	msr	PRIMASK, r3
}
 80043d2:	46c0      	nop			; (mov r8, r8)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	4992      	ldr	r1, [pc, #584]	; (8004628 <HAL_UART_IRQHandler+0x588>)
 80043e0:	400a      	ands	r2, r1
 80043e2:	601a      	str	r2, [r3, #0]
 80043e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ea:	f383 8810 	msr	PRIMASK, r3
}
 80043ee:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043f0:	f3ef 8310 	mrs	r3, PRIMASK
 80043f4:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80043f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043f8:	677b      	str	r3, [r7, #116]	; 0x74
 80043fa:	2301      	movs	r3, #1
 80043fc:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004400:	f383 8810 	msr	PRIMASK, r3
}
 8004404:	46c0      	nop			; (mov r8, r8)
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	689a      	ldr	r2, [r3, #8]
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2101      	movs	r1, #1
 8004412:	438a      	bics	r2, r1
 8004414:	609a      	str	r2, [r3, #8]
 8004416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004418:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800441a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800441c:	f383 8810 	msr	PRIMASK, r3
}
 8004420:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004422:	f3ef 8310 	mrs	r3, PRIMASK
 8004426:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8004428:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800442a:	673b      	str	r3, [r7, #112]	; 0x70
 800442c:	2301      	movs	r3, #1
 800442e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004430:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004432:	f383 8810 	msr	PRIMASK, r3
}
 8004436:	46c0      	nop			; (mov r8, r8)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	689a      	ldr	r2, [r3, #8]
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	2140      	movs	r1, #64	; 0x40
 8004444:	438a      	bics	r2, r1
 8004446:	609a      	str	r2, [r3, #8]
 8004448:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800444a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800444e:	f383 8810 	msr	PRIMASK, r3
}
 8004452:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2280      	movs	r2, #128	; 0x80
 8004458:	2120      	movs	r1, #32
 800445a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	661a      	str	r2, [r3, #96]	; 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004462:	f3ef 8310 	mrs	r3, PRIMASK
 8004466:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8004468:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800446a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800446c:	2301      	movs	r3, #1
 800446e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004470:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004472:	f383 8810 	msr	PRIMASK, r3
}
 8004476:	46c0      	nop			; (mov r8, r8)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	681a      	ldr	r2, [r3, #0]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	2110      	movs	r1, #16
 8004484:	438a      	bics	r2, r1
 8004486:	601a      	str	r2, [r3, #0]
 8004488:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800448a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800448e:	f383 8810 	msr	PRIMASK, r3
}
 8004492:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004498:	0018      	movs	r0, r3
 800449a:	f7fd fdf9 	bl	8002090 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2202      	movs	r2, #2
 80044a2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2258      	movs	r2, #88	; 0x58
 80044a8:	5a9a      	ldrh	r2, [r3, r2]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	215a      	movs	r1, #90	; 0x5a
 80044ae:	5a5b      	ldrh	r3, [r3, r1]
 80044b0:	b29b      	uxth	r3, r3
 80044b2:	1ad3      	subs	r3, r2, r3
 80044b4:	b29a      	uxth	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0011      	movs	r1, r2
 80044ba:	0018      	movs	r0, r3
 80044bc:	f000 f8c0 	bl	8004640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80044c0:	e0aa      	b.n	8004618 <HAL_UART_IRQHandler+0x578>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2258      	movs	r2, #88	; 0x58
 80044c6:	5a99      	ldrh	r1, [r3, r2]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	225a      	movs	r2, #90	; 0x5a
 80044cc:	5a9b      	ldrh	r3, [r3, r2]
 80044ce:	b29a      	uxth	r2, r3
 80044d0:	208e      	movs	r0, #142	; 0x8e
 80044d2:	183b      	adds	r3, r7, r0
 80044d4:	1a8a      	subs	r2, r1, r2
 80044d6:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	225a      	movs	r2, #90	; 0x5a
 80044dc:	5a9b      	ldrh	r3, [r3, r2]
 80044de:	b29b      	uxth	r3, r3
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d100      	bne.n	80044e6 <HAL_UART_IRQHandler+0x446>
 80044e4:	e09a      	b.n	800461c <HAL_UART_IRQHandler+0x57c>
          && (nb_rx_data > 0U))
 80044e6:	183b      	adds	r3, r7, r0
 80044e8:	881b      	ldrh	r3, [r3, #0]
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d100      	bne.n	80044f0 <HAL_UART_IRQHandler+0x450>
 80044ee:	e095      	b.n	800461c <HAL_UART_IRQHandler+0x57c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044f0:	f3ef 8310 	mrs	r3, PRIMASK
 80044f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80044f6:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044f8:	2488      	movs	r4, #136	; 0x88
 80044fa:	193a      	adds	r2, r7, r4
 80044fc:	6013      	str	r3, [r2, #0]
 80044fe:	2301      	movs	r3, #1
 8004500:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004502:	693b      	ldr	r3, [r7, #16]
 8004504:	f383 8810 	msr	PRIMASK, r3
}
 8004508:	46c0      	nop			; (mov r8, r8)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4945      	ldr	r1, [pc, #276]	; (800462c <HAL_UART_IRQHandler+0x58c>)
 8004516:	400a      	ands	r2, r1
 8004518:	601a      	str	r2, [r3, #0]
 800451a:	193b      	adds	r3, r7, r4
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004520:	697b      	ldr	r3, [r7, #20]
 8004522:	f383 8810 	msr	PRIMASK, r3
}
 8004526:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004528:	f3ef 8310 	mrs	r3, PRIMASK
 800452c:	61bb      	str	r3, [r7, #24]
  return(result);
 800452e:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004530:	2484      	movs	r4, #132	; 0x84
 8004532:	193a      	adds	r2, r7, r4
 8004534:	6013      	str	r3, [r2, #0]
 8004536:	2301      	movs	r3, #1
 8004538:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	f383 8810 	msr	PRIMASK, r3
}
 8004540:	46c0      	nop			; (mov r8, r8)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	689a      	ldr	r2, [r3, #8]
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	2101      	movs	r1, #1
 800454e:	438a      	bics	r2, r1
 8004550:	609a      	str	r2, [r3, #8]
 8004552:	193b      	adds	r3, r7, r4
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004558:	6a3b      	ldr	r3, [r7, #32]
 800455a:	f383 8810 	msr	PRIMASK, r3
}
 800455e:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2280      	movs	r2, #128	; 0x80
 8004564:	2120      	movs	r1, #32
 8004566:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	2200      	movs	r2, #0
 8004572:	669a      	str	r2, [r3, #104]	; 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004574:	f3ef 8310 	mrs	r3, PRIMASK
 8004578:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800457c:	2480      	movs	r4, #128	; 0x80
 800457e:	193a      	adds	r2, r7, r4
 8004580:	6013      	str	r3, [r2, #0]
 8004582:	2301      	movs	r3, #1
 8004584:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004586:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004588:	f383 8810 	msr	PRIMASK, r3
}
 800458c:	46c0      	nop			; (mov r8, r8)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	2110      	movs	r1, #16
 800459a:	438a      	bics	r2, r1
 800459c:	601a      	str	r2, [r3, #0]
 800459e:	193b      	adds	r3, r7, r4
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80045a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a6:	f383 8810 	msr	PRIMASK, r3
}
 80045aa:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2202      	movs	r2, #2
 80045b0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80045b2:	183b      	adds	r3, r7, r0
 80045b4:	881a      	ldrh	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	0011      	movs	r1, r2
 80045ba:	0018      	movs	r0, r3
 80045bc:	f000 f840 	bl	8004640 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80045c0:	e02c      	b.n	800461c <HAL_UART_IRQHandler+0x57c>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80045c2:	23a4      	movs	r3, #164	; 0xa4
 80045c4:	18fb      	adds	r3, r7, r3
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2280      	movs	r2, #128	; 0x80
 80045ca:	4013      	ands	r3, r2
 80045cc:	d00f      	beq.n	80045ee <HAL_UART_IRQHandler+0x54e>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80045ce:	23a0      	movs	r3, #160	; 0xa0
 80045d0:	18fb      	adds	r3, r7, r3
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	2280      	movs	r2, #128	; 0x80
 80045d6:	4013      	ands	r3, r2
 80045d8:	d009      	beq.n	80045ee <HAL_UART_IRQHandler+0x54e>
  {
    if (huart->TxISR != NULL)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01e      	beq.n	8004620 <HAL_UART_IRQHandler+0x580>
    {
      huart->TxISR(huart);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	0010      	movs	r0, r2
 80045ea:	4798      	blx	r3
    }
    return;
 80045ec:	e018      	b.n	8004620 <HAL_UART_IRQHandler+0x580>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80045ee:	23a4      	movs	r3, #164	; 0xa4
 80045f0:	18fb      	adds	r3, r7, r3
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	2240      	movs	r2, #64	; 0x40
 80045f6:	4013      	ands	r3, r2
 80045f8:	d013      	beq.n	8004622 <HAL_UART_IRQHandler+0x582>
 80045fa:	23a0      	movs	r3, #160	; 0xa0
 80045fc:	18fb      	adds	r3, r7, r3
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	2240      	movs	r2, #64	; 0x40
 8004602:	4013      	ands	r3, r2
 8004604:	d00d      	beq.n	8004622 <HAL_UART_IRQHandler+0x582>
  {
    UART_EndTransmit_IT(huart);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	0018      	movs	r0, r3
 800460a:	f000 fb8e 	bl	8004d2a <UART_EndTransmit_IT>
    return;
 800460e:	e008      	b.n	8004622 <HAL_UART_IRQHandler+0x582>
      return;
 8004610:	46c0      	nop			; (mov r8, r8)
 8004612:	e006      	b.n	8004622 <HAL_UART_IRQHandler+0x582>
    return;
 8004614:	46c0      	nop			; (mov r8, r8)
 8004616:	e004      	b.n	8004622 <HAL_UART_IRQHandler+0x582>
      return;
 8004618:	46c0      	nop			; (mov r8, r8)
 800461a:	e002      	b.n	8004622 <HAL_UART_IRQHandler+0x582>
      return;
 800461c:	46c0      	nop			; (mov r8, r8)
 800461e:	e000      	b.n	8004622 <HAL_UART_IRQHandler+0x582>
    return;
 8004620:	46c0      	nop			; (mov r8, r8)
  }

}
 8004622:	46bd      	mov	sp, r7
 8004624:	b02b      	add	sp, #172	; 0xac
 8004626:	bd90      	pop	{r4, r7, pc}
 8004628:	fffffeff 	.word	0xfffffeff
 800462c:	fffffedf 	.word	0xfffffedf

08004630 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b082      	sub	sp, #8
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8004638:	46c0      	nop			; (mov r8, r8)
 800463a:	46bd      	mov	sp, r7
 800463c:	b002      	add	sp, #8
 800463e:	bd80      	pop	{r7, pc}

08004640 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
 8004646:	6078      	str	r0, [r7, #4]
 8004648:	000a      	movs	r2, r1
 800464a:	1cbb      	adds	r3, r7, #2
 800464c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800464e:	46c0      	nop			; (mov r8, r8)
 8004650:	46bd      	mov	sp, r7
 8004652:	b002      	add	sp, #8
 8004654:	bd80      	pop	{r7, pc}
	...

08004658 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b088      	sub	sp, #32
 800465c:	af00      	add	r7, sp, #0
 800465e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004660:	231e      	movs	r3, #30
 8004662:	18fb      	adds	r3, r7, r3
 8004664:	2200      	movs	r2, #0
 8004666:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	689a      	ldr	r2, [r3, #8]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	691b      	ldr	r3, [r3, #16]
 8004670:	431a      	orrs	r2, r3
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	695b      	ldr	r3, [r3, #20]
 8004676:	431a      	orrs	r2, r3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	4313      	orrs	r3, r2
 800467e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	4a83      	ldr	r2, [pc, #524]	; (8004894 <UART_SetConfig+0x23c>)
 8004688:	4013      	ands	r3, r2
 800468a:	0019      	movs	r1, r3
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	430a      	orrs	r2, r1
 8004694:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	4a7e      	ldr	r2, [pc, #504]	; (8004898 <UART_SetConfig+0x240>)
 800469e:	4013      	ands	r3, r2
 80046a0:	0019      	movs	r1, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	68da      	ldr	r2, [r3, #12]
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	430a      	orrs	r2, r1
 80046ac:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	699b      	ldr	r3, [r3, #24]
 80046b2:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	6a1b      	ldr	r3, [r3, #32]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	689b      	ldr	r3, [r3, #8]
 80046c4:	4a75      	ldr	r2, [pc, #468]	; (800489c <UART_SetConfig+0x244>)
 80046c6:	4013      	ands	r3, r2
 80046c8:	0019      	movs	r1, r3
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	697a      	ldr	r2, [r7, #20]
 80046d0:	430a      	orrs	r2, r1
 80046d2:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80046d4:	4b72      	ldr	r3, [pc, #456]	; (80048a0 <UART_SetConfig+0x248>)
 80046d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046d8:	2203      	movs	r2, #3
 80046da:	4013      	ands	r3, r2
 80046dc:	2b03      	cmp	r3, #3
 80046de:	d00d      	beq.n	80046fc <UART_SetConfig+0xa4>
 80046e0:	d81b      	bhi.n	800471a <UART_SetConfig+0xc2>
 80046e2:	2b02      	cmp	r3, #2
 80046e4:	d014      	beq.n	8004710 <UART_SetConfig+0xb8>
 80046e6:	d818      	bhi.n	800471a <UART_SetConfig+0xc2>
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d002      	beq.n	80046f2 <UART_SetConfig+0x9a>
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d00a      	beq.n	8004706 <UART_SetConfig+0xae>
 80046f0:	e013      	b.n	800471a <UART_SetConfig+0xc2>
 80046f2:	231f      	movs	r3, #31
 80046f4:	18fb      	adds	r3, r7, r3
 80046f6:	2200      	movs	r2, #0
 80046f8:	701a      	strb	r2, [r3, #0]
 80046fa:	e012      	b.n	8004722 <UART_SetConfig+0xca>
 80046fc:	231f      	movs	r3, #31
 80046fe:	18fb      	adds	r3, r7, r3
 8004700:	2202      	movs	r2, #2
 8004702:	701a      	strb	r2, [r3, #0]
 8004704:	e00d      	b.n	8004722 <UART_SetConfig+0xca>
 8004706:	231f      	movs	r3, #31
 8004708:	18fb      	adds	r3, r7, r3
 800470a:	2204      	movs	r2, #4
 800470c:	701a      	strb	r2, [r3, #0]
 800470e:	e008      	b.n	8004722 <UART_SetConfig+0xca>
 8004710:	231f      	movs	r3, #31
 8004712:	18fb      	adds	r3, r7, r3
 8004714:	2208      	movs	r2, #8
 8004716:	701a      	strb	r2, [r3, #0]
 8004718:	e003      	b.n	8004722 <UART_SetConfig+0xca>
 800471a:	231f      	movs	r3, #31
 800471c:	18fb      	adds	r3, r7, r3
 800471e:	2210      	movs	r2, #16
 8004720:	701a      	strb	r2, [r3, #0]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	69da      	ldr	r2, [r3, #28]
 8004726:	2380      	movs	r3, #128	; 0x80
 8004728:	021b      	lsls	r3, r3, #8
 800472a:	429a      	cmp	r2, r3
 800472c:	d15c      	bne.n	80047e8 <UART_SetConfig+0x190>
  {
    switch (clocksource)
 800472e:	231f      	movs	r3, #31
 8004730:	18fb      	adds	r3, r7, r3
 8004732:	781b      	ldrb	r3, [r3, #0]
 8004734:	2b08      	cmp	r3, #8
 8004736:	d015      	beq.n	8004764 <UART_SetConfig+0x10c>
 8004738:	dc18      	bgt.n	800476c <UART_SetConfig+0x114>
 800473a:	2b04      	cmp	r3, #4
 800473c:	d00d      	beq.n	800475a <UART_SetConfig+0x102>
 800473e:	dc15      	bgt.n	800476c <UART_SetConfig+0x114>
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <UART_SetConfig+0xf2>
 8004744:	2b02      	cmp	r3, #2
 8004746:	d005      	beq.n	8004754 <UART_SetConfig+0xfc>
 8004748:	e010      	b.n	800476c <UART_SetConfig+0x114>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800474a:	f7fe fc3f 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 800474e:	0003      	movs	r3, r0
 8004750:	61bb      	str	r3, [r7, #24]
        break;
 8004752:	e012      	b.n	800477a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004754:	4b53      	ldr	r3, [pc, #332]	; (80048a4 <UART_SetConfig+0x24c>)
 8004756:	61bb      	str	r3, [r7, #24]
        break;
 8004758:	e00f      	b.n	800477a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800475a:	f7fe fbd7 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 800475e:	0003      	movs	r3, r0
 8004760:	61bb      	str	r3, [r7, #24]
        break;
 8004762:	e00a      	b.n	800477a <UART_SetConfig+0x122>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004764:	2380      	movs	r3, #128	; 0x80
 8004766:	021b      	lsls	r3, r3, #8
 8004768:	61bb      	str	r3, [r7, #24]
        break;
 800476a:	e006      	b.n	800477a <UART_SetConfig+0x122>
      default:
        pclk = 0U;
 800476c:	2300      	movs	r3, #0
 800476e:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004770:	231e      	movs	r3, #30
 8004772:	18fb      	adds	r3, r7, r3
 8004774:	2201      	movs	r2, #1
 8004776:	701a      	strb	r2, [r3, #0]
        break;
 8004778:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800477a:	69bb      	ldr	r3, [r7, #24]
 800477c:	2b00      	cmp	r3, #0
 800477e:	d100      	bne.n	8004782 <UART_SetConfig+0x12a>
 8004780:	e07a      	b.n	8004878 <UART_SetConfig+0x220>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004782:	69bb      	ldr	r3, [r7, #24]
 8004784:	005a      	lsls	r2, r3, #1
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	085b      	lsrs	r3, r3, #1
 800478c:	18d2      	adds	r2, r2, r3
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	685b      	ldr	r3, [r3, #4]
 8004792:	0019      	movs	r1, r3
 8004794:	0010      	movs	r0, r2
 8004796:	f7fb fcb7 	bl	8000108 <__udivsi3>
 800479a:	0003      	movs	r3, r0
 800479c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800479e:	693b      	ldr	r3, [r7, #16]
 80047a0:	2b0f      	cmp	r3, #15
 80047a2:	d91c      	bls.n	80047de <UART_SetConfig+0x186>
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	2380      	movs	r3, #128	; 0x80
 80047a8:	025b      	lsls	r3, r3, #9
 80047aa:	429a      	cmp	r2, r3
 80047ac:	d217      	bcs.n	80047de <UART_SetConfig+0x186>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	200e      	movs	r0, #14
 80047b4:	183b      	adds	r3, r7, r0
 80047b6:	210f      	movs	r1, #15
 80047b8:	438a      	bics	r2, r1
 80047ba:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047bc:	693b      	ldr	r3, [r7, #16]
 80047be:	085b      	lsrs	r3, r3, #1
 80047c0:	b29b      	uxth	r3, r3
 80047c2:	2207      	movs	r2, #7
 80047c4:	4013      	ands	r3, r2
 80047c6:	b299      	uxth	r1, r3
 80047c8:	183b      	adds	r3, r7, r0
 80047ca:	183a      	adds	r2, r7, r0
 80047cc:	8812      	ldrh	r2, [r2, #0]
 80047ce:	430a      	orrs	r2, r1
 80047d0:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	183a      	adds	r2, r7, r0
 80047d8:	8812      	ldrh	r2, [r2, #0]
 80047da:	60da      	str	r2, [r3, #12]
 80047dc:	e04c      	b.n	8004878 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 80047de:	231e      	movs	r3, #30
 80047e0:	18fb      	adds	r3, r7, r3
 80047e2:	2201      	movs	r2, #1
 80047e4:	701a      	strb	r2, [r3, #0]
 80047e6:	e047      	b.n	8004878 <UART_SetConfig+0x220>
      }
    }
  }
  else
  {
    switch (clocksource)
 80047e8:	231f      	movs	r3, #31
 80047ea:	18fb      	adds	r3, r7, r3
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	2b08      	cmp	r3, #8
 80047f0:	d015      	beq.n	800481e <UART_SetConfig+0x1c6>
 80047f2:	dc18      	bgt.n	8004826 <UART_SetConfig+0x1ce>
 80047f4:	2b04      	cmp	r3, #4
 80047f6:	d00d      	beq.n	8004814 <UART_SetConfig+0x1bc>
 80047f8:	dc15      	bgt.n	8004826 <UART_SetConfig+0x1ce>
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	d002      	beq.n	8004804 <UART_SetConfig+0x1ac>
 80047fe:	2b02      	cmp	r3, #2
 8004800:	d005      	beq.n	800480e <UART_SetConfig+0x1b6>
 8004802:	e010      	b.n	8004826 <UART_SetConfig+0x1ce>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004804:	f7fe fbe2 	bl	8002fcc <HAL_RCC_GetPCLK1Freq>
 8004808:	0003      	movs	r3, r0
 800480a:	61bb      	str	r3, [r7, #24]
        break;
 800480c:	e012      	b.n	8004834 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800480e:	4b25      	ldr	r3, [pc, #148]	; (80048a4 <UART_SetConfig+0x24c>)
 8004810:	61bb      	str	r3, [r7, #24]
        break;
 8004812:	e00f      	b.n	8004834 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004814:	f7fe fb7a 	bl	8002f0c <HAL_RCC_GetSysClockFreq>
 8004818:	0003      	movs	r3, r0
 800481a:	61bb      	str	r3, [r7, #24]
        break;
 800481c:	e00a      	b.n	8004834 <UART_SetConfig+0x1dc>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800481e:	2380      	movs	r3, #128	; 0x80
 8004820:	021b      	lsls	r3, r3, #8
 8004822:	61bb      	str	r3, [r7, #24]
        break;
 8004824:	e006      	b.n	8004834 <UART_SetConfig+0x1dc>
      default:
        pclk = 0U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800482a:	231e      	movs	r3, #30
 800482c:	18fb      	adds	r3, r7, r3
 800482e:	2201      	movs	r2, #1
 8004830:	701a      	strb	r2, [r3, #0]
        break;
 8004832:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004834:	69bb      	ldr	r3, [r7, #24]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d01e      	beq.n	8004878 <UART_SetConfig+0x220>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	685b      	ldr	r3, [r3, #4]
 800483e:	085a      	lsrs	r2, r3, #1
 8004840:	69bb      	ldr	r3, [r7, #24]
 8004842:	18d2      	adds	r2, r2, r3
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	685b      	ldr	r3, [r3, #4]
 8004848:	0019      	movs	r1, r3
 800484a:	0010      	movs	r0, r2
 800484c:	f7fb fc5c 	bl	8000108 <__udivsi3>
 8004850:	0003      	movs	r3, r0
 8004852:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	d90a      	bls.n	8004870 <UART_SetConfig+0x218>
 800485a:	693a      	ldr	r2, [r7, #16]
 800485c:	2380      	movs	r3, #128	; 0x80
 800485e:	025b      	lsls	r3, r3, #9
 8004860:	429a      	cmp	r2, r3
 8004862:	d205      	bcs.n	8004870 <UART_SetConfig+0x218>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004864:	693b      	ldr	r3, [r7, #16]
 8004866:	b29a      	uxth	r2, r3
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	60da      	str	r2, [r3, #12]
 800486e:	e003      	b.n	8004878 <UART_SetConfig+0x220>
      }
      else
      {
        ret = HAL_ERROR;
 8004870:	231e      	movs	r3, #30
 8004872:	18fb      	adds	r3, r7, r3
 8004874:	2201      	movs	r2, #1
 8004876:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	2200      	movs	r2, #0
 800487c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2200      	movs	r2, #0
 8004882:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8004884:	231e      	movs	r3, #30
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	781b      	ldrb	r3, [r3, #0]
}
 800488a:	0018      	movs	r0, r3
 800488c:	46bd      	mov	sp, r7
 800488e:	b008      	add	sp, #32
 8004890:	bd80      	pop	{r7, pc}
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	ffff69f3 	.word	0xffff69f3
 8004898:	ffffcfff 	.word	0xffffcfff
 800489c:	fffff4ff 	.word	0xfffff4ff
 80048a0:	40021000 	.word	0x40021000
 80048a4:	007a1200 	.word	0x007a1200

080048a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b082      	sub	sp, #8
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b4:	2201      	movs	r2, #1
 80048b6:	4013      	ands	r3, r2
 80048b8:	d00b      	beq.n	80048d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	685b      	ldr	r3, [r3, #4]
 80048c0:	4a4a      	ldr	r2, [pc, #296]	; (80049ec <UART_AdvFeatureConfig+0x144>)
 80048c2:	4013      	ands	r3, r2
 80048c4:	0019      	movs	r1, r3
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	430a      	orrs	r2, r1
 80048d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048d6:	2202      	movs	r2, #2
 80048d8:	4013      	ands	r3, r2
 80048da:	d00b      	beq.n	80048f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	685b      	ldr	r3, [r3, #4]
 80048e2:	4a43      	ldr	r2, [pc, #268]	; (80049f0 <UART_AdvFeatureConfig+0x148>)
 80048e4:	4013      	ands	r3, r2
 80048e6:	0019      	movs	r1, r3
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	430a      	orrs	r2, r1
 80048f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048f8:	2204      	movs	r2, #4
 80048fa:	4013      	ands	r3, r2
 80048fc:	d00b      	beq.n	8004916 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	685b      	ldr	r3, [r3, #4]
 8004904:	4a3b      	ldr	r2, [pc, #236]	; (80049f4 <UART_AdvFeatureConfig+0x14c>)
 8004906:	4013      	ands	r3, r2
 8004908:	0019      	movs	r1, r3
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	430a      	orrs	r2, r1
 8004914:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800491a:	2208      	movs	r2, #8
 800491c:	4013      	ands	r3, r2
 800491e:	d00b      	beq.n	8004938 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685b      	ldr	r3, [r3, #4]
 8004926:	4a34      	ldr	r2, [pc, #208]	; (80049f8 <UART_AdvFeatureConfig+0x150>)
 8004928:	4013      	ands	r3, r2
 800492a:	0019      	movs	r1, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	430a      	orrs	r2, r1
 8004936:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800493c:	2210      	movs	r2, #16
 800493e:	4013      	ands	r3, r2
 8004940:	d00b      	beq.n	800495a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	689b      	ldr	r3, [r3, #8]
 8004948:	4a2c      	ldr	r2, [pc, #176]	; (80049fc <UART_AdvFeatureConfig+0x154>)
 800494a:	4013      	ands	r3, r2
 800494c:	0019      	movs	r1, r3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	430a      	orrs	r2, r1
 8004958:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495e:	2220      	movs	r2, #32
 8004960:	4013      	ands	r3, r2
 8004962:	d00b      	beq.n	800497c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	689b      	ldr	r3, [r3, #8]
 800496a:	4a25      	ldr	r2, [pc, #148]	; (8004a00 <UART_AdvFeatureConfig+0x158>)
 800496c:	4013      	ands	r3, r2
 800496e:	0019      	movs	r1, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	430a      	orrs	r2, r1
 800497a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	2240      	movs	r2, #64	; 0x40
 8004982:	4013      	ands	r3, r2
 8004984:	d01d      	beq.n	80049c2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	685b      	ldr	r3, [r3, #4]
 800498c:	4a1d      	ldr	r2, [pc, #116]	; (8004a04 <UART_AdvFeatureConfig+0x15c>)
 800498e:	4013      	ands	r3, r2
 8004990:	0019      	movs	r1, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	430a      	orrs	r2, r1
 800499c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049a2:	2380      	movs	r3, #128	; 0x80
 80049a4:	035b      	lsls	r3, r3, #13
 80049a6:	429a      	cmp	r2, r3
 80049a8:	d10b      	bne.n	80049c2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	4a15      	ldr	r2, [pc, #84]	; (8004a08 <UART_AdvFeatureConfig+0x160>)
 80049b2:	4013      	ands	r3, r2
 80049b4:	0019      	movs	r1, r3
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	430a      	orrs	r2, r1
 80049c0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c6:	2280      	movs	r2, #128	; 0x80
 80049c8:	4013      	ands	r3, r2
 80049ca:	d00b      	beq.n	80049e4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	4a0e      	ldr	r2, [pc, #56]	; (8004a0c <UART_AdvFeatureConfig+0x164>)
 80049d4:	4013      	ands	r3, r2
 80049d6:	0019      	movs	r1, r3
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	430a      	orrs	r2, r1
 80049e2:	605a      	str	r2, [r3, #4]
  }
}
 80049e4:	46c0      	nop			; (mov r8, r8)
 80049e6:	46bd      	mov	sp, r7
 80049e8:	b002      	add	sp, #8
 80049ea:	bd80      	pop	{r7, pc}
 80049ec:	fffdffff 	.word	0xfffdffff
 80049f0:	fffeffff 	.word	0xfffeffff
 80049f4:	fffbffff 	.word	0xfffbffff
 80049f8:	ffff7fff 	.word	0xffff7fff
 80049fc:	ffffefff 	.word	0xffffefff
 8004a00:	ffffdfff 	.word	0xffffdfff
 8004a04:	ffefffff 	.word	0xffefffff
 8004a08:	ff9fffff 	.word	0xff9fffff
 8004a0c:	fff7ffff 	.word	0xfff7ffff

08004a10 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004a10:	b580      	push	{r7, lr}
 8004a12:	b092      	sub	sp, #72	; 0x48
 8004a14:	af02      	add	r7, sp, #8
 8004a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2284      	movs	r2, #132	; 0x84
 8004a1c:	2100      	movs	r1, #0
 8004a1e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004a20:	f7fc ff14 	bl	800184c <HAL_GetTick>
 8004a24:	0003      	movs	r3, r0
 8004a26:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	2208      	movs	r2, #8
 8004a30:	4013      	ands	r3, r2
 8004a32:	2b08      	cmp	r3, #8
 8004a34:	d12c      	bne.n	8004a90 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a38:	2280      	movs	r2, #128	; 0x80
 8004a3a:	0391      	lsls	r1, r2, #14
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	4a46      	ldr	r2, [pc, #280]	; (8004b58 <UART_CheckIdleState+0x148>)
 8004a40:	9200      	str	r2, [sp, #0]
 8004a42:	2200      	movs	r2, #0
 8004a44:	f000 f88c 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004a48:	1e03      	subs	r3, r0, #0
 8004a4a:	d021      	beq.n	8004a90 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004a4c:	f3ef 8310 	mrs	r3, PRIMASK
 8004a50:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004a54:	63bb      	str	r3, [r7, #56]	; 0x38
 8004a56:	2301      	movs	r3, #1
 8004a58:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a5c:	f383 8810 	msr	PRIMASK, r3
}
 8004a60:	46c0      	nop			; (mov r8, r8)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2180      	movs	r1, #128	; 0x80
 8004a6e:	438a      	bics	r2, r1
 8004a70:	601a      	str	r2, [r3, #0]
 8004a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a74:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	f383 8810 	msr	PRIMASK, r3
}
 8004a7c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	2220      	movs	r2, #32
 8004a82:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2278      	movs	r2, #120	; 0x78
 8004a88:	2100      	movs	r1, #0
 8004a8a:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004a8c:	2303      	movs	r3, #3
 8004a8e:	e05f      	b.n	8004b50 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2204      	movs	r2, #4
 8004a98:	4013      	ands	r3, r2
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d146      	bne.n	8004b2c <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004a9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aa0:	2280      	movs	r2, #128	; 0x80
 8004aa2:	03d1      	lsls	r1, r2, #15
 8004aa4:	6878      	ldr	r0, [r7, #4]
 8004aa6:	4a2c      	ldr	r2, [pc, #176]	; (8004b58 <UART_CheckIdleState+0x148>)
 8004aa8:	9200      	str	r2, [sp, #0]
 8004aaa:	2200      	movs	r2, #0
 8004aac:	f000 f858 	bl	8004b60 <UART_WaitOnFlagUntilTimeout>
 8004ab0:	1e03      	subs	r3, r0, #0
 8004ab2:	d03b      	beq.n	8004b2c <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ab4:	f3ef 8310 	mrs	r3, PRIMASK
 8004ab8:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aba:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004abc:	637b      	str	r3, [r7, #52]	; 0x34
 8004abe:	2301      	movs	r3, #1
 8004ac0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ac2:	693b      	ldr	r3, [r7, #16]
 8004ac4:	f383 8810 	msr	PRIMASK, r3
}
 8004ac8:	46c0      	nop			; (mov r8, r8)
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	681a      	ldr	r2, [r3, #0]
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	4921      	ldr	r1, [pc, #132]	; (8004b5c <UART_CheckIdleState+0x14c>)
 8004ad6:	400a      	ands	r2, r1
 8004ad8:	601a      	str	r2, [r3, #0]
 8004ada:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004adc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004ade:	697b      	ldr	r3, [r7, #20]
 8004ae0:	f383 8810 	msr	PRIMASK, r3
}
 8004ae4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ae6:	f3ef 8310 	mrs	r3, PRIMASK
 8004aea:	61bb      	str	r3, [r7, #24]
  return(result);
 8004aec:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004aee:	633b      	str	r3, [r7, #48]	; 0x30
 8004af0:	2301      	movs	r3, #1
 8004af2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	f383 8810 	msr	PRIMASK, r3
}
 8004afa:	46c0      	nop			; (mov r8, r8)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	2101      	movs	r1, #1
 8004b08:	438a      	bics	r2, r1
 8004b0a:	609a      	str	r2, [r3, #8]
 8004b0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b0e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b10:	6a3b      	ldr	r3, [r7, #32]
 8004b12:	f383 8810 	msr	PRIMASK, r3
}
 8004b16:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2280      	movs	r2, #128	; 0x80
 8004b1c:	2120      	movs	r1, #32
 8004b1e:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2278      	movs	r2, #120	; 0x78
 8004b24:	2100      	movs	r1, #0
 8004b26:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	e011      	b.n	8004b50 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	2220      	movs	r2, #32
 8004b30:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	2280      	movs	r2, #128	; 0x80
 8004b36:	2120      	movs	r1, #32
 8004b38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2200      	movs	r2, #0
 8004b44:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2278      	movs	r2, #120	; 0x78
 8004b4a:	2100      	movs	r1, #0
 8004b4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004b4e:	2300      	movs	r3, #0
}
 8004b50:	0018      	movs	r0, r3
 8004b52:	46bd      	mov	sp, r7
 8004b54:	b010      	add	sp, #64	; 0x40
 8004b56:	bd80      	pop	{r7, pc}
 8004b58:	01ffffff 	.word	0x01ffffff
 8004b5c:	fffffedf 	.word	0xfffffedf

08004b60 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b60:	b580      	push	{r7, lr}
 8004b62:	b084      	sub	sp, #16
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	60f8      	str	r0, [r7, #12]
 8004b68:	60b9      	str	r1, [r7, #8]
 8004b6a:	603b      	str	r3, [r7, #0]
 8004b6c:	1dfb      	adds	r3, r7, #7
 8004b6e:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b70:	e04b      	b.n	8004c0a <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b72:	69bb      	ldr	r3, [r7, #24]
 8004b74:	3301      	adds	r3, #1
 8004b76:	d048      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fc fe68 	bl	800184c <HAL_GetTick>
 8004b7c:	0002      	movs	r2, r0
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x2e>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004b8e:	2303      	movs	r3, #3
 8004b90:	e04b      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	2204      	movs	r2, #4
 8004b9a:	4013      	ands	r3, r2
 8004b9c:	d035      	beq.n	8004c0a <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	69db      	ldr	r3, [r3, #28]
 8004ba4:	2208      	movs	r2, #8
 8004ba6:	4013      	ands	r3, r2
 8004ba8:	2b08      	cmp	r3, #8
 8004baa:	d111      	bne.n	8004bd0 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2208      	movs	r2, #8
 8004bb2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	0018      	movs	r0, r3
 8004bb8:	f000 f83c 	bl	8004c34 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	2284      	movs	r2, #132	; 0x84
 8004bc0:	2108      	movs	r1, #8
 8004bc2:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2278      	movs	r2, #120	; 0x78
 8004bc8:	2100      	movs	r1, #0
 8004bca:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e02c      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	69da      	ldr	r2, [r3, #28]
 8004bd6:	2380      	movs	r3, #128	; 0x80
 8004bd8:	011b      	lsls	r3, r3, #4
 8004bda:	401a      	ands	r2, r3
 8004bdc:	2380      	movs	r3, #128	; 0x80
 8004bde:	011b      	lsls	r3, r3, #4
 8004be0:	429a      	cmp	r2, r3
 8004be2:	d112      	bne.n	8004c0a <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	2280      	movs	r2, #128	; 0x80
 8004bea:	0112      	lsls	r2, r2, #4
 8004bec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	f000 f81f 	bl	8004c34 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2284      	movs	r2, #132	; 0x84
 8004bfa:	2120      	movs	r1, #32
 8004bfc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	2278      	movs	r2, #120	; 0x78
 8004c02:	2100      	movs	r1, #0
 8004c04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e00f      	b.n	8004c2a <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	69db      	ldr	r3, [r3, #28]
 8004c10:	68ba      	ldr	r2, [r7, #8]
 8004c12:	4013      	ands	r3, r2
 8004c14:	68ba      	ldr	r2, [r7, #8]
 8004c16:	1ad3      	subs	r3, r2, r3
 8004c18:	425a      	negs	r2, r3
 8004c1a:	4153      	adcs	r3, r2
 8004c1c:	b2db      	uxtb	r3, r3
 8004c1e:	001a      	movs	r2, r3
 8004c20:	1dfb      	adds	r3, r7, #7
 8004c22:	781b      	ldrb	r3, [r3, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d0a4      	beq.n	8004b72 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	0018      	movs	r0, r3
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	b004      	add	sp, #16
 8004c30:	bd80      	pop	{r7, pc}
	...

08004c34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b08e      	sub	sp, #56	; 0x38
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c3c:	f3ef 8310 	mrs	r3, PRIMASK
 8004c40:	617b      	str	r3, [r7, #20]
  return(result);
 8004c42:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c44:	637b      	str	r3, [r7, #52]	; 0x34
 8004c46:	2301      	movs	r3, #1
 8004c48:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c4a:	69bb      	ldr	r3, [r7, #24]
 8004c4c:	f383 8810 	msr	PRIMASK, r3
}
 8004c50:	46c0      	nop			; (mov r8, r8)
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	4926      	ldr	r1, [pc, #152]	; (8004cf8 <UART_EndRxTransfer+0xc4>)
 8004c5e:	400a      	ands	r2, r1
 8004c60:	601a      	str	r2, [r3, #0]
 8004c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c64:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c66:	69fb      	ldr	r3, [r7, #28]
 8004c68:	f383 8810 	msr	PRIMASK, r3
}
 8004c6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004c6e:	f3ef 8310 	mrs	r3, PRIMASK
 8004c72:	623b      	str	r3, [r7, #32]
  return(result);
 8004c74:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	633b      	str	r3, [r7, #48]	; 0x30
 8004c78:	2301      	movs	r3, #1
 8004c7a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7e:	f383 8810 	msr	PRIMASK, r3
}
 8004c82:	46c0      	nop			; (mov r8, r8)
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	689a      	ldr	r2, [r3, #8]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	2101      	movs	r1, #1
 8004c90:	438a      	bics	r2, r1
 8004c92:	609a      	str	r2, [r3, #8]
 8004c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c96:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004c98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c9a:	f383 8810 	msr	PRIMASK, r3
}
 8004c9e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ca4:	2b01      	cmp	r3, #1
 8004ca6:	d118      	bne.n	8004cda <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004ca8:	f3ef 8310 	mrs	r3, PRIMASK
 8004cac:	60bb      	str	r3, [r7, #8]
  return(result);
 8004cae:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cb0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f383 8810 	msr	PRIMASK, r3
}
 8004cbc:	46c0      	nop			; (mov r8, r8)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	2110      	movs	r1, #16
 8004cca:	438a      	bics	r2, r1
 8004ccc:	601a      	str	r2, [r3, #0]
 8004cce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004cd2:	693b      	ldr	r3, [r7, #16]
 8004cd4:	f383 8810 	msr	PRIMASK, r3
}
 8004cd8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2280      	movs	r2, #128	; 0x80
 8004cde:	2120      	movs	r1, #32
 8004ce0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	669a      	str	r2, [r3, #104]	; 0x68
}
 8004cee:	46c0      	nop			; (mov r8, r8)
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	b00e      	add	sp, #56	; 0x38
 8004cf4:	bd80      	pop	{r7, pc}
 8004cf6:	46c0      	nop			; (mov r8, r8)
 8004cf8:	fffffedf 	.word	0xfffffedf

08004cfc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b084      	sub	sp, #16
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d08:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	225a      	movs	r2, #90	; 0x5a
 8004d0e:	2100      	movs	r1, #0
 8004d10:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	2252      	movs	r2, #82	; 0x52
 8004d16:	2100      	movs	r1, #0
 8004d18:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	0018      	movs	r0, r3
 8004d1e:	f7ff fc87 	bl	8004630 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d22:	46c0      	nop			; (mov r8, r8)
 8004d24:	46bd      	mov	sp, r7
 8004d26:	b004      	add	sp, #16
 8004d28:	bd80      	pop	{r7, pc}

08004d2a <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b086      	sub	sp, #24
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004d32:	f3ef 8310 	mrs	r3, PRIMASK
 8004d36:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d38:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d3a:	617b      	str	r3, [r7, #20]
 8004d3c:	2301      	movs	r3, #1
 8004d3e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	f383 8810 	msr	PRIMASK, r3
}
 8004d46:	46c0      	nop			; (mov r8, r8)
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	2140      	movs	r1, #64	; 0x40
 8004d54:	438a      	bics	r2, r1
 8004d56:	601a      	str	r2, [r3, #0]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004d5c:	693b      	ldr	r3, [r7, #16]
 8004d5e:	f383 8810 	msr	PRIMASK, r3
}
 8004d62:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	2220      	movs	r2, #32
 8004d68:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	0018      	movs	r0, r3
 8004d74:	f7fc fa9e 	bl	80012b4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d78:	46c0      	nop			; (mov r8, r8)
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	b006      	add	sp, #24
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <memset>:
 8004d80:	0003      	movs	r3, r0
 8004d82:	1882      	adds	r2, r0, r2
 8004d84:	4293      	cmp	r3, r2
 8004d86:	d100      	bne.n	8004d8a <memset+0xa>
 8004d88:	4770      	bx	lr
 8004d8a:	7019      	strb	r1, [r3, #0]
 8004d8c:	3301      	adds	r3, #1
 8004d8e:	e7f9      	b.n	8004d84 <memset+0x4>

08004d90 <__libc_init_array>:
 8004d90:	b570      	push	{r4, r5, r6, lr}
 8004d92:	2600      	movs	r6, #0
 8004d94:	4c0c      	ldr	r4, [pc, #48]	; (8004dc8 <__libc_init_array+0x38>)
 8004d96:	4d0d      	ldr	r5, [pc, #52]	; (8004dcc <__libc_init_array+0x3c>)
 8004d98:	1b64      	subs	r4, r4, r5
 8004d9a:	10a4      	asrs	r4, r4, #2
 8004d9c:	42a6      	cmp	r6, r4
 8004d9e:	d109      	bne.n	8004db4 <__libc_init_array+0x24>
 8004da0:	2600      	movs	r6, #0
 8004da2:	f000 f819 	bl	8004dd8 <_init>
 8004da6:	4c0a      	ldr	r4, [pc, #40]	; (8004dd0 <__libc_init_array+0x40>)
 8004da8:	4d0a      	ldr	r5, [pc, #40]	; (8004dd4 <__libc_init_array+0x44>)
 8004daa:	1b64      	subs	r4, r4, r5
 8004dac:	10a4      	asrs	r4, r4, #2
 8004dae:	42a6      	cmp	r6, r4
 8004db0:	d105      	bne.n	8004dbe <__libc_init_array+0x2e>
 8004db2:	bd70      	pop	{r4, r5, r6, pc}
 8004db4:	00b3      	lsls	r3, r6, #2
 8004db6:	58eb      	ldr	r3, [r5, r3]
 8004db8:	4798      	blx	r3
 8004dba:	3601      	adds	r6, #1
 8004dbc:	e7ee      	b.n	8004d9c <__libc_init_array+0xc>
 8004dbe:	00b3      	lsls	r3, r6, #2
 8004dc0:	58eb      	ldr	r3, [r5, r3]
 8004dc2:	4798      	blx	r3
 8004dc4:	3601      	adds	r6, #1
 8004dc6:	e7f2      	b.n	8004dae <__libc_init_array+0x1e>
 8004dc8:	08004e64 	.word	0x08004e64
 8004dcc:	08004e64 	.word	0x08004e64
 8004dd0:	08004e68 	.word	0x08004e68
 8004dd4:	08004e64 	.word	0x08004e64

08004dd8 <_init>:
 8004dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dda:	46c0      	nop			; (mov r8, r8)
 8004ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dde:	bc08      	pop	{r3}
 8004de0:	469e      	mov	lr, r3
 8004de2:	4770      	bx	lr

08004de4 <_fini>:
 8004de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004de6:	46c0      	nop			; (mov r8, r8)
 8004de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dea:	bc08      	pop	{r3}
 8004dec:	469e      	mov	lr, r3
 8004dee:	4770      	bx	lr
