
Test connection.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000045c8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08004750  08004750  00014750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004788  08004788  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004788  08004788  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004788  08004788  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004788  08004788  00014788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800478c  0800478c  0001478c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000580  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000058c  2000058c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000c341  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001d40  00000000  00000000  0002c3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000008e8  00000000  00000000  0002e100  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 000006e2  00000000  00000000  0002e9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0001b246  00000000  00000000  0002f0ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000cf1b  00000000  00000000  0004a310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000a1e33  00000000  00000000  0005722b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00002360  00000000  00000000  000f9060  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000071  00000000  00000000  000fb3c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004738 	.word	0x08004738

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004738 	.word	0x08004738

080001c8 <HAL_UART_RxCpltCallback>:



}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b082      	sub	sp, #8
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
				__HAL_UART_ENABLE_IT(&huart2, UART_IT_IDLE);
				HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size);

                                  	}
    */
	if (huart == &huart1) { //проверка, из нужного ли uart пришли данные
 80001d0:	687b      	ldr	r3, [r7, #4]
 80001d2:	4a12      	ldr	r2, [pc, #72]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001d4:	4293      	cmp	r3, r2
 80001d6:	d11c      	bne.n	8000212 <HAL_UART_RxCpltCallback+0x4a>
					//printf("RxCpltCallback = OK\n\r");
					__HAL_UART_DISABLE_IT(&huart1, UART_IT_IDLE);
 80001d8:	4b10      	ldr	r3, [pc, #64]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001da:	681b      	ldr	r3, [r3, #0]
 80001dc:	681a      	ldr	r2, [r3, #0]
 80001de:	4b0f      	ldr	r3, [pc, #60]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	f022 0210 	bic.w	r2, r2, #16
 80001e6:	601a      	str	r2, [r3, #0]

				//	printf("rx_buffer is overflow\n\r");

					HAL_UART_AbortReceive_IT(&huart1);
 80001e8:	480c      	ldr	r0, [pc, #48]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001ea:	f003 f877 	bl	80032dc <HAL_UART_AbortReceive_IT>
					__HAL_UART_CLEAR_IDLEFLAG(&huart1);
 80001ee:	4b0b      	ldr	r3, [pc, #44]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001f0:	681b      	ldr	r3, [r3, #0]
 80001f2:	2210      	movs	r2, #16
 80001f4:	621a      	str	r2, [r3, #32]
					__HAL_UART_ENABLE_IT(&huart1, UART_IT_IDLE);
 80001f6:	4b09      	ldr	r3, [pc, #36]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001f8:	681b      	ldr	r3, [r3, #0]
 80001fa:	681a      	ldr	r2, [r3, #0]
 80001fc:	4b07      	ldr	r3, [pc, #28]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 80001fe:	681b      	ldr	r3, [r3, #0]
 8000200:	f042 0210 	orr.w	r2, r2, #16
 8000204:	601a      	str	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart1, rxn_buffer, rxn_buffer_size);
 8000206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800020a:	4905      	ldr	r1, [pc, #20]	; (8000220 <HAL_UART_RxCpltCallback+0x58>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <HAL_UART_RxCpltCallback+0x54>)
 800020e:	f003 f821 	bl	8003254 <HAL_UART_Receive_IT>

	                                  	}
                      }
 8000212:	bf00      	nop
 8000214:	3708      	adds	r7, #8
 8000216:	46bd      	mov	sp, r7
 8000218:	bd80      	pop	{r7, pc}
 800021a:	bf00      	nop
 800021c:	20000478 	.word	0x20000478
 8000220:	20000228 	.word	0x20000228

08000224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000224:	b580      	push	{r7, lr}
 8000226:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000228:	f000 fb14 	bl	8000854 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022c:	f000 f832 	bl	8000294 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000230:	f000 f95c 	bl	80004ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000234:	f000 f88a 	bl	800034c <MX_ADC1_Init>
  MX_USART1_UART_Init();
 8000238:	f000 f8f8 	bl	800042c <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 800023c:	f000 f926 	bl	800048c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  __HAL_UART_ENABLE_IT(&huart1,UART_IT_IDLE);
 8000240:	4b10      	ldr	r3, [pc, #64]	; (8000284 <main+0x60>)
 8000242:	681b      	ldr	r3, [r3, #0]
 8000244:	681a      	ldr	r2, [r3, #0]
 8000246:	4b0f      	ldr	r3, [pc, #60]	; (8000284 <main+0x60>)
 8000248:	681b      	ldr	r3, [r3, #0]
 800024a:	f042 0210 	orr.w	r2, r2, #16
 800024e:	601a      	str	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart1, rxn_buffer, rxn_buffer_size);
 8000250:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000254:	490c      	ldr	r1, [pc, #48]	; (8000288 <main+0x64>)
 8000256:	480b      	ldr	r0, [pc, #44]	; (8000284 <main+0x60>)
 8000258:	f002 fffc 	bl	8003254 <HAL_UART_Receive_IT>



  __HAL_UART_ENABLE_IT(&huart2,UART_IT_IDLE);
 800025c:	4b0b      	ldr	r3, [pc, #44]	; (800028c <main+0x68>)
 800025e:	681b      	ldr	r3, [r3, #0]
 8000260:	681a      	ldr	r2, [r3, #0]
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <main+0x68>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f042 0210 	orr.w	r2, r2, #16
 800026a:	601a      	str	r2, [r3, #0]
 HAL_UART_Receive_IT(&huart2, rx_buffer, rx_buffer_size);
 800026c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000270:	4907      	ldr	r1, [pc, #28]	; (8000290 <main+0x6c>)
 8000272:	4806      	ldr	r0, [pc, #24]	; (800028c <main+0x68>)
 8000274:	f002 ffee 	bl	8003254 <HAL_UART_Receive_IT>





	  HAL_Delay(2000);
 8000278:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800027c:	f000 fb50 	bl	8000920 <HAL_Delay>
 8000280:	e7fa      	b.n	8000278 <main+0x54>
 8000282:	bf00      	nop
 8000284:	20000478 	.word	0x20000478
 8000288:	20000228 	.word	0x20000228
 800028c:	20000500 	.word	0x20000500
 8000290:	20000028 	.word	0x20000028

08000294 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b096      	sub	sp, #88	; 0x58
 8000298:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800029e:	2228      	movs	r2, #40	; 0x28
 80002a0:	2100      	movs	r1, #0
 80002a2:	4618      	mov	r0, r3
 80002a4:	f004 fa1b 	bl	80046de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002a8:	f107 031c 	add.w	r3, r7, #28
 80002ac:	2200      	movs	r2, #0
 80002ae:	601a      	str	r2, [r3, #0]
 80002b0:	605a      	str	r2, [r3, #4]
 80002b2:	609a      	str	r2, [r3, #8]
 80002b4:	60da      	str	r2, [r3, #12]
 80002b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80002b8:	1d3b      	adds	r3, r7, #4
 80002ba:	2200      	movs	r2, #0
 80002bc:	601a      	str	r2, [r3, #0]
 80002be:	605a      	str	r2, [r3, #4]
 80002c0:	609a      	str	r2, [r3, #8]
 80002c2:	60da      	str	r2, [r3, #12]
 80002c4:	611a      	str	r2, [r3, #16]
 80002c6:	615a      	str	r2, [r3, #20]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c8:	2302      	movs	r3, #2
 80002ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	2301      	movs	r3, #1
 80002ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002d0:	2310      	movs	r3, #16
 80002d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002d4:	2302      	movs	r3, #2
 80002d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002d8:	2300      	movs	r3, #0
 80002da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80002dc:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80002e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80002e6:	4618      	mov	r0, r3
 80002e8:	f001 fbcc 	bl	8001a84 <HAL_RCC_OscConfig>
 80002ec:	4603      	mov	r3, r0
 80002ee:	2b00      	cmp	r3, #0
 80002f0:	d001      	beq.n	80002f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80002f2:	f000 f939 	bl	8000568 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002f6:	230f      	movs	r3, #15
 80002f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002fa:	2302      	movs	r3, #2
 80002fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80002fe:	2300      	movs	r3, #0
 8000300:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000302:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000306:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000308:	2300      	movs	r3, #0
 800030a:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800030c:	f107 031c 	add.w	r3, r7, #28
 8000310:	2102      	movs	r1, #2
 8000312:	4618      	mov	r0, r3
 8000314:	f002 fbf4 	bl	8002b00 <HAL_RCC_ClockConfig>
 8000318:	4603      	mov	r3, r0
 800031a:	2b00      	cmp	r3, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800031e:	f000 f923 	bl	8000568 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_ADC12;
 8000322:	2381      	movs	r3, #129	; 0x81
 8000324:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8000326:	2300      	movs	r3, #0
 8000328:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 800032a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800032e:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	4618      	mov	r0, r3
 8000334:	f002 fe1a 	bl	8002f6c <HAL_RCCEx_PeriphCLKConfig>
 8000338:	4603      	mov	r3, r0
 800033a:	2b00      	cmp	r3, #0
 800033c:	d001      	beq.n	8000342 <SystemClock_Config+0xae>
  {
    Error_Handler();
 800033e:	f000 f913 	bl	8000568 <Error_Handler>
  }
}
 8000342:	bf00      	nop
 8000344:	3758      	adds	r7, #88	; 0x58
 8000346:	46bd      	mov	sp, r7
 8000348:	bd80      	pop	{r7, pc}
	...

0800034c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800034c:	b580      	push	{r7, lr}
 800034e:	b08a      	sub	sp, #40	; 0x28
 8000350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	2200      	movs	r2, #0
 8000358:	601a      	str	r2, [r3, #0]
 800035a:	605a      	str	r2, [r3, #4]
 800035c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800035e:	1d3b      	adds	r3, r7, #4
 8000360:	2200      	movs	r2, #0
 8000362:	601a      	str	r2, [r3, #0]
 8000364:	605a      	str	r2, [r3, #4]
 8000366:	609a      	str	r2, [r3, #8]
 8000368:	60da      	str	r2, [r3, #12]
 800036a:	611a      	str	r2, [r3, #16]
 800036c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800036e:	4b2e      	ldr	r3, [pc, #184]	; (8000428 <MX_ADC1_Init+0xdc>)
 8000370:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000374:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000376:	4b2c      	ldr	r3, [pc, #176]	; (8000428 <MX_ADC1_Init+0xdc>)
 8000378:	2200      	movs	r2, #0
 800037a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800037c:	4b2a      	ldr	r3, [pc, #168]	; (8000428 <MX_ADC1_Init+0xdc>)
 800037e:	2200      	movs	r2, #0
 8000380:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000382:	4b29      	ldr	r3, [pc, #164]	; (8000428 <MX_ADC1_Init+0xdc>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000388:	4b27      	ldr	r3, [pc, #156]	; (8000428 <MX_ADC1_Init+0xdc>)
 800038a:	2200      	movs	r2, #0
 800038c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800038e:	4b26      	ldr	r3, [pc, #152]	; (8000428 <MX_ADC1_Init+0xdc>)
 8000390:	2200      	movs	r2, #0
 8000392:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000396:	4b24      	ldr	r3, [pc, #144]	; (8000428 <MX_ADC1_Init+0xdc>)
 8000398:	2200      	movs	r2, #0
 800039a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800039c:	4b22      	ldr	r3, [pc, #136]	; (8000428 <MX_ADC1_Init+0xdc>)
 800039e:	2201      	movs	r2, #1
 80003a0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003a2:	4b21      	ldr	r3, [pc, #132]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003a4:	2200      	movs	r2, #0
 80003a6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80003a8:	4b1f      	ldr	r3, [pc, #124]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003aa:	2201      	movs	r2, #1
 80003ac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ae:	4b1e      	ldr	r3, [pc, #120]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003b6:	4b1c      	ldr	r3, [pc, #112]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003b8:	2204      	movs	r2, #4
 80003ba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80003bc:	4b1a      	ldr	r3, [pc, #104]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003be:	2200      	movs	r2, #0
 80003c0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 80003c2:	4b19      	ldr	r3, [pc, #100]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003c8:	4817      	ldr	r0, [pc, #92]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003ca:	f000 facd 	bl	8000968 <HAL_ADC_Init>
 80003ce:	4603      	mov	r3, r0
 80003d0:	2b00      	cmp	r3, #0
 80003d2:	d001      	beq.n	80003d8 <MX_ADC1_Init+0x8c>
  {
    Error_Handler();
 80003d4:	f000 f8c8 	bl	8000568 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80003d8:	2300      	movs	r3, #0
 80003da:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	4619      	mov	r1, r3
 80003e2:	4811      	ldr	r0, [pc, #68]	; (8000428 <MX_ADC1_Init+0xdc>)
 80003e4:	f000 ff10 	bl	8001208 <HAL_ADCEx_MultiModeConfigChannel>
 80003e8:	4603      	mov	r3, r0
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0xa6>
  {
    Error_Handler();
 80003ee:	f000 f8bb 	bl	8000568 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80003f2:	2302      	movs	r3, #2
 80003f4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f6:	2301      	movs	r3, #1
 80003f8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80003fa:	2300      	movs	r3, #0
 80003fc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80003fe:	2300      	movs	r3, #0
 8000400:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000402:	2300      	movs	r3, #0
 8000404:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000406:	2300      	movs	r3, #0
 8000408:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800040a:	1d3b      	adds	r3, r7, #4
 800040c:	4619      	mov	r1, r3
 800040e:	4806      	ldr	r0, [pc, #24]	; (8000428 <MX_ADC1_Init+0xdc>)
 8000410:	f000 fc3c 	bl	8000c8c <HAL_ADC_ConfigChannel>
 8000414:	4603      	mov	r3, r0
 8000416:	2b00      	cmp	r3, #0
 8000418:	d001      	beq.n	800041e <MX_ADC1_Init+0xd2>
  {
    Error_Handler();
 800041a:	f000 f8a5 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800041e:	bf00      	nop
 8000420:	3728      	adds	r7, #40	; 0x28
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000428 	.word	0x20000428

0800042c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800042c:	b580      	push	{r7, lr}
 800042e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000430:	4b14      	ldr	r3, [pc, #80]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000432:	4a15      	ldr	r2, [pc, #84]	; (8000488 <MX_USART1_UART_Init+0x5c>)
 8000434:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000436:	4b13      	ldr	r3, [pc, #76]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000438:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800043c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800043e:	4b11      	ldr	r3, [pc, #68]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000440:	2200      	movs	r2, #0
 8000442:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000444:	4b0f      	ldr	r3, [pc, #60]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000446:	2200      	movs	r2, #0
 8000448:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800044a:	4b0e      	ldr	r3, [pc, #56]	; (8000484 <MX_USART1_UART_Init+0x58>)
 800044c:	2200      	movs	r2, #0
 800044e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000450:	4b0c      	ldr	r3, [pc, #48]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000452:	220c      	movs	r2, #12
 8000454:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000456:	4b0b      	ldr	r3, [pc, #44]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000458:	2200      	movs	r2, #0
 800045a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800045c:	4b09      	ldr	r3, [pc, #36]	; (8000484 <MX_USART1_UART_Init+0x58>)
 800045e:	2200      	movs	r2, #0
 8000460:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000462:	4b08      	ldr	r3, [pc, #32]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000464:	2200      	movs	r2, #0
 8000466:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000468:	4b06      	ldr	r3, [pc, #24]	; (8000484 <MX_USART1_UART_Init+0x58>)
 800046a:	2200      	movs	r2, #0
 800046c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800046e:	4805      	ldr	r0, [pc, #20]	; (8000484 <MX_USART1_UART_Init+0x58>)
 8000470:	f002 fea2 	bl	80031b8 <HAL_UART_Init>
 8000474:	4603      	mov	r3, r0
 8000476:	2b00      	cmp	r3, #0
 8000478:	d001      	beq.n	800047e <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 800047a:	f000 f875 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800047e:	bf00      	nop
 8000480:	bd80      	pop	{r7, pc}
 8000482:	bf00      	nop
 8000484:	20000478 	.word	0x20000478
 8000488:	40013800 	.word	0x40013800

0800048c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000490:	4b14      	ldr	r3, [pc, #80]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000492:	4a15      	ldr	r2, [pc, #84]	; (80004e8 <MX_USART2_UART_Init+0x5c>)
 8000494:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000496:	4b13      	ldr	r3, [pc, #76]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 8000498:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800049c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800049e:	4b11      	ldr	r3, [pc, #68]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a0:	2200      	movs	r2, #0
 80004a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80004a4:	4b0f      	ldr	r3, [pc, #60]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80004aa:	4b0e      	ldr	r3, [pc, #56]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ac:	2200      	movs	r2, #0
 80004ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80004b0:	4b0c      	ldr	r3, [pc, #48]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b2:	220c      	movs	r2, #12
 80004b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80004b6:	4b0b      	ldr	r3, [pc, #44]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80004bc:	4b09      	ldr	r3, [pc, #36]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004be:	2200      	movs	r2, #0
 80004c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80004c2:	4b08      	ldr	r3, [pc, #32]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80004c8:	4b06      	ldr	r3, [pc, #24]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80004ce:	4805      	ldr	r0, [pc, #20]	; (80004e4 <MX_USART2_UART_Init+0x58>)
 80004d0:	f002 fe72 	bl	80031b8 <HAL_UART_Init>
 80004d4:	4603      	mov	r3, r0
 80004d6:	2b00      	cmp	r3, #0
 80004d8:	d001      	beq.n	80004de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80004da:	f000 f845 	bl	8000568 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80004de:	bf00      	nop
 80004e0:	bd80      	pop	{r7, pc}
 80004e2:	bf00      	nop
 80004e4:	20000500 	.word	0x20000500
 80004e8:	40004400 	.word	0x40004400

080004ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	b088      	sub	sp, #32
 80004f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80004f2:	f107 030c 	add.w	r3, r7, #12
 80004f6:	2200      	movs	r2, #0
 80004f8:	601a      	str	r2, [r3, #0]
 80004fa:	605a      	str	r2, [r3, #4]
 80004fc:	609a      	str	r2, [r3, #8]
 80004fe:	60da      	str	r2, [r3, #12]
 8000500:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000502:	4b18      	ldr	r3, [pc, #96]	; (8000564 <MX_GPIO_Init+0x78>)
 8000504:	695b      	ldr	r3, [r3, #20]
 8000506:	4a17      	ldr	r2, [pc, #92]	; (8000564 <MX_GPIO_Init+0x78>)
 8000508:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800050c:	6153      	str	r3, [r2, #20]
 800050e:	4b15      	ldr	r3, [pc, #84]	; (8000564 <MX_GPIO_Init+0x78>)
 8000510:	695b      	ldr	r3, [r3, #20]
 8000512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000516:	60bb      	str	r3, [r7, #8]
 8000518:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800051a:	4b12      	ldr	r3, [pc, #72]	; (8000564 <MX_GPIO_Init+0x78>)
 800051c:	695b      	ldr	r3, [r3, #20]
 800051e:	4a11      	ldr	r2, [pc, #68]	; (8000564 <MX_GPIO_Init+0x78>)
 8000520:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000524:	6153      	str	r3, [r2, #20]
 8000526:	4b0f      	ldr	r3, [pc, #60]	; (8000564 <MX_GPIO_Init+0x78>)
 8000528:	695b      	ldr	r3, [r3, #20]
 800052a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800052e:	607b      	str	r3, [r7, #4]
 8000530:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_RESET);
 8000532:	2200      	movs	r2, #0
 8000534:	2104      	movs	r1, #4
 8000536:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800053a:	f001 fa8b 	bl	8001a54 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800053e:	2304      	movs	r3, #4
 8000540:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000542:	2301      	movs	r3, #1
 8000544:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000546:	2300      	movs	r3, #0
 8000548:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800054a:	2300      	movs	r3, #0
 800054c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000558:	f001 f90a 	bl	8001770 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800055c:	bf00      	nop
 800055e:	3720      	adds	r7, #32
 8000560:	46bd      	mov	sp, r7
 8000562:	bd80      	pop	{r7, pc}
 8000564:	40021000 	.word	0x40021000

08000568 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000568:	b480      	push	{r7}
 800056a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800056c:	b672      	cpsid	i
}
 800056e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000570:	e7fe      	b.n	8000570 <Error_Handler+0x8>
	...

08000574 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	b083      	sub	sp, #12
 8000578:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800057a:	4b0f      	ldr	r3, [pc, #60]	; (80005b8 <HAL_MspInit+0x44>)
 800057c:	699b      	ldr	r3, [r3, #24]
 800057e:	4a0e      	ldr	r2, [pc, #56]	; (80005b8 <HAL_MspInit+0x44>)
 8000580:	f043 0301 	orr.w	r3, r3, #1
 8000584:	6193      	str	r3, [r2, #24]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <HAL_MspInit+0x44>)
 8000588:	699b      	ldr	r3, [r3, #24]
 800058a:	f003 0301 	and.w	r3, r3, #1
 800058e:	607b      	str	r3, [r7, #4]
 8000590:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <HAL_MspInit+0x44>)
 8000594:	69db      	ldr	r3, [r3, #28]
 8000596:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <HAL_MspInit+0x44>)
 8000598:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800059c:	61d3      	str	r3, [r2, #28]
 800059e:	4b06      	ldr	r3, [pc, #24]	; (80005b8 <HAL_MspInit+0x44>)
 80005a0:	69db      	ldr	r3, [r3, #28]
 80005a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005a6:	603b      	str	r3, [r7, #0]
 80005a8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop
 80005b8:	40021000 	.word	0x40021000

080005bc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c4:	f107 0314 	add.w	r3, r7, #20
 80005c8:	2200      	movs	r2, #0
 80005ca:	601a      	str	r2, [r3, #0]
 80005cc:	605a      	str	r2, [r3, #4]
 80005ce:	609a      	str	r2, [r3, #8]
 80005d0:	60da      	str	r2, [r3, #12]
 80005d2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80005dc:	d124      	bne.n	8000628 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80005de:	4b14      	ldr	r3, [pc, #80]	; (8000630 <HAL_ADC_MspInit+0x74>)
 80005e0:	695b      	ldr	r3, [r3, #20]
 80005e2:	4a13      	ldr	r2, [pc, #76]	; (8000630 <HAL_ADC_MspInit+0x74>)
 80005e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005e8:	6153      	str	r3, [r2, #20]
 80005ea:	4b11      	ldr	r3, [pc, #68]	; (8000630 <HAL_ADC_MspInit+0x74>)
 80005ec:	695b      	ldr	r3, [r3, #20]
 80005ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <HAL_ADC_MspInit+0x74>)
 80005f8:	695b      	ldr	r3, [r3, #20]
 80005fa:	4a0d      	ldr	r2, [pc, #52]	; (8000630 <HAL_ADC_MspInit+0x74>)
 80005fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000600:	6153      	str	r3, [r2, #20]
 8000602:	4b0b      	ldr	r3, [pc, #44]	; (8000630 <HAL_ADC_MspInit+0x74>)
 8000604:	695b      	ldr	r3, [r3, #20]
 8000606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800060e:	2303      	movs	r3, #3
 8000610:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000612:	2303      	movs	r3, #3
 8000614:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000616:	2300      	movs	r3, #0
 8000618:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800061a:	f107 0314 	add.w	r3, r7, #20
 800061e:	4619      	mov	r1, r3
 8000620:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000624:	f001 f8a4 	bl	8001770 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000628:	bf00      	nop
 800062a:	3728      	adds	r7, #40	; 0x28
 800062c:	46bd      	mov	sp, r7
 800062e:	bd80      	pop	{r7, pc}
 8000630:	40021000 	.word	0x40021000

08000634 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b08c      	sub	sp, #48	; 0x30
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063c:	f107 031c 	add.w	r3, r7, #28
 8000640:	2200      	movs	r2, #0
 8000642:	601a      	str	r2, [r3, #0]
 8000644:	605a      	str	r2, [r3, #4]
 8000646:	609a      	str	r2, [r3, #8]
 8000648:	60da      	str	r2, [r3, #12]
 800064a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a3f      	ldr	r2, [pc, #252]	; (8000750 <HAL_UART_MspInit+0x11c>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d132      	bne.n	80006bc <HAL_UART_MspInit+0x88>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000656:	4b3f      	ldr	r3, [pc, #252]	; (8000754 <HAL_UART_MspInit+0x120>)
 8000658:	699b      	ldr	r3, [r3, #24]
 800065a:	4a3e      	ldr	r2, [pc, #248]	; (8000754 <HAL_UART_MspInit+0x120>)
 800065c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000660:	6193      	str	r3, [r2, #24]
 8000662:	4b3c      	ldr	r3, [pc, #240]	; (8000754 <HAL_UART_MspInit+0x120>)
 8000664:	699b      	ldr	r3, [r3, #24]
 8000666:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800066a:	61bb      	str	r3, [r7, #24]
 800066c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800066e:	4b39      	ldr	r3, [pc, #228]	; (8000754 <HAL_UART_MspInit+0x120>)
 8000670:	695b      	ldr	r3, [r3, #20]
 8000672:	4a38      	ldr	r2, [pc, #224]	; (8000754 <HAL_UART_MspInit+0x120>)
 8000674:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000678:	6153      	str	r3, [r2, #20]
 800067a:	4b36      	ldr	r3, [pc, #216]	; (8000754 <HAL_UART_MspInit+0x120>)
 800067c:	695b      	ldr	r3, [r3, #20]
 800067e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000682:	617b      	str	r3, [r7, #20]
 8000684:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000686:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800068a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800068c:	2302      	movs	r3, #2
 800068e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000690:	2300      	movs	r3, #0
 8000692:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000694:	2303      	movs	r3, #3
 8000696:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000698:	2307      	movs	r3, #7
 800069a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800069c:	f107 031c 	add.w	r3, r7, #28
 80006a0:	4619      	mov	r1, r3
 80006a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006a6:	f001 f863 	bl	8001770 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 80006aa:	2200      	movs	r2, #0
 80006ac:	2100      	movs	r1, #0
 80006ae:	2025      	movs	r0, #37	; 0x25
 80006b0:	f000 ffb1 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80006b4:	2025      	movs	r0, #37	; 0x25
 80006b6:	f000 ffca 	bl	800164e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80006ba:	e044      	b.n	8000746 <HAL_UART_MspInit+0x112>
  else if(huart->Instance==USART2)
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	4a25      	ldr	r2, [pc, #148]	; (8000758 <HAL_UART_MspInit+0x124>)
 80006c2:	4293      	cmp	r3, r2
 80006c4:	d13f      	bne.n	8000746 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 80006c6:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_UART_MspInit+0x120>)
 80006c8:	69db      	ldr	r3, [r3, #28]
 80006ca:	4a22      	ldr	r2, [pc, #136]	; (8000754 <HAL_UART_MspInit+0x120>)
 80006cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80006d0:	61d3      	str	r3, [r2, #28]
 80006d2:	4b20      	ldr	r3, [pc, #128]	; (8000754 <HAL_UART_MspInit+0x120>)
 80006d4:	69db      	ldr	r3, [r3, #28]
 80006d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006da:	613b      	str	r3, [r7, #16]
 80006dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006de:	4b1d      	ldr	r3, [pc, #116]	; (8000754 <HAL_UART_MspInit+0x120>)
 80006e0:	695b      	ldr	r3, [r3, #20]
 80006e2:	4a1c      	ldr	r2, [pc, #112]	; (8000754 <HAL_UART_MspInit+0x120>)
 80006e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e8:	6153      	str	r3, [r2, #20]
 80006ea:	4b1a      	ldr	r3, [pc, #104]	; (8000754 <HAL_UART_MspInit+0x120>)
 80006ec:	695b      	ldr	r3, [r3, #20]
 80006ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80006f2:	60fb      	str	r3, [r7, #12]
 80006f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80006f6:	2308      	movs	r3, #8
 80006f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80006fa:	2312      	movs	r3, #18
 80006fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006fe:	2300      	movs	r3, #0
 8000700:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000702:	2303      	movs	r3, #3
 8000704:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000706:	2307      	movs	r3, #7
 8000708:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800070a:	f107 031c 	add.w	r3, r7, #28
 800070e:	4619      	mov	r1, r3
 8000710:	4812      	ldr	r0, [pc, #72]	; (800075c <HAL_UART_MspInit+0x128>)
 8000712:	f001 f82d 	bl	8001770 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000716:	2310      	movs	r3, #16
 8000718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000726:	2307      	movs	r3, #7
 8000728:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800072a:	f107 031c 	add.w	r3, r7, #28
 800072e:	4619      	mov	r1, r3
 8000730:	480a      	ldr	r0, [pc, #40]	; (800075c <HAL_UART_MspInit+0x128>)
 8000732:	f001 f81d 	bl	8001770 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000736:	2200      	movs	r2, #0
 8000738:	2100      	movs	r1, #0
 800073a:	2026      	movs	r0, #38	; 0x26
 800073c:	f000 ff6b 	bl	8001616 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000740:	2026      	movs	r0, #38	; 0x26
 8000742:	f000 ff84 	bl	800164e <HAL_NVIC_EnableIRQ>
}
 8000746:	bf00      	nop
 8000748:	3730      	adds	r7, #48	; 0x30
 800074a:	46bd      	mov	sp, r7
 800074c:	bd80      	pop	{r7, pc}
 800074e:	bf00      	nop
 8000750:	40013800 	.word	0x40013800
 8000754:	40021000 	.word	0x40021000
 8000758:	40004400 	.word	0x40004400
 800075c:	48000400 	.word	0x48000400

08000760 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000764:	e7fe      	b.n	8000764 <NMI_Handler+0x4>

08000766 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000766:	b480      	push	{r7}
 8000768:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800076a:	e7fe      	b.n	800076a <HardFault_Handler+0x4>

0800076c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800076c:	b480      	push	{r7}
 800076e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000770:	e7fe      	b.n	8000770 <MemManage_Handler+0x4>

08000772 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000772:	b480      	push	{r7}
 8000774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000776:	e7fe      	b.n	8000776 <BusFault_Handler+0x4>

08000778 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000778:	b480      	push	{r7}
 800077a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800077c:	e7fe      	b.n	800077c <UsageFault_Handler+0x4>

0800077e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800077e:	b480      	push	{r7}
 8000780:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr

0800078c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000790:	bf00      	nop
 8000792:	46bd      	mov	sp, r7
 8000794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000798:	4770      	bx	lr

0800079a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800079a:	b480      	push	{r7}
 800079c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr

080007a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007ac:	f000 f898 	bl	80008e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007b0:	bf00      	nop
 80007b2:	bd80      	pop	{r7, pc}

080007b4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007b8:	4802      	ldr	r0, [pc, #8]	; (80007c4 <USART1_IRQHandler+0x10>)
 80007ba:	f002 fe57 	bl	800346c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007be:	bf00      	nop
 80007c0:	bd80      	pop	{r7, pc}
 80007c2:	bf00      	nop
 80007c4:	20000478 	.word	0x20000478

080007c8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXT line 26.
  */
void USART2_IRQHandler(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007cc:	4802      	ldr	r0, [pc, #8]	; (80007d8 <USART2_IRQHandler+0x10>)
 80007ce:	f002 fe4d 	bl	800346c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	20000500 	.word	0x20000500

080007dc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80007dc:	b480      	push	{r7}
 80007de:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80007e0:	4b06      	ldr	r3, [pc, #24]	; (80007fc <SystemInit+0x20>)
 80007e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80007e6:	4a05      	ldr	r2, [pc, #20]	; (80007fc <SystemInit+0x20>)
 80007e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80007ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80007f0:	bf00      	nop
 80007f2:	46bd      	mov	sp, r7
 80007f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop
 80007fc:	e000ed00 	.word	0xe000ed00

08000800 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000800:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000838 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000804:	480d      	ldr	r0, [pc, #52]	; (800083c <LoopForever+0x6>)
  ldr r1, =_edata
 8000806:	490e      	ldr	r1, [pc, #56]	; (8000840 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000808:	4a0e      	ldr	r2, [pc, #56]	; (8000844 <LoopForever+0xe>)
  movs r3, #0
 800080a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800080c:	e002      	b.n	8000814 <LoopCopyDataInit>

0800080e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800080e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000810:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000812:	3304      	adds	r3, #4

08000814 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000814:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000816:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000818:	d3f9      	bcc.n	800080e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800081a:	4a0b      	ldr	r2, [pc, #44]	; (8000848 <LoopForever+0x12>)
  ldr r4, =_ebss
 800081c:	4c0b      	ldr	r4, [pc, #44]	; (800084c <LoopForever+0x16>)
  movs r3, #0
 800081e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000820:	e001      	b.n	8000826 <LoopFillZerobss>

08000822 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000822:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000824:	3204      	adds	r2, #4

08000826 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000826:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000828:	d3fb      	bcc.n	8000822 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800082a:	f7ff ffd7 	bl	80007dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800082e:	f003 ff5f 	bl	80046f0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000832:	f7ff fcf7 	bl	8000224 <main>

08000836 <LoopForever>:

LoopForever:
    b LoopForever
 8000836:	e7fe      	b.n	8000836 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000838:	20003000 	.word	0x20003000
  ldr r0, =_sdata
 800083c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000840:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000844:	08004790 	.word	0x08004790
  ldr r2, =_sbss
 8000848:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800084c:	2000058c 	.word	0x2000058c

08000850 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000850:	e7fe      	b.n	8000850 <ADC1_2_IRQHandler>
	...

08000854 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000858:	4b08      	ldr	r3, [pc, #32]	; (800087c <HAL_Init+0x28>)
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a07      	ldr	r2, [pc, #28]	; (800087c <HAL_Init+0x28>)
 800085e:	f043 0310 	orr.w	r3, r3, #16
 8000862:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000864:	2003      	movs	r0, #3
 8000866:	f000 fecb 	bl	8001600 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800086a:	200f      	movs	r0, #15
 800086c:	f000 f808 	bl	8000880 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000870:	f7ff fe80 	bl	8000574 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000874:	2300      	movs	r3, #0
}
 8000876:	4618      	mov	r0, r3
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	40022000 	.word	0x40022000

08000880 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000888:	4b12      	ldr	r3, [pc, #72]	; (80008d4 <HAL_InitTick+0x54>)
 800088a:	681a      	ldr	r2, [r3, #0]
 800088c:	4b12      	ldr	r3, [pc, #72]	; (80008d8 <HAL_InitTick+0x58>)
 800088e:	781b      	ldrb	r3, [r3, #0]
 8000890:	4619      	mov	r1, r3
 8000892:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000896:	fbb3 f3f1 	udiv	r3, r3, r1
 800089a:	fbb2 f3f3 	udiv	r3, r2, r3
 800089e:	4618      	mov	r0, r3
 80008a0:	f000 fee3 	bl	800166a <HAL_SYSTICK_Config>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80008aa:	2301      	movs	r3, #1
 80008ac:	e00e      	b.n	80008cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	2b0f      	cmp	r3, #15
 80008b2:	d80a      	bhi.n	80008ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80008b4:	2200      	movs	r2, #0
 80008b6:	6879      	ldr	r1, [r7, #4]
 80008b8:	f04f 30ff 	mov.w	r0, #4294967295
 80008bc:	f000 feab 	bl	8001616 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80008c0:	4a06      	ldr	r2, [pc, #24]	; (80008dc <HAL_InitTick+0x5c>)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80008c6:	2300      	movs	r3, #0
 80008c8:	e000      	b.n	80008cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80008ca:	2301      	movs	r3, #1
}
 80008cc:	4618      	mov	r0, r3
 80008ce:	3708      	adds	r7, #8
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	20000000 	.word	0x20000000
 80008d8:	20000008 	.word	0x20000008
 80008dc:	20000004 	.word	0x20000004

080008e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80008e4:	4b06      	ldr	r3, [pc, #24]	; (8000900 <HAL_IncTick+0x20>)
 80008e6:	781b      	ldrb	r3, [r3, #0]
 80008e8:	461a      	mov	r2, r3
 80008ea:	4b06      	ldr	r3, [pc, #24]	; (8000904 <HAL_IncTick+0x24>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	4413      	add	r3, r2
 80008f0:	4a04      	ldr	r2, [pc, #16]	; (8000904 <HAL_IncTick+0x24>)
 80008f2:	6013      	str	r3, [r2, #0]
}
 80008f4:	bf00      	nop
 80008f6:	46bd      	mov	sp, r7
 80008f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008fc:	4770      	bx	lr
 80008fe:	bf00      	nop
 8000900:	20000008 	.word	0x20000008
 8000904:	20000588 	.word	0x20000588

08000908 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000908:	b480      	push	{r7}
 800090a:	af00      	add	r7, sp, #0
  return uwTick;  
 800090c:	4b03      	ldr	r3, [pc, #12]	; (800091c <HAL_GetTick+0x14>)
 800090e:	681b      	ldr	r3, [r3, #0]
}
 8000910:	4618      	mov	r0, r3
 8000912:	46bd      	mov	sp, r7
 8000914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000918:	4770      	bx	lr
 800091a:	bf00      	nop
 800091c:	20000588 	.word	0x20000588

08000920 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b084      	sub	sp, #16
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000928:	f7ff ffee 	bl	8000908 <HAL_GetTick>
 800092c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000932:	68fb      	ldr	r3, [r7, #12]
 8000934:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000938:	d005      	beq.n	8000946 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800093a:	4b0a      	ldr	r3, [pc, #40]	; (8000964 <HAL_Delay+0x44>)
 800093c:	781b      	ldrb	r3, [r3, #0]
 800093e:	461a      	mov	r2, r3
 8000940:	68fb      	ldr	r3, [r7, #12]
 8000942:	4413      	add	r3, r2
 8000944:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000946:	bf00      	nop
 8000948:	f7ff ffde 	bl	8000908 <HAL_GetTick>
 800094c:	4602      	mov	r2, r0
 800094e:	68bb      	ldr	r3, [r7, #8]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	68fa      	ldr	r2, [r7, #12]
 8000954:	429a      	cmp	r2, r3
 8000956:	d8f7      	bhi.n	8000948 <HAL_Delay+0x28>
  {
  }
}
 8000958:	bf00      	nop
 800095a:	bf00      	nop
 800095c:	3710      	adds	r7, #16
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
 8000962:	bf00      	nop
 8000964:	20000008 	.word	0x20000008

08000968 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b09a      	sub	sp, #104	; 0x68
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000970:	2300      	movs	r3, #0
 8000972:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000976:	2300      	movs	r3, #0
 8000978:	663b      	str	r3, [r7, #96]	; 0x60
  __IO uint32_t wait_loop_index = 0U;
 800097a:	2300      	movs	r3, #0
 800097c:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d101      	bne.n	8000988 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	e172      	b.n	8000c6e <HAL_ADC_Init+0x306>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	691b      	ldr	r3, [r3, #16]
 800098c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000992:	f003 0310 	and.w	r3, r3, #16
 8000996:	2b00      	cmp	r3, #0
 8000998:	d176      	bne.n	8000a88 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800099e:	2b00      	cmp	r3, #0
 80009a0:	d152      	bne.n	8000a48 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	2200      	movs	r2, #0
 80009a6:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	2200      	movs	r2, #0
 80009ac:	64da      	str	r2, [r3, #76]	; 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	2200      	movs	r2, #0
 80009b2:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	2200      	movs	r2, #0
 80009b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80009bc:	6878      	ldr	r0, [r7, #4]
 80009be:	f7ff fdfd 	bl	80005bc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80009c2:	687b      	ldr	r3, [r7, #4]
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80009cc:	2b00      	cmp	r3, #0
 80009ce:	d13b      	bne.n	8000a48 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80009d0:	6878      	ldr	r0, [r7, #4]
 80009d2:	f000 fcdf 	bl	8001394 <ADC_Disable>
 80009d6:	4603      	mov	r3, r0
 80009d8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e0:	f003 0310 	and.w	r3, r3, #16
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d12f      	bne.n	8000a48 <HAL_ADC_Init+0xe0>
 80009e8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 80009ec:	2b00      	cmp	r3, #0
 80009ee:	d12b      	bne.n	8000a48 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009f4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80009f8:	f023 0302 	bic.w	r3, r3, #2
 80009fc:	f043 0202 	orr.w	r2, r3, #2
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	641a      	str	r2, [r3, #64]	; 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	689a      	ldr	r2, [r3, #8]
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	681b      	ldr	r3, [r3, #0]
 8000a0e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000a12:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	689a      	ldr	r2, [r3, #8]
 8000a1a:	687b      	ldr	r3, [r7, #4]
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000a22:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000a24:	4b94      	ldr	r3, [pc, #592]	; (8000c78 <HAL_ADC_Init+0x310>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a94      	ldr	r2, [pc, #592]	; (8000c7c <HAL_ADC_Init+0x314>)
 8000a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8000a2e:	0c9a      	lsrs	r2, r3, #18
 8000a30:	4613      	mov	r3, r2
 8000a32:	009b      	lsls	r3, r3, #2
 8000a34:	4413      	add	r3, r2
 8000a36:	005b      	lsls	r3, r3, #1
 8000a38:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a3a:	e002      	b.n	8000a42 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000a3c:	68bb      	ldr	r3, [r7, #8]
 8000a3e:	3b01      	subs	r3, #1
 8000a40:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d1f9      	bne.n	8000a3c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	689b      	ldr	r3, [r3, #8]
 8000a4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d007      	beq.n	8000a66 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000a60:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000a64:	d110      	bne.n	8000a88 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000a66:	687b      	ldr	r3, [r7, #4]
 8000a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a6a:	f023 0312 	bic.w	r3, r3, #18
 8000a6e:	f043 0210 	orr.w	r2, r3, #16
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	641a      	str	r2, [r3, #64]	; 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a7a:	f043 0201 	orr.w	r2, r3, #1
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	645a      	str	r2, [r3, #68]	; 0x44
      
      tmp_hal_status = HAL_ERROR;
 8000a82:	2301      	movs	r3, #1
 8000a84:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a8c:	f003 0310 	and.w	r3, r3, #16
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	f040 80df 	bne.w	8000c54 <HAL_ADC_Init+0x2ec>
 8000a96:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	f040 80da 	bne.w	8000c54 <HAL_ADC_Init+0x2ec>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	689b      	ldr	r3, [r3, #8]
 8000aa6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 80d2 	bne.w	8000c54 <HAL_ADC_Init+0x2ec>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ab8:	f043 0202 	orr.w	r2, r3, #2
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	641a      	str	r2, [r3, #64]	; 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ac0:	4b6f      	ldr	r3, [pc, #444]	; (8000c80 <HAL_ADC_Init+0x318>)
 8000ac2:	65fb      	str	r3, [r7, #92]	; 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000acc:	d102      	bne.n	8000ad4 <HAL_ADC_Init+0x16c>
 8000ace:	4b6d      	ldr	r3, [pc, #436]	; (8000c84 <HAL_ADC_Init+0x31c>)
 8000ad0:	60fb      	str	r3, [r7, #12]
 8000ad2:	e002      	b.n	8000ada <HAL_ADC_Init+0x172>
 8000ad4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ad8:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	681b      	ldr	r3, [r3, #0]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f003 0303 	and.w	r3, r3, #3
 8000ae4:	2b01      	cmp	r3, #1
 8000ae6:	d108      	bne.n	8000afa <HAL_ADC_Init+0x192>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	f003 0301 	and.w	r3, r3, #1
 8000af2:	2b01      	cmp	r3, #1
 8000af4:	d101      	bne.n	8000afa <HAL_ADC_Init+0x192>
 8000af6:	2301      	movs	r3, #1
 8000af8:	e000      	b.n	8000afc <HAL_ADC_Init+0x194>
 8000afa:	2300      	movs	r3, #0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11c      	bne.n	8000b3a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b00:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d010      	beq.n	8000b28 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000b06:	68fb      	ldr	r3, [r7, #12]
 8000b08:	689b      	ldr	r3, [r3, #8]
 8000b0a:	f003 0303 	and.w	r3, r3, #3
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d107      	bne.n	8000b22 <HAL_ADC_Init+0x1ba>
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f003 0301 	and.w	r3, r3, #1
 8000b1a:	2b01      	cmp	r3, #1
 8000b1c:	d101      	bne.n	8000b22 <HAL_ADC_Init+0x1ba>
 8000b1e:	2301      	movs	r3, #1
 8000b20:	e000      	b.n	8000b24 <HAL_ADC_Init+0x1bc>
 8000b22:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d108      	bne.n	8000b3a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000b28:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b2a:	689b      	ldr	r3, [r3, #8]
 8000b2c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	685b      	ldr	r3, [r3, #4]
 8000b34:	431a      	orrs	r2, r3
 8000b36:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8000b38:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	7e5b      	ldrb	r3, [r3, #25]
 8000b3e:	035b      	lsls	r3, r3, #13
 8000b40:	687a      	ldr	r2, [r7, #4]
 8000b42:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8000b44:	2a01      	cmp	r2, #1
 8000b46:	d002      	beq.n	8000b4e <HAL_ADC_Init+0x1e6>
 8000b48:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b4c:	e000      	b.n	8000b50 <HAL_ADC_Init+0x1e8>
 8000b4e:	2200      	movs	r2, #0
 8000b50:	431a      	orrs	r2, r3
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	68db      	ldr	r3, [r3, #12]
 8000b56:	431a      	orrs	r2, r3
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	689b      	ldr	r3, [r3, #8]
 8000b5c:	4313      	orrs	r3, r2
 8000b5e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000b60:	4313      	orrs	r3, r2
 8000b62:	663b      	str	r3, [r7, #96]	; 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000b64:	687b      	ldr	r3, [r7, #4]
 8000b66:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000b6a:	2b01      	cmp	r3, #1
 8000b6c:	d11b      	bne.n	8000ba6 <HAL_ADC_Init+0x23e>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	7e5b      	ldrb	r3, [r3, #25]
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d109      	bne.n	8000b8a <HAL_ADC_Init+0x222>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b7a:	3b01      	subs	r3, #1
 8000b7c:	045a      	lsls	r2, r3, #17
 8000b7e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000b80:	4313      	orrs	r3, r2
 8000b82:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000b86:	663b      	str	r3, [r7, #96]	; 0x60
 8000b88:	e00d      	b.n	8000ba6 <HAL_ADC_Init+0x23e>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000b92:	f043 0220 	orr.w	r2, r3, #32
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	641a      	str	r2, [r3, #64]	; 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b9a:	687b      	ldr	r3, [r7, #4]
 8000b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b9e:	f043 0201 	orr.w	r2, r3, #1
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	645a      	str	r2, [r3, #68]	; 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000baa:	2b01      	cmp	r3, #1
 8000bac:	d007      	beq.n	8000bbe <HAL_ADC_Init+0x256>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000bb6:	4313      	orrs	r3, r2
 8000bb8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	663b      	str	r3, [r7, #96]	; 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	689b      	ldr	r3, [r3, #8]
 8000bc4:	f003 030c 	and.w	r3, r3, #12
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d114      	bne.n	8000bf6 <HAL_ADC_Init+0x28e>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	681b      	ldr	r3, [r3, #0]
 8000bd0:	68db      	ldr	r3, [r3, #12]
 8000bd2:	687a      	ldr	r2, [r7, #4]
 8000bd4:	6812      	ldr	r2, [r2, #0]
 8000bd6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000bda:	f023 0302 	bic.w	r3, r3, #2
 8000bde:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	7e1b      	ldrb	r3, [r3, #24]
 8000be4:	039a      	lsls	r2, r3, #14
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8000bec:	005b      	lsls	r3, r3, #1
 8000bee:	4313      	orrs	r3, r2
 8000bf0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	663b      	str	r3, [r7, #96]	; 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	68da      	ldr	r2, [r3, #12]
 8000bfc:	4b22      	ldr	r3, [pc, #136]	; (8000c88 <HAL_ADC_Init+0x320>)
 8000bfe:	4013      	ands	r3, r2
 8000c00:	687a      	ldr	r2, [r7, #4]
 8000c02:	6812      	ldr	r2, [r2, #0]
 8000c04:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000c06:	430b      	orrs	r3, r1
 8000c08:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	691b      	ldr	r3, [r3, #16]
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d10c      	bne.n	8000c2c <HAL_ADC_Init+0x2c4>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c18:	f023 010f 	bic.w	r1, r3, #15
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	69db      	ldr	r3, [r3, #28]
 8000c20:	1e5a      	subs	r2, r3, #1
 8000c22:	687b      	ldr	r3, [r7, #4]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	430a      	orrs	r2, r1
 8000c28:	631a      	str	r2, [r3, #48]	; 0x30
 8000c2a:	e007      	b.n	8000c3c <HAL_ADC_Init+0x2d4>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f022 020f 	bic.w	r2, r2, #15
 8000c3a:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	2200      	movs	r2, #0
 8000c40:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c46:	f023 0303 	bic.w	r3, r3, #3
 8000c4a:	f043 0201 	orr.w	r2, r3, #1
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	641a      	str	r2, [r3, #64]	; 0x40
 8000c52:	e00a      	b.n	8000c6a <HAL_ADC_Init+0x302>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c58:	f023 0312 	bic.w	r3, r3, #18
 8000c5c:	f043 0210 	orr.w	r2, r3, #16
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8000c64:	2301      	movs	r3, #1
 8000c66:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8000c6a:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3768      	adds	r7, #104	; 0x68
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000000 	.word	0x20000000
 8000c7c:	431bde83 	.word	0x431bde83
 8000c80:	50000300 	.word	0x50000300
 8000c84:	50000100 	.word	0x50000100
 8000c88:	fff0c007 	.word	0xfff0c007

08000c8c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b09b      	sub	sp, #108	; 0x6c
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c96:	2300      	movs	r3, #0
 8000c98:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000ca6:	2b01      	cmp	r3, #1
 8000ca8:	d101      	bne.n	8000cae <HAL_ADC_ConfigChannel+0x22>
 8000caa:	2302      	movs	r3, #2
 8000cac:	e2a1      	b.n	80011f2 <HAL_ADC_ConfigChannel+0x566>
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2201      	movs	r2, #1
 8000cb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000cb6:	687b      	ldr	r3, [r7, #4]
 8000cb8:	681b      	ldr	r3, [r3, #0]
 8000cba:	689b      	ldr	r3, [r3, #8]
 8000cbc:	f003 0304 	and.w	r3, r3, #4
 8000cc0:	2b00      	cmp	r3, #0
 8000cc2:	f040 8285 	bne.w	80011d0 <HAL_ADC_ConfigChannel+0x544>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8000cc6:	683b      	ldr	r3, [r7, #0]
 8000cc8:	685b      	ldr	r3, [r3, #4]
 8000cca:	2b04      	cmp	r3, #4
 8000ccc:	d81c      	bhi.n	8000d08 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	685a      	ldr	r2, [r3, #4]
 8000cd8:	4613      	mov	r3, r2
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	4413      	add	r3, r2
 8000cde:	005b      	lsls	r3, r3, #1
 8000ce0:	461a      	mov	r2, r3
 8000ce2:	231f      	movs	r3, #31
 8000ce4:	4093      	lsls	r3, r2
 8000ce6:	43db      	mvns	r3, r3
 8000ce8:	4019      	ands	r1, r3
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	6818      	ldr	r0, [r3, #0]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	685a      	ldr	r2, [r3, #4]
 8000cf2:	4613      	mov	r3, r2
 8000cf4:	005b      	lsls	r3, r3, #1
 8000cf6:	4413      	add	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	430a      	orrs	r2, r1
 8000d04:	631a      	str	r2, [r3, #48]	; 0x30
 8000d06:	e063      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8000d08:	683b      	ldr	r3, [r7, #0]
 8000d0a:	685b      	ldr	r3, [r3, #4]
 8000d0c:	2b09      	cmp	r3, #9
 8000d0e:	d81e      	bhi.n	8000d4e <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d16:	683b      	ldr	r3, [r7, #0]
 8000d18:	685a      	ldr	r2, [r3, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	005b      	lsls	r3, r3, #1
 8000d1e:	4413      	add	r3, r2
 8000d20:	005b      	lsls	r3, r3, #1
 8000d22:	3b1e      	subs	r3, #30
 8000d24:	221f      	movs	r2, #31
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	43db      	mvns	r3, r3
 8000d2c:	4019      	ands	r1, r3
 8000d2e:	683b      	ldr	r3, [r7, #0]
 8000d30:	6818      	ldr	r0, [r3, #0]
 8000d32:	683b      	ldr	r3, [r7, #0]
 8000d34:	685a      	ldr	r2, [r3, #4]
 8000d36:	4613      	mov	r3, r2
 8000d38:	005b      	lsls	r3, r3, #1
 8000d3a:	4413      	add	r3, r2
 8000d3c:	005b      	lsls	r3, r3, #1
 8000d3e:	3b1e      	subs	r3, #30
 8000d40:	fa00 f203 	lsl.w	r2, r0, r3
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	430a      	orrs	r2, r1
 8000d4a:	635a      	str	r2, [r3, #52]	; 0x34
 8000d4c:	e040      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 8000d4e:	683b      	ldr	r3, [r7, #0]
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	2b0e      	cmp	r3, #14
 8000d54:	d81e      	bhi.n	8000d94 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8000d5c:	683b      	ldr	r3, [r7, #0]
 8000d5e:	685a      	ldr	r2, [r3, #4]
 8000d60:	4613      	mov	r3, r2
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	4413      	add	r3, r2
 8000d66:	005b      	lsls	r3, r3, #1
 8000d68:	3b3c      	subs	r3, #60	; 0x3c
 8000d6a:	221f      	movs	r2, #31
 8000d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d70:	43db      	mvns	r3, r3
 8000d72:	4019      	ands	r1, r3
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	6818      	ldr	r0, [r3, #0]
 8000d78:	683b      	ldr	r3, [r7, #0]
 8000d7a:	685a      	ldr	r2, [r3, #4]
 8000d7c:	4613      	mov	r3, r2
 8000d7e:	005b      	lsls	r3, r3, #1
 8000d80:	4413      	add	r3, r2
 8000d82:	005b      	lsls	r3, r3, #1
 8000d84:	3b3c      	subs	r3, #60	; 0x3c
 8000d86:	fa00 f203 	lsl.w	r2, r0, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	430a      	orrs	r2, r1
 8000d90:	639a      	str	r2, [r3, #56]	; 0x38
 8000d92:	e01d      	b.n	8000dd0 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	685a      	ldr	r2, [r3, #4]
 8000d9e:	4613      	mov	r3, r2
 8000da0:	005b      	lsls	r3, r3, #1
 8000da2:	4413      	add	r3, r2
 8000da4:	005b      	lsls	r3, r3, #1
 8000da6:	3b5a      	subs	r3, #90	; 0x5a
 8000da8:	221f      	movs	r2, #31
 8000daa:	fa02 f303 	lsl.w	r3, r2, r3
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4019      	ands	r1, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	6818      	ldr	r0, [r3, #0]
 8000db6:	683b      	ldr	r3, [r7, #0]
 8000db8:	685a      	ldr	r2, [r3, #4]
 8000dba:	4613      	mov	r3, r2
 8000dbc:	005b      	lsls	r3, r3, #1
 8000dbe:	4413      	add	r3, r2
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	3b5a      	subs	r3, #90	; 0x5a
 8000dc4:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	430a      	orrs	r2, r1
 8000dce:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	689b      	ldr	r3, [r3, #8]
 8000dd6:	f003 030c 	and.w	r3, r3, #12
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	f040 80e5 	bne.w	8000faa <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d91c      	bls.n	8000e22 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8000de8:	687b      	ldr	r3, [r7, #4]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	6999      	ldr	r1, [r3, #24]
 8000dee:	683b      	ldr	r3, [r7, #0]
 8000df0:	681a      	ldr	r2, [r3, #0]
 8000df2:	4613      	mov	r3, r2
 8000df4:	005b      	lsls	r3, r3, #1
 8000df6:	4413      	add	r3, r2
 8000df8:	3b1e      	subs	r3, #30
 8000dfa:	2207      	movs	r2, #7
 8000dfc:	fa02 f303 	lsl.w	r3, r2, r3
 8000e00:	43db      	mvns	r3, r3
 8000e02:	4019      	ands	r1, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	6898      	ldr	r0, [r3, #8]
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	681a      	ldr	r2, [r3, #0]
 8000e0c:	4613      	mov	r3, r2
 8000e0e:	005b      	lsls	r3, r3, #1
 8000e10:	4413      	add	r3, r2
 8000e12:	3b1e      	subs	r3, #30
 8000e14:	fa00 f203 	lsl.w	r2, r0, r3
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	430a      	orrs	r2, r1
 8000e1e:	619a      	str	r2, [r3, #24]
 8000e20:	e019      	b.n	8000e56 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	6959      	ldr	r1, [r3, #20]
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	681a      	ldr	r2, [r3, #0]
 8000e2c:	4613      	mov	r3, r2
 8000e2e:	005b      	lsls	r3, r3, #1
 8000e30:	4413      	add	r3, r2
 8000e32:	2207      	movs	r2, #7
 8000e34:	fa02 f303 	lsl.w	r3, r2, r3
 8000e38:	43db      	mvns	r3, r3
 8000e3a:	4019      	ands	r1, r3
 8000e3c:	683b      	ldr	r3, [r7, #0]
 8000e3e:	6898      	ldr	r0, [r3, #8]
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	681a      	ldr	r2, [r3, #0]
 8000e44:	4613      	mov	r3, r2
 8000e46:	005b      	lsls	r3, r3, #1
 8000e48:	4413      	add	r3, r2
 8000e4a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	681b      	ldr	r3, [r3, #0]
 8000e52:	430a      	orrs	r2, r1
 8000e54:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000e56:	683b      	ldr	r3, [r7, #0]
 8000e58:	695a      	ldr	r2, [r3, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	08db      	lsrs	r3, r3, #3
 8000e62:	f003 0303 	and.w	r3, r3, #3
 8000e66:	005b      	lsls	r3, r3, #1
 8000e68:	fa02 f303 	lsl.w	r3, r2, r3
 8000e6c:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 8000e6e:	683b      	ldr	r3, [r7, #0]
 8000e70:	691b      	ldr	r3, [r3, #16]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	2b03      	cmp	r3, #3
 8000e76:	d84f      	bhi.n	8000f18 <HAL_ADC_ConfigChannel+0x28c>
 8000e78:	a201      	add	r2, pc, #4	; (adr r2, 8000e80 <HAL_ADC_ConfigChannel+0x1f4>)
 8000e7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e7e:	bf00      	nop
 8000e80:	08000e91 	.word	0x08000e91
 8000e84:	08000eb3 	.word	0x08000eb3
 8000e88:	08000ed5 	.word	0x08000ed5
 8000e8c:	08000ef7 	.word	0x08000ef7
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000e96:	4b9c      	ldr	r3, [pc, #624]	; (8001108 <HAL_ADC_ConfigChannel+0x47c>)
 8000e98:	4013      	ands	r3, r2
 8000e9a:	683a      	ldr	r2, [r7, #0]
 8000e9c:	6812      	ldr	r2, [r2, #0]
 8000e9e:	0691      	lsls	r1, r2, #26
 8000ea0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ea2:	430a      	orrs	r2, r1
 8000ea4:	431a      	orrs	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000eae:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000eb0:	e07b      	b.n	8000faa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000eb8:	4b93      	ldr	r3, [pc, #588]	; (8001108 <HAL_ADC_ConfigChannel+0x47c>)
 8000eba:	4013      	ands	r3, r2
 8000ebc:	683a      	ldr	r2, [r7, #0]
 8000ebe:	6812      	ldr	r2, [r2, #0]
 8000ec0:	0691      	lsls	r1, r2, #26
 8000ec2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ec4:	430a      	orrs	r2, r1
 8000ec6:	431a      	orrs	r2, r3
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ed0:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ed2:	e06a      	b.n	8000faa <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000eda:	4b8b      	ldr	r3, [pc, #556]	; (8001108 <HAL_ADC_ConfigChannel+0x47c>)
 8000edc:	4013      	ands	r3, r2
 8000ede:	683a      	ldr	r2, [r7, #0]
 8000ee0:	6812      	ldr	r2, [r2, #0]
 8000ee2:	0691      	lsls	r1, r2, #26
 8000ee4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000ee6:	430a      	orrs	r2, r1
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000ef2:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000ef4:	e059      	b.n	8000faa <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000efc:	4b82      	ldr	r3, [pc, #520]	; (8001108 <HAL_ADC_ConfigChannel+0x47c>)
 8000efe:	4013      	ands	r3, r2
 8000f00:	683a      	ldr	r2, [r7, #0]
 8000f02:	6812      	ldr	r2, [r2, #0]
 8000f04:	0691      	lsls	r1, r2, #26
 8000f06:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8000f08:	430a      	orrs	r2, r1
 8000f0a:	431a      	orrs	r2, r3
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000f14:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8000f16:	e048      	b.n	8000faa <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f22:	683b      	ldr	r3, [r7, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	069b      	lsls	r3, r3, #26
 8000f28:	429a      	cmp	r2, r3
 8000f2a:	d107      	bne.n	8000f3c <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000f32:	687b      	ldr	r3, [r7, #4]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f3a:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8000f42:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	069b      	lsls	r3, r3, #26
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d107      	bne.n	8000f60 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f5e:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8000f66:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	069b      	lsls	r3, r3, #26
 8000f70:	429a      	cmp	r2, r3
 8000f72:	d107      	bne.n	8000f84 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000f82:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8000f8a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8000f8e:	683b      	ldr	r3, [r7, #0]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	069b      	lsls	r3, r3, #26
 8000f94:	429a      	cmp	r2, r3
 8000f96:	d107      	bne.n	8000fa8 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000fa6:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8000fa8:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	681b      	ldr	r3, [r3, #0]
 8000fae:	689b      	ldr	r3, [r3, #8]
 8000fb0:	f003 0303 	and.w	r3, r3, #3
 8000fb4:	2b01      	cmp	r3, #1
 8000fb6:	d108      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x33e>
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	2b01      	cmp	r3, #1
 8000fc4:	d101      	bne.n	8000fca <HAL_ADC_ConfigChannel+0x33e>
 8000fc6:	2301      	movs	r3, #1
 8000fc8:	e000      	b.n	8000fcc <HAL_ADC_ConfigChannel+0x340>
 8000fca:	2300      	movs	r3, #0
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f040 810a 	bne.w	80011e6 <HAL_ADC_ConfigChannel+0x55a>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	68db      	ldr	r3, [r3, #12]
 8000fd6:	2b01      	cmp	r3, #1
 8000fd8:	d00f      	beq.n	8000ffa <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	2201      	movs	r2, #1
 8000fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fec:	43da      	mvns	r2, r3
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	400a      	ands	r2, r1
 8000ff4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 8000ff8:	e049      	b.n	800108e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	2201      	movs	r2, #1
 8001008:	409a      	lsls	r2, r3
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	430a      	orrs	r2, r1
 8001010:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001014:	683b      	ldr	r3, [r7, #0]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	2b09      	cmp	r3, #9
 800101a:	d91c      	bls.n	8001056 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	6999      	ldr	r1, [r3, #24]
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	681a      	ldr	r2, [r3, #0]
 8001026:	4613      	mov	r3, r2
 8001028:	005b      	lsls	r3, r3, #1
 800102a:	4413      	add	r3, r2
 800102c:	3b1b      	subs	r3, #27
 800102e:	2207      	movs	r2, #7
 8001030:	fa02 f303 	lsl.w	r3, r2, r3
 8001034:	43db      	mvns	r3, r3
 8001036:	4019      	ands	r1, r3
 8001038:	683b      	ldr	r3, [r7, #0]
 800103a:	6898      	ldr	r0, [r3, #8]
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	681a      	ldr	r2, [r3, #0]
 8001040:	4613      	mov	r3, r2
 8001042:	005b      	lsls	r3, r3, #1
 8001044:	4413      	add	r3, r2
 8001046:	3b1b      	subs	r3, #27
 8001048:	fa00 f203 	lsl.w	r2, r0, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	430a      	orrs	r2, r1
 8001052:	619a      	str	r2, [r3, #24]
 8001054:	e01b      	b.n	800108e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6959      	ldr	r1, [r3, #20]
 800105c:	683b      	ldr	r3, [r7, #0]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	1c5a      	adds	r2, r3, #1
 8001062:	4613      	mov	r3, r2
 8001064:	005b      	lsls	r3, r3, #1
 8001066:	4413      	add	r3, r2
 8001068:	2207      	movs	r2, #7
 800106a:	fa02 f303 	lsl.w	r3, r2, r3
 800106e:	43db      	mvns	r3, r3
 8001070:	4019      	ands	r1, r3
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	6898      	ldr	r0, [r3, #8]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	1c5a      	adds	r2, r3, #1
 800107c:	4613      	mov	r3, r2
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	4413      	add	r3, r2
 8001082:	fa00 f203 	lsl.w	r2, r0, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	430a      	orrs	r2, r1
 800108c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800108e:	4b1f      	ldr	r3, [pc, #124]	; (800110c <HAL_ADC_ConfigChannel+0x480>)
 8001090:	65fb      	str	r3, [r7, #92]	; 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001092:	683b      	ldr	r3, [r7, #0]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	2b10      	cmp	r3, #16
 8001098:	d105      	bne.n	80010a6 <HAL_ADC_ConfigChannel+0x41a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800109a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800109c:	689b      	ldr	r3, [r3, #8]
 800109e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d015      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80010aa:	2b11      	cmp	r3, #17
 80010ac:	d105      	bne.n	80010ba <HAL_ADC_ConfigChannel+0x42e>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010b0:	689b      	ldr	r3, [r3, #8]
 80010b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80010b6:	2b00      	cmp	r3, #0
 80010b8:	d00b      	beq.n	80010d2 <HAL_ADC_ConfigChannel+0x446>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 80010be:	2b12      	cmp	r3, #18
 80010c0:	f040 8091 	bne.w	80011e6 <HAL_ADC_ConfigChannel+0x55a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 80010c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	f040 808a 	bne.w	80011e6 <HAL_ADC_ConfigChannel+0x55a>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010da:	d102      	bne.n	80010e2 <HAL_ADC_ConfigChannel+0x456>
 80010dc:	4b0c      	ldr	r3, [pc, #48]	; (8001110 <HAL_ADC_ConfigChannel+0x484>)
 80010de:	60fb      	str	r3, [r7, #12]
 80010e0:	e002      	b.n	80010e8 <HAL_ADC_ConfigChannel+0x45c>
 80010e2:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80010e6:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	689b      	ldr	r3, [r3, #8]
 80010ee:	f003 0303 	and.w	r3, r3, #3
 80010f2:	2b01      	cmp	r3, #1
 80010f4:	d10e      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x488>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f003 0301 	and.w	r3, r3, #1
 8001100:	2b01      	cmp	r3, #1
 8001102:	d107      	bne.n	8001114 <HAL_ADC_ConfigChannel+0x488>
 8001104:	2301      	movs	r3, #1
 8001106:	e006      	b.n	8001116 <HAL_ADC_ConfigChannel+0x48a>
 8001108:	83fff000 	.word	0x83fff000
 800110c:	50000300 	.word	0x50000300
 8001110:	50000100 	.word	0x50000100
 8001114:	2300      	movs	r3, #0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d150      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x530>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800111a:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800111c:	2b00      	cmp	r3, #0
 800111e:	d010      	beq.n	8001142 <HAL_ADC_ConfigChannel+0x4b6>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	f003 0303 	and.w	r3, r3, #3
 8001128:	2b01      	cmp	r3, #1
 800112a:	d107      	bne.n	800113c <HAL_ADC_ConfigChannel+0x4b0>
 800112c:	68fb      	ldr	r3, [r7, #12]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f003 0301 	and.w	r3, r3, #1
 8001134:	2b01      	cmp	r3, #1
 8001136:	d101      	bne.n	800113c <HAL_ADC_ConfigChannel+0x4b0>
 8001138:	2301      	movs	r3, #1
 800113a:	e000      	b.n	800113e <HAL_ADC_ConfigChannel+0x4b2>
 800113c:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800113e:	2b00      	cmp	r3, #0
 8001140:	d13c      	bne.n	80011bc <HAL_ADC_ConfigChannel+0x530>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	2b10      	cmp	r3, #16
 8001148:	d11d      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x4fa>
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001152:	d118      	bne.n	8001186 <HAL_ADC_ConfigChannel+0x4fa>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8001154:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001156:	689b      	ldr	r3, [r3, #8]
 8001158:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800115c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800115e:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001160:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_ADC_ConfigChannel+0x574>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	4a27      	ldr	r2, [pc, #156]	; (8001204 <HAL_ADC_ConfigChannel+0x578>)
 8001166:	fba2 2303 	umull	r2, r3, r2, r3
 800116a:	0c9a      	lsrs	r2, r3, #18
 800116c:	4613      	mov	r3, r2
 800116e:	009b      	lsls	r3, r3, #2
 8001170:	4413      	add	r3, r2
 8001172:	005b      	lsls	r3, r3, #1
 8001174:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001176:	e002      	b.n	800117e <HAL_ADC_ConfigChannel+0x4f2>
          {
            wait_loop_index--;
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	3b01      	subs	r3, #1
 800117c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800117e:	68bb      	ldr	r3, [r7, #8]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d1f9      	bne.n	8001178 <HAL_ADC_ConfigChannel+0x4ec>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001184:	e02e      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x558>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8001186:	683b      	ldr	r3, [r7, #0]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	2b11      	cmp	r3, #17
 800118c:	d10b      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x51a>
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001196:	d106      	bne.n	80011a6 <HAL_ADC_ConfigChannel+0x51a>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8001198:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80011a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011a2:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011a4:	e01e      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x558>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2b12      	cmp	r3, #18
 80011ac:	d11a      	bne.n	80011e4 <HAL_ADC_ConfigChannel+0x558>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 80011ae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80011b6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80011b8:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011ba:	e013      	b.n	80011e4 <HAL_ADC_ConfigChannel+0x558>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f043 0220 	orr.w	r2, r3, #32
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	641a      	str	r2, [r3, #64]	; 0x40
        
        tmp_hal_status = HAL_ERROR;
 80011c8:	2301      	movs	r3, #1
 80011ca:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011ce:	e00a      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x55a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d4:	f043 0220 	orr.w	r2, r3, #32
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 80011dc:	2301      	movs	r3, #1
 80011de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 80011e2:	e000      	b.n	80011e6 <HAL_ADC_ConfigChannel+0x55a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80011e4:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	2200      	movs	r2, #0
 80011ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80011ee:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	376c      	adds	r7, #108	; 0x6c
 80011f6:	46bd      	mov	sp, r7
 80011f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fc:	4770      	bx	lr
 80011fe:	bf00      	nop
 8001200:	20000000 	.word	0x20000000
 8001204:	431bde83 	.word	0x431bde83

08001208 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8001208:	b480      	push	{r7}
 800120a:	b099      	sub	sp, #100	; 0x64
 800120c:	af00      	add	r7, sp, #0
 800120e:	6078      	str	r0, [r7, #4]
 8001210:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001212:	2300      	movs	r3, #0
 8001214:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001220:	d102      	bne.n	8001228 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001222:	4b5a      	ldr	r3, [pc, #360]	; (800138c <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001224:	60bb      	str	r3, [r7, #8]
 8001226:	e002      	b.n	800122e <HAL_ADCEx_MultiModeConfigChannel+0x26>
 8001228:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800122c:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d101      	bne.n	8001238 <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001234:	2301      	movs	r3, #1
 8001236:	e0a2      	b.n	800137e <HAL_ADCEx_MultiModeConfigChannel+0x176>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800123e:	2b01      	cmp	r3, #1
 8001240:	d101      	bne.n	8001246 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001242:	2302      	movs	r3, #2
 8001244:	e09b      	b.n	800137e <HAL_ADCEx_MultiModeConfigChannel+0x176>
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 0304 	and.w	r3, r3, #4
 8001258:	2b00      	cmp	r3, #0
 800125a:	d17f      	bne.n	800135c <HAL_ADCEx_MultiModeConfigChannel+0x154>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	689b      	ldr	r3, [r3, #8]
 8001260:	f003 0304 	and.w	r3, r3, #4
 8001264:	2b00      	cmp	r3, #0
 8001266:	d179      	bne.n	800135c <HAL_ADCEx_MultiModeConfigChannel+0x154>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001268:	4b49      	ldr	r3, [pc, #292]	; (8001390 <HAL_ADCEx_MultiModeConfigChannel+0x188>)
 800126a:	65bb      	str	r3, [r7, #88]	; 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	2b00      	cmp	r3, #0
 8001272:	d040      	beq.n	80012f6 <HAL_ADCEx_MultiModeConfigChannel+0xee>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001274:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	6859      	ldr	r1, [r3, #4]
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001286:	035b      	lsls	r3, r3, #13
 8001288:	430b      	orrs	r3, r1
 800128a:	431a      	orrs	r2, r3
 800128c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800128e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	689b      	ldr	r3, [r3, #8]
 8001296:	f003 0303 	and.w	r3, r3, #3
 800129a:	2b01      	cmp	r3, #1
 800129c:	d108      	bne.n	80012b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f003 0301 	and.w	r3, r3, #1
 80012a8:	2b01      	cmp	r3, #1
 80012aa:	d101      	bne.n	80012b0 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80012ac:	2301      	movs	r3, #1
 80012ae:	e000      	b.n	80012b2 <HAL_ADCEx_MultiModeConfigChannel+0xaa>
 80012b0:	2300      	movs	r3, #0
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d15c      	bne.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80012b6:	68bb      	ldr	r3, [r7, #8]
 80012b8:	689b      	ldr	r3, [r3, #8]
 80012ba:	f003 0303 	and.w	r3, r3, #3
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d107      	bne.n	80012d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80012c2:	68bb      	ldr	r3, [r7, #8]
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	f003 0301 	and.w	r3, r3, #1
 80012ca:	2b01      	cmp	r3, #1
 80012cc:	d101      	bne.n	80012d2 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e000      	b.n	80012d4 <HAL_ADCEx_MultiModeConfigChannel+0xcc>
 80012d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d14b      	bne.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80012d8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80012e0:	f023 030f 	bic.w	r3, r3, #15
 80012e4:	683a      	ldr	r2, [r7, #0]
 80012e6:	6811      	ldr	r1, [r2, #0]
 80012e8:	683a      	ldr	r2, [r7, #0]
 80012ea:	6892      	ldr	r2, [r2, #8]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	431a      	orrs	r2, r3
 80012f0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80012f4:	e03c      	b.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80012f6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80012f8:	689b      	ldr	r3, [r3, #8]
 80012fa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80012fe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001300:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	689b      	ldr	r3, [r3, #8]
 8001308:	f003 0303 	and.w	r3, r3, #3
 800130c:	2b01      	cmp	r3, #1
 800130e:	d108      	bne.n	8001322 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f003 0301 	and.w	r3, r3, #1
 800131a:	2b01      	cmp	r3, #1
 800131c:	d101      	bne.n	8001322 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 800131e:	2301      	movs	r3, #1
 8001320:	e000      	b.n	8001324 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8001322:	2300      	movs	r3, #0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d123      	bne.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	2b01      	cmp	r3, #1
 8001332:	d107      	bne.n	8001344 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f003 0301 	and.w	r3, r3, #1
 800133c:	2b01      	cmp	r3, #1
 800133e:	d101      	bne.n	8001344 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001340:	2301      	movs	r3, #1
 8001342:	e000      	b.n	8001346 <HAL_ADCEx_MultiModeConfigChannel+0x13e>
 8001344:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001346:	2b00      	cmp	r3, #0
 8001348:	d112      	bne.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800134a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800134c:	689b      	ldr	r3, [r3, #8]
 800134e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001352:	f023 030f 	bic.w	r3, r3, #15
 8001356:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001358:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800135a:	e009      	b.n	8001370 <HAL_ADCEx_MultiModeConfigChannel+0x168>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	f043 0220 	orr.w	r2, r3, #32
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	641a      	str	r2, [r3, #64]	; 0x40
    
    tmp_hal_status = HAL_ERROR;
 8001368:	2301      	movs	r3, #1
 800136a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 800136e:	e000      	b.n	8001372 <HAL_ADCEx_MultiModeConfigChannel+0x16a>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001370:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	2200      	movs	r2, #0
 8001376:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 800137a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
} 
 800137e:	4618      	mov	r0, r3
 8001380:	3764      	adds	r7, #100	; 0x64
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	50000100 	.word	0x50000100
 8001390:	50000300 	.word	0x50000300

08001394 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001394:	b580      	push	{r7, lr}
 8001396:	b084      	sub	sp, #16
 8001398:	af00      	add	r7, sp, #0
 800139a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800139c:	2300      	movs	r3, #0
 800139e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0303 	and.w	r3, r3, #3
 80013aa:	2b01      	cmp	r3, #1
 80013ac:	d108      	bne.n	80013c0 <ADC_Disable+0x2c>
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d101      	bne.n	80013c0 <ADC_Disable+0x2c>
 80013bc:	2301      	movs	r3, #1
 80013be:	e000      	b.n	80013c2 <ADC_Disable+0x2e>
 80013c0:	2300      	movs	r3, #0
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d047      	beq.n	8001456 <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	689b      	ldr	r3, [r3, #8]
 80013cc:	f003 030d 	and.w	r3, r3, #13
 80013d0:	2b01      	cmp	r3, #1
 80013d2:	d10f      	bne.n	80013f4 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	689a      	ldr	r2, [r3, #8]
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	f042 0202 	orr.w	r2, r2, #2
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	2203      	movs	r2, #3
 80013ea:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 80013ec:	f7ff fa8c 	bl	8000908 <HAL_GetTick>
 80013f0:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 80013f2:	e029      	b.n	8001448 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f8:	f043 0210 	orr.w	r2, r3, #16
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	641a      	str	r2, [r3, #64]	; 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001404:	f043 0201 	orr.w	r2, r3, #1
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	645a      	str	r2, [r3, #68]	; 0x44
      return HAL_ERROR;
 800140c:	2301      	movs	r3, #1
 800140e:	e023      	b.n	8001458 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001410:	f7ff fa7a 	bl	8000908 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b02      	cmp	r3, #2
 800141c:	d914      	bls.n	8001448 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	689b      	ldr	r3, [r3, #8]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b01      	cmp	r3, #1
 800142a:	d10d      	bne.n	8001448 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001430:	f043 0210 	orr.w	r2, r3, #16
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	641a      	str	r2, [r3, #64]	; 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800143c:	f043 0201 	orr.w	r2, r3, #1
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	645a      	str	r2, [r3, #68]	; 0x44

          return HAL_ERROR;
 8001444:	2301      	movs	r3, #1
 8001446:	e007      	b.n	8001458 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	689b      	ldr	r3, [r3, #8]
 800144e:	f003 0301 	and.w	r3, r3, #1
 8001452:	2b01      	cmp	r3, #1
 8001454:	d0dc      	beq.n	8001410 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001456:	2300      	movs	r3, #0
}
 8001458:	4618      	mov	r0, r3
 800145a:	3710      	adds	r7, #16
 800145c:	46bd      	mov	sp, r7
 800145e:	bd80      	pop	{r7, pc}

08001460 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001460:	b480      	push	{r7}
 8001462:	b085      	sub	sp, #20
 8001464:	af00      	add	r7, sp, #0
 8001466:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	f003 0307 	and.w	r3, r3, #7
 800146e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001470:	4b0c      	ldr	r3, [pc, #48]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001472:	68db      	ldr	r3, [r3, #12]
 8001474:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001476:	68ba      	ldr	r2, [r7, #8]
 8001478:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800147c:	4013      	ands	r3, r2
 800147e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001488:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800148c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001490:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001492:	4a04      	ldr	r2, [pc, #16]	; (80014a4 <__NVIC_SetPriorityGrouping+0x44>)
 8001494:	68bb      	ldr	r3, [r7, #8]
 8001496:	60d3      	str	r3, [r2, #12]
}
 8001498:	bf00      	nop
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr
 80014a4:	e000ed00 	.word	0xe000ed00

080014a8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014a8:	b480      	push	{r7}
 80014aa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014ac:	4b04      	ldr	r3, [pc, #16]	; (80014c0 <__NVIC_GetPriorityGrouping+0x18>)
 80014ae:	68db      	ldr	r3, [r3, #12]
 80014b0:	0a1b      	lsrs	r3, r3, #8
 80014b2:	f003 0307 	and.w	r3, r3, #7
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	46bd      	mov	sp, r7
 80014ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014be:	4770      	bx	lr
 80014c0:	e000ed00 	.word	0xe000ed00

080014c4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	4603      	mov	r3, r0
 80014cc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	db0b      	blt.n	80014ee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014d6:	79fb      	ldrb	r3, [r7, #7]
 80014d8:	f003 021f 	and.w	r2, r3, #31
 80014dc:	4907      	ldr	r1, [pc, #28]	; (80014fc <__NVIC_EnableIRQ+0x38>)
 80014de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014e2:	095b      	lsrs	r3, r3, #5
 80014e4:	2001      	movs	r0, #1
 80014e6:	fa00 f202 	lsl.w	r2, r0, r2
 80014ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	e000e100 	.word	0xe000e100

08001500 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4603      	mov	r3, r0
 8001508:	6039      	str	r1, [r7, #0]
 800150a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800150c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001510:	2b00      	cmp	r3, #0
 8001512:	db0a      	blt.n	800152a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	b2da      	uxtb	r2, r3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <__NVIC_SetPriority+0x4c>)
 800151a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800151e:	0112      	lsls	r2, r2, #4
 8001520:	b2d2      	uxtb	r2, r2
 8001522:	440b      	add	r3, r1
 8001524:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001528:	e00a      	b.n	8001540 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	b2da      	uxtb	r2, r3
 800152e:	4908      	ldr	r1, [pc, #32]	; (8001550 <__NVIC_SetPriority+0x50>)
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f003 030f 	and.w	r3, r3, #15
 8001536:	3b04      	subs	r3, #4
 8001538:	0112      	lsls	r2, r2, #4
 800153a:	b2d2      	uxtb	r2, r2
 800153c:	440b      	add	r3, r1
 800153e:	761a      	strb	r2, [r3, #24]
}
 8001540:	bf00      	nop
 8001542:	370c      	adds	r7, #12
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	e000e100 	.word	0xe000e100
 8001550:	e000ed00 	.word	0xe000ed00

08001554 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001554:	b480      	push	{r7}
 8001556:	b089      	sub	sp, #36	; 0x24
 8001558:	af00      	add	r7, sp, #0
 800155a:	60f8      	str	r0, [r7, #12]
 800155c:	60b9      	str	r1, [r7, #8]
 800155e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	f003 0307 	and.w	r3, r3, #7
 8001566:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001568:	69fb      	ldr	r3, [r7, #28]
 800156a:	f1c3 0307 	rsb	r3, r3, #7
 800156e:	2b04      	cmp	r3, #4
 8001570:	bf28      	it	cs
 8001572:	2304      	movcs	r3, #4
 8001574:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001576:	69fb      	ldr	r3, [r7, #28]
 8001578:	3304      	adds	r3, #4
 800157a:	2b06      	cmp	r3, #6
 800157c:	d902      	bls.n	8001584 <NVIC_EncodePriority+0x30>
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3b03      	subs	r3, #3
 8001582:	e000      	b.n	8001586 <NVIC_EncodePriority+0x32>
 8001584:	2300      	movs	r3, #0
 8001586:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001588:	f04f 32ff 	mov.w	r2, #4294967295
 800158c:	69bb      	ldr	r3, [r7, #24]
 800158e:	fa02 f303 	lsl.w	r3, r2, r3
 8001592:	43da      	mvns	r2, r3
 8001594:	68bb      	ldr	r3, [r7, #8]
 8001596:	401a      	ands	r2, r3
 8001598:	697b      	ldr	r3, [r7, #20]
 800159a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800159c:	f04f 31ff 	mov.w	r1, #4294967295
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	fa01 f303 	lsl.w	r3, r1, r3
 80015a6:	43d9      	mvns	r1, r3
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	4313      	orrs	r3, r2
         );
}
 80015ae:	4618      	mov	r0, r3
 80015b0:	3724      	adds	r7, #36	; 0x24
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
	...

080015bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3b01      	subs	r3, #1
 80015c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015cc:	d301      	bcc.n	80015d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ce:	2301      	movs	r3, #1
 80015d0:	e00f      	b.n	80015f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015d2:	4a0a      	ldr	r2, [pc, #40]	; (80015fc <SysTick_Config+0x40>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3b01      	subs	r3, #1
 80015d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015da:	210f      	movs	r1, #15
 80015dc:	f04f 30ff 	mov.w	r0, #4294967295
 80015e0:	f7ff ff8e 	bl	8001500 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015e4:	4b05      	ldr	r3, [pc, #20]	; (80015fc <SysTick_Config+0x40>)
 80015e6:	2200      	movs	r2, #0
 80015e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ea:	4b04      	ldr	r3, [pc, #16]	; (80015fc <SysTick_Config+0x40>)
 80015ec:	2207      	movs	r2, #7
 80015ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015f0:	2300      	movs	r3, #0
}
 80015f2:	4618      	mov	r0, r3
 80015f4:	3708      	adds	r7, #8
 80015f6:	46bd      	mov	sp, r7
 80015f8:	bd80      	pop	{r7, pc}
 80015fa:	bf00      	nop
 80015fc:	e000e010 	.word	0xe000e010

08001600 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b082      	sub	sp, #8
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff ff29 	bl	8001460 <__NVIC_SetPriorityGrouping>
}
 800160e:	bf00      	nop
 8001610:	3708      	adds	r7, #8
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}

08001616 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001616:	b580      	push	{r7, lr}
 8001618:	b086      	sub	sp, #24
 800161a:	af00      	add	r7, sp, #0
 800161c:	4603      	mov	r3, r0
 800161e:	60b9      	str	r1, [r7, #8]
 8001620:	607a      	str	r2, [r7, #4]
 8001622:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001628:	f7ff ff3e 	bl	80014a8 <__NVIC_GetPriorityGrouping>
 800162c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800162e:	687a      	ldr	r2, [r7, #4]
 8001630:	68b9      	ldr	r1, [r7, #8]
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff ff8e 	bl	8001554 <NVIC_EncodePriority>
 8001638:	4602      	mov	r2, r0
 800163a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800163e:	4611      	mov	r1, r2
 8001640:	4618      	mov	r0, r3
 8001642:	f7ff ff5d 	bl	8001500 <__NVIC_SetPriority>
}
 8001646:	bf00      	nop
 8001648:	3718      	adds	r7, #24
 800164a:	46bd      	mov	sp, r7
 800164c:	bd80      	pop	{r7, pc}

0800164e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800164e:	b580      	push	{r7, lr}
 8001650:	b082      	sub	sp, #8
 8001652:	af00      	add	r7, sp, #0
 8001654:	4603      	mov	r3, r0
 8001656:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001658:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff31 	bl	80014c4 <__NVIC_EnableIRQ>
}
 8001662:	bf00      	nop
 8001664:	3708      	adds	r7, #8
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}

0800166a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800166a:	b580      	push	{r7, lr}
 800166c:	b082      	sub	sp, #8
 800166e:	af00      	add	r7, sp, #0
 8001670:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001672:	6878      	ldr	r0, [r7, #4]
 8001674:	f7ff ffa2 	bl	80015bc <SysTick_Config>
 8001678:	4603      	mov	r3, r0
}
 800167a:	4618      	mov	r0, r3
 800167c:	3708      	adds	r7, #8
 800167e:	46bd      	mov	sp, r7
 8001680:	bd80      	pop	{r7, pc}

08001682 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001682:	b480      	push	{r7}
 8001684:	b083      	sub	sp, #12
 8001686:	af00      	add	r7, sp, #0
 8001688:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001690:	2b02      	cmp	r3, #2
 8001692:	d008      	beq.n	80016a6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2204      	movs	r2, #4
 8001698:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2200      	movs	r2, #0
 800169e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80016a2:	2301      	movs	r3, #1
 80016a4:	e020      	b.n	80016e8 <HAL_DMA_Abort+0x66>
  }
  else
  {
    /* Disable DMA IT */
     hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	681a      	ldr	r2, [r3, #0]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	f022 020e 	bic.w	r2, r2, #14
 80016b4:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	681a      	ldr	r2, [r3, #0]
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f022 0201 	bic.w	r2, r2, #1
 80016c4:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ce:	2101      	movs	r1, #1
 80016d0:	fa01 f202 	lsl.w	r2, r1, r2
 80016d4:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY; 
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	2201      	movs	r2, #1
 80016da:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  
  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	2200      	movs	r2, #0
 80016e2:	f883 2020 	strb.w	r2, [r3, #32]
  
  return HAL_OK;
 80016e6:	2300      	movs	r3, #0
}
 80016e8:	4618      	mov	r0, r3
 80016ea:	370c      	adds	r7, #12
 80016ec:	46bd      	mov	sp, r7
 80016ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f2:	4770      	bx	lr

080016f4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016fc:	2300      	movs	r3, #0
 80016fe:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8001706:	2b02      	cmp	r3, #2
 8001708:	d005      	beq.n	8001716 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	2204      	movs	r2, #4
 800170e:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8001710:	2301      	movs	r3, #1
 8001712:	73fb      	strb	r3, [r7, #15]
 8001714:	e027      	b.n	8001766 <HAL_DMA_Abort_IT+0x72>
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	681a      	ldr	r2, [r3, #0]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 020e 	bic.w	r2, r2, #14
 8001724:	601a      	str	r2, [r3, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	681a      	ldr	r2, [r3, #0]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 0201 	bic.w	r2, r2, #1
 8001734:	601a      	str	r2, [r3, #0]
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800173e:	2101      	movs	r1, #1
 8001740:	fa01 f202 	lsl.w	r2, r1, r2
 8001744:	605a      	str	r2, [r3, #4]
    
    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2201      	movs	r2, #1
 800174a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2200      	movs	r2, #0
 8001752:	f883 2020 	strb.w	r2, [r3, #32]
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	4798      	blx	r3
    } 
  }
  return status;
 8001766:	7bfb      	ldrb	r3, [r7, #15]
}
 8001768:	4618      	mov	r0, r3
 800176a:	3710      	adds	r7, #16
 800176c:	46bd      	mov	sp, r7
 800176e:	bd80      	pop	{r7, pc}

08001770 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001770:	b480      	push	{r7}
 8001772:	b087      	sub	sp, #28
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800177e:	e14e      	b.n	8001a1e <HAL_GPIO_Init+0x2ae>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	681a      	ldr	r2, [r3, #0]
 8001784:	2101      	movs	r1, #1
 8001786:	697b      	ldr	r3, [r7, #20]
 8001788:	fa01 f303 	lsl.w	r3, r1, r3
 800178c:	4013      	ands	r3, r2
 800178e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2b00      	cmp	r3, #0
 8001794:	f000 8140 	beq.w	8001a18 <HAL_GPIO_Init+0x2a8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	685b      	ldr	r3, [r3, #4]
 800179c:	f003 0303 	and.w	r3, r3, #3
 80017a0:	2b01      	cmp	r3, #1
 80017a2:	d005      	beq.n	80017b0 <HAL_GPIO_Init+0x40>
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0303 	and.w	r3, r3, #3
 80017ac:	2b02      	cmp	r3, #2
 80017ae:	d130      	bne.n	8001812 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	689b      	ldr	r3, [r3, #8]
 80017b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	2203      	movs	r2, #3
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	4013      	ands	r3, r2
 80017c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	68da      	ldr	r2, [r3, #12]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	005b      	lsls	r3, r3, #1
 80017d0:	fa02 f303 	lsl.w	r3, r2, r3
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	4313      	orrs	r3, r2
 80017d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	693a      	ldr	r2, [r7, #16]
 80017de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017e6:	2201      	movs	r2, #1
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	43db      	mvns	r3, r3
 80017f0:	693a      	ldr	r2, [r7, #16]
 80017f2:	4013      	ands	r3, r2
 80017f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	091b      	lsrs	r3, r3, #4
 80017fc:	f003 0201 	and.w	r2, r3, #1
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	693a      	ldr	r2, [r7, #16]
 8001808:	4313      	orrs	r3, r2
 800180a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	685b      	ldr	r3, [r3, #4]
 8001816:	f003 0303 	and.w	r3, r3, #3
 800181a:	2b03      	cmp	r3, #3
 800181c:	d017      	beq.n	800184e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	68db      	ldr	r3, [r3, #12]
 8001822:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	005b      	lsls	r3, r3, #1
 8001828:	2203      	movs	r2, #3
 800182a:	fa02 f303 	lsl.w	r3, r2, r3
 800182e:	43db      	mvns	r3, r3
 8001830:	693a      	ldr	r2, [r7, #16]
 8001832:	4013      	ands	r3, r2
 8001834:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	689a      	ldr	r2, [r3, #8]
 800183a:	697b      	ldr	r3, [r7, #20]
 800183c:	005b      	lsls	r3, r3, #1
 800183e:	fa02 f303 	lsl.w	r3, r2, r3
 8001842:	693a      	ldr	r2, [r7, #16]
 8001844:	4313      	orrs	r3, r2
 8001846:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	693a      	ldr	r2, [r7, #16]
 800184c:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	f003 0303 	and.w	r3, r3, #3
 8001856:	2b02      	cmp	r3, #2
 8001858:	d123      	bne.n	80018a2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800185a:	697b      	ldr	r3, [r7, #20]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001866:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	f003 0307 	and.w	r3, r3, #7
 800186e:	009b      	lsls	r3, r3, #2
 8001870:	220f      	movs	r2, #15
 8001872:	fa02 f303 	lsl.w	r3, r2, r3
 8001876:	43db      	mvns	r3, r3
 8001878:	693a      	ldr	r2, [r7, #16]
 800187a:	4013      	ands	r3, r2
 800187c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	691a      	ldr	r2, [r3, #16]
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	f003 0307 	and.w	r3, r3, #7
 8001888:	009b      	lsls	r3, r3, #2
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	4313      	orrs	r3, r2
 8001892:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	08da      	lsrs	r2, r3, #3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	3208      	adds	r2, #8
 800189c:	6939      	ldr	r1, [r7, #16]
 800189e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80018a8:	697b      	ldr	r3, [r7, #20]
 80018aa:	005b      	lsls	r3, r3, #1
 80018ac:	2203      	movs	r2, #3
 80018ae:	fa02 f303 	lsl.w	r3, r2, r3
 80018b2:	43db      	mvns	r3, r3
 80018b4:	693a      	ldr	r2, [r7, #16]
 80018b6:	4013      	ands	r3, r2
 80018b8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f003 0203 	and.w	r2, r3, #3
 80018c2:	697b      	ldr	r3, [r7, #20]
 80018c4:	005b      	lsls	r3, r3, #1
 80018c6:	fa02 f303 	lsl.w	r3, r2, r3
 80018ca:	693a      	ldr	r2, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	693a      	ldr	r2, [r7, #16]
 80018d4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80018d6:	683b      	ldr	r3, [r7, #0]
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	f000 809a 	beq.w	8001a18 <HAL_GPIO_Init+0x2a8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e4:	4b55      	ldr	r3, [pc, #340]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	4a54      	ldr	r2, [pc, #336]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 80018ea:	f043 0301 	orr.w	r3, r3, #1
 80018ee:	6193      	str	r3, [r2, #24]
 80018f0:	4b52      	ldr	r3, [pc, #328]	; (8001a3c <HAL_GPIO_Init+0x2cc>)
 80018f2:	699b      	ldr	r3, [r3, #24]
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	60bb      	str	r3, [r7, #8]
 80018fa:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80018fc:	4a50      	ldr	r2, [pc, #320]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	089b      	lsrs	r3, r3, #2
 8001902:	3302      	adds	r3, #2
 8001904:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001908:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	220f      	movs	r2, #15
 8001914:	fa02 f303 	lsl.w	r3, r2, r3
 8001918:	43db      	mvns	r3, r3
 800191a:	693a      	ldr	r2, [r7, #16]
 800191c:	4013      	ands	r3, r2
 800191e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001926:	d013      	beq.n	8001950 <HAL_GPIO_Init+0x1e0>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a46      	ldr	r2, [pc, #280]	; (8001a44 <HAL_GPIO_Init+0x2d4>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d00d      	beq.n	800194c <HAL_GPIO_Init+0x1dc>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a45      	ldr	r2, [pc, #276]	; (8001a48 <HAL_GPIO_Init+0x2d8>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d007      	beq.n	8001948 <HAL_GPIO_Init+0x1d8>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a44      	ldr	r2, [pc, #272]	; (8001a4c <HAL_GPIO_Init+0x2dc>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d101      	bne.n	8001944 <HAL_GPIO_Init+0x1d4>
 8001940:	2303      	movs	r3, #3
 8001942:	e006      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001944:	2305      	movs	r3, #5
 8001946:	e004      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001948:	2302      	movs	r3, #2
 800194a:	e002      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <HAL_GPIO_Init+0x1e2>
 8001950:	2300      	movs	r3, #0
 8001952:	697a      	ldr	r2, [r7, #20]
 8001954:	f002 0203 	and.w	r2, r2, #3
 8001958:	0092      	lsls	r2, r2, #2
 800195a:	4093      	lsls	r3, r2
 800195c:	693a      	ldr	r2, [r7, #16]
 800195e:	4313      	orrs	r3, r2
 8001960:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001962:	4937      	ldr	r1, [pc, #220]	; (8001a40 <HAL_GPIO_Init+0x2d0>)
 8001964:	697b      	ldr	r3, [r7, #20]
 8001966:	089b      	lsrs	r3, r3, #2
 8001968:	3302      	adds	r3, #2
 800196a:	693a      	ldr	r2, [r7, #16]
 800196c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001970:	4b37      	ldr	r3, [pc, #220]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001976:	68fb      	ldr	r3, [r7, #12]
 8001978:	43db      	mvns	r3, r3
 800197a:	693a      	ldr	r2, [r7, #16]
 800197c:	4013      	ands	r3, r2
 800197e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x224>
        {
          temp |= iocurrent;
 800198c:	693a      	ldr	r2, [r7, #16]
 800198e:	68fb      	ldr	r3, [r7, #12]
 8001990:	4313      	orrs	r3, r2
 8001992:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001994:	4a2e      	ldr	r2, [pc, #184]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 8001996:	693b      	ldr	r3, [r7, #16]
 8001998:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800199a:	4b2d      	ldr	r3, [pc, #180]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 800199c:	68db      	ldr	r3, [r3, #12]
 800199e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4013      	ands	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x24e>
        {
          temp |= iocurrent;
 80019b6:	693a      	ldr	r2, [r7, #16]
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80019be:	4a24      	ldr	r2, [pc, #144]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80019c4:	4b22      	ldr	r3, [pc, #136]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	693a      	ldr	r2, [r7, #16]
 80019d0:	4013      	ands	r3, r2
 80019d2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x278>
        {
          temp |= iocurrent;
 80019e0:	693a      	ldr	r2, [r7, #16]
 80019e2:	68fb      	ldr	r3, [r7, #12]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80019e8:	4a19      	ldr	r2, [pc, #100]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 80019ea:	693b      	ldr	r3, [r7, #16]
 80019ec:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019ee:	4b18      	ldr	r3, [pc, #96]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 80019f0:	681b      	ldr	r3, [r3, #0]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	43db      	mvns	r3, r3
 80019f8:	693a      	ldr	r2, [r7, #16]
 80019fa:	4013      	ands	r3, r2
 80019fc:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80019fe:	683b      	ldr	r3, [r7, #0]
 8001a00:	685b      	ldr	r3, [r3, #4]
 8001a02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001a06:	2b00      	cmp	r3, #0
 8001a08:	d003      	beq.n	8001a12 <HAL_GPIO_Init+0x2a2>
        {
          temp |= iocurrent;
 8001a0a:	693a      	ldr	r2, [r7, #16]
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4313      	orrs	r3, r2
 8001a10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001a12:	4a0f      	ldr	r2, [pc, #60]	; (8001a50 <HAL_GPIO_Init+0x2e0>)
 8001a14:	693b      	ldr	r3, [r7, #16]
 8001a16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	681a      	ldr	r2, [r3, #0]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa22 f303 	lsr.w	r3, r2, r3
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	f47f aea9 	bne.w	8001780 <HAL_GPIO_Init+0x10>
  }
}
 8001a2e:	bf00      	nop
 8001a30:	bf00      	nop
 8001a32:	371c      	adds	r7, #28
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr
 8001a3c:	40021000 	.word	0x40021000
 8001a40:	40010000 	.word	0x40010000
 8001a44:	48000400 	.word	0x48000400
 8001a48:	48000800 	.word	0x48000800
 8001a4c:	48000c00 	.word	0x48000c00
 8001a50:	40010400 	.word	0x40010400

08001a54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
 8001a5c:	460b      	mov	r3, r1
 8001a5e:	807b      	strh	r3, [r7, #2]
 8001a60:	4613      	mov	r3, r2
 8001a62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a64:	787b      	ldrb	r3, [r7, #1]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d003      	beq.n	8001a72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001a6a:	887a      	ldrh	r2, [r7, #2]
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001a70:	e002      	b.n	8001a78 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001a72:	887a      	ldrh	r2, [r7, #2]
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001a78:	bf00      	nop
 8001a7a:	370c      	adds	r7, #12
 8001a7c:	46bd      	mov	sp, r7
 8001a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a82:	4770      	bx	lr

08001a84 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a90:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a94:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001a96:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001a9a:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001aa4:	2301      	movs	r3, #1
 8001aa6:	f001 b823 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001aaa:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001aae:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	f000 817d 	beq.w	8001dba <HAL_RCC_OscConfig+0x336>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ac0:	4bbc      	ldr	r3, [pc, #752]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	f003 030c 	and.w	r3, r3, #12
 8001ac8:	2b04      	cmp	r3, #4
 8001aca:	d00c      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001acc:	4bb9      	ldr	r3, [pc, #740]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	f003 030c 	and.w	r3, r3, #12
 8001ad4:	2b08      	cmp	r3, #8
 8001ad6:	d15c      	bne.n	8001b92 <HAL_RCC_OscConfig+0x10e>
 8001ad8:	4bb6      	ldr	r3, [pc, #728]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001ada:	685b      	ldr	r3, [r3, #4]
 8001adc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ae0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ae4:	d155      	bne.n	8001b92 <HAL_RCC_OscConfig+0x10e>
 8001ae6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001aea:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aee:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
 8001af2:	fa93 f3a3 	rbit	r3, r3
 8001af6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001afa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001afe:	fab3 f383 	clz	r3, r3
 8001b02:	b2db      	uxtb	r3, r3
 8001b04:	095b      	lsrs	r3, r3, #5
 8001b06:	b2db      	uxtb	r3, r3
 8001b08:	f043 0301 	orr.w	r3, r3, #1
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b01      	cmp	r3, #1
 8001b10:	d102      	bne.n	8001b18 <HAL_RCC_OscConfig+0x94>
 8001b12:	4ba8      	ldr	r3, [pc, #672]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	e015      	b.n	8001b44 <HAL_RCC_OscConfig+0xc0>
 8001b18:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b1c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b20:	f8d7 31e8 	ldr.w	r3, [r7, #488]	; 0x1e8
 8001b24:	fa93 f3a3 	rbit	r3, r3
 8001b28:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001b2c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b30:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001b34:	f8d7 31e0 	ldr.w	r3, [r7, #480]	; 0x1e0
 8001b38:	fa93 f3a3 	rbit	r3, r3
 8001b3c:	f8c7 31dc 	str.w	r3, [r7, #476]	; 0x1dc
 8001b40:	4b9c      	ldr	r3, [pc, #624]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001b48:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
 8001b4c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001b50:	fa92 f2a2 	rbit	r2, r2
 8001b54:	f8c7 21d4 	str.w	r2, [r7, #468]	; 0x1d4
  return result;
 8001b58:	f8d7 21d4 	ldr.w	r2, [r7, #468]	; 0x1d4
 8001b5c:	fab2 f282 	clz	r2, r2
 8001b60:	b2d2      	uxtb	r2, r2
 8001b62:	f042 0220 	orr.w	r2, r2, #32
 8001b66:	b2d2      	uxtb	r2, r2
 8001b68:	f002 021f 	and.w	r2, r2, #31
 8001b6c:	2101      	movs	r1, #1
 8001b6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001b72:	4013      	ands	r3, r2
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 811f 	beq.w	8001db8 <HAL_RCC_OscConfig+0x334>
 8001b7a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b7e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	685b      	ldr	r3, [r3, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	f040 8116 	bne.w	8001db8 <HAL_RCC_OscConfig+0x334>
      {
        return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	f000 bfaf 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001b92:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001b96:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001ba2:	d106      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x12e>
 8001ba4:	4b83      	ldr	r3, [pc, #524]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4a82      	ldr	r2, [pc, #520]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001bae:	6013      	str	r3, [r2, #0]
 8001bb0:	e036      	b.n	8001c20 <HAL_RCC_OscConfig+0x19c>
 8001bb2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001bb6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d10c      	bne.n	8001bdc <HAL_RCC_OscConfig+0x158>
 8001bc2:	4b7c      	ldr	r3, [pc, #496]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a7b      	ldr	r2, [pc, #492]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bc8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001bcc:	6013      	str	r3, [r2, #0]
 8001bce:	4b79      	ldr	r3, [pc, #484]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	4a78      	ldr	r2, [pc, #480]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bd4:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001bd8:	6013      	str	r3, [r2, #0]
 8001bda:	e021      	b.n	8001c20 <HAL_RCC_OscConfig+0x19c>
 8001bdc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001be0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001bec:	d10c      	bne.n	8001c08 <HAL_RCC_OscConfig+0x184>
 8001bee:	4b71      	ldr	r3, [pc, #452]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a70      	ldr	r2, [pc, #448]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bf4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001bf8:	6013      	str	r3, [r2, #0]
 8001bfa:	4b6e      	ldr	r3, [pc, #440]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	4a6d      	ldr	r2, [pc, #436]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c04:	6013      	str	r3, [r2, #0]
 8001c06:	e00b      	b.n	8001c20 <HAL_RCC_OscConfig+0x19c>
 8001c08:	4b6a      	ldr	r3, [pc, #424]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	4a69      	ldr	r2, [pc, #420]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c12:	6013      	str	r3, [r2, #0]
 8001c14:	4b67      	ldr	r3, [pc, #412]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	4a66      	ldr	r2, [pc, #408]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c1e:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c20:	4b64      	ldr	r3, [pc, #400]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c24:	f023 020f 	bic.w	r2, r3, #15
 8001c28:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c2c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	495f      	ldr	r1, [pc, #380]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c36:	4313      	orrs	r3, r2
 8001c38:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c3a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001c3e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d059      	beq.n	8001cfe <HAL_RCC_OscConfig+0x27a>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c4a:	f7fe fe5d 	bl	8000908 <HAL_GetTick>
 8001c4e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c52:	e00a      	b.n	8001c6a <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001c54:	f7fe fe58 	bl	8000908 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001c5e:	1ad3      	subs	r3, r2, r3
 8001c60:	2b64      	cmp	r3, #100	; 0x64
 8001c62:	d902      	bls.n	8001c6a <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8001c64:	2303      	movs	r3, #3
 8001c66:	f000 bf43 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
 8001c6a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c6e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8001c76:	fa93 f3a3 	rbit	r3, r3
 8001c7a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
  return result;
 8001c7e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c82:	fab3 f383 	clz	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	095b      	lsrs	r3, r3, #5
 8001c8a:	b2db      	uxtb	r3, r3
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	b2db      	uxtb	r3, r3
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d102      	bne.n	8001c9c <HAL_RCC_OscConfig+0x218>
 8001c96:	4b47      	ldr	r3, [pc, #284]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	e015      	b.n	8001cc8 <HAL_RCC_OscConfig+0x244>
 8001c9c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ca0:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ca4:	f8d7 31c8 	ldr.w	r3, [r7, #456]	; 0x1c8
 8001ca8:	fa93 f3a3 	rbit	r3, r3
 8001cac:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001cb0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cb4:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001cb8:	f8d7 31c0 	ldr.w	r3, [r7, #448]	; 0x1c0
 8001cbc:	fa93 f3a3 	rbit	r3, r3
 8001cc0:	f8c7 31bc 	str.w	r3, [r7, #444]	; 0x1bc
 8001cc4:	4b3b      	ldr	r3, [pc, #236]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001ccc:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
 8001cd0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001cd4:	fa92 f2a2 	rbit	r2, r2
 8001cd8:	f8c7 21b4 	str.w	r2, [r7, #436]	; 0x1b4
  return result;
 8001cdc:	f8d7 21b4 	ldr.w	r2, [r7, #436]	; 0x1b4
 8001ce0:	fab2 f282 	clz	r2, r2
 8001ce4:	b2d2      	uxtb	r2, r2
 8001ce6:	f042 0220 	orr.w	r2, r2, #32
 8001cea:	b2d2      	uxtb	r2, r2
 8001cec:	f002 021f 	and.w	r2, r2, #31
 8001cf0:	2101      	movs	r1, #1
 8001cf2:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d0ab      	beq.n	8001c54 <HAL_RCC_OscConfig+0x1d0>
 8001cfc:	e05d      	b.n	8001dba <HAL_RCC_OscConfig+0x336>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001cfe:	f7fe fe03 	bl	8000908 <HAL_GetTick>
 8001d02:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d06:	e00a      	b.n	8001d1e <HAL_RCC_OscConfig+0x29a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d08:	f7fe fdfe 	bl	8000908 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	2b64      	cmp	r3, #100	; 0x64
 8001d16:	d902      	bls.n	8001d1e <HAL_RCC_OscConfig+0x29a>
          {
            return HAL_TIMEOUT;
 8001d18:	2303      	movs	r3, #3
 8001d1a:	f000 bee9 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
 8001d1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d22:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d26:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
 8001d2a:	fa93 f3a3 	rbit	r3, r3
 8001d2e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
  return result;
 8001d32:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d36:	fab3 f383 	clz	r3, r3
 8001d3a:	b2db      	uxtb	r3, r3
 8001d3c:	095b      	lsrs	r3, r3, #5
 8001d3e:	b2db      	uxtb	r3, r3
 8001d40:	f043 0301 	orr.w	r3, r3, #1
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	2b01      	cmp	r3, #1
 8001d48:	d102      	bne.n	8001d50 <HAL_RCC_OscConfig+0x2cc>
 8001d4a:	4b1a      	ldr	r3, [pc, #104]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	e015      	b.n	8001d7c <HAL_RCC_OscConfig+0x2f8>
 8001d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d54:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d58:	f8d7 31a8 	ldr.w	r3, [r7, #424]	; 0x1a8
 8001d5c:	fa93 f3a3 	rbit	r3, r3
 8001d60:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001d64:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d68:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001d6c:	f8d7 31a0 	ldr.w	r3, [r7, #416]	; 0x1a0
 8001d70:	fa93 f3a3 	rbit	r3, r3
 8001d74:	f8c7 319c 	str.w	r3, [r7, #412]	; 0x19c
 8001d78:	4b0e      	ldr	r3, [pc, #56]	; (8001db4 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d7c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d80:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
 8001d84:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001d88:	fa92 f2a2 	rbit	r2, r2
 8001d8c:	f8c7 2194 	str.w	r2, [r7, #404]	; 0x194
  return result;
 8001d90:	f8d7 2194 	ldr.w	r2, [r7, #404]	; 0x194
 8001d94:	fab2 f282 	clz	r2, r2
 8001d98:	b2d2      	uxtb	r2, r2
 8001d9a:	f042 0220 	orr.w	r2, r2, #32
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f002 021f 	and.w	r2, r2, #31
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d1ab      	bne.n	8001d08 <HAL_RCC_OscConfig+0x284>
 8001db0:	e003      	b.n	8001dba <HAL_RCC_OscConfig+0x336>
 8001db2:	bf00      	nop
 8001db4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dba:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001dbe:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	f003 0302 	and.w	r3, r3, #2
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f000 817d 	beq.w	80020ca <HAL_RCC_OscConfig+0x646>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001dd0:	4ba6      	ldr	r3, [pc, #664]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f003 030c 	and.w	r3, r3, #12
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d00b      	beq.n	8001df4 <HAL_RCC_OscConfig+0x370>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001ddc:	4ba3      	ldr	r3, [pc, #652]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b08      	cmp	r3, #8
 8001de6:	d172      	bne.n	8001ece <HAL_RCC_OscConfig+0x44a>
 8001de8:	4ba0      	ldr	r3, [pc, #640]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d16c      	bne.n	8001ece <HAL_RCC_OscConfig+0x44a>
 8001df4:	2302      	movs	r3, #2
 8001df6:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfa:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
  return result;
 8001e06:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e0a:	fab3 f383 	clz	r3, r3
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	095b      	lsrs	r3, r3, #5
 8001e12:	b2db      	uxtb	r3, r3
 8001e14:	f043 0301 	orr.w	r3, r3, #1
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	2b01      	cmp	r3, #1
 8001e1c:	d102      	bne.n	8001e24 <HAL_RCC_OscConfig+0x3a0>
 8001e1e:	4b93      	ldr	r3, [pc, #588]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	e013      	b.n	8001e4c <HAL_RCC_OscConfig+0x3c8>
 8001e24:	2302      	movs	r3, #2
 8001e26:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	f8d7 3188 	ldr.w	r3, [r7, #392]	; 0x188
 8001e2e:	fa93 f3a3 	rbit	r3, r3
 8001e32:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e36:	2302      	movs	r3, #2
 8001e38:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e3c:	f8d7 3180 	ldr.w	r3, [r7, #384]	; 0x180
 8001e40:	fa93 f3a3 	rbit	r3, r3
 8001e44:	f8c7 317c 	str.w	r3, [r7, #380]	; 0x17c
 8001e48:	4b88      	ldr	r3, [pc, #544]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e4c:	2202      	movs	r2, #2
 8001e4e:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
 8001e52:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001e56:	fa92 f2a2 	rbit	r2, r2
 8001e5a:	f8c7 2174 	str.w	r2, [r7, #372]	; 0x174
  return result;
 8001e5e:	f8d7 2174 	ldr.w	r2, [r7, #372]	; 0x174
 8001e62:	fab2 f282 	clz	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f042 0220 	orr.w	r2, r2, #32
 8001e6c:	b2d2      	uxtb	r2, r2
 8001e6e:	f002 021f 	and.w	r2, r2, #31
 8001e72:	2101      	movs	r1, #1
 8001e74:	fa01 f202 	lsl.w	r2, r1, r2
 8001e78:	4013      	ands	r3, r2
 8001e7a:	2b00      	cmp	r3, #0
 8001e7c:	d00a      	beq.n	8001e94 <HAL_RCC_OscConfig+0x410>
 8001e7e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001e82:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d002      	beq.n	8001e94 <HAL_RCC_OscConfig+0x410>
      {
        return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	f000 be2e 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e94:	4b75      	ldr	r3, [pc, #468]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e9c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ea0:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	695b      	ldr	r3, [r3, #20]
 8001ea8:	21f8      	movs	r1, #248	; 0xf8
 8001eaa:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eae:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 8001eb2:	fa91 f1a1 	rbit	r1, r1
 8001eb6:	f8c7 116c 	str.w	r1, [r7, #364]	; 0x16c
  return result;
 8001eba:	f8d7 116c 	ldr.w	r1, [r7, #364]	; 0x16c
 8001ebe:	fab1 f181 	clz	r1, r1
 8001ec2:	b2c9      	uxtb	r1, r1
 8001ec4:	408b      	lsls	r3, r1
 8001ec6:	4969      	ldr	r1, [pc, #420]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001ec8:	4313      	orrs	r3, r2
 8001eca:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ecc:	e0fd      	b.n	80020ca <HAL_RCC_OscConfig+0x646>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ece:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001ed2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	691b      	ldr	r3, [r3, #16]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	f000 8088 	beq.w	8001ff0 <HAL_RCC_OscConfig+0x56c>
 8001ee0:	2301      	movs	r3, #1
 8001ee2:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
 8001eea:	fa93 f3a3 	rbit	r3, r3
 8001eee:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
  return result;
 8001ef2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef6:	fab3 f383 	clz	r3, r3
 8001efa:	b2db      	uxtb	r3, r3
 8001efc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f00:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f04:	009b      	lsls	r3, r3, #2
 8001f06:	461a      	mov	r2, r3
 8001f08:	2301      	movs	r3, #1
 8001f0a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7fe fcfc 	bl	8000908 <HAL_GetTick>
 8001f10:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f14:	e00a      	b.n	8001f2c <HAL_RCC_OscConfig+0x4a8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f16:	f7fe fcf7 	bl	8000908 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	2b02      	cmp	r3, #2
 8001f24:	d902      	bls.n	8001f2c <HAL_RCC_OscConfig+0x4a8>
          {
            return HAL_TIMEOUT;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f000 bde2 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f32:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
  return result;
 8001f3e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f42:	fab3 f383 	clz	r3, r3
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	095b      	lsrs	r3, r3, #5
 8001f4a:	b2db      	uxtb	r3, r3
 8001f4c:	f043 0301 	orr.w	r3, r3, #1
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	2b01      	cmp	r3, #1
 8001f54:	d102      	bne.n	8001f5c <HAL_RCC_OscConfig+0x4d8>
 8001f56:	4b45      	ldr	r3, [pc, #276]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	e013      	b.n	8001f84 <HAL_RCC_OscConfig+0x500>
 8001f5c:	2302      	movs	r3, #2
 8001f5e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f62:	f8d7 3158 	ldr.w	r3, [r7, #344]	; 0x158
 8001f66:	fa93 f3a3 	rbit	r3, r3
 8001f6a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001f6e:	2302      	movs	r3, #2
 8001f70:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001f74:	f8d7 3150 	ldr.w	r3, [r7, #336]	; 0x150
 8001f78:	fa93 f3a3 	rbit	r3, r3
 8001f7c:	f8c7 314c 	str.w	r3, [r7, #332]	; 0x14c
 8001f80:	4b3a      	ldr	r3, [pc, #232]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001f82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f84:	2202      	movs	r2, #2
 8001f86:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
 8001f8a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001f8e:	fa92 f2a2 	rbit	r2, r2
 8001f92:	f8c7 2144 	str.w	r2, [r7, #324]	; 0x144
  return result;
 8001f96:	f8d7 2144 	ldr.w	r2, [r7, #324]	; 0x144
 8001f9a:	fab2 f282 	clz	r2, r2
 8001f9e:	b2d2      	uxtb	r2, r2
 8001fa0:	f042 0220 	orr.w	r2, r2, #32
 8001fa4:	b2d2      	uxtb	r2, r2
 8001fa6:	f002 021f 	and.w	r2, r2, #31
 8001faa:	2101      	movs	r1, #1
 8001fac:	fa01 f202 	lsl.w	r2, r1, r2
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d0af      	beq.n	8001f16 <HAL_RCC_OscConfig+0x492>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001fb6:	4b2d      	ldr	r3, [pc, #180]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001fbe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8001fc2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	695b      	ldr	r3, [r3, #20]
 8001fca:	21f8      	movs	r1, #248	; 0xf8
 8001fcc:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd0:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001fd4:	fa91 f1a1 	rbit	r1, r1
 8001fd8:	f8c7 113c 	str.w	r1, [r7, #316]	; 0x13c
  return result;
 8001fdc:	f8d7 113c 	ldr.w	r1, [r7, #316]	; 0x13c
 8001fe0:	fab1 f181 	clz	r1, r1
 8001fe4:	b2c9      	uxtb	r1, r1
 8001fe6:	408b      	lsls	r3, r1
 8001fe8:	4920      	ldr	r1, [pc, #128]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8001fea:	4313      	orrs	r3, r2
 8001fec:	600b      	str	r3, [r1, #0]
 8001fee:	e06c      	b.n	80020ca <HAL_RCC_OscConfig+0x646>
 8001ff0:	2301      	movs	r3, #1
 8001ff2:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
 8001ffa:	fa93 f3a3 	rbit	r3, r3
 8001ffe:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
  return result;
 8002002:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002006:	fab3 f383 	clz	r3, r3
 800200a:	b2db      	uxtb	r3, r3
 800200c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002010:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002014:	009b      	lsls	r3, r3, #2
 8002016:	461a      	mov	r2, r3
 8002018:	2300      	movs	r3, #0
 800201a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800201c:	f7fe fc74 	bl	8000908 <HAL_GetTick>
 8002020:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x5b8>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002026:	f7fe fc6f 	bl	8000908 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002030:	1ad3      	subs	r3, r2, r3
 8002032:	2b02      	cmp	r3, #2
 8002034:	d902      	bls.n	800203c <HAL_RCC_OscConfig+0x5b8>
          {
            return HAL_TIMEOUT;
 8002036:	2303      	movs	r3, #3
 8002038:	f000 bd5a 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
 800203c:	2302      	movs	r3, #2
 800203e:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002042:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
 8002046:	fa93 f3a3 	rbit	r3, r3
 800204a:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
  return result;
 800204e:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002052:	fab3 f383 	clz	r3, r3
 8002056:	b2db      	uxtb	r3, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	f043 0301 	orr.w	r3, r3, #1
 8002060:	b2db      	uxtb	r3, r3
 8002062:	2b01      	cmp	r3, #1
 8002064:	d104      	bne.n	8002070 <HAL_RCC_OscConfig+0x5ec>
 8002066:	4b01      	ldr	r3, [pc, #4]	; (800206c <HAL_RCC_OscConfig+0x5e8>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	e015      	b.n	8002098 <HAL_RCC_OscConfig+0x614>
 800206c:	40021000 	.word	0x40021000
 8002070:	2302      	movs	r3, #2
 8002072:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002076:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 800207a:	fa93 f3a3 	rbit	r3, r3
 800207e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8002082:	2302      	movs	r3, #2
 8002084:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002088:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 800208c:	fa93 f3a3 	rbit	r3, r3
 8002090:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
 8002094:	4bc8      	ldr	r3, [pc, #800]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 8002096:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002098:	2202      	movs	r2, #2
 800209a:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
 800209e:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020a2:	fa92 f2a2 	rbit	r2, r2
 80020a6:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
  return result;
 80020aa:	f8d7 2114 	ldr.w	r2, [r7, #276]	; 0x114
 80020ae:	fab2 f282 	clz	r2, r2
 80020b2:	b2d2      	uxtb	r2, r2
 80020b4:	f042 0220 	orr.w	r2, r2, #32
 80020b8:	b2d2      	uxtb	r2, r2
 80020ba:	f002 021f 	and.w	r2, r2, #31
 80020be:	2101      	movs	r1, #1
 80020c0:	fa01 f202 	lsl.w	r2, r1, r2
 80020c4:	4013      	ands	r3, r2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1ad      	bne.n	8002026 <HAL_RCC_OscConfig+0x5a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020ca:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020ce:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0308 	and.w	r3, r3, #8
 80020da:	2b00      	cmp	r3, #0
 80020dc:	f000 8110 	beq.w	8002300 <HAL_RCC_OscConfig+0x87c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020e0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80020e4:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	699b      	ldr	r3, [r3, #24]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d079      	beq.n	80021e4 <HAL_RCC_OscConfig+0x760>
 80020f0:	2301      	movs	r3, #1
 80020f2:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020f6:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
 80020fa:	fa93 f3a3 	rbit	r3, r3
 80020fe:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  return result;
 8002102:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002106:	fab3 f383 	clz	r3, r3
 800210a:	b2db      	uxtb	r3, r3
 800210c:	461a      	mov	r2, r3
 800210e:	4bab      	ldr	r3, [pc, #684]	; (80023bc <HAL_RCC_OscConfig+0x938>)
 8002110:	4413      	add	r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	461a      	mov	r2, r3
 8002116:	2301      	movs	r3, #1
 8002118:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800211a:	f7fe fbf5 	bl	8000908 <HAL_GetTick>
 800211e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002122:	e00a      	b.n	800213a <HAL_RCC_OscConfig+0x6b6>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002124:	f7fe fbf0 	bl	8000908 <HAL_GetTick>
 8002128:	4602      	mov	r2, r0
 800212a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d902      	bls.n	800213a <HAL_RCC_OscConfig+0x6b6>
        {
          return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	f000 bcdb 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
 800213a:	2302      	movs	r3, #2
 800213c:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002140:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 800214c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002150:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002154:	2202      	movs	r2, #2
 8002156:	601a      	str	r2, [r3, #0]
 8002158:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800215c:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	fa93 f2a3 	rbit	r2, r3
 8002166:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800216a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002174:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002178:	2202      	movs	r2, #2
 800217a:	601a      	str	r2, [r3, #0]
 800217c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002180:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	fa93 f2a3 	rbit	r2, r3
 800218a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800218e:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002192:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002194:	4b88      	ldr	r3, [pc, #544]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 8002196:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002198:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800219c:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021a0:	2102      	movs	r1, #2
 80021a2:	6019      	str	r1, [r3, #0]
 80021a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021a8:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	fa93 f1a3 	rbit	r1, r3
 80021b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021b6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021ba:	6019      	str	r1, [r3, #0]
  return result;
 80021bc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021c0:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	fab3 f383 	clz	r3, r3
 80021ca:	b2db      	uxtb	r3, r3
 80021cc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f003 031f 	and.w	r3, r3, #31
 80021d6:	2101      	movs	r1, #1
 80021d8:	fa01 f303 	lsl.w	r3, r1, r3
 80021dc:	4013      	ands	r3, r2
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d0a0      	beq.n	8002124 <HAL_RCC_OscConfig+0x6a0>
 80021e2:	e08d      	b.n	8002300 <HAL_RCC_OscConfig+0x87c>
 80021e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021e8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80021f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002202:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002206:	601a      	str	r2, [r3, #0]
  return result;
 8002208:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800220c:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8002210:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
 800221a:	4b68      	ldr	r3, [pc, #416]	; (80023bc <HAL_RCC_OscConfig+0x938>)
 800221c:	4413      	add	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	461a      	mov	r2, r3
 8002222:	2300      	movs	r3, #0
 8002224:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7fe fb6f 	bl	8000908 <HAL_GetTick>
 800222a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800222e:	e00a      	b.n	8002246 <HAL_RCC_OscConfig+0x7c2>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002230:	f7fe fb6a 	bl	8000908 <HAL_GetTick>
 8002234:	4602      	mov	r2, r0
 8002236:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	2b02      	cmp	r3, #2
 800223e:	d902      	bls.n	8002246 <HAL_RCC_OscConfig+0x7c2>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	f000 bc55 	b.w	8002af0 <HAL_RCC_OscConfig+0x106c>
 8002246:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800224a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800224e:	2202      	movs	r2, #2
 8002250:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002252:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002256:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002264:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8002268:	601a      	str	r2, [r3, #0]
 800226a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800226e:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 8002272:	2202      	movs	r2, #2
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800227a:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	fa93 f2a3 	rbit	r2, r3
 8002284:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002288:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002292:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 8002296:	2202      	movs	r2, #2
 8002298:	601a      	str	r2, [r3, #0]
 800229a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800229e:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	fa93 f2a3 	rbit	r2, r3
 80022a8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ac:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80022b0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022b2:	4b41      	ldr	r3, [pc, #260]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 80022b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022b6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022ba:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022be:	2102      	movs	r1, #2
 80022c0:	6019      	str	r1, [r3, #0]
 80022c2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022c6:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	fa93 f1a3 	rbit	r1, r3
 80022d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022d4:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022d8:	6019      	str	r1, [r3, #0]
  return result;
 80022da:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80022de:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	fab3 f383 	clz	r3, r3
 80022e8:	b2db      	uxtb	r3, r3
 80022ea:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022ee:	b2db      	uxtb	r3, r3
 80022f0:	f003 031f 	and.w	r3, r3, #31
 80022f4:	2101      	movs	r1, #1
 80022f6:	fa01 f303 	lsl.w	r3, r1, r3
 80022fa:	4013      	ands	r3, r2
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d197      	bne.n	8002230 <HAL_RCC_OscConfig+0x7ac>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002300:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002304:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f003 0304 	and.w	r3, r3, #4
 8002310:	2b00      	cmp	r3, #0
 8002312:	f000 81a1 	beq.w	8002658 <HAL_RCC_OscConfig+0xbd4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002316:	2300      	movs	r3, #0
 8002318:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800231c:	4b26      	ldr	r3, [pc, #152]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 800231e:	69db      	ldr	r3, [r3, #28]
 8002320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002324:	2b00      	cmp	r3, #0
 8002326:	d116      	bne.n	8002356 <HAL_RCC_OscConfig+0x8d2>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002328:	4b23      	ldr	r3, [pc, #140]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 800232a:	69db      	ldr	r3, [r3, #28]
 800232c:	4a22      	ldr	r2, [pc, #136]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 800232e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002332:	61d3      	str	r3, [r2, #28]
 8002334:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 8002336:	69db      	ldr	r3, [r3, #28]
 8002338:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800233c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002340:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 8002344:	601a      	str	r2, [r3, #0]
 8002346:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800234a:	f5a3 73fc 	sub.w	r3, r3, #504	; 0x1f8
 800234e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002350:	2301      	movs	r3, #1
 8002352:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002356:	4b1a      	ldr	r3, [pc, #104]	; (80023c0 <HAL_RCC_OscConfig+0x93c>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800235e:	2b00      	cmp	r3, #0
 8002360:	d11a      	bne.n	8002398 <HAL_RCC_OscConfig+0x914>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002362:	4b17      	ldr	r3, [pc, #92]	; (80023c0 <HAL_RCC_OscConfig+0x93c>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a16      	ldr	r2, [pc, #88]	; (80023c0 <HAL_RCC_OscConfig+0x93c>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800236e:	f7fe facb 	bl	8000908 <HAL_GetTick>
 8002372:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002376:	e009      	b.n	800238c <HAL_RCC_OscConfig+0x908>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002378:	f7fe fac6 	bl	8000908 <HAL_GetTick>
 800237c:	4602      	mov	r2, r0
 800237e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	2b64      	cmp	r3, #100	; 0x64
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x908>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e3b1      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800238c:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_RCC_OscConfig+0x93c>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002394:	2b00      	cmp	r3, #0
 8002396:	d0ef      	beq.n	8002378 <HAL_RCC_OscConfig+0x8f4>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002398:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800239c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	68db      	ldr	r3, [r3, #12]
 80023a4:	2b01      	cmp	r3, #1
 80023a6:	d10d      	bne.n	80023c4 <HAL_RCC_OscConfig+0x940>
 80023a8:	4b03      	ldr	r3, [pc, #12]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a02      	ldr	r2, [pc, #8]	; (80023b8 <HAL_RCC_OscConfig+0x934>)
 80023ae:	f043 0301 	orr.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	e03c      	b.n	8002430 <HAL_RCC_OscConfig+0x9ac>
 80023b6:	bf00      	nop
 80023b8:	40021000 	.word	0x40021000
 80023bc:	10908120 	.word	0x10908120
 80023c0:	40007000 	.word	0x40007000
 80023c4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023c8:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	68db      	ldr	r3, [r3, #12]
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d10c      	bne.n	80023ee <HAL_RCC_OscConfig+0x96a>
 80023d4:	4bc1      	ldr	r3, [pc, #772]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80023d6:	6a1b      	ldr	r3, [r3, #32]
 80023d8:	4ac0      	ldr	r2, [pc, #768]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80023da:	f023 0301 	bic.w	r3, r3, #1
 80023de:	6213      	str	r3, [r2, #32]
 80023e0:	4bbe      	ldr	r3, [pc, #760]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80023e2:	6a1b      	ldr	r3, [r3, #32]
 80023e4:	4abd      	ldr	r2, [pc, #756]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80023e6:	f023 0304 	bic.w	r3, r3, #4
 80023ea:	6213      	str	r3, [r2, #32]
 80023ec:	e020      	b.n	8002430 <HAL_RCC_OscConfig+0x9ac>
 80023ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80023f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	2b05      	cmp	r3, #5
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x994>
 80023fe:	4bb7      	ldr	r3, [pc, #732]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 8002400:	6a1b      	ldr	r3, [r3, #32]
 8002402:	4ab6      	ldr	r2, [pc, #728]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 8002404:	f043 0304 	orr.w	r3, r3, #4
 8002408:	6213      	str	r3, [r2, #32]
 800240a:	4bb4      	ldr	r3, [pc, #720]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 800240c:	6a1b      	ldr	r3, [r3, #32]
 800240e:	4ab3      	ldr	r2, [pc, #716]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 8002410:	f043 0301 	orr.w	r3, r3, #1
 8002414:	6213      	str	r3, [r2, #32]
 8002416:	e00b      	b.n	8002430 <HAL_RCC_OscConfig+0x9ac>
 8002418:	4bb0      	ldr	r3, [pc, #704]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 800241a:	6a1b      	ldr	r3, [r3, #32]
 800241c:	4aaf      	ldr	r2, [pc, #700]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 800241e:	f023 0301 	bic.w	r3, r3, #1
 8002422:	6213      	str	r3, [r2, #32]
 8002424:	4bad      	ldr	r3, [pc, #692]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4aac      	ldr	r2, [pc, #688]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 800242a:	f023 0304 	bic.w	r3, r3, #4
 800242e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002430:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002434:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	68db      	ldr	r3, [r3, #12]
 800243c:	2b00      	cmp	r3, #0
 800243e:	f000 8081 	beq.w	8002544 <HAL_RCC_OscConfig+0xac0>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002442:	f7fe fa61 	bl	8000908 <HAL_GetTick>
 8002446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800244a:	e00b      	b.n	8002464 <HAL_RCC_OscConfig+0x9e0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800244c:	f7fe fa5c 	bl	8000908 <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002456:	1ad3      	subs	r3, r2, r3
 8002458:	f241 3288 	movw	r2, #5000	; 0x1388
 800245c:	4293      	cmp	r3, r2
 800245e:	d901      	bls.n	8002464 <HAL_RCC_OscConfig+0x9e0>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	e345      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
 8002464:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002468:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 800246c:	2202      	movs	r2, #2
 800246e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002470:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002474:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	fa93 f2a3 	rbit	r2, r3
 800247e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002482:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800248c:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8002490:	2202      	movs	r2, #2
 8002492:	601a      	str	r2, [r3, #0]
 8002494:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002498:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	fa93 f2a3 	rbit	r2, r3
 80024a2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024a6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024aa:	601a      	str	r2, [r3, #0]
  return result;
 80024ac:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024b0:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80024b4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80024b6:	fab3 f383 	clz	r3, r3
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	095b      	lsrs	r3, r3, #5
 80024be:	b2db      	uxtb	r3, r3
 80024c0:	f043 0302 	orr.w	r3, r3, #2
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d102      	bne.n	80024d0 <HAL_RCC_OscConfig+0xa4c>
 80024ca:	4b84      	ldr	r3, [pc, #528]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80024cc:	6a1b      	ldr	r3, [r3, #32]
 80024ce:	e013      	b.n	80024f8 <HAL_RCC_OscConfig+0xa74>
 80024d0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024d4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024d8:	2202      	movs	r2, #2
 80024da:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024dc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024e0:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	fa93 f2a3 	rbit	r2, r3
 80024ea:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80024ee:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80024f2:	601a      	str	r2, [r3, #0]
 80024f4:	4b79      	ldr	r3, [pc, #484]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80024fc:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 8002500:	2102      	movs	r1, #2
 8002502:	6011      	str	r1, [r2, #0]
 8002504:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002508:	f5a2 72ac 	sub.w	r2, r2, #344	; 0x158
 800250c:	6812      	ldr	r2, [r2, #0]
 800250e:	fa92 f1a2 	rbit	r1, r2
 8002512:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002516:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800251a:	6011      	str	r1, [r2, #0]
  return result;
 800251c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002520:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8002524:	6812      	ldr	r2, [r2, #0]
 8002526:	fab2 f282 	clz	r2, r2
 800252a:	b2d2      	uxtb	r2, r2
 800252c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002530:	b2d2      	uxtb	r2, r2
 8002532:	f002 021f 	and.w	r2, r2, #31
 8002536:	2101      	movs	r1, #1
 8002538:	fa01 f202 	lsl.w	r2, r1, r2
 800253c:	4013      	ands	r3, r2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d084      	beq.n	800244c <HAL_RCC_OscConfig+0x9c8>
 8002542:	e07f      	b.n	8002644 <HAL_RCC_OscConfig+0xbc0>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002544:	f7fe f9e0 	bl	8000908 <HAL_GetTick>
 8002548:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800254c:	e00b      	b.n	8002566 <HAL_RCC_OscConfig+0xae2>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800254e:	f7fe f9db 	bl	8000908 <HAL_GetTick>
 8002552:	4602      	mov	r2, r0
 8002554:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	f241 3288 	movw	r2, #5000	; 0x1388
 800255e:	4293      	cmp	r3, r2
 8002560:	d901      	bls.n	8002566 <HAL_RCC_OscConfig+0xae2>
        {
          return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e2c4      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
 8002566:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800256a:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800256e:	2202      	movs	r2, #2
 8002570:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002572:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002576:	f5a3 73b0 	sub.w	r3, r3, #352	; 0x160
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	fa93 f2a3 	rbit	r2, r3
 8002580:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002584:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8002588:	601a      	str	r2, [r3, #0]
 800258a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800258e:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 8002592:	2202      	movs	r2, #2
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800259a:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	fa93 f2a3 	rbit	r2, r3
 80025a4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025a8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025ac:	601a      	str	r2, [r3, #0]
  return result;
 80025ae:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025b2:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80025b6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025b8:	fab3 f383 	clz	r3, r3
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	095b      	lsrs	r3, r3, #5
 80025c0:	b2db      	uxtb	r3, r3
 80025c2:	f043 0302 	orr.w	r3, r3, #2
 80025c6:	b2db      	uxtb	r3, r3
 80025c8:	2b02      	cmp	r3, #2
 80025ca:	d102      	bne.n	80025d2 <HAL_RCC_OscConfig+0xb4e>
 80025cc:	4b43      	ldr	r3, [pc, #268]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80025ce:	6a1b      	ldr	r3, [r3, #32]
 80025d0:	e013      	b.n	80025fa <HAL_RCC_OscConfig+0xb76>
 80025d2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025d6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025da:	2202      	movs	r2, #2
 80025dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025de:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025e2:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	fa93 f2a3 	rbit	r2, r3
 80025ec:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80025f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80025f4:	601a      	str	r2, [r3, #0]
 80025f6:	4b39      	ldr	r3, [pc, #228]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 80025f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025fa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80025fe:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 8002602:	2102      	movs	r1, #2
 8002604:	6011      	str	r1, [r2, #0]
 8002606:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800260a:	f5a2 72bc 	sub.w	r2, r2, #376	; 0x178
 800260e:	6812      	ldr	r2, [r2, #0]
 8002610:	fa92 f1a2 	rbit	r1, r2
 8002614:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002618:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800261c:	6011      	str	r1, [r2, #0]
  return result;
 800261e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002622:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8002626:	6812      	ldr	r2, [r2, #0]
 8002628:	fab2 f282 	clz	r2, r2
 800262c:	b2d2      	uxtb	r2, r2
 800262e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002632:	b2d2      	uxtb	r2, r2
 8002634:	f002 021f 	and.w	r2, r2, #31
 8002638:	2101      	movs	r1, #1
 800263a:	fa01 f202 	lsl.w	r2, r1, r2
 800263e:	4013      	ands	r3, r2
 8002640:	2b00      	cmp	r3, #0
 8002642:	d184      	bne.n	800254e <HAL_RCC_OscConfig+0xaca>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002644:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002648:	2b01      	cmp	r3, #1
 800264a:	d105      	bne.n	8002658 <HAL_RCC_OscConfig+0xbd4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800264c:	4b23      	ldr	r3, [pc, #140]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 800264e:	69db      	ldr	r3, [r3, #28]
 8002650:	4a22      	ldr	r2, [pc, #136]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 8002652:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002656:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002658:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800265c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	69db      	ldr	r3, [r3, #28]
 8002664:	2b00      	cmp	r3, #0
 8002666:	f000 8242 	beq.w	8002aee <HAL_RCC_OscConfig+0x106a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800266a:	4b1c      	ldr	r3, [pc, #112]	; (80026dc <HAL_RCC_OscConfig+0xc58>)
 800266c:	685b      	ldr	r3, [r3, #4]
 800266e:	f003 030c 	and.w	r3, r3, #12
 8002672:	2b08      	cmp	r3, #8
 8002674:	f000 8213 	beq.w	8002a9e <HAL_RCC_OscConfig+0x101a>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002678:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	69db      	ldr	r3, [r3, #28]
 8002684:	2b02      	cmp	r3, #2
 8002686:	f040 8162 	bne.w	800294e <HAL_RCC_OscConfig+0xeca>
 800268a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800268e:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 8002692:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002696:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002698:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800269c:	f5a3 73c0 	sub.w	r3, r3, #384	; 0x180
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	fa93 f2a3 	rbit	r2, r3
 80026a6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026aa:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026ae:	601a      	str	r2, [r3, #0]
  return result;
 80026b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026b4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80026b8:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ba:	fab3 f383 	clz	r3, r3
 80026be:	b2db      	uxtb	r3, r3
 80026c0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026c4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	461a      	mov	r2, r3
 80026cc:	2300      	movs	r3, #0
 80026ce:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026d0:	f7fe f91a 	bl	8000908 <HAL_GetTick>
 80026d4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80026d8:	e00c      	b.n	80026f4 <HAL_RCC_OscConfig+0xc70>
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026e0:	f7fe f912 	bl	8000908 <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0xc70>
          {
            return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e1fd      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
 80026f4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80026f8:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80026fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002700:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002706:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	fa93 f2a3 	rbit	r2, r3
 8002710:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002714:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002718:	601a      	str	r2, [r3, #0]
  return result;
 800271a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800271e:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8002722:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002724:	fab3 f383 	clz	r3, r3
 8002728:	b2db      	uxtb	r3, r3
 800272a:	095b      	lsrs	r3, r3, #5
 800272c:	b2db      	uxtb	r3, r3
 800272e:	f043 0301 	orr.w	r3, r3, #1
 8002732:	b2db      	uxtb	r3, r3
 8002734:	2b01      	cmp	r3, #1
 8002736:	d102      	bne.n	800273e <HAL_RCC_OscConfig+0xcba>
 8002738:	4bb0      	ldr	r3, [pc, #704]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	e027      	b.n	800278e <HAL_RCC_OscConfig+0xd0a>
 800273e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002742:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002746:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002750:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	fa93 f2a3 	rbit	r2, r3
 800275a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800275e:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8002762:	601a      	str	r2, [r3, #0]
 8002764:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002768:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800276c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002770:	601a      	str	r2, [r3, #0]
 8002772:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002776:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	fa93 f2a3 	rbit	r2, r3
 8002780:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002784:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8002788:	601a      	str	r2, [r3, #0]
 800278a:	4b9c      	ldr	r3, [pc, #624]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 800278c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002792:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 8002796:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800279a:	6011      	str	r1, [r2, #0]
 800279c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027a0:	f5a2 72d0 	sub.w	r2, r2, #416	; 0x1a0
 80027a4:	6812      	ldr	r2, [r2, #0]
 80027a6:	fa92 f1a2 	rbit	r1, r2
 80027aa:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027ae:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027b2:	6011      	str	r1, [r2, #0]
  return result;
 80027b4:	f507 7200 	add.w	r2, r7, #512	; 0x200
 80027b8:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80027bc:	6812      	ldr	r2, [r2, #0]
 80027be:	fab2 f282 	clz	r2, r2
 80027c2:	b2d2      	uxtb	r2, r2
 80027c4:	f042 0220 	orr.w	r2, r2, #32
 80027c8:	b2d2      	uxtb	r2, r2
 80027ca:	f002 021f 	and.w	r2, r2, #31
 80027ce:	2101      	movs	r1, #1
 80027d0:	fa01 f202 	lsl.w	r2, r1, r2
 80027d4:	4013      	ands	r3, r2
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d182      	bne.n	80026e0 <HAL_RCC_OscConfig+0xc5c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027da:	4b88      	ldr	r3, [pc, #544]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80027e2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027e6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80027ee:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80027f2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	430b      	orrs	r3, r1
 80027fc:	497f      	ldr	r1, [pc, #508]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	604b      	str	r3, [r1, #4]
 8002802:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002806:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 800280a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800280e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002810:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002814:	f5a3 73d4 	sub.w	r3, r3, #424	; 0x1a8
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	fa93 f2a3 	rbit	r2, r3
 800281e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002822:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002826:	601a      	str	r2, [r3, #0]
  return result;
 8002828:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800282c:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8002830:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002832:	fab3 f383 	clz	r3, r3
 8002836:	b2db      	uxtb	r3, r3
 8002838:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800283c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002840:	009b      	lsls	r3, r3, #2
 8002842:	461a      	mov	r2, r3
 8002844:	2301      	movs	r3, #1
 8002846:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002848:	f7fe f85e 	bl	8000908 <HAL_GetTick>
 800284c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002850:	e009      	b.n	8002866 <HAL_RCC_OscConfig+0xde2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002852:	f7fe f859 	bl	8000908 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b02      	cmp	r3, #2
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0xde2>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e144      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
 8002866:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800286a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800286e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002872:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002874:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002878:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	fa93 f2a3 	rbit	r2, r3
 8002882:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002886:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 800288a:	601a      	str	r2, [r3, #0]
  return result;
 800288c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002890:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8002894:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002896:	fab3 f383 	clz	r3, r3
 800289a:	b2db      	uxtb	r3, r3
 800289c:	095b      	lsrs	r3, r3, #5
 800289e:	b2db      	uxtb	r3, r3
 80028a0:	f043 0301 	orr.w	r3, r3, #1
 80028a4:	b2db      	uxtb	r3, r3
 80028a6:	2b01      	cmp	r3, #1
 80028a8:	d102      	bne.n	80028b0 <HAL_RCC_OscConfig+0xe2c>
 80028aa:	4b54      	ldr	r3, [pc, #336]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	e027      	b.n	8002900 <HAL_RCC_OscConfig+0xe7c>
 80028b0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028b4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028bc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028be:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028c2:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	fa93 f2a3 	rbit	r2, r3
 80028cc:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028d0:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 80028d4:	601a      	str	r2, [r3, #0]
 80028d6:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028da:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028e2:	601a      	str	r2, [r3, #0]
 80028e4:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028e8:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	fa93 f2a3 	rbit	r2, r3
 80028f2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80028f6:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 80028fa:	601a      	str	r2, [r3, #0]
 80028fc:	4b3f      	ldr	r3, [pc, #252]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 80028fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002900:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002904:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002912:	f5a2 72e4 	sub.w	r2, r2, #456	; 0x1c8
 8002916:	6812      	ldr	r2, [r2, #0]
 8002918:	fa92 f1a2 	rbit	r1, r2
 800291c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002920:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8002924:	6011      	str	r1, [r2, #0]
  return result;
 8002926:	f507 7200 	add.w	r2, r7, #512	; 0x200
 800292a:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 800292e:	6812      	ldr	r2, [r2, #0]
 8002930:	fab2 f282 	clz	r2, r2
 8002934:	b2d2      	uxtb	r2, r2
 8002936:	f042 0220 	orr.w	r2, r2, #32
 800293a:	b2d2      	uxtb	r2, r2
 800293c:	f002 021f 	and.w	r2, r2, #31
 8002940:	2101      	movs	r1, #1
 8002942:	fa01 f202 	lsl.w	r2, r1, r2
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	d082      	beq.n	8002852 <HAL_RCC_OscConfig+0xdce>
 800294c:	e0cf      	b.n	8002aee <HAL_RCC_OscConfig+0x106a>
 800294e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002952:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002956:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800295a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800295c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002960:	f5a3 73e8 	sub.w	r3, r3, #464	; 0x1d0
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	fa93 f2a3 	rbit	r2, r3
 800296a:	f507 7300 	add.w	r3, r7, #512	; 0x200
 800296e:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8002972:	601a      	str	r2, [r3, #0]
  return result;
 8002974:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002978:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 800297c:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800297e:	fab3 f383 	clz	r3, r3
 8002982:	b2db      	uxtb	r3, r3
 8002984:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002988:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	461a      	mov	r2, r3
 8002990:	2300      	movs	r3, #0
 8002992:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002994:	f7fd ffb8 	bl	8000908 <HAL_GetTick>
 8002998:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800299c:	e009      	b.n	80029b2 <HAL_RCC_OscConfig+0xf2e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800299e:	f7fd ffb3 	bl	8000908 <HAL_GetTick>
 80029a2:	4602      	mov	r2, r0
 80029a4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0xf2e>
          {
            return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e09e      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
 80029b2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029b6:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029ba:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029be:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029c0:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029c4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	fa93 f2a3 	rbit	r2, r3
 80029ce:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029d2:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029d6:	601a      	str	r2, [r3, #0]
  return result;
 80029d8:	f507 7300 	add.w	r3, r7, #512	; 0x200
 80029dc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 80029e0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80029e2:	fab3 f383 	clz	r3, r3
 80029e6:	b2db      	uxtb	r3, r3
 80029e8:	095b      	lsrs	r3, r3, #5
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	f043 0301 	orr.w	r3, r3, #1
 80029f0:	b2db      	uxtb	r3, r3
 80029f2:	2b01      	cmp	r3, #1
 80029f4:	d104      	bne.n	8002a00 <HAL_RCC_OscConfig+0xf7c>
 80029f6:	4b01      	ldr	r3, [pc, #4]	; (80029fc <HAL_RCC_OscConfig+0xf78>)
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	e029      	b.n	8002a50 <HAL_RCC_OscConfig+0xfcc>
 80029fc:	40021000 	.word	0x40021000
 8002a00:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a04:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a08:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a0c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a0e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	fa93 f2a3 	rbit	r2, r3
 8002a1c:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a20:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a2a:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a32:	601a      	str	r2, [r3, #0]
 8002a34:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a38:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	fa93 f2a3 	rbit	r2, r3
 8002a42:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002a46:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8002a4a:	601a      	str	r2, [r3, #0]
 8002a4c:	4b2b      	ldr	r3, [pc, #172]	; (8002afc <HAL_RCC_OscConfig+0x1078>)
 8002a4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a50:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a54:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a58:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002a5c:	6011      	str	r1, [r2, #0]
 8002a5e:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a62:	f5a2 72f8 	sub.w	r2, r2, #496	; 0x1f0
 8002a66:	6812      	ldr	r2, [r2, #0]
 8002a68:	fa92 f1a2 	rbit	r1, r2
 8002a6c:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a70:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a74:	6011      	str	r1, [r2, #0]
  return result;
 8002a76:	f507 7200 	add.w	r2, r7, #512	; 0x200
 8002a7a:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8002a7e:	6812      	ldr	r2, [r2, #0]
 8002a80:	fab2 f282 	clz	r2, r2
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	f042 0220 	orr.w	r2, r2, #32
 8002a8a:	b2d2      	uxtb	r2, r2
 8002a8c:	f002 021f 	and.w	r2, r2, #31
 8002a90:	2101      	movs	r1, #1
 8002a92:	fa01 f202 	lsl.w	r2, r1, r2
 8002a96:	4013      	ands	r3, r2
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	d180      	bne.n	800299e <HAL_RCC_OscConfig+0xf1a>
 8002a9c:	e027      	b.n	8002aee <HAL_RCC_OscConfig+0x106a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a9e:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002aa2:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	2b01      	cmp	r3, #1
 8002aac:	d101      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x102e>
      {
        return HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	e01e      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ab2:	4b12      	ldr	r3, [pc, #72]	; (8002afc <HAL_RCC_OscConfig+0x1078>)
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
        pll_config2 = RCC->CFGR2;
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002aba:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002abe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002ac2:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ac6:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	d10b      	bne.n	8002aea <HAL_RCC_OscConfig+0x1066>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
 8002ad2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002ad6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002ada:	f507 7300 	add.w	r3, r7, #512	; 0x200
 8002ade:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d001      	beq.n	8002aee <HAL_RCC_OscConfig+0x106a>
#endif
        {
          return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e000      	b.n	8002af0 <HAL_RCC_OscConfig+0x106c>
        }
      }
    }
  }

  return HAL_OK;
 8002aee:	2300      	movs	r3, #0
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	40021000 	.word	0x40021000

08002b00 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b09e      	sub	sp, #120	; 0x78
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
 8002b08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b0a:	2300      	movs	r3, #0
 8002b0c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d101      	bne.n	8002b18 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b14:	2301      	movs	r3, #1
 8002b16:	e162      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b18:	4b90      	ldr	r3, [pc, #576]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f003 0307 	and.w	r3, r3, #7
 8002b20:	683a      	ldr	r2, [r7, #0]
 8002b22:	429a      	cmp	r2, r3
 8002b24:	d910      	bls.n	8002b48 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b26:	4b8d      	ldr	r3, [pc, #564]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f023 0207 	bic.w	r2, r3, #7
 8002b2e:	498b      	ldr	r1, [pc, #556]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	4313      	orrs	r3, r2
 8002b34:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b36:	4b89      	ldr	r3, [pc, #548]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0307 	and.w	r3, r3, #7
 8002b3e:	683a      	ldr	r2, [r7, #0]
 8002b40:	429a      	cmp	r2, r3
 8002b42:	d001      	beq.n	8002b48 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e14a      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f003 0302 	and.w	r3, r3, #2
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d008      	beq.n	8002b66 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b54:	4b82      	ldr	r3, [pc, #520]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002b56:	685b      	ldr	r3, [r3, #4]
 8002b58:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	497f      	ldr	r1, [pc, #508]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002b62:	4313      	orrs	r3, r2
 8002b64:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	f000 80dc 	beq.w	8002d2c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	2b01      	cmp	r3, #1
 8002b7a:	d13c      	bne.n	8002bf6 <HAL_RCC_ClockConfig+0xf6>
 8002b7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b80:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b82:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b84:	fa93 f3a3 	rbit	r3, r3
 8002b88:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8002b8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002b8c:	fab3 f383 	clz	r3, r3
 8002b90:	b2db      	uxtb	r3, r3
 8002b92:	095b      	lsrs	r3, r3, #5
 8002b94:	b2db      	uxtb	r3, r3
 8002b96:	f043 0301 	orr.w	r3, r3, #1
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d102      	bne.n	8002ba6 <HAL_RCC_ClockConfig+0xa6>
 8002ba0:	4b6f      	ldr	r3, [pc, #444]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	e00f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0xc6>
 8002ba6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002baa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bae:	fa93 f3a3 	rbit	r3, r3
 8002bb2:	667b      	str	r3, [r7, #100]	; 0x64
 8002bb4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bb8:	663b      	str	r3, [r7, #96]	; 0x60
 8002bba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bbc:	fa93 f3a3 	rbit	r3, r3
 8002bc0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bc2:	4b67      	ldr	r3, [pc, #412]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002bc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bca:	65ba      	str	r2, [r7, #88]	; 0x58
 8002bcc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002bce:	fa92 f2a2 	rbit	r2, r2
 8002bd2:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8002bd4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bd6:	fab2 f282 	clz	r2, r2
 8002bda:	b2d2      	uxtb	r2, r2
 8002bdc:	f042 0220 	orr.w	r2, r2, #32
 8002be0:	b2d2      	uxtb	r2, r2
 8002be2:	f002 021f 	and.w	r2, r2, #31
 8002be6:	2101      	movs	r1, #1
 8002be8:	fa01 f202 	lsl.w	r2, r1, r2
 8002bec:	4013      	ands	r3, r2
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d17b      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e0f3      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	2b02      	cmp	r3, #2
 8002bfc:	d13c      	bne.n	8002c78 <HAL_RCC_ClockConfig+0x178>
 8002bfe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c02:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c06:	fa93 f3a3 	rbit	r3, r3
 8002c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002c0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c0e:	fab3 f383 	clz	r3, r3
 8002c12:	b2db      	uxtb	r3, r3
 8002c14:	095b      	lsrs	r3, r3, #5
 8002c16:	b2db      	uxtb	r3, r3
 8002c18:	f043 0301 	orr.w	r3, r3, #1
 8002c1c:	b2db      	uxtb	r3, r3
 8002c1e:	2b01      	cmp	r3, #1
 8002c20:	d102      	bne.n	8002c28 <HAL_RCC_ClockConfig+0x128>
 8002c22:	4b4f      	ldr	r3, [pc, #316]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	e00f      	b.n	8002c48 <HAL_RCC_ClockConfig+0x148>
 8002c28:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c2c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c30:	fa93 f3a3 	rbit	r3, r3
 8002c34:	647b      	str	r3, [r7, #68]	; 0x44
 8002c36:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c3a:	643b      	str	r3, [r7, #64]	; 0x40
 8002c3c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c3e:	fa93 f3a3 	rbit	r3, r3
 8002c42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c44:	4b46      	ldr	r3, [pc, #280]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c48:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c4c:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c4e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c50:	fa92 f2a2 	rbit	r2, r2
 8002c54:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8002c56:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c58:	fab2 f282 	clz	r2, r2
 8002c5c:	b2d2      	uxtb	r2, r2
 8002c5e:	f042 0220 	orr.w	r2, r2, #32
 8002c62:	b2d2      	uxtb	r2, r2
 8002c64:	f002 021f 	and.w	r2, r2, #31
 8002c68:	2101      	movs	r1, #1
 8002c6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002c6e:	4013      	ands	r3, r2
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d13a      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e0b2      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
 8002c78:	2302      	movs	r3, #2
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c7e:	fa93 f3a3 	rbit	r3, r3
 8002c82:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c86:	fab3 f383 	clz	r3, r3
 8002c8a:	b2db      	uxtb	r3, r3
 8002c8c:	095b      	lsrs	r3, r3, #5
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	f043 0301 	orr.w	r3, r3, #1
 8002c94:	b2db      	uxtb	r3, r3
 8002c96:	2b01      	cmp	r3, #1
 8002c98:	d102      	bne.n	8002ca0 <HAL_RCC_ClockConfig+0x1a0>
 8002c9a:	4b31      	ldr	r3, [pc, #196]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	e00d      	b.n	8002cbc <HAL_RCC_ClockConfig+0x1bc>
 8002ca0:	2302      	movs	r3, #2
 8002ca2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ca4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ca6:	fa93 f3a3 	rbit	r3, r3
 8002caa:	627b      	str	r3, [r7, #36]	; 0x24
 8002cac:	2302      	movs	r3, #2
 8002cae:	623b      	str	r3, [r7, #32]
 8002cb0:	6a3b      	ldr	r3, [r7, #32]
 8002cb2:	fa93 f3a3 	rbit	r3, r3
 8002cb6:	61fb      	str	r3, [r7, #28]
 8002cb8:	4b29      	ldr	r3, [pc, #164]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	2202      	movs	r2, #2
 8002cbe:	61ba      	str	r2, [r7, #24]
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	fa92 f2a2 	rbit	r2, r2
 8002cc6:	617a      	str	r2, [r7, #20]
  return result;
 8002cc8:	697a      	ldr	r2, [r7, #20]
 8002cca:	fab2 f282 	clz	r2, r2
 8002cce:	b2d2      	uxtb	r2, r2
 8002cd0:	f042 0220 	orr.w	r2, r2, #32
 8002cd4:	b2d2      	uxtb	r2, r2
 8002cd6:	f002 021f 	and.w	r2, r2, #31
 8002cda:	2101      	movs	r1, #1
 8002cdc:	fa01 f202 	lsl.w	r2, r1, r2
 8002ce0:	4013      	ands	r3, r2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d101      	bne.n	8002cea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002ce6:	2301      	movs	r3, #1
 8002ce8:	e079      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cea:	4b1d      	ldr	r3, [pc, #116]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f023 0203 	bic.w	r2, r3, #3
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	685b      	ldr	r3, [r3, #4]
 8002cf6:	491a      	ldr	r1, [pc, #104]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002cf8:	4313      	orrs	r3, r2
 8002cfa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cfc:	f7fd fe04 	bl	8000908 <HAL_GetTick>
 8002d00:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d02:	e00a      	b.n	8002d1a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d04:	f7fd fe00 	bl	8000908 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e061      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1a:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <HAL_RCC_ClockConfig+0x260>)
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 020c 	and.w	r2, r3, #12
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	009b      	lsls	r3, r3, #2
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d1eb      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d2c:	4b0b      	ldr	r3, [pc, #44]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	429a      	cmp	r2, r3
 8002d38:	d214      	bcs.n	8002d64 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d3a:	4b08      	ldr	r3, [pc, #32]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	f023 0207 	bic.w	r2, r3, #7
 8002d42:	4906      	ldr	r1, [pc, #24]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	4313      	orrs	r3, r2
 8002d48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d4a:	4b04      	ldr	r3, [pc, #16]	; (8002d5c <HAL_RCC_ClockConfig+0x25c>)
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f003 0307 	and.w	r3, r3, #7
 8002d52:	683a      	ldr	r2, [r7, #0]
 8002d54:	429a      	cmp	r2, r3
 8002d56:	d005      	beq.n	8002d64 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002d58:	2301      	movs	r3, #1
 8002d5a:	e040      	b.n	8002dde <HAL_RCC_ClockConfig+0x2de>
 8002d5c:	40022000 	.word	0x40022000
 8002d60:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0304 	and.w	r3, r3, #4
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d70:	4b1d      	ldr	r3, [pc, #116]	; (8002de8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	68db      	ldr	r3, [r3, #12]
 8002d7c:	491a      	ldr	r1, [pc, #104]	; (8002de8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d7e:	4313      	orrs	r3, r2
 8002d80:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f003 0308 	and.w	r3, r3, #8
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d009      	beq.n	8002da2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d8e:	4b16      	ldr	r3, [pc, #88]	; (8002de8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	00db      	lsls	r3, r3, #3
 8002d9c:	4912      	ldr	r1, [pc, #72]	; (8002de8 <HAL_RCC_ClockConfig+0x2e8>)
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002da2:	f000 f829 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8002da6:	4601      	mov	r1, r0
 8002da8:	4b0f      	ldr	r3, [pc, #60]	; (8002de8 <HAL_RCC_ClockConfig+0x2e8>)
 8002daa:	685b      	ldr	r3, [r3, #4]
 8002dac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002db0:	22f0      	movs	r2, #240	; 0xf0
 8002db2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002db4:	693a      	ldr	r2, [r7, #16]
 8002db6:	fa92 f2a2 	rbit	r2, r2
 8002dba:	60fa      	str	r2, [r7, #12]
  return result;
 8002dbc:	68fa      	ldr	r2, [r7, #12]
 8002dbe:	fab2 f282 	clz	r2, r2
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	40d3      	lsrs	r3, r2
 8002dc6:	4a09      	ldr	r2, [pc, #36]	; (8002dec <HAL_RCC_ClockConfig+0x2ec>)
 8002dc8:	5cd3      	ldrb	r3, [r2, r3]
 8002dca:	fa21 f303 	lsr.w	r3, r1, r3
 8002dce:	4a08      	ldr	r2, [pc, #32]	; (8002df0 <HAL_RCC_ClockConfig+0x2f0>)
 8002dd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002dd2:	4b08      	ldr	r3, [pc, #32]	; (8002df4 <HAL_RCC_ClockConfig+0x2f4>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fd fd52 	bl	8000880 <HAL_InitTick>
  
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3778      	adds	r7, #120	; 0x78
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40021000 	.word	0x40021000
 8002dec:	08004750 	.word	0x08004750
 8002df0:	20000000 	.word	0x20000000
 8002df4:	20000004 	.word	0x20000004

08002df8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b08b      	sub	sp, #44	; 0x2c
 8002dfc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dfe:	2300      	movs	r3, #0
 8002e00:	61fb      	str	r3, [r7, #28]
 8002e02:	2300      	movs	r3, #0
 8002e04:	61bb      	str	r3, [r7, #24]
 8002e06:	2300      	movs	r3, #0
 8002e08:	627b      	str	r3, [r7, #36]	; 0x24
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e0e:	2300      	movs	r3, #0
 8002e10:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e12:	4b29      	ldr	r3, [pc, #164]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e18:	69fb      	ldr	r3, [r7, #28]
 8002e1a:	f003 030c 	and.w	r3, r3, #12
 8002e1e:	2b04      	cmp	r3, #4
 8002e20:	d002      	beq.n	8002e28 <HAL_RCC_GetSysClockFreq+0x30>
 8002e22:	2b08      	cmp	r3, #8
 8002e24:	d003      	beq.n	8002e2e <HAL_RCC_GetSysClockFreq+0x36>
 8002e26:	e03c      	b.n	8002ea2 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e28:	4b24      	ldr	r3, [pc, #144]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e2a:	623b      	str	r3, [r7, #32]
      break;
 8002e2c:	e03c      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e2e:	69fb      	ldr	r3, [r7, #28]
 8002e30:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002e34:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002e38:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e3a:	68ba      	ldr	r2, [r7, #8]
 8002e3c:	fa92 f2a2 	rbit	r2, r2
 8002e40:	607a      	str	r2, [r7, #4]
  return result;
 8002e42:	687a      	ldr	r2, [r7, #4]
 8002e44:	fab2 f282 	clz	r2, r2
 8002e48:	b2d2      	uxtb	r2, r2
 8002e4a:	40d3      	lsrs	r3, r2
 8002e4c:	4a1c      	ldr	r2, [pc, #112]	; (8002ec0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e4e:	5cd3      	ldrb	r3, [r2, r3]
 8002e50:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e52:	4b19      	ldr	r3, [pc, #100]	; (8002eb8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e56:	f003 030f 	and.w	r3, r3, #15
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e5e:	693a      	ldr	r2, [r7, #16]
 8002e60:	fa92 f2a2 	rbit	r2, r2
 8002e64:	60fa      	str	r2, [r7, #12]
  return result;
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	fab2 f282 	clz	r2, r2
 8002e6c:	b2d2      	uxtb	r2, r2
 8002e6e:	40d3      	lsrs	r3, r2
 8002e70:	4a14      	ldr	r2, [pc, #80]	; (8002ec4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e72:	5cd3      	ldrb	r3, [r2, r3]
 8002e74:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d008      	beq.n	8002e92 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002e80:	4a0e      	ldr	r2, [pc, #56]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e82:	69bb      	ldr	r3, [r7, #24]
 8002e84:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fb02 f303 	mul.w	r3, r2, r3
 8002e8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002e90:	e004      	b.n	8002e9c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	4a0c      	ldr	r2, [pc, #48]	; (8002ec8 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002e96:	fb02 f303 	mul.w	r3, r2, r3
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e9e:	623b      	str	r3, [r7, #32]
      break;
 8002ea0:	e002      	b.n	8002ea8 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ea2:	4b06      	ldr	r3, [pc, #24]	; (8002ebc <HAL_RCC_GetSysClockFreq+0xc4>)
 8002ea4:	623b      	str	r3, [r7, #32]
      break;
 8002ea6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ea8:	6a3b      	ldr	r3, [r7, #32]
}
 8002eaa:	4618      	mov	r0, r3
 8002eac:	372c      	adds	r7, #44	; 0x2c
 8002eae:	46bd      	mov	sp, r7
 8002eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb4:	4770      	bx	lr
 8002eb6:	bf00      	nop
 8002eb8:	40021000 	.word	0x40021000
 8002ebc:	007a1200 	.word	0x007a1200
 8002ec0:	08004768 	.word	0x08004768
 8002ec4:	08004778 	.word	0x08004778
 8002ec8:	003d0900 	.word	0x003d0900

08002ecc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ed0:	4b03      	ldr	r3, [pc, #12]	; (8002ee0 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr
 8002ede:	bf00      	nop
 8002ee0:	20000000 	.word	0x20000000

08002ee4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002eea:	f7ff ffef 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002eee:	4601      	mov	r1, r0
 8002ef0:	4b0b      	ldr	r3, [pc, #44]	; (8002f20 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002ef8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002efc:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002efe:	687a      	ldr	r2, [r7, #4]
 8002f00:	fa92 f2a2 	rbit	r2, r2
 8002f04:	603a      	str	r2, [r7, #0]
  return result;
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	fab2 f282 	clz	r2, r2
 8002f0c:	b2d2      	uxtb	r2, r2
 8002f0e:	40d3      	lsrs	r3, r2
 8002f10:	4a04      	ldr	r2, [pc, #16]	; (8002f24 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f12:	5cd3      	ldrb	r3, [r2, r3]
 8002f14:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3708      	adds	r7, #8
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	08004760 	.word	0x08004760

08002f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b082      	sub	sp, #8
 8002f2c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f2e:	f7ff ffcd 	bl	8002ecc <HAL_RCC_GetHCLKFreq>
 8002f32:	4601      	mov	r1, r0
 8002f34:	4b0b      	ldr	r3, [pc, #44]	; (8002f64 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8002f3c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002f40:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f42:	687a      	ldr	r2, [r7, #4]
 8002f44:	fa92 f2a2 	rbit	r2, r2
 8002f48:	603a      	str	r2, [r7, #0]
  return result;
 8002f4a:	683a      	ldr	r2, [r7, #0]
 8002f4c:	fab2 f282 	clz	r2, r2
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	40d3      	lsrs	r3, r2
 8002f54:	4a04      	ldr	r2, [pc, #16]	; (8002f68 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f56:	5cd3      	ldrb	r3, [r2, r3]
 8002f58:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3708      	adds	r7, #8
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}
 8002f64:	40021000 	.word	0x40021000
 8002f68:	08004760 	.word	0x08004760

08002f6c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	b092      	sub	sp, #72	; 0x48
 8002f70:	af00      	add	r7, sp, #0
 8002f72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f74:	2300      	movs	r3, #0
 8002f76:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f78:	2300      	movs	r3, #0
 8002f7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002f7c:	2300      	movs	r3, #0
 8002f7e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f000 80cd 	beq.w	800312a <HAL_RCCEx_PeriphCLKConfig+0x1be>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f90:	4b86      	ldr	r3, [pc, #536]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f92:	69db      	ldr	r3, [r3, #28]
 8002f94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d10e      	bne.n	8002fba <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f9c:	4b83      	ldr	r3, [pc, #524]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	4a82      	ldr	r2, [pc, #520]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fa6:	61d3      	str	r3, [r2, #28]
 8002fa8:	4b80      	ldr	r3, [pc, #512]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fb0:	60bb      	str	r3, [r7, #8]
 8002fb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fb4:	2301      	movs	r3, #1
 8002fb6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fba:	4b7d      	ldr	r3, [pc, #500]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d118      	bne.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fc6:	4b7a      	ldr	r3, [pc, #488]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4a79      	ldr	r2, [pc, #484]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fcc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fd0:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fd2:	f7fd fc99 	bl	8000908 <HAL_GetTick>
 8002fd6:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fd8:	e008      	b.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fda:	f7fd fc95 	bl	8000908 <HAL_GetTick>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	2b64      	cmp	r3, #100	; 0x64
 8002fe6:	d901      	bls.n	8002fec <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	e0db      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	4b70      	ldr	r3, [pc, #448]	; (80031b0 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d0f0      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002ff8:	4b6c      	ldr	r3, [pc, #432]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ffa:	6a1b      	ldr	r3, [r3, #32]
 8002ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003000:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003002:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003004:	2b00      	cmp	r3, #0
 8003006:	d07d      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x198>
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003010:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003012:	429a      	cmp	r2, r3
 8003014:	d076      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x198>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003016:	4b65      	ldr	r3, [pc, #404]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800301e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003020:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003024:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003028:	fa93 f3a3 	rbit	r3, r3
 800302c:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800302e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003030:	fab3 f383 	clz	r3, r3
 8003034:	b2db      	uxtb	r3, r3
 8003036:	461a      	mov	r2, r3
 8003038:	4b5e      	ldr	r3, [pc, #376]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800303a:	4413      	add	r3, r2
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	461a      	mov	r2, r3
 8003040:	2301      	movs	r3, #1
 8003042:	6013      	str	r3, [r2, #0]
 8003044:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003048:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800304c:	fa93 f3a3 	rbit	r3, r3
 8003050:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003052:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003054:	fab3 f383 	clz	r3, r3
 8003058:	b2db      	uxtb	r3, r3
 800305a:	461a      	mov	r2, r3
 800305c:	4b55      	ldr	r3, [pc, #340]	; (80031b4 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800305e:	4413      	add	r3, r2
 8003060:	009b      	lsls	r3, r3, #2
 8003062:	461a      	mov	r2, r3
 8003064:	2300      	movs	r3, #0
 8003066:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003068:	4a50      	ldr	r2, [pc, #320]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800306a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800306c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800306e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003070:	f003 0301 	and.w	r3, r3, #1
 8003074:	2b00      	cmp	r3, #0
 8003076:	d045      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x198>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003078:	f7fd fc46 	bl	8000908 <HAL_GetTick>
 800307c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800307e:	e00a      	b.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003080:	f7fd fc42 	bl	8000908 <HAL_GetTick>
 8003084:	4602      	mov	r2, r0
 8003086:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003088:	1ad3      	subs	r3, r2, r3
 800308a:	f241 3288 	movw	r2, #5000	; 0x1388
 800308e:	4293      	cmp	r3, r2
 8003090:	d901      	bls.n	8003096 <HAL_RCCEx_PeriphCLKConfig+0x12a>
          {
            return HAL_TIMEOUT;
 8003092:	2303      	movs	r3, #3
 8003094:	e086      	b.n	80031a4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8003096:	2302      	movs	r3, #2
 8003098:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800309a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800309c:	fa93 f3a3 	rbit	r3, r3
 80030a0:	627b      	str	r3, [r7, #36]	; 0x24
 80030a2:	2302      	movs	r3, #2
 80030a4:	623b      	str	r3, [r7, #32]
 80030a6:	6a3b      	ldr	r3, [r7, #32]
 80030a8:	fa93 f3a3 	rbit	r3, r3
 80030ac:	61fb      	str	r3, [r7, #28]
  return result;
 80030ae:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030b0:	fab3 f383 	clz	r3, r3
 80030b4:	b2db      	uxtb	r3, r3
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	f043 0302 	orr.w	r3, r3, #2
 80030be:	b2db      	uxtb	r3, r3
 80030c0:	2b02      	cmp	r3, #2
 80030c2:	d102      	bne.n	80030ca <HAL_RCCEx_PeriphCLKConfig+0x15e>
 80030c4:	4b39      	ldr	r3, [pc, #228]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030c6:	6a1b      	ldr	r3, [r3, #32]
 80030c8:	e007      	b.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x16e>
 80030ca:	2302      	movs	r3, #2
 80030cc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ce:	69bb      	ldr	r3, [r7, #24]
 80030d0:	fa93 f3a3 	rbit	r3, r3
 80030d4:	617b      	str	r3, [r7, #20]
 80030d6:	4b35      	ldr	r3, [pc, #212]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030da:	2202      	movs	r2, #2
 80030dc:	613a      	str	r2, [r7, #16]
 80030de:	693a      	ldr	r2, [r7, #16]
 80030e0:	fa92 f2a2 	rbit	r2, r2
 80030e4:	60fa      	str	r2, [r7, #12]
  return result;
 80030e6:	68fa      	ldr	r2, [r7, #12]
 80030e8:	fab2 f282 	clz	r2, r2
 80030ec:	b2d2      	uxtb	r2, r2
 80030ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80030f2:	b2d2      	uxtb	r2, r2
 80030f4:	f002 021f 	and.w	r2, r2, #31
 80030f8:	2101      	movs	r1, #1
 80030fa:	fa01 f202 	lsl.w	r2, r1, r2
 80030fe:	4013      	ands	r3, r2
 8003100:	2b00      	cmp	r3, #0
 8003102:	d0bd      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x114>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003104:	4b29      	ldr	r3, [pc, #164]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003106:	6a1b      	ldr	r3, [r3, #32]
 8003108:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	4926      	ldr	r1, [pc, #152]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003112:	4313      	orrs	r3, r2
 8003114:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003116:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800311a:	2b01      	cmp	r3, #1
 800311c:	d105      	bne.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x1be>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800311e:	4b23      	ldr	r3, [pc, #140]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003120:	69db      	ldr	r3, [r3, #28]
 8003122:	4a22      	ldr	r2, [pc, #136]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003124:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003128:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d008      	beq.n	8003148 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800313a:	f023 0203 	bic.w	r2, r3, #3
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	491a      	ldr	r1, [pc, #104]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003144:	4313      	orrs	r3, r2
 8003146:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	f003 0320 	and.w	r3, r3, #32
 8003150:	2b00      	cmp	r3, #0
 8003152:	d008      	beq.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003154:	4b15      	ldr	r3, [pc, #84]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003158:	f023 0210 	bic.w	r2, r3, #16
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	4912      	ldr	r1, [pc, #72]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003162:	4313      	orrs	r3, r2
 8003164:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800316e:	2b00      	cmp	r3, #0
 8003170:	d008      	beq.n	8003184 <HAL_RCCEx_PeriphCLKConfig+0x218>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003172:	4b0e      	ldr	r3, [pc, #56]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003176:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	691b      	ldr	r3, [r3, #16]
 800317e:	490b      	ldr	r1, [pc, #44]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003180:	4313      	orrs	r3, r2
 8003182:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d008      	beq.n	80031a2 <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003190:	4b06      	ldr	r3, [pc, #24]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003192:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003194:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	695b      	ldr	r3, [r3, #20]
 800319c:	4903      	ldr	r1, [pc, #12]	; (80031ac <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800319e:	4313      	orrs	r3, r2
 80031a0:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3748      	adds	r7, #72	; 0x48
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40021000 	.word	0x40021000
 80031b0:	40007000 	.word	0x40007000
 80031b4:	10908100 	.word	0x10908100

080031b8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e040      	b.n	800324c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d106      	bne.n	80031e0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f7fd fa2a 	bl	8000634 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	2224      	movs	r2, #36	; 0x24
 80031e4:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	681a      	ldr	r2, [r3, #0]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	f022 0201 	bic.w	r2, r2, #1
 80031f4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f000 fc48 	bl	8003a8c <UART_SetConfig>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d101      	bne.n	8003206 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003202:	2301      	movs	r3, #1
 8003204:	e022      	b.n	800324c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800320a:	2b00      	cmp	r3, #0
 800320c:	d002      	beq.n	8003214 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800320e:	6878      	ldr	r0, [r7, #4]
 8003210:	f000 fd72 	bl	8003cf8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685a      	ldr	r2, [r3, #4]
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003222:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	689a      	ldr	r2, [r3, #8]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003232:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681a      	ldr	r2, [r3, #0]
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	f042 0201 	orr.w	r2, r2, #1
 8003242:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003244:	6878      	ldr	r0, [r7, #4]
 8003246:	f000 fdf9 	bl	8003e3c <UART_CheckIdleState>
 800324a:	4603      	mov	r3, r0
}
 800324c:	4618      	mov	r0, r3
 800324e:	3708      	adds	r7, #8
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b08a      	sub	sp, #40	; 0x28
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	60b9      	str	r1, [r7, #8]
 800325e:	4613      	mov	r3, r2
 8003260:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003268:	2b20      	cmp	r3, #32
 800326a:	d132      	bne.n	80032d2 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800326c:	68bb      	ldr	r3, [r7, #8]
 800326e:	2b00      	cmp	r3, #0
 8003270:	d002      	beq.n	8003278 <HAL_UART_Receive_IT+0x24>
 8003272:	88fb      	ldrh	r3, [r7, #6]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d101      	bne.n	800327c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003278:	2301      	movs	r3, #1
 800327a:	e02b      	b.n	80032d4 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	2200      	movs	r2, #0
 8003280:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800328c:	2b00      	cmp	r3, #0
 800328e:	d018      	beq.n	80032c2 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003290:	68fb      	ldr	r3, [r7, #12]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	e853 3f00 	ldrex	r3, [r3]
 800329c:	613b      	str	r3, [r7, #16]
   return(result);
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	461a      	mov	r2, r3
 80032ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ae:	623b      	str	r3, [r7, #32]
 80032b0:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032b2:	69f9      	ldr	r1, [r7, #28]
 80032b4:	6a3a      	ldr	r2, [r7, #32]
 80032b6:	e841 2300 	strex	r3, r2, [r1]
 80032ba:	61bb      	str	r3, [r7, #24]
   return(result);
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1e6      	bne.n	8003290 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	461a      	mov	r2, r3
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	68f8      	ldr	r0, [r7, #12]
 80032ca:	f000 fec7 	bl	800405c <UART_Start_Receive_IT>
 80032ce:	4603      	mov	r3, r0
 80032d0:	e000      	b.n	80032d4 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
  }
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3728      	adds	r7, #40	; 0x28
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}

080032dc <HAL_UART_AbortReceive_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive_IT(UART_HandleTypeDef *huart)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b09a      	sub	sp, #104	; 0x68
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032ec:	e853 3f00 	ldrex	r3, [r3]
 80032f0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80032f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80032f4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80032f8:	667b      	str	r3, [r7, #100]	; 0x64
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	461a      	mov	r2, r3
 8003300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003302:	657b      	str	r3, [r7, #84]	; 0x54
 8003304:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003306:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8003308:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800330a:	e841 2300 	strex	r3, r2, [r1]
 800330e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003310:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003312:	2b00      	cmp	r3, #0
 8003314:	d1e6      	bne.n	80032e4 <HAL_UART_AbortReceive_IT+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	3308      	adds	r3, #8
 800331c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800331e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003320:	e853 3f00 	ldrex	r3, [r3]
 8003324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003328:	f023 0301 	bic.w	r3, r3, #1
 800332c:	663b      	str	r3, [r7, #96]	; 0x60
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	3308      	adds	r3, #8
 8003334:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003336:	643a      	str	r2, [r7, #64]	; 0x40
 8003338:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800333a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800333c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800333e:	e841 2300 	strex	r3, r2, [r1]
 8003342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003346:	2b00      	cmp	r3, #0
 8003348:	d1e5      	bne.n	8003316 <HAL_UART_AbortReceive_IT+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800334e:	2b01      	cmp	r3, #1
 8003350:	d118      	bne.n	8003384 <HAL_UART_AbortReceive_IT+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6a3b      	ldr	r3, [r7, #32]
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003360:	69fb      	ldr	r3, [r7, #28]
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	461a      	mov	r2, r3
 800336e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003370:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003372:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003374:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003376:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003378:	e841 2300 	strex	r3, r2, [r1]
 800337c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800337e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003380:	2b00      	cmp	r3, #0
 8003382:	d1e6      	bne.n	8003352 <HAL_UART_AbortReceive_IT+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689b      	ldr	r3, [r3, #8]
 800338a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800338e:	2b40      	cmp	r3, #64	; 0x40
 8003390:	d14f      	bne.n	8003432 <HAL_UART_AbortReceive_IT+0x156>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	3308      	adds	r3, #8
 8003398:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	e853 3f00 	ldrex	r3, [r3]
 80033a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80033a8:	65bb      	str	r3, [r7, #88]	; 0x58
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	3308      	adds	r3, #8
 80033b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80033b2:	61ba      	str	r2, [r7, #24]
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033b6:	6979      	ldr	r1, [r7, #20]
 80033b8:	69ba      	ldr	r2, [r7, #24]
 80033ba:	e841 2300 	strex	r3, r2, [r1]
 80033be:	613b      	str	r3, [r7, #16]
   return(result);
 80033c0:	693b      	ldr	r3, [r7, #16]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d1e5      	bne.n	8003392 <HAL_UART_AbortReceive_IT+0xb6>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d013      	beq.n	80033f6 <HAL_UART_AbortReceive_IT+0x11a>
    {
      /* Set the UART DMA Abort callback :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = UART_DMARxOnlyAbortCallback;
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	4a25      	ldr	r2, [pc, #148]	; (8003468 <HAL_UART_AbortReceive_IT+0x18c>)
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fe f98a 	bl	80016f4 <HAL_DMA_Abort_IT>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d03a      	beq.n	800345c <HAL_UART_AbortReceive_IT+0x180>
      {
        /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
        huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80033ec:	687a      	ldr	r2, [r7, #4]
 80033ee:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80033f0:	4610      	mov	r0, r2
 80033f2:	4798      	blx	r3
 80033f4:	e032      	b.n	800345c <HAL_UART_AbortReceive_IT+0x180>
      }
    }
    else
    {
      /* Reset Rx transfer counter */
      huart->RxXferCount = 0U;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

      /* Clear RxISR function pointer */
      huart->pRxBuffPtr = NULL;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	2200      	movs	r2, #0
 8003402:	655a      	str	r2, [r3, #84]	; 0x54

      /* Clear the Error flags in the ICR register */
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	220f      	movs	r2, #15
 800340a:	621a      	str	r2, [r3, #32]

      /* Discard the received data */
      __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	699a      	ldr	r2, [r3, #24]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0208 	orr.w	r2, r2, #8
 800341a:	619a      	str	r2, [r3, #24]

      /* Restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2220      	movs	r2, #32
 8003420:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2200      	movs	r2, #0
 8003428:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
      /* Call registered Abort Receive Complete Callback */
      huart->AbortReceiveCpltCallback(huart);
#else
      /* Call legacy weak Abort Receive Complete Callback */
      HAL_UART_AbortReceiveCpltCallback(huart);
 800342a:	6878      	ldr	r0, [r7, #4]
 800342c:	f000 fb18 	bl	8003a60 <HAL_UART_AbortReceiveCpltCallback>
 8003430:	e014      	b.n	800345c <HAL_UART_AbortReceive_IT+0x180>
    }
  }
  else
  {
    /* Reset Rx transfer counter */
    huart->RxXferCount = 0U;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2200      	movs	r2, #0
 8003436:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear RxISR function pointer */
    huart->pRxBuffPtr = NULL;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	655a      	str	r2, [r3, #84]	; 0x54

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	220f      	movs	r2, #15
 8003446:	621a      	str	r2, [r3, #32]

    /* Restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2200      	movs	r2, #0
 8003454:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort Receive Complete Callback */
    huart->AbortReceiveCpltCallback(huart);
#else
    /* Call legacy weak Abort Receive Complete Callback */
    HAL_UART_AbortReceiveCpltCallback(huart);
 8003456:	6878      	ldr	r0, [r7, #4]
 8003458:	f000 fb02 	bl	8003a60 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3768      	adds	r7, #104	; 0x68
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
 8003466:	bf00      	nop
 8003468:	080042dd 	.word	0x080042dd

0800346c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800346c:	b580      	push	{r7, lr}
 800346e:	b0ba      	sub	sp, #232	; 0xe8
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	69db      	ldr	r3, [r3, #28]
 800347a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003492:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003496:	f640 030f 	movw	r3, #2063	; 0x80f
 800349a:	4013      	ands	r3, r2
 800349c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80034a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d115      	bne.n	80034d4 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80034a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034ac:	f003 0320 	and.w	r3, r3, #32
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d00f      	beq.n	80034d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80034b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034b8:	f003 0320 	and.w	r3, r3, #32
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d009      	beq.n	80034d4 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	f000 82ab 	beq.w	8003a20 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	4798      	blx	r3
      }
      return;
 80034d2:	e2a5      	b.n	8003a20 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80034d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80034d8:	2b00      	cmp	r3, #0
 80034da:	f000 8117 	beq.w	800370c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80034de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034e2:	f003 0301 	and.w	r3, r3, #1
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d106      	bne.n	80034f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80034ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80034ee:	4b85      	ldr	r3, [pc, #532]	; (8003704 <HAL_UART_IRQHandler+0x298>)
 80034f0:	4013      	ands	r3, r2
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	f000 810a 	beq.w	800370c <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80034f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d011      	beq.n	8003528 <HAL_UART_IRQHandler+0xbc>
 8003504:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003508:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800350c:	2b00      	cmp	r3, #0
 800350e:	d00b      	beq.n	8003528 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	2201      	movs	r2, #1
 8003516:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800351e:	f043 0201 	orr.w	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003528:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800352c:	f003 0302 	and.w	r3, r3, #2
 8003530:	2b00      	cmp	r3, #0
 8003532:	d011      	beq.n	8003558 <HAL_UART_IRQHandler+0xec>
 8003534:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003538:	f003 0301 	and.w	r3, r3, #1
 800353c:	2b00      	cmp	r3, #0
 800353e:	d00b      	beq.n	8003558 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	2202      	movs	r2, #2
 8003546:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800354e:	f043 0204 	orr.w	r2, r3, #4
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003558:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800355c:	f003 0304 	and.w	r3, r3, #4
 8003560:	2b00      	cmp	r3, #0
 8003562:	d011      	beq.n	8003588 <HAL_UART_IRQHandler+0x11c>
 8003564:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003568:	f003 0301 	and.w	r3, r3, #1
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00b      	beq.n	8003588 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	2204      	movs	r2, #4
 8003576:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800357e:	f043 0202 	orr.w	r2, r3, #2
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003588:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800358c:	f003 0308 	and.w	r3, r3, #8
 8003590:	2b00      	cmp	r3, #0
 8003592:	d017      	beq.n	80035c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003594:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003598:	f003 0320 	and.w	r3, r3, #32
 800359c:	2b00      	cmp	r3, #0
 800359e:	d105      	bne.n	80035ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80035a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d00b      	beq.n	80035c4 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	2208      	movs	r2, #8
 80035b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ba:	f043 0208 	orr.w	r2, r3, #8
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80035c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d012      	beq.n	80035f6 <HAL_UART_IRQHandler+0x18a>
 80035d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80035d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d00c      	beq.n	80035f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80035e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035ec:	f043 0220 	orr.w	r2, r3, #32
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	f000 8211 	beq.w	8003a24 <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003602:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003606:	f003 0320 	and.w	r3, r3, #32
 800360a:	2b00      	cmp	r3, #0
 800360c:	d00d      	beq.n	800362a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800360e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003612:	f003 0320 	and.w	r3, r3, #32
 8003616:	2b00      	cmp	r3, #0
 8003618:	d007      	beq.n	800362a <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800361e:	2b00      	cmp	r3, #0
 8003620:	d003      	beq.n	800362a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003630:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	689b      	ldr	r3, [r3, #8]
 800363a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800363e:	2b40      	cmp	r3, #64	; 0x40
 8003640:	d005      	beq.n	800364e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003642:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003646:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800364a:	2b00      	cmp	r3, #0
 800364c:	d04f      	beq.n	80036ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f000 fdca 	bl	80041e8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	689b      	ldr	r3, [r3, #8]
 800365a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800365e:	2b40      	cmp	r3, #64	; 0x40
 8003660:	d141      	bne.n	80036e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	3308      	adds	r3, #8
 8003668:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800366c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003670:	e853 3f00 	ldrex	r3, [r3]
 8003674:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003678:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800367c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003680:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	3308      	adds	r3, #8
 800368a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800368e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003692:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003696:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800369a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800369e:	e841 2300 	strex	r3, r2, [r1]
 80036a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80036a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d1d9      	bne.n	8003662 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d013      	beq.n	80036de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036ba:	4a13      	ldr	r2, [pc, #76]	; (8003708 <HAL_UART_IRQHandler+0x29c>)
 80036bc:	635a      	str	r2, [r3, #52]	; 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036c2:	4618      	mov	r0, r3
 80036c4:	f7fe f816 	bl	80016f4 <HAL_DMA_Abort_IT>
 80036c8:	4603      	mov	r3, r0
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d017      	beq.n	80036fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d4:	687a      	ldr	r2, [r7, #4]
 80036d6:	6f52      	ldr	r2, [r2, #116]	; 0x74
 80036d8:	4610      	mov	r0, r2
 80036da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036dc:	e00f      	b.n	80036fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80036de:	6878      	ldr	r0, [r7, #4]
 80036e0:	f000 f9b4 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036e4:	e00b      	b.n	80036fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80036e6:	6878      	ldr	r0, [r7, #4]
 80036e8:	f000 f9b0 	bl	8003a4c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036ec:	e007      	b.n	80036fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f000 f9ac 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 80036fc:	e192      	b.n	8003a24 <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036fe:	bf00      	nop
    return;
 8003700:	e190      	b.n	8003a24 <HAL_UART_IRQHandler+0x5b8>
 8003702:	bf00      	nop
 8003704:	04000120 	.word	0x04000120
 8003708:	080042b1 	.word	0x080042b1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003710:	2b01      	cmp	r3, #1
 8003712:	f040 814b 	bne.w	80039ac <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003716:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800371a:	f003 0310 	and.w	r3, r3, #16
 800371e:	2b00      	cmp	r3, #0
 8003720:	f000 8144 	beq.w	80039ac <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003728:	f003 0310 	and.w	r3, r3, #16
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 813d 	beq.w	80039ac <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	2210      	movs	r2, #16
 8003738:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003744:	2b40      	cmp	r3, #64	; 0x40
 8003746:	f040 80b5 	bne.w	80038b4 <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003756:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800375a:	2b00      	cmp	r3, #0
 800375c:	f000 8164 	beq.w	8003a28 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003766:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800376a:	429a      	cmp	r2, r3
 800376c:	f080 815c 	bcs.w	8003a28 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003776:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800377e:	699b      	ldr	r3, [r3, #24]
 8003780:	2b20      	cmp	r3, #32
 8003782:	f000 8086 	beq.w	8003892 <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003792:	e853 3f00 	ldrex	r3, [r3]
 8003796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800379a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800379e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037a2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	461a      	mov	r2, r3
 80037ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80037b0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80037b4:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037b8:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80037bc:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80037c0:	e841 2300 	strex	r3, r2, [r1]
 80037c4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80037c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d1da      	bne.n	8003786 <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	3308      	adds	r3, #8
 80037d6:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80037da:	e853 3f00 	ldrex	r3, [r3]
 80037de:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80037e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80037e2:	f023 0301 	bic.w	r3, r3, #1
 80037e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	3308      	adds	r3, #8
 80037f0:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80037f4:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80037f8:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037fa:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80037fc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003800:	e841 2300 	strex	r3, r2, [r1]
 8003804:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003806:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003808:	2b00      	cmp	r3, #0
 800380a:	d1e1      	bne.n	80037d0 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	3308      	adds	r3, #8
 8003812:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003814:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003816:	e853 3f00 	ldrex	r3, [r3]
 800381a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800381c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800381e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003822:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	3308      	adds	r3, #8
 800382c:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003830:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003832:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003834:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003836:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003838:	e841 2300 	strex	r3, r2, [r1]
 800383c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800383e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003840:	2b00      	cmp	r3, #0
 8003842:	d1e3      	bne.n	800380c <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	2220      	movs	r2, #32
 8003848:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	2200      	movs	r2, #0
 8003850:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800385a:	e853 3f00 	ldrex	r3, [r3]
 800385e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003860:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003862:	f023 0310 	bic.w	r3, r3, #16
 8003866:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	461a      	mov	r2, r3
 8003870:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003874:	65bb      	str	r3, [r7, #88]	; 0x58
 8003876:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003878:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800387a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800387c:	e841 2300 	strex	r3, r2, [r1]
 8003880:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003882:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003884:	2b00      	cmp	r3, #0
 8003886:	d1e4      	bne.n	8003852 <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800388c:	4618      	mov	r0, r3
 800388e:	f7fd fef8 	bl	8001682 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2202      	movs	r2, #2
 8003896:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038a4:	b29b      	uxth	r3, r3
 80038a6:	1ad3      	subs	r3, r2, r3
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	4619      	mov	r1, r3
 80038ac:	6878      	ldr	r0, [r7, #4]
 80038ae:	f000 f8e1 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80038b2:	e0b9      	b.n	8003a28 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	1ad3      	subs	r3, r2, r3
 80038c4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80038ce:	b29b      	uxth	r3, r3
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	f000 80ab 	beq.w	8003a2c <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 80038d6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80038da:	2b00      	cmp	r3, #0
 80038dc:	f000 80a6 	beq.w	8003a2c <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038e8:	e853 3f00 	ldrex	r3, [r3]
 80038ec:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80038ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038f0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80038f4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	461a      	mov	r2, r3
 80038fe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003902:	647b      	str	r3, [r7, #68]	; 0x44
 8003904:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003906:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003908:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800390a:	e841 2300 	strex	r3, r2, [r1]
 800390e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003910:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003912:	2b00      	cmp	r3, #0
 8003914:	d1e4      	bne.n	80038e0 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	3308      	adds	r3, #8
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	e853 3f00 	ldrex	r3, [r3]
 8003924:	623b      	str	r3, [r7, #32]
   return(result);
 8003926:	6a3b      	ldr	r3, [r7, #32]
 8003928:	f023 0301 	bic.w	r3, r3, #1
 800392c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3308      	adds	r3, #8
 8003936:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800393a:	633a      	str	r2, [r7, #48]	; 0x30
 800393c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800393e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003940:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003942:	e841 2300 	strex	r3, r2, [r1]
 8003946:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394a:	2b00      	cmp	r3, #0
 800394c:	d1e3      	bne.n	8003916 <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2220      	movs	r2, #32
 8003952:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	2200      	movs	r2, #0
 800395a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2200      	movs	r2, #0
 8003960:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	693b      	ldr	r3, [r7, #16]
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	f023 0310 	bic.w	r3, r3, #16
 8003976:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003984:	61fb      	str	r3, [r7, #28]
 8003986:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	69b9      	ldr	r1, [r7, #24]
 800398a:	69fa      	ldr	r2, [r7, #28]
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	617b      	str	r3, [r7, #20]
   return(result);
 8003992:	697b      	ldr	r3, [r7, #20]
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e4      	bne.n	8003962 <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	2202      	movs	r2, #2
 800399c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800399e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80039a2:	4619      	mov	r1, r3
 80039a4:	6878      	ldr	r0, [r7, #4]
 80039a6:	f000 f865 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80039aa:	e03f      	b.n	8003a2c <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80039ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d00e      	beq.n	80039d6 <HAL_UART_IRQHandler+0x56a>
 80039b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80039bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d008      	beq.n	80039d6 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80039cc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80039ce:	6878      	ldr	r0, [r7, #4]
 80039d0:	f000 fe7b 	bl	80046ca <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80039d4:	e02d      	b.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80039d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80039da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d00e      	beq.n	8003a00 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80039e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80039e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d008      	beq.n	8003a00 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d01c      	beq.n	8003a30 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80039fa:	6878      	ldr	r0, [r7, #4]
 80039fc:	4798      	blx	r3
    }
    return;
 80039fe:	e017      	b.n	8003a30 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d012      	beq.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
 8003a0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00c      	beq.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 fc84 	bl	8004326 <UART_EndTransmit_IT>
    return;
 8003a1e:	e008      	b.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003a20:	bf00      	nop
 8003a22:	e006      	b.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003a24:	bf00      	nop
 8003a26:	e004      	b.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003a28:	bf00      	nop
 8003a2a:	e002      	b.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
      return;
 8003a2c:	bf00      	nop
 8003a2e:	e000      	b.n	8003a32 <HAL_UART_IRQHandler+0x5c6>
    return;
 8003a30:	bf00      	nop
  }

}
 8003a32:	37e8      	adds	r7, #232	; 0xe8
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bd80      	pop	{r7, pc}

08003a38 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003a38:	b480      	push	{r7}
 8003a3a:	b083      	sub	sp, #12
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003a40:	bf00      	nop
 8003a42:	370c      	adds	r7, #12
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr

08003a4c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003a4c:	b480      	push	{r7}
 8003a4e:	b083      	sub	sp, #12
 8003a50:	af00      	add	r7, sp, #0
 8003a52:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003a54:	bf00      	nop
 8003a56:	370c      	adds	r7, #12
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a5e:	4770      	bx	lr

08003a60 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8003a60:	b480      	push	{r7}
 8003a62:	b083      	sub	sp, #12
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8003a68:	bf00      	nop
 8003a6a:	370c      	adds	r7, #12
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a72:	4770      	bx	lr

08003a74 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003a74:	b480      	push	{r7}
 8003a76:	b083      	sub	sp, #12
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
 8003a7c:	460b      	mov	r3, r1
 8003a7e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003a80:	bf00      	nop
 8003a82:	370c      	adds	r7, #12
 8003a84:	46bd      	mov	sp, r7
 8003a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8a:	4770      	bx	lr

08003a8c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b088      	sub	sp, #32
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003a94:	2300      	movs	r3, #0
 8003a96:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	689a      	ldr	r2, [r3, #8]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	691b      	ldr	r3, [r3, #16]
 8003aa0:	431a      	orrs	r2, r3
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	695b      	ldr	r3, [r3, #20]
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	69db      	ldr	r3, [r3, #28]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	681a      	ldr	r2, [r3, #0]
 8003ab6:	4b8a      	ldr	r3, [pc, #552]	; (8003ce0 <UART_SetConfig+0x254>)
 8003ab8:	4013      	ands	r3, r2
 8003aba:	687a      	ldr	r2, [r7, #4]
 8003abc:	6812      	ldr	r2, [r2, #0]
 8003abe:	6979      	ldr	r1, [r7, #20]
 8003ac0:	430b      	orrs	r3, r1
 8003ac2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	68da      	ldr	r2, [r3, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	699b      	ldr	r3, [r3, #24]
 8003ade:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	689b      	ldr	r3, [r3, #8]
 8003af0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	430a      	orrs	r2, r1
 8003afc:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	4a78      	ldr	r2, [pc, #480]	; (8003ce4 <UART_SetConfig+0x258>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d120      	bne.n	8003b4a <UART_SetConfig+0xbe>
 8003b08:	4b77      	ldr	r3, [pc, #476]	; (8003ce8 <UART_SetConfig+0x25c>)
 8003b0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b0c:	f003 0303 	and.w	r3, r3, #3
 8003b10:	2b03      	cmp	r3, #3
 8003b12:	d817      	bhi.n	8003b44 <UART_SetConfig+0xb8>
 8003b14:	a201      	add	r2, pc, #4	; (adr r2, 8003b1c <UART_SetConfig+0x90>)
 8003b16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b1a:	bf00      	nop
 8003b1c:	08003b2d 	.word	0x08003b2d
 8003b20:	08003b39 	.word	0x08003b39
 8003b24:	08003b3f 	.word	0x08003b3f
 8003b28:	08003b33 	.word	0x08003b33
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	77fb      	strb	r3, [r7, #31]
 8003b30:	e01d      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b32:	2302      	movs	r3, #2
 8003b34:	77fb      	strb	r3, [r7, #31]
 8003b36:	e01a      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b38:	2304      	movs	r3, #4
 8003b3a:	77fb      	strb	r3, [r7, #31]
 8003b3c:	e017      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b3e:	2308      	movs	r3, #8
 8003b40:	77fb      	strb	r3, [r7, #31]
 8003b42:	e014      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b44:	2310      	movs	r3, #16
 8003b46:	77fb      	strb	r3, [r7, #31]
 8003b48:	e011      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	4a67      	ldr	r2, [pc, #412]	; (8003cec <UART_SetConfig+0x260>)
 8003b50:	4293      	cmp	r3, r2
 8003b52:	d102      	bne.n	8003b5a <UART_SetConfig+0xce>
 8003b54:	2300      	movs	r3, #0
 8003b56:	77fb      	strb	r3, [r7, #31]
 8003b58:	e009      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a64      	ldr	r2, [pc, #400]	; (8003cf0 <UART_SetConfig+0x264>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d102      	bne.n	8003b6a <UART_SetConfig+0xde>
 8003b64:	2300      	movs	r3, #0
 8003b66:	77fb      	strb	r3, [r7, #31]
 8003b68:	e001      	b.n	8003b6e <UART_SetConfig+0xe2>
 8003b6a:	2310      	movs	r3, #16
 8003b6c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b76:	d15a      	bne.n	8003c2e <UART_SetConfig+0x1a2>
  {
    switch (clocksource)
 8003b78:	7ffb      	ldrb	r3, [r7, #31]
 8003b7a:	2b08      	cmp	r3, #8
 8003b7c:	d827      	bhi.n	8003bce <UART_SetConfig+0x142>
 8003b7e:	a201      	add	r2, pc, #4	; (adr r2, 8003b84 <UART_SetConfig+0xf8>)
 8003b80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b84:	08003ba9 	.word	0x08003ba9
 8003b88:	08003bb1 	.word	0x08003bb1
 8003b8c:	08003bb9 	.word	0x08003bb9
 8003b90:	08003bcf 	.word	0x08003bcf
 8003b94:	08003bbf 	.word	0x08003bbf
 8003b98:	08003bcf 	.word	0x08003bcf
 8003b9c:	08003bcf 	.word	0x08003bcf
 8003ba0:	08003bcf 	.word	0x08003bcf
 8003ba4:	08003bc7 	.word	0x08003bc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ba8:	f7ff f99c 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003bac:	61b8      	str	r0, [r7, #24]
        break;
 8003bae:	e013      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003bb0:	f7ff f9ba 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8003bb4:	61b8      	str	r0, [r7, #24]
        break;
 8003bb6:	e00f      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003bb8:	4b4e      	ldr	r3, [pc, #312]	; (8003cf4 <UART_SetConfig+0x268>)
 8003bba:	61bb      	str	r3, [r7, #24]
        break;
 8003bbc:	e00c      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003bbe:	f7ff f91b 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8003bc2:	61b8      	str	r0, [r7, #24]
        break;
 8003bc4:	e008      	b.n	8003bd8 <UART_SetConfig+0x14c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bca:	61bb      	str	r3, [r7, #24]
        break;
 8003bcc:	e004      	b.n	8003bd8 <UART_SetConfig+0x14c>
      default:
        pclk = 0U;
 8003bce:	2300      	movs	r3, #0
 8003bd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003bd2:	2301      	movs	r3, #1
 8003bd4:	77bb      	strb	r3, [r7, #30]
        break;
 8003bd6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bd8:	69bb      	ldr	r3, [r7, #24]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d074      	beq.n	8003cc8 <UART_SetConfig+0x23c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	005a      	lsls	r2, r3, #1
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	085b      	lsrs	r3, r3, #1
 8003be8:	441a      	add	r2, r3
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bf2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bf4:	693b      	ldr	r3, [r7, #16]
 8003bf6:	2b0f      	cmp	r3, #15
 8003bf8:	d916      	bls.n	8003c28 <UART_SetConfig+0x19c>
 8003bfa:	693b      	ldr	r3, [r7, #16]
 8003bfc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c00:	d212      	bcs.n	8003c28 <UART_SetConfig+0x19c>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	b29b      	uxth	r3, r3
 8003c06:	f023 030f 	bic.w	r3, r3, #15
 8003c0a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	b29b      	uxth	r3, r3
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	89fa      	ldrh	r2, [r7, #14]
 8003c24:	60da      	str	r2, [r3, #12]
 8003c26:	e04f      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003c28:	2301      	movs	r3, #1
 8003c2a:	77bb      	strb	r3, [r7, #30]
 8003c2c:	e04c      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c2e:	7ffb      	ldrb	r3, [r7, #31]
 8003c30:	2b08      	cmp	r3, #8
 8003c32:	d828      	bhi.n	8003c86 <UART_SetConfig+0x1fa>
 8003c34:	a201      	add	r2, pc, #4	; (adr r2, 8003c3c <UART_SetConfig+0x1b0>)
 8003c36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3a:	bf00      	nop
 8003c3c:	08003c61 	.word	0x08003c61
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c71 	.word	0x08003c71
 8003c48:	08003c87 	.word	0x08003c87
 8003c4c:	08003c77 	.word	0x08003c77
 8003c50:	08003c87 	.word	0x08003c87
 8003c54:	08003c87 	.word	0x08003c87
 8003c58:	08003c87 	.word	0x08003c87
 8003c5c:	08003c7f 	.word	0x08003c7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c60:	f7ff f940 	bl	8002ee4 <HAL_RCC_GetPCLK1Freq>
 8003c64:	61b8      	str	r0, [r7, #24]
        break;
 8003c66:	e013      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c68:	f7ff f95e 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8003c6c:	61b8      	str	r0, [r7, #24]
        break;
 8003c6e:	e00f      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c70:	4b20      	ldr	r3, [pc, #128]	; (8003cf4 <UART_SetConfig+0x268>)
 8003c72:	61bb      	str	r3, [r7, #24]
        break;
 8003c74:	e00c      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c76:	f7ff f8bf 	bl	8002df8 <HAL_RCC_GetSysClockFreq>
 8003c7a:	61b8      	str	r0, [r7, #24]
        break;
 8003c7c:	e008      	b.n	8003c90 <UART_SetConfig+0x204>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c82:	61bb      	str	r3, [r7, #24]
        break;
 8003c84:	e004      	b.n	8003c90 <UART_SetConfig+0x204>
      default:
        pclk = 0U;
 8003c86:	2300      	movs	r3, #0
 8003c88:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	77bb      	strb	r3, [r7, #30]
        break;
 8003c8e:	bf00      	nop
    }

    if (pclk != 0U)
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d018      	beq.n	8003cc8 <UART_SetConfig+0x23c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	085a      	lsrs	r2, r3, #1
 8003c9c:	69bb      	ldr	r3, [r7, #24]
 8003c9e:	441a      	add	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2b0f      	cmp	r3, #15
 8003cae:	d909      	bls.n	8003cc4 <UART_SetConfig+0x238>
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003cb6:	d205      	bcs.n	8003cc4 <UART_SetConfig+0x238>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003cb8:	693b      	ldr	r3, [r7, #16]
 8003cba:	b29a      	uxth	r2, r3
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	60da      	str	r2, [r3, #12]
 8003cc2:	e001      	b.n	8003cc8 <UART_SetConfig+0x23c>
      }
      else
      {
        ret = HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2200      	movs	r2, #0
 8003ccc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003cd4:	7fbb      	ldrb	r3, [r7, #30]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3720      	adds	r7, #32
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
 8003cde:	bf00      	nop
 8003ce0:	efff69f3 	.word	0xefff69f3
 8003ce4:	40013800 	.word	0x40013800
 8003ce8:	40021000 	.word	0x40021000
 8003cec:	40004400 	.word	0x40004400
 8003cf0:	40004800 	.word	0x40004800
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	b083      	sub	sp, #12
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d04:	f003 0301 	and.w	r3, r3, #1
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d00a      	beq.n	8003d22 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685b      	ldr	r3, [r3, #4]
 8003d12:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	430a      	orrs	r2, r1
 8003d20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d00a      	beq.n	8003d44 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	430a      	orrs	r2, r1
 8003d42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	f003 0304 	and.w	r3, r3, #4
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d00a      	beq.n	8003d66 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	430a      	orrs	r2, r1
 8003d64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	f003 0308 	and.w	r3, r3, #8
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d00a      	beq.n	8003d88 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	430a      	orrs	r2, r1
 8003d86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8c:	f003 0310 	and.w	r3, r3, #16
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00a      	beq.n	8003daa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	689b      	ldr	r3, [r3, #8]
 8003d9a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	430a      	orrs	r2, r1
 8003da8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dae:	f003 0320 	and.w	r3, r3, #32
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d00a      	beq.n	8003dcc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	430a      	orrs	r2, r1
 8003dca:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dd0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d01a      	beq.n	8003e0e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	685b      	ldr	r3, [r3, #4]
 8003dde:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	430a      	orrs	r2, r1
 8003dec:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003df2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003df6:	d10a      	bne.n	8003e0e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	685b      	ldr	r3, [r3, #4]
 8003dfe:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	430a      	orrs	r2, r1
 8003e0c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d00a      	beq.n	8003e30 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	685b      	ldr	r3, [r3, #4]
 8003e20:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	430a      	orrs	r2, r1
 8003e2e:	605a      	str	r2, [r3, #4]
  }
}
 8003e30:	bf00      	nop
 8003e32:	370c      	adds	r7, #12
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b098      	sub	sp, #96	; 0x60
 8003e40:	af02      	add	r7, sp, #8
 8003e42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2200      	movs	r2, #0
 8003e48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e4c:	f7fc fd5c 	bl	8000908 <HAL_GetTick>
 8003e50:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0308 	and.w	r3, r3, #8
 8003e5c:	2b08      	cmp	r3, #8
 8003e5e:	d12e      	bne.n	8003ebe <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e60:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e64:	9300      	str	r3, [sp, #0]
 8003e66:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f000 f88c 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d021      	beq.n	8003ebe <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e8e:	653b      	str	r3, [r7, #80]	; 0x50
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003e98:	647b      	str	r3, [r7, #68]	; 0x44
 8003e9a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003e9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003ea6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2220      	movs	r2, #32
 8003eb0:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003eba:	2303      	movs	r3, #3
 8003ebc:	e062      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f003 0304 	and.w	r3, r3, #4
 8003ec8:	2b04      	cmp	r3, #4
 8003eca:	d149      	bne.n	8003f60 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ecc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003ed0:	9300      	str	r3, [sp, #0]
 8003ed2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f000 f856 	bl	8003f8c <UART_WaitOnFlagUntilTimeout>
 8003ee0:	4603      	mov	r3, r0
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d03c      	beq.n	8003f60 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	623b      	str	r3, [r7, #32]
   return(result);
 8003ef4:	6a3b      	ldr	r3, [r7, #32]
 8003ef6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003efa:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	461a      	mov	r2, r3
 8003f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003f04:	633b      	str	r3, [r7, #48]	; 0x30
 8003f06:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f08:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003f0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003f0c:	e841 2300 	strex	r3, r2, [r1]
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003f12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d1e6      	bne.n	8003ee6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	3308      	adds	r3, #8
 8003f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	e853 3f00 	ldrex	r3, [r3]
 8003f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	f023 0301 	bic.w	r3, r3, #1
 8003f2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	3308      	adds	r3, #8
 8003f36:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f38:	61fa      	str	r2, [r7, #28]
 8003f3a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f3c:	69b9      	ldr	r1, [r7, #24]
 8003f3e:	69fa      	ldr	r2, [r7, #28]
 8003f40:	e841 2300 	strex	r3, r2, [r1]
 8003f44:	617b      	str	r3, [r7, #20]
   return(result);
 8003f46:	697b      	ldr	r3, [r7, #20]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d1e5      	bne.n	8003f18 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	2220      	movs	r2, #32
 8003f50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f5c:	2303      	movs	r3, #3
 8003f5e:	e011      	b.n	8003f84 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2220      	movs	r2, #32
 8003f64:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2220      	movs	r2, #32
 8003f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	2200      	movs	r2, #0
 8003f72:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	2200      	movs	r2, #0
 8003f78:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3758      	adds	r7, #88	; 0x58
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}

08003f8c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b084      	sub	sp, #16
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	60f8      	str	r0, [r7, #12]
 8003f94:	60b9      	str	r1, [r7, #8]
 8003f96:	603b      	str	r3, [r7, #0]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003f9c:	e049      	b.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f9e:	69bb      	ldr	r3, [r7, #24]
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fa4:	d045      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fa6:	f7fc fcaf 	bl	8000908 <HAL_GetTick>
 8003faa:	4602      	mov	r2, r0
 8003fac:	683b      	ldr	r3, [r7, #0]
 8003fae:	1ad3      	subs	r3, r2, r3
 8003fb0:	69ba      	ldr	r2, [r7, #24]
 8003fb2:	429a      	cmp	r2, r3
 8003fb4:	d302      	bcc.n	8003fbc <UART_WaitOnFlagUntilTimeout+0x30>
 8003fb6:	69bb      	ldr	r3, [r7, #24]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d101      	bne.n	8003fc0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e048      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0304 	and.w	r3, r3, #4
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d031      	beq.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	69db      	ldr	r3, [r3, #28]
 8003fd4:	f003 0308 	and.w	r3, r3, #8
 8003fd8:	2b08      	cmp	r3, #8
 8003fda:	d110      	bne.n	8003ffe <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	2208      	movs	r2, #8
 8003fe2:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8003fe4:	68f8      	ldr	r0, [r7, #12]
 8003fe6:	f000 f8ff 	bl	80041e8 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	2208      	movs	r2, #8
 8003fee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	2200      	movs	r2, #0
 8003ff6:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 8003ffa:	2301      	movs	r3, #1
 8003ffc:	e029      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	69db      	ldr	r3, [r3, #28]
 8004004:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004008:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800400c:	d111      	bne.n	8004032 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004016:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f8e5 	bl	80041e8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2220      	movs	r2, #32
 8004022:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	2200      	movs	r2, #0
 800402a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800402e:	2303      	movs	r3, #3
 8004030:	e00f      	b.n	8004052 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	69da      	ldr	r2, [r3, #28]
 8004038:	68bb      	ldr	r3, [r7, #8]
 800403a:	4013      	ands	r3, r2
 800403c:	68ba      	ldr	r2, [r7, #8]
 800403e:	429a      	cmp	r2, r3
 8004040:	bf0c      	ite	eq
 8004042:	2301      	moveq	r3, #1
 8004044:	2300      	movne	r3, #0
 8004046:	b2db      	uxtb	r3, r3
 8004048:	461a      	mov	r2, r3
 800404a:	79fb      	ldrb	r3, [r7, #7]
 800404c:	429a      	cmp	r2, r3
 800404e:	d0a6      	beq.n	8003f9e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004050:	2300      	movs	r3, #0
}
 8004052:	4618      	mov	r0, r3
 8004054:	3710      	adds	r7, #16
 8004056:	46bd      	mov	sp, r7
 8004058:	bd80      	pop	{r7, pc}
	...

0800405c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800405c:	b480      	push	{r7}
 800405e:	b097      	sub	sp, #92	; 0x5c
 8004060:	af00      	add	r7, sp, #0
 8004062:	60f8      	str	r0, [r7, #12]
 8004064:	60b9      	str	r1, [r7, #8]
 8004066:	4613      	mov	r3, r2
 8004068:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	68ba      	ldr	r2, [r7, #8]
 800406e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	88fa      	ldrh	r2, [r7, #6]
 8004074:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	88fa      	ldrh	r2, [r7, #6]
 800407c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800408e:	d10e      	bne.n	80040ae <UART_Start_Receive_IT+0x52>
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	691b      	ldr	r3, [r3, #16]
 8004094:	2b00      	cmp	r3, #0
 8004096:	d105      	bne.n	80040a4 <UART_Start_Receive_IT+0x48>
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800409e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040a2:	e02d      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	22ff      	movs	r2, #255	; 0xff
 80040a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ac:	e028      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d10d      	bne.n	80040d2 <UART_Start_Receive_IT+0x76>
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	691b      	ldr	r3, [r3, #16]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d104      	bne.n	80040c8 <UART_Start_Receive_IT+0x6c>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	22ff      	movs	r2, #255	; 0xff
 80040c2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c6:	e01b      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	227f      	movs	r2, #127	; 0x7f
 80040cc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040d0:	e016      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040da:	d10d      	bne.n	80040f8 <UART_Start_Receive_IT+0x9c>
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	691b      	ldr	r3, [r3, #16]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d104      	bne.n	80040ee <UART_Start_Receive_IT+0x92>
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	227f      	movs	r2, #127	; 0x7f
 80040e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040ec:	e008      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	223f      	movs	r2, #63	; 0x3f
 80040f2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040f6:	e003      	b.n	8004100 <UART_Start_Receive_IT+0xa4>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2200      	movs	r2, #0
 80040fc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	2222      	movs	r2, #34	; 0x22
 800410c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	3308      	adds	r3, #8
 8004116:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004118:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800411a:	e853 3f00 	ldrex	r3, [r3]
 800411e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004120:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004122:	f043 0301 	orr.w	r3, r3, #1
 8004126:	657b      	str	r3, [r7, #84]	; 0x54
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	3308      	adds	r3, #8
 800412e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004130:	64ba      	str	r2, [r7, #72]	; 0x48
 8004132:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004134:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004136:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004138:	e841 2300 	strex	r3, r2, [r1]
 800413c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800413e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1e5      	bne.n	8004110 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800414c:	d107      	bne.n	800415e <UART_Start_Receive_IT+0x102>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	691b      	ldr	r3, [r3, #16]
 8004152:	2b00      	cmp	r3, #0
 8004154:	d103      	bne.n	800415e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	4a21      	ldr	r2, [pc, #132]	; (80041e0 <UART_Start_Receive_IT+0x184>)
 800415a:	669a      	str	r2, [r3, #104]	; 0x68
 800415c:	e002      	b.n	8004164 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4a20      	ldr	r2, [pc, #128]	; (80041e4 <UART_Start_Receive_IT+0x188>)
 8004162:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	691b      	ldr	r3, [r3, #16]
 8004168:	2b00      	cmp	r3, #0
 800416a:	d019      	beq.n	80041a0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004172:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004174:	e853 3f00 	ldrex	r3, [r3]
 8004178:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800417a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800417c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004180:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	461a      	mov	r2, r3
 8004188:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800418a:	637b      	str	r3, [r7, #52]	; 0x34
 800418c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800418e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004190:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004192:	e841 2300 	strex	r3, r2, [r1]
 8004196:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004198:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419a:	2b00      	cmp	r3, #0
 800419c:	d1e6      	bne.n	800416c <UART_Start_Receive_IT+0x110>
 800419e:	e018      	b.n	80041d2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	e853 3f00 	ldrex	r3, [r3]
 80041ac:	613b      	str	r3, [r7, #16]
   return(result);
 80041ae:	693b      	ldr	r3, [r7, #16]
 80041b0:	f043 0320 	orr.w	r3, r3, #32
 80041b4:	653b      	str	r3, [r7, #80]	; 0x50
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	461a      	mov	r2, r3
 80041bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80041be:	623b      	str	r3, [r7, #32]
 80041c0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041c2:	69f9      	ldr	r1, [r7, #28]
 80041c4:	6a3a      	ldr	r2, [r7, #32]
 80041c6:	e841 2300 	strex	r3, r2, [r1]
 80041ca:	61bb      	str	r3, [r7, #24]
   return(result);
 80041cc:	69bb      	ldr	r3, [r7, #24]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d1e6      	bne.n	80041a0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80041d2:	2300      	movs	r3, #0
}
 80041d4:	4618      	mov	r0, r3
 80041d6:	375c      	adds	r7, #92	; 0x5c
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	08004523 	.word	0x08004523
 80041e4:	0800437b 	.word	0x0800437b

080041e8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b095      	sub	sp, #84	; 0x54
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041f8:	e853 3f00 	ldrex	r3, [r3]
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004204:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	461a      	mov	r2, r3
 800420c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800420e:	643b      	str	r3, [r7, #64]	; 0x40
 8004210:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004212:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004214:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004216:	e841 2300 	strex	r3, r2, [r1]
 800421a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800421c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800421e:	2b00      	cmp	r3, #0
 8004220:	d1e6      	bne.n	80041f0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	3308      	adds	r3, #8
 8004228:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800422a:	6a3b      	ldr	r3, [r7, #32]
 800422c:	e853 3f00 	ldrex	r3, [r3]
 8004230:	61fb      	str	r3, [r7, #28]
   return(result);
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	f023 0301 	bic.w	r3, r3, #1
 8004238:	64bb      	str	r3, [r7, #72]	; 0x48
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	3308      	adds	r3, #8
 8004240:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004242:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004244:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004246:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004248:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800424a:	e841 2300 	strex	r3, r2, [r1]
 800424e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004252:	2b00      	cmp	r3, #0
 8004254:	d1e5      	bne.n	8004222 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800425a:	2b01      	cmp	r3, #1
 800425c:	d118      	bne.n	8004290 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	e853 3f00 	ldrex	r3, [r3]
 800426a:	60bb      	str	r3, [r7, #8]
   return(result);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f023 0310 	bic.w	r3, r3, #16
 8004272:	647b      	str	r3, [r7, #68]	; 0x44
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800427c:	61bb      	str	r3, [r7, #24]
 800427e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	6979      	ldr	r1, [r7, #20]
 8004282:	69ba      	ldr	r2, [r7, #24]
 8004284:	e841 2300 	strex	r3, r2, [r1]
 8004288:	613b      	str	r3, [r7, #16]
   return(result);
 800428a:	693b      	ldr	r3, [r7, #16]
 800428c:	2b00      	cmp	r3, #0
 800428e:	d1e6      	bne.n	800425e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2220      	movs	r2, #32
 8004294:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80042a4:	bf00      	nop
 80042a6:	3754      	adds	r7, #84	; 0x54
 80042a8:	46bd      	mov	sp, r7
 80042aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ae:	4770      	bx	lr

080042b0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b084      	sub	sp, #16
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042ce:	68f8      	ldr	r0, [r7, #12]
 80042d0:	f7ff fbbc 	bl	8003a4c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042d4:	bf00      	nop
 80042d6:	3710      	adds	r7, #16
 80042d8:	46bd      	mov	sp, r7
 80042da:	bd80      	pop	{r7, pc}

080042dc <UART_DMARxOnlyAbortCallback>:
  *         and leads to user Rx Abort Complete callback execution).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxOnlyAbortCallback(DMA_HandleTypeDef *hdma)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b084      	sub	sp, #16
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e8:	60fb      	str	r3, [r7, #12]

  huart->RxXferCount = 0U;
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	220f      	movs	r2, #15
 80042f8:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	699a      	ldr	r2, [r3, #24]
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	f042 0208 	orr.w	r2, r2, #8
 8004308:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2220      	movs	r2, #32
 800430e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort Receive Complete Callback */
  huart->AbortReceiveCpltCallback(huart);
#else
  /* Call legacy weak Abort Receive Complete Callback */
  HAL_UART_AbortReceiveCpltCallback(huart);
 8004318:	68f8      	ldr	r0, [r7, #12]
 800431a:	f7ff fba1 	bl	8003a60 <HAL_UART_AbortReceiveCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800431e:	bf00      	nop
 8004320:	3710      	adds	r7, #16
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004326:	b580      	push	{r7, lr}
 8004328:	b088      	sub	sp, #32
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	e853 3f00 	ldrex	r3, [r3]
 800433a:	60bb      	str	r3, [r7, #8]
   return(result);
 800433c:	68bb      	ldr	r3, [r7, #8]
 800433e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004342:	61fb      	str	r3, [r7, #28]
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	461a      	mov	r2, r3
 800434a:	69fb      	ldr	r3, [r7, #28]
 800434c:	61bb      	str	r3, [r7, #24]
 800434e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004350:	6979      	ldr	r1, [r7, #20]
 8004352:	69ba      	ldr	r2, [r7, #24]
 8004354:	e841 2300 	strex	r3, r2, [r1]
 8004358:	613b      	str	r3, [r7, #16]
   return(result);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d1e6      	bne.n	800432e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	2220      	movs	r2, #32
 8004364:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800436c:	6878      	ldr	r0, [r7, #4]
 800436e:	f7ff fb63 	bl	8003a38 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004372:	bf00      	nop
 8004374:	3720      	adds	r7, #32
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b09c      	sub	sp, #112	; 0x70
 800437e:	af00      	add	r7, sp, #0
 8004380:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004388:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004392:	2b22      	cmp	r3, #34	; 0x22
 8004394:	f040 80b9 	bne.w	800450a <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800439e:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80043a2:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 80043a6:	b2d9      	uxtb	r1, r3
 80043a8:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b2:	400a      	ands	r2, r1
 80043b4:	b2d2      	uxtb	r2, r2
 80043b6:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043bc:	1c5a      	adds	r2, r3, #1
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043c8:	b29b      	uxth	r3, r3
 80043ca:	3b01      	subs	r3, #1
 80043cc:	b29a      	uxth	r2, r3
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80043da:	b29b      	uxth	r3, r3
 80043dc:	2b00      	cmp	r3, #0
 80043de:	f040 809c 	bne.w	800451a <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ea:	e853 3f00 	ldrex	r3, [r3]
 80043ee:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80043f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043f2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80043f6:	66bb      	str	r3, [r7, #104]	; 0x68
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	461a      	mov	r2, r3
 80043fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004400:	65bb      	str	r3, [r7, #88]	; 0x58
 8004402:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004404:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004406:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004408:	e841 2300 	strex	r3, r2, [r1]
 800440c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800440e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004410:	2b00      	cmp	r3, #0
 8004412:	d1e6      	bne.n	80043e2 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	3308      	adds	r3, #8
 800441a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800441c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441e:	e853 3f00 	ldrex	r3, [r3]
 8004422:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004424:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004426:	f023 0301 	bic.w	r3, r3, #1
 800442a:	667b      	str	r3, [r7, #100]	; 0x64
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	3308      	adds	r3, #8
 8004432:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004434:	647a      	str	r2, [r7, #68]	; 0x44
 8004436:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004438:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800443a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800443c:	e841 2300 	strex	r3, r2, [r1]
 8004440:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004442:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004444:	2b00      	cmp	r3, #0
 8004446:	d1e5      	bne.n	8004414 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	2220      	movs	r2, #32
 800444c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2200      	movs	r2, #0
 8004454:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2200      	movs	r2, #0
 800445a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	685b      	ldr	r3, [r3, #4]
 8004462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d018      	beq.n	800449c <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	e853 3f00 	ldrex	r3, [r3]
 8004476:	623b      	str	r3, [r7, #32]
   return(result);
 8004478:	6a3b      	ldr	r3, [r7, #32]
 800447a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800447e:	663b      	str	r3, [r7, #96]	; 0x60
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	461a      	mov	r2, r3
 8004486:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004488:	633b      	str	r3, [r7, #48]	; 0x30
 800448a:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800448c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800448e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004490:	e841 2300 	strex	r3, r2, [r1]
 8004494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004498:	2b00      	cmp	r3, #0
 800449a:	d1e6      	bne.n	800446a <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d12e      	bne.n	8004502 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044b0:	693b      	ldr	r3, [r7, #16]
 80044b2:	e853 3f00 	ldrex	r3, [r3]
 80044b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0310 	bic.w	r3, r3, #16
 80044be:	65fb      	str	r3, [r7, #92]	; 0x5c
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	461a      	mov	r2, r3
 80044c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80044c8:	61fb      	str	r3, [r7, #28]
 80044ca:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044cc:	69b9      	ldr	r1, [r7, #24]
 80044ce:	69fa      	ldr	r2, [r7, #28]
 80044d0:	e841 2300 	strex	r3, r2, [r1]
 80044d4:	617b      	str	r3, [r7, #20]
   return(result);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d1e6      	bne.n	80044aa <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	f003 0310 	and.w	r3, r3, #16
 80044e6:	2b10      	cmp	r3, #16
 80044e8:	d103      	bne.n	80044f2 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2210      	movs	r2, #16
 80044f0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80044f8:	4619      	mov	r1, r3
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f7ff faba 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004500:	e00b      	b.n	800451a <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 8004502:	6878      	ldr	r0, [r7, #4]
 8004504:	f7fb fe60 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 8004508:	e007      	b.n	800451a <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	699a      	ldr	r2, [r3, #24]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0208 	orr.w	r2, r2, #8
 8004518:	619a      	str	r2, [r3, #24]
}
 800451a:	bf00      	nop
 800451c:	3770      	adds	r7, #112	; 0x70
 800451e:	46bd      	mov	sp, r7
 8004520:	bd80      	pop	{r7, pc}

08004522 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004522:	b580      	push	{r7, lr}
 8004524:	b09c      	sub	sp, #112	; 0x70
 8004526:	af00      	add	r7, sp, #0
 8004528:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004530:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800453a:	2b22      	cmp	r3, #34	; 0x22
 800453c:	f040 80b9 	bne.w	80046b2 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004546:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800454e:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004550:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 8004554:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 8004558:	4013      	ands	r3, r2
 800455a:	b29a      	uxth	r2, r3
 800455c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800455e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004564:	1c9a      	adds	r2, r3, #2
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004570:	b29b      	uxth	r3, r3
 8004572:	3b01      	subs	r3, #1
 8004574:	b29a      	uxth	r2, r3
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004582:	b29b      	uxth	r3, r3
 8004584:	2b00      	cmp	r3, #0
 8004586:	f040 809c 	bne.w	80046c2 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004590:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004592:	e853 3f00 	ldrex	r3, [r3]
 8004596:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8004598:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800459a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800459e:	667b      	str	r3, [r7, #100]	; 0x64
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	461a      	mov	r2, r3
 80045a6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80045a8:	657b      	str	r3, [r7, #84]	; 0x54
 80045aa:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80045ae:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80045b0:	e841 2300 	strex	r3, r2, [r1]
 80045b4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80045b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d1e6      	bne.n	800458a <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	3308      	adds	r3, #8
 80045c2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045c6:	e853 3f00 	ldrex	r3, [r3]
 80045ca:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045ce:	f023 0301 	bic.w	r3, r3, #1
 80045d2:	663b      	str	r3, [r7, #96]	; 0x60
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	3308      	adds	r3, #8
 80045da:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80045dc:	643a      	str	r2, [r7, #64]	; 0x40
 80045de:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045e2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045e4:	e841 2300 	strex	r3, r2, [r1]
 80045e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d1e5      	bne.n	80045bc <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2220      	movs	r2, #32
 80045f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2200      	movs	r2, #0
 80045fc:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800460e:	2b00      	cmp	r3, #0
 8004610:	d018      	beq.n	8004644 <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004618:	6a3b      	ldr	r3, [r7, #32]
 800461a:	e853 3f00 	ldrex	r3, [r3]
 800461e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8004626:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	461a      	mov	r2, r3
 800462e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004630:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004632:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004634:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004636:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004638:	e841 2300 	strex	r3, r2, [r1]
 800463c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800463e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004640:	2b00      	cmp	r3, #0
 8004642:	d1e6      	bne.n	8004612 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004648:	2b01      	cmp	r3, #1
 800464a:	d12e      	bne.n	80046aa <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2200      	movs	r2, #0
 8004650:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	e853 3f00 	ldrex	r3, [r3]
 800465e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f023 0310 	bic.w	r3, r3, #16
 8004666:	65bb      	str	r3, [r7, #88]	; 0x58
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	461a      	mov	r2, r3
 800466e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004670:	61bb      	str	r3, [r7, #24]
 8004672:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004674:	6979      	ldr	r1, [r7, #20]
 8004676:	69ba      	ldr	r2, [r7, #24]
 8004678:	e841 2300 	strex	r3, r2, [r1]
 800467c:	613b      	str	r3, [r7, #16]
   return(result);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	2b00      	cmp	r3, #0
 8004682:	d1e6      	bne.n	8004652 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 0310 	and.w	r3, r3, #16
 800468e:	2b10      	cmp	r3, #16
 8004690:	d103      	bne.n	800469a <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2210      	movs	r2, #16
 8004698:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046a0:	4619      	mov	r1, r3
 80046a2:	6878      	ldr	r0, [r7, #4]
 80046a4:	f7ff f9e6 	bl	8003a74 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046a8:	e00b      	b.n	80046c2 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 80046aa:	6878      	ldr	r0, [r7, #4]
 80046ac:	f7fb fd8c 	bl	80001c8 <HAL_UART_RxCpltCallback>
}
 80046b0:	e007      	b.n	80046c2 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	699a      	ldr	r2, [r3, #24]
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f042 0208 	orr.w	r2, r2, #8
 80046c0:	619a      	str	r2, [r3, #24]
}
 80046c2:	bf00      	nop
 80046c4:	3770      	adds	r7, #112	; 0x70
 80046c6:	46bd      	mov	sp, r7
 80046c8:	bd80      	pop	{r7, pc}

080046ca <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b083      	sub	sp, #12
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80046d2:	bf00      	nop
 80046d4:	370c      	adds	r7, #12
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr

080046de <memset>:
 80046de:	4402      	add	r2, r0
 80046e0:	4603      	mov	r3, r0
 80046e2:	4293      	cmp	r3, r2
 80046e4:	d100      	bne.n	80046e8 <memset+0xa>
 80046e6:	4770      	bx	lr
 80046e8:	f803 1b01 	strb.w	r1, [r3], #1
 80046ec:	e7f9      	b.n	80046e2 <memset+0x4>
	...

080046f0 <__libc_init_array>:
 80046f0:	b570      	push	{r4, r5, r6, lr}
 80046f2:	4d0d      	ldr	r5, [pc, #52]	; (8004728 <__libc_init_array+0x38>)
 80046f4:	4c0d      	ldr	r4, [pc, #52]	; (800472c <__libc_init_array+0x3c>)
 80046f6:	1b64      	subs	r4, r4, r5
 80046f8:	10a4      	asrs	r4, r4, #2
 80046fa:	2600      	movs	r6, #0
 80046fc:	42a6      	cmp	r6, r4
 80046fe:	d109      	bne.n	8004714 <__libc_init_array+0x24>
 8004700:	4d0b      	ldr	r5, [pc, #44]	; (8004730 <__libc_init_array+0x40>)
 8004702:	4c0c      	ldr	r4, [pc, #48]	; (8004734 <__libc_init_array+0x44>)
 8004704:	f000 f818 	bl	8004738 <_init>
 8004708:	1b64      	subs	r4, r4, r5
 800470a:	10a4      	asrs	r4, r4, #2
 800470c:	2600      	movs	r6, #0
 800470e:	42a6      	cmp	r6, r4
 8004710:	d105      	bne.n	800471e <__libc_init_array+0x2e>
 8004712:	bd70      	pop	{r4, r5, r6, pc}
 8004714:	f855 3b04 	ldr.w	r3, [r5], #4
 8004718:	4798      	blx	r3
 800471a:	3601      	adds	r6, #1
 800471c:	e7ee      	b.n	80046fc <__libc_init_array+0xc>
 800471e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004722:	4798      	blx	r3
 8004724:	3601      	adds	r6, #1
 8004726:	e7f2      	b.n	800470e <__libc_init_array+0x1e>
 8004728:	08004788 	.word	0x08004788
 800472c:	08004788 	.word	0x08004788
 8004730:	08004788 	.word	0x08004788
 8004734:	0800478c 	.word	0x0800478c

08004738 <_init>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	bf00      	nop
 800473c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800473e:	bc08      	pop	{r3}
 8004740:	469e      	mov	lr, r3
 8004742:	4770      	bx	lr

08004744 <_fini>:
 8004744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004746:	bf00      	nop
 8004748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800474a:	bc08      	pop	{r3}
 800474c:	469e      	mov	lr, r3
 800474e:	4770      	bx	lr
